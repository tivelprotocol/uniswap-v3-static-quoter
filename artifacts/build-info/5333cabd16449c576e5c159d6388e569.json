{"id":"5333cabd16449c576e5c159d6388e569","_format":"hh-sol-build-info-1","solcVersion":"0.7.6","solcLongVersion":"0.7.6+commit.7338295f","input":{"language":"Solidity","sources":{"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"},"@uniswap/v3-core/contracts/libraries/BitMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        r = 255;\n        if (x & type(uint128).max > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & type(uint64).max > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & type(uint32).max > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & type(uint16).max > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & type(uint8).max > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"},"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, 'LS');\n        } else {\n            require((z = x + uint128(y)) >= x, 'LA');\n        }\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './FullMath.sol';\nimport './UnsafeMath.sol';\nimport './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1)\n                    // always fits in 160 bits\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n            }\n\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n            uint256 denominator = numerator1 - product;\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            return uint256(sqrtPX96).add(quotient).toUint160();\n        } else {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return\n            roundUp\n                ? UnsafeMath.divRoundingUp(\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                    sqrtRatioAX96\n                )\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            roundUp\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        return\n            liquidity < 0\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        return\n            liquidity < 0\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/SwapMath.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n        bool exactIn = amountRemaining >= 0;\n\n        if (exactIn) {\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n            amountIn = zeroForOne\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    amountRemainingLessFee,\n                    zeroForOne\n                );\n        } else {\n            amountOut = zeroForOne\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    uint256(-amountRemaining),\n                    zeroForOne\n                );\n        }\n\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n        // get the input/output amounts\n        if (zeroForOne) {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n        } else {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n        }\n\n        // cap the output amount to not exceed the remaining output amount\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\n            amountOut = uint256(-amountRemaining);\n        }\n\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n            // we didn't reach the target, so take the remainder of the maximum input as fee\n            feeAmount = uint256(amountRemaining) - amountIn;\n        } else {\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n        }\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '../interfaces/IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"},"contracts/base/UniV3likeQuoterCore.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\nimport '../interfaces/IUniV3likeQuoterCore.sol';\n\n\nabstract contract UniV3likeQuoterCore {\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    function quote(\n        address poolAddress,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) public virtual view returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\n        bool exactInput = amountSpecified > 0;\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\n            poolAddress,\n            zeroForOne,\n            amountSpecified,\n            sqrtPriceLimitX96\n        );\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\n                poolAddress,\n                state.tick,\n                tickSpacing,\n                zeroForOne\n            );\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                fee\n            );\n            if (exactInput) {\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\n            } else {\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\n            }\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, run the tick transition\n                if (step.initialized) {\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    if (zeroForOne)\n                        liquidityNet = -liquidityNet;\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n                }\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n    }\n\n    function getInitState(\n        address poolAddress,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\n        ts = getTickSpacing(poolAddress);\n        fee = gs.fee;\n        state = SwapState({\n            amountSpecifiedRemaining: amountSpecified,\n            liquidity: getLiquidity(poolAddress),\n            sqrtPriceX96: gs.startPrice,\n            amountCalculated: 0,\n            tick: gs.startTick\n        });\n    }\n\n    function checkSqrtPriceLimitWithinAllowed(\n        bool zeroForOne,\n        uint160 sqrtPriceLimit, \n        uint160 startPrice\n    ) internal pure {\n        bool withinAllowed = zeroForOne\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\n    }\n\n    function nextInitializedTickAndPrice(\n        address pool, \n        int24 tick, \n        int24 tickSpacing,\n        bool zeroForOne\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n        if (tickNext < TickMath.MIN_TICK)\n            tickNext = TickMath.MIN_TICK;\n        else if (tickNext > TickMath.MAX_TICK)\n            tickNext = TickMath.MAX_TICK;\n        // get the price for the next tick\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\n    }\n\n    function getSqrtRatioTargetX96(\n        bool zeroForOne,\n        uint160 sqrtPriceNextX96,\n        uint160 sqrtPriceLimitX96\n    ) internal pure returns (uint160) {\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\n            ? sqrtPriceLimitX96\n            : sqrtPriceNextX96;\n    }\n\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\n    \n    function getLiquidity(address pool) internal virtual view returns (uint128);\n\n    function getTickSpacing(address pool) internal virtual view returns (int24);\n    \n    function nextInitializedTickWithinOneWord(\n        address poolAddress,\n        int24 tick,\n        int24 tickSpacing,\n        bool zeroForOne\n    ) internal virtual view returns (int24 next, bool initialized);\n    \n    function getTicks(address pool, int24 tick) internal virtual view returns (\n        uint128 liquidityTotal,\n        int128 liquidityDelta,\n        uint256 outerFeeGrowth0Token,\n        uint256 outerFeeGrowth1Token,\n        int56 outerTickCumulative,\n        uint160 outerSecondsPerLiquidity,\n        uint32 outerSecondsSpent,\n        bool initialized\n    );\n\n}"},"contracts/interfaces/IUniswapV3StaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ninterface IUniswapV3StaticQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(\n        bytes memory path,\n        uint256 amountIn\n    ) external view returns (uint256 amountOut);\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        QuoteExactInputSingleParams memory params\n    ) external view returns (uint256 amountOut);\n\n    /// @notice Returns the amount in needed for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountOut The amount of the last token that would be received\n    /// @return amountIn The amount of the first token to swap\n    function quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut\n    ) external view returns (uint256 amountIn);\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in needed for a given exact output but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount of `tokenIn` that would be needed\n    function quoteExactOutputSingle(\n        QuoteExactOutputSingleParams memory params\n    ) external view returns (uint256 amountIn);\n}\n"},"contracts/interfaces/IUniV3likeQuoterCore.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nstruct GlobalState {\n    uint160 startPrice;\n    int24 startTick;\n    uint16 fee;\n}\n\n// the top level state of the swap, the results of which are recorded in storage at the end\nstruct SwapState {\n    // the amount remaining to be swapped in/out of the input/output asset\n    int256 amountSpecifiedRemaining;\n    // the amount already swapped out/in of the output/input asset\n    int256 amountCalculated;\n    // current sqrt(price)\n    uint160 sqrtPriceX96;\n    // the tick associated with the current price\n    int24 tick;\n    // the current liquidity in range\n    uint128 liquidity;\n}\n\nstruct StepComputations {\n    // the price at the beginning of the step\n    uint160 sqrtPriceStartX96;\n    // the next tick to swap to from the current tick in the swap direction\n    int24 tickNext;\n    // whether tickNext is initialized or not\n    bool initialized;\n    // sqrt(price) for the next tick (1/0)\n    uint160 sqrtPriceNextX96;\n    // how much is being swapped in in this step\n    uint256 amountIn;\n    // how much is being swapped out\n    uint256 amountOut;\n    // how much fee is being paid in\n    uint256 feeAmount;\n}\n\ninterface IUniV3likeQuoterCore {\n\n    function quote(\n        address poolAddress,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) external view returns (int256 amount0, int256 amount1);\n\n}"},"contracts/libraries/TickBitmap.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(tick % 256);\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        address poolAddress,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\n                : (compressed - int24(bitPos)) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\n        }\n    }\n}"},"contracts/UniswapV3StaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/Path.sol\";\n\nimport \"./interfaces/IUniswapV3StaticQuoter.sol\";\nimport \"./UniV3QuoterCore.sol\";\n\ncontract UniswapV3StaticQuoter is IUniswapV3StaticQuoter, UniV3QuoterCore {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Path for bytes;\n\n    address immutable factory;\n\n    constructor(address _factory) {\n        factory = _factory;\n    }\n\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return\n            IUniswapV3Pool(\n                PoolAddress.computeAddress(\n                    factory,\n                    PoolAddress.getPoolKey(tokenA, tokenB, fee)\n                )\n            );\n    }\n\n    function quoteExactInputSingle(\n        QuoteExactInputSingleParams memory params\n    ) public view override returns (uint256 amountOut) {\n        bool zeroForOne = params.tokenIn < params.tokenOut;\n        IUniswapV3Pool pool = getPool(\n            params.tokenIn,\n            params.tokenOut,\n            params.fee\n        );\n\n        (int256 amount0, int256 amount1) = quote(\n            address(pool),\n            zeroForOne,\n            params.amountIn.toInt256(),\n            params.sqrtPriceLimitX96 == 0\n                ? (\n                    zeroForOne\n                        ? TickMath.MIN_SQRT_RATIO + 1\n                        : TickMath.MAX_SQRT_RATIO - 1\n                )\n                : params.sqrtPriceLimitX96\n        );\n\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function quoteExactInput(\n        bytes memory path,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        while (true) {\n            (address tokenIn, address tokenOut, uint24 fee) = path\n                .decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            amountIn = quoteExactInputSingle(\n                QuoteExactInputSingleParams({\n                    tokenIn: tokenIn,\n                    tokenOut: tokenOut,\n                    fee: fee,\n                    amountIn: amountIn,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (path.hasMultiplePools()) {\n                path = path.skipToken();\n            } else {\n                return amountIn;\n            }\n        }\n    }\n\n    function quoteExactOutputSingle(\n        QuoteExactOutputSingleParams memory params\n    ) public view override returns (uint256 amountIn) {\n        bool zeroForOne = params.tokenIn < params.tokenOut;\n        IUniswapV3Pool pool = getPool(\n            params.tokenIn,\n            params.tokenOut,\n            params.fee\n        );\n\n        (int256 amount0, int256 amount1) = quote(\n            address(pool),\n            zeroForOne,\n            -params.amount.toInt256(),\n            params.sqrtPriceLimitX96 == 0\n                ? (\n                    zeroForOne\n                        ? TickMath.MIN_SQRT_RATIO + 1\n                        : TickMath.MAX_SQRT_RATIO - 1\n                )\n                : params.sqrtPriceLimitX96\n        );\n\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\n    }\n\n    function quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut\n    ) public view override returns (uint256 amountIn) {\n        while (true) {\n            (address tokenOut, address tokenIn, uint24 fee) = path\n                .decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            amountOut = quoteExactOutputSingle(\n                QuoteExactOutputSingleParams({\n                    tokenIn: tokenIn,\n                    tokenOut: tokenOut,\n                    fee: fee,\n                    amount: amountOut,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (path.hasMultiplePools()) {\n                path = path.skipToken();\n            } else {\n                return amountOut;\n            }\n        }\n    }\n}\n"},"contracts/UniV3QuoterCore.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport './base/UniV3likeQuoterCore.sol';\nimport './libraries/TickBitmap.sol';\n\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\n\n    function getPoolGlobalState(\n        address pool\n    ) internal override view returns (GlobalState memory gs) {\n        gs.fee = uint16(IUniswapV3Pool(pool).fee());\n        (gs.startPrice, gs.startTick,,,,,) = IUniswapV3Pool(pool).slot0();\n    }\n    \n    function getTickSpacing(\n        address pool\n    ) internal override view returns (int24) {\n        return IUniswapV3Pool(pool).tickSpacing();\n    }\n    \n    function getLiquidity(address pool) internal override view returns (uint128) {\n        return IUniswapV3Pool(pool).liquidity();\n    }\n    \n    function nextInitializedTickWithinOneWord(\n        address poolAddress,\n        int24 tick,\n        int24 tickSpacing,\n        bool zeroForOne\n    ) internal override view returns (int24 next, bool initialized) {\n        return TickBitmap.nextInitializedTickWithinOneWord(\n            poolAddress,\n            tick,\n            tickSpacing,\n            zeroForOne\n        );\n    }\n    \n    function getTicks(address pool, int24 tick) internal override view returns (\n        uint128 liquidityTotal,\n        int128 liquidityDelta,\n        uint256 outerFeeGrowth0Token,\n        uint256 outerFeeGrowth1Token,\n        int56 outerTickCumulative,\n        uint160 outerSecondsPerLiquidity,\n        uint32 outerSecondsSpent,\n        bool initialized\n    ) {\n        return IUniswapV3Pool(pool).ticks(tick);\n    }\n\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true},"libraries":{"":{"__CACHE_BREAKER__":"0x00000000d41867734bbee4c6863d9255b2b06ac1"}}}},"output":{"sources":{"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","exportedSymbols":{"IUniswapV3Pool":[21],"IUniswapV3PoolActions":[117],"IUniswapV3PoolDerivedState":[148],"IUniswapV3PoolEvents":[267],"IUniswapV3PoolImmutables":[307],"IUniswapV3PoolOwnerActions":[333],"IUniswapV3PoolState":[441]},"id":22,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:0"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","file":"./pool/IUniswapV3PoolImmutables.sol","id":2,"nodeType":"ImportDirective","scope":22,"sourceUnit":308,"src":"71:45:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","file":"./pool/IUniswapV3PoolState.sol","id":3,"nodeType":"ImportDirective","scope":22,"sourceUnit":442,"src":"117:40:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","file":"./pool/IUniswapV3PoolDerivedState.sol","id":4,"nodeType":"ImportDirective","scope":22,"sourceUnit":149,"src":"158:47:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","file":"./pool/IUniswapV3PoolActions.sol","id":5,"nodeType":"ImportDirective","scope":22,"sourceUnit":118,"src":"206:42:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","file":"./pool/IUniswapV3PoolOwnerActions.sol","id":6,"nodeType":"ImportDirective","scope":22,"sourceUnit":334,"src":"249:47:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","file":"./pool/IUniswapV3PoolEvents.sol","id":7,"nodeType":"ImportDirective","scope":22,"sourceUnit":268,"src":"297:41:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9,"name":"IUniswapV3PoolImmutables","nodeType":"UserDefinedTypeName","referencedDeclaration":307,"src":"637:24:0","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolImmutables_$307","typeString":"contract IUniswapV3PoolImmutables"}},"id":10,"nodeType":"InheritanceSpecifier","src":"637:24:0"},{"baseName":{"id":11,"name":"IUniswapV3PoolState","nodeType":"UserDefinedTypeName","referencedDeclaration":441,"src":"667:19:0","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolState_$441","typeString":"contract IUniswapV3PoolState"}},"id":12,"nodeType":"InheritanceSpecifier","src":"667:19:0"},{"baseName":{"id":13,"name":"IUniswapV3PoolDerivedState","nodeType":"UserDefinedTypeName","referencedDeclaration":148,"src":"692:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolDerivedState_$148","typeString":"contract IUniswapV3PoolDerivedState"}},"id":14,"nodeType":"InheritanceSpecifier","src":"692:26:0"},{"baseName":{"id":15,"name":"IUniswapV3PoolActions","nodeType":"UserDefinedTypeName","referencedDeclaration":117,"src":"724:21:0","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolActions_$117","typeString":"contract IUniswapV3PoolActions"}},"id":16,"nodeType":"InheritanceSpecifier","src":"724:21:0"},{"baseName":{"id":17,"name":"IUniswapV3PoolOwnerActions","nodeType":"UserDefinedTypeName","referencedDeclaration":333,"src":"751:26:0","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolOwnerActions_$333","typeString":"contract IUniswapV3PoolOwnerActions"}},"id":18,"nodeType":"InheritanceSpecifier","src":"751:26:0"},{"baseName":{"id":19,"name":"IUniswapV3PoolEvents","nodeType":"UserDefinedTypeName","referencedDeclaration":267,"src":"783:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolEvents_$267","typeString":"contract IUniswapV3PoolEvents"}},"id":20,"nodeType":"InheritanceSpecifier","src":"783:20:0"}],"contractDependencies":[117,148,267,307,333,441],"contractKind":"interface","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"340:265:0","text":"@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"},"fullyImplemented":false,"id":21,"linearizedBaseContracts":[21,267,333,117,148,441,307],"name":"IUniswapV3Pool","nodeType":"ContractDefinition","nodes":[],"scope":22,"src":"605:203:0"}],"src":"45:764:0"},"id":0},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","exportedSymbols":{"IUniswapV3PoolActions":[117]},"id":118,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":23,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"71:102:1","text":"@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"},"fullyImplemented":false,"id":117,"linearizedBaseContracts":[117],"name":"IUniswapV3PoolActions","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"211:206:1","text":"@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"},"functionSelector":"f637731d","id":30,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":30,"src":"442:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":26,"name":"uint160","nodeType":"ElementaryTypeName","src":"442:7:1","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"441:22:1"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"472:0:1"},"scope":117,"src":"422:51:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"479:1029:1","text":"@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"},"functionSelector":"3c8a7d8d","id":48,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":48,"src":"1536:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":48,"src":"1563:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":34,"name":"int24","nodeType":"ElementaryTypeName","src":"1563:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":37,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":48,"src":"1588:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":36,"name":"int24","nodeType":"ElementaryTypeName","src":"1588:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":48,"src":"1613:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":38,"name":"uint128","nodeType":"ElementaryTypeName","src":"1613:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":41,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":48,"src":"1637:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":40,"name":"bytes","nodeType":"ElementaryTypeName","src":"1637:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1526:136:1"},"returnParameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":48,"src":"1681:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":48,"src":"1698:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"1698:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:34:1"},"scope":117,"src":"1513:202:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"1721:1053:1","text":"@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"},"functionSelector":"4f1eb3d8","id":66,"implemented":false,"kind":"function","modifiers":[],"name":"collect","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":66,"src":"2805:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":66,"src":"2832:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":52,"name":"int24","nodeType":"ElementaryTypeName","src":"2832:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":55,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":66,"src":"2857:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":54,"name":"int24","nodeType":"ElementaryTypeName","src":"2857:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"amount0Requested","nodeType":"VariableDeclaration","scope":66,"src":"2882:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":56,"name":"uint128","nodeType":"ElementaryTypeName","src":"2882:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"amount1Requested","nodeType":"VariableDeclaration","scope":66,"src":"2916:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":58,"name":"uint128","nodeType":"ElementaryTypeName","src":"2916:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2795:151:1"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":66,"src":"2965:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":61,"name":"uint128","nodeType":"ElementaryTypeName","src":"2965:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":64,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":66,"src":"2982:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":63,"name":"uint128","nodeType":"ElementaryTypeName","src":"2982:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2964:34:1"},"scope":117,"src":"2779:220:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":67,"nodeType":"StructuredDocumentation","src":"3005:631:1","text":"@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"},"functionSelector":"a34123a7","id":80,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nodeType":"FunctionDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":80,"src":"3664:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":68,"name":"int24","nodeType":"ElementaryTypeName","src":"3664:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":80,"src":"3689:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":70,"name":"int24","nodeType":"ElementaryTypeName","src":"3689:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":73,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":80,"src":"3714:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":72,"name":"uint128","nodeType":"ElementaryTypeName","src":"3714:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"3654:80:1"},"returnParameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":80,"src":"3753:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":75,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":80,"src":"3770:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:34:1"},"scope":117,"src":"3641:146:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"3793:1015:1","text":"@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"},"functionSelector":"128acb08","id":98,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nodeType":"FunctionDefinition","parameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":98,"src":"4836:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":85,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":98,"src":"4863:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":84,"name":"bool","nodeType":"ElementaryTypeName","src":"4863:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":98,"src":"4888:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":86,"name":"int256","nodeType":"ElementaryTypeName","src":"4888:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":89,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":98,"src":"4920:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":88,"name":"uint160","nodeType":"ElementaryTypeName","src":"4920:7:1","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":91,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":98,"src":"4955:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":90,"name":"bytes","nodeType":"ElementaryTypeName","src":"4955:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4826:154:1"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":98,"src":"4999:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":93,"name":"int256","nodeType":"ElementaryTypeName","src":"4999:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":98,"src":"5015:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":95,"name":"int256","nodeType":"ElementaryTypeName","src":"5015:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4998:32:1"},"scope":117,"src":"4813:218:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"5037:657:1","text":"@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"},"functionSelector":"490e6cbc","id":110,"implemented":false,"kind":"function","modifiers":[],"name":"flash","nodeType":"FunctionDefinition","parameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":110,"src":"5723:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"5723:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":110,"src":"5750:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"5750:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":110,"src":"5775:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":104,"name":"uint256","nodeType":"ElementaryTypeName","src":"5775:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":107,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":110,"src":"5800:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":106,"name":"bytes","nodeType":"ElementaryTypeName","src":"5800:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5713:112:1"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[],"src":"5834:0:1"},"scope":117,"src":"5699:136:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"5841:367:1","text":"@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"},"functionSelector":"32148f67","id":116,"implemented":false,"kind":"function","modifiers":[],"name":"increaseObservationCardinalityNext","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"observationCardinalityNext","nodeType":"VariableDeclaration","scope":116,"src":"6257:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":112,"name":"uint16","nodeType":"ElementaryTypeName","src":"6257:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6256:35:1"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"6300:0:1"},"scope":117,"src":"6213:88:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":118,"src":"173:6130:1"}],"src":"45:6259:1"},"id":1},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","exportedSymbols":{"IUniswapV3PoolDerivedState":[148]},"id":149,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":119,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"71:222:2","text":"@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."},"fullyImplemented":false,"id":148,"linearizedBaseContracts":[148],"name":"IUniswapV3PoolDerivedState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"336:1045:2","text":"@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"},"functionSelector":"883bdbfd","id":133,"implemented":false,"kind":"function","modifiers":[],"name":"observe","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"secondsAgos","nodeType":"VariableDeclaration","scope":133,"src":"1403:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_calldata_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":122,"name":"uint32","nodeType":"ElementaryTypeName","src":"1403:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":123,"nodeType":"ArrayTypeName","src":"1403:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"src":"1402:31:2"},"returnParameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"tickCumulatives","nodeType":"VariableDeclaration","scope":133,"src":"1481:30:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[]"},"typeName":{"baseType":{"id":126,"name":"int56","nodeType":"ElementaryTypeName","src":"1481:5:2","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":127,"nodeType":"ArrayTypeName","src":"1481:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_storage_ptr","typeString":"int56[]"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128s","nodeType":"VariableDeclaration","scope":133,"src":"1513:51:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":129,"name":"uint160","nodeType":"ElementaryTypeName","src":"1513:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":130,"nodeType":"ArrayTypeName","src":"1513:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"}],"src":"1480:85:2"},"scope":148,"src":"1386:180:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"1572:771:2","text":"@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"},"functionSelector":"a38807f2","id":147,"implemented":false,"kind":"function","modifiers":[],"name":"snapshotCumulativesInside","nodeType":"FunctionDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":147,"src":"2383:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":135,"name":"int24","nodeType":"ElementaryTypeName","src":"2383:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":147,"src":"2400:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":137,"name":"int24","nodeType":"ElementaryTypeName","src":"2400:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"2382:34:2"},"returnParameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"tickCumulativeInside","nodeType":"VariableDeclaration","scope":147,"src":"2477:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":140,"name":"int56","nodeType":"ElementaryTypeName","src":"2477:5:2","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":143,"mutability":"mutable","name":"secondsPerLiquidityInsideX128","nodeType":"VariableDeclaration","scope":147,"src":"2517:37:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":142,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"secondsInside","nodeType":"VariableDeclaration","scope":147,"src":"2568:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":144,"name":"uint32","nodeType":"ElementaryTypeName","src":"2568:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2463:135:2"},"scope":148,"src":"2348:251:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":149,"src":"293:2308:2"}],"src":"45:2557:2"},"id":2},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","exportedSymbols":{"IUniswapV3PoolEvents":[267]},"id":268,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":150,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"71:88:3","text":"@title Events emitted by a pool\n @notice Contains all events emitted by the pool"},"fullyImplemented":true,"id":267,"linearizedBaseContracts":[267],"name":"IUniswapV3PoolEvents","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"196:344:3","text":"@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"},"id":158,"name":"Initialize","nodeType":"EventDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":158,"src":"562:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":153,"name":"uint160","nodeType":"ElementaryTypeName","src":"562:7:3","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":156,"indexed":false,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":158,"src":"584:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":155,"name":"int24","nodeType":"ElementaryTypeName","src":"584:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"561:34:3"},"src":"545:51:3"},{"anonymous":false,"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"602:551:3","text":"@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"},"id":175,"name":"Mint","nodeType":"EventDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"indexed":false,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":175,"src":"1178:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"1178:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":163,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":175,"src":"1202:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":162,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":165,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":175,"src":"1233:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":164,"name":"int24","nodeType":"ElementaryTypeName","src":"1233:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":167,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":175,"src":"1266:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":166,"name":"int24","nodeType":"ElementaryTypeName","src":"1266:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":169,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":175,"src":"1299:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":168,"name":"uint128","nodeType":"ElementaryTypeName","src":"1299:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":171,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":175,"src":"1323:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":173,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":175,"src":"1348:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1168:201:3"},"src":"1158:212:3"},{"anonymous":false,"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"1376:493:3","text":"@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"},"id":190,"name":"Collect","nodeType":"EventDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":190,"src":"1897:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"1897:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":180,"indexed":false,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":190,"src":"1928:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":179,"name":"address","nodeType":"ElementaryTypeName","src":"1928:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":182,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":190,"src":"1955:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":181,"name":"int24","nodeType":"ElementaryTypeName","src":"1955:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":184,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":190,"src":"1988:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":183,"name":"int24","nodeType":"ElementaryTypeName","src":"1988:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":186,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":190,"src":"2021:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":185,"name":"uint128","nodeType":"ElementaryTypeName","src":"2021:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":188,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":190,"src":"2046:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":187,"name":"uint128","nodeType":"ElementaryTypeName","src":"2046:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1887:180:3"},"src":"1874:194:3"},{"anonymous":false,"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"2074:523:3","text":"@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"},"id":205,"name":"Burn","nodeType":"EventDefinition","parameters":{"id":204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":205,"src":"2622:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"2622:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":195,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":205,"src":"2653:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":194,"name":"int24","nodeType":"ElementaryTypeName","src":"2653:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":197,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":205,"src":"2686:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":196,"name":"int24","nodeType":"ElementaryTypeName","src":"2686:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":199,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":205,"src":"2719:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":198,"name":"uint128","nodeType":"ElementaryTypeName","src":"2719:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":201,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":205,"src":"2743:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":203,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":205,"src":"2768:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:177:3"},"src":"2602:188:3"},{"anonymous":false,"documentation":{"id":206,"nodeType":"StructuredDocumentation","src":"2796:600:3","text":"@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"},"id":222,"name":"Swap","nodeType":"EventDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":222,"src":"3421:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"3421:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":210,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":222,"src":"3453:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":209,"name":"address","nodeType":"ElementaryTypeName","src":"3453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":212,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":222,"src":"3488:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":211,"name":"int256","nodeType":"ElementaryTypeName","src":"3488:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":214,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":222,"src":"3512:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":213,"name":"int256","nodeType":"ElementaryTypeName","src":"3512:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":216,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":222,"src":"3536:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":215,"name":"uint160","nodeType":"ElementaryTypeName","src":"3536:7:3","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":218,"indexed":false,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":222,"src":"3566:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":217,"name":"uint128","nodeType":"ElementaryTypeName","src":"3566:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":220,"indexed":false,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":222,"src":"3593:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":219,"name":"int24","nodeType":"ElementaryTypeName","src":"3593:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3411:198:3"},"src":"3401:209:3"},{"anonymous":false,"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"3616:562:3","text":"@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"},"id":237,"name":"Flash","nodeType":"EventDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":237,"src":"4204:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":224,"name":"address","nodeType":"ElementaryTypeName","src":"4204:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":227,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":237,"src":"4236:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"4236:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":229,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":237,"src":"4271:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":228,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":231,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":237,"src":"4296:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"4296:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":233,"indexed":false,"mutability":"mutable","name":"paid0","nodeType":"VariableDeclaration","scope":237,"src":"4321:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"4321:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":235,"indexed":false,"mutability":"mutable","name":"paid1","nodeType":"VariableDeclaration","scope":237,"src":"4344:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":234,"name":"uint256","nodeType":"ElementaryTypeName","src":"4344:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4194:169:3"},"src":"4183:181:3"},{"anonymous":false,"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"4370:451:3","text":"@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"},"id":244,"name":"IncreaseObservationCardinalityNext","nodeType":"EventDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextOld","nodeType":"VariableDeclaration","scope":244,"src":"4876:36:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":239,"name":"uint16","nodeType":"ElementaryTypeName","src":"4876:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":242,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextNew","nodeType":"VariableDeclaration","scope":244,"src":"4922:36:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":241,"name":"uint16","nodeType":"ElementaryTypeName","src":"4922:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4866:98:3"},"src":"4826:139:3"},{"anonymous":false,"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"4971:370:3","text":"@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"},"id":255,"name":"SetFeeProtocol","nodeType":"EventDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"indexed":false,"mutability":"mutable","name":"feeProtocol0Old","nodeType":"VariableDeclaration","scope":255,"src":"5367:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":246,"name":"uint8","nodeType":"ElementaryTypeName","src":"5367:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":249,"indexed":false,"mutability":"mutable","name":"feeProtocol1Old","nodeType":"VariableDeclaration","scope":255,"src":"5390:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":248,"name":"uint8","nodeType":"ElementaryTypeName","src":"5390:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":251,"indexed":false,"mutability":"mutable","name":"feeProtocol0New","nodeType":"VariableDeclaration","scope":255,"src":"5413:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":250,"name":"uint8","nodeType":"ElementaryTypeName","src":"5413:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":253,"indexed":false,"mutability":"mutable","name":"feeProtocol1New","nodeType":"VariableDeclaration","scope":255,"src":"5436:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":252,"name":"uint8","nodeType":"ElementaryTypeName","src":"5436:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5366:92:3"},"src":"5346:113:3"},{"anonymous":false,"documentation":{"id":256,"nodeType":"StructuredDocumentation","src":"5465:384:3","text":"@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"},"id":266,"name":"CollectProtocol","nodeType":"EventDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":258,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":266,"src":"5876:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"5876:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":260,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":266,"src":"5900:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":262,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":266,"src":"5927:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":261,"name":"uint128","nodeType":"ElementaryTypeName","src":"5927:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":264,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":266,"src":"5944:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":263,"name":"uint128","nodeType":"ElementaryTypeName","src":"5944:7:3","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5875:85:3"},"src":"5854:107:3"}],"scope":268,"src":"159:5804:3"}],"src":"45:5919:3"},"id":3},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","exportedSymbols":{"IUniswapV3PoolImmutables":[307]},"id":308,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":269,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":270,"nodeType":"StructuredDocumentation","src":"71:153:4","text":"@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"},"fullyImplemented":false,"id":307,"linearizedBaseContracts":[307],"name":"IUniswapV3PoolImmutables","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":271,"nodeType":"StructuredDocumentation","src":"265:138:4","text":"@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"},"functionSelector":"c45a0155","id":276,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[],"src":"424:2:4"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":276,"src":"450:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":273,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"449:9:4"},"scope":307,"src":"408:51:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"465:113:4","text":"@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"0dfe1681","id":282,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[],"src":"598:2:4"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":282,"src":"624:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":279,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"623:9:4"},"scope":307,"src":"583:50:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"639:114:4","text":"@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"d21220a7","id":288,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"773:2:4"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":288,"src":"799:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":285,"name":"address","nodeType":"ElementaryTypeName","src":"799:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"798:9:4"},"scope":307,"src":"758:50:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"814:84:4","text":"@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"},"functionSelector":"ddca3f43","id":294,"implemented":false,"kind":"function","modifiers":[],"name":"fee","nodeType":"FunctionDefinition","parameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"915:2:4"},"returnParameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":294,"src":"941:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":291,"name":"uint24","nodeType":"ElementaryTypeName","src":"941:6:4","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"940:8:4"},"scope":307,"src":"903:46:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":295,"nodeType":"StructuredDocumentation","src":"955:358:4","text":"@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"},"functionSelector":"d0c93a7c","id":300,"implemented":false,"kind":"function","modifiers":[],"name":"tickSpacing","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[],"src":"1338:2:4"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":300,"src":"1364:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":297,"name":"int24","nodeType":"ElementaryTypeName","src":"1364:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1363:7:4"},"scope":307,"src":"1318:53:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":301,"nodeType":"StructuredDocumentation","src":"1377:363:4","text":"@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"},"functionSelector":"70cf754a","id":306,"implemented":false,"kind":"function","modifiers":[],"name":"maxLiquidityPerTick","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[],"src":"1773:2:4"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":306,"src":"1799:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":303,"name":"uint128","nodeType":"ElementaryTypeName","src":"1799:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1798:9:4"},"scope":307,"src":"1745:63:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":308,"src":"224:1586:4"}],"src":"45:1766:4"},"id":4},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","exportedSymbols":{"IUniswapV3PoolOwnerActions":[333]},"id":334,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":309,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"71:116:5","text":"@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"},"fullyImplemented":false,"id":333,"linearizedBaseContracts":[333],"name":"IUniswapV3PoolOwnerActions","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"230:205:5","text":"@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"},"functionSelector":"8206a4d1","id":318,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeProtocol","nodeType":"FunctionDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"feeProtocol0","nodeType":"VariableDeclaration","scope":318,"src":"464:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":312,"name":"uint8","nodeType":"ElementaryTypeName","src":"464:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":315,"mutability":"mutable","name":"feeProtocol1","nodeType":"VariableDeclaration","scope":318,"src":"484:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":314,"name":"uint8","nodeType":"ElementaryTypeName","src":"484:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"463:40:5"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[],"src":"512:0:5"},"scope":333,"src":"440:73:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"519:483:5","text":"@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"},"functionSelector":"85b66729","id":332,"implemented":false,"kind":"function","modifiers":[],"name":"collectProtocol","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":332,"src":"1041:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":323,"mutability":"mutable","name":"amount0Requested","nodeType":"VariableDeclaration","scope":332,"src":"1068:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":322,"name":"uint128","nodeType":"ElementaryTypeName","src":"1068:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":325,"mutability":"mutable","name":"amount1Requested","nodeType":"VariableDeclaration","scope":332,"src":"1102:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":324,"name":"uint128","nodeType":"ElementaryTypeName","src":"1102:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1031:101:5"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":332,"src":"1151:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":327,"name":"uint128","nodeType":"ElementaryTypeName","src":"1151:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":332,"src":"1168:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":329,"name":"uint128","nodeType":"ElementaryTypeName","src":"1168:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1150:34:5"},"scope":333,"src":"1007:178:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":334,"src":"187:1000:5"}],"src":"45:1143:5"},"id":5},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","exportedSymbols":{"IUniswapV3PoolState":[441]},"id":442,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":335,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"71:169:6","text":"@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"},"fullyImplemented":false,"id":441,"linearizedBaseContracts":[441],"name":"IUniswapV3PoolState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":337,"nodeType":"StructuredDocumentation","src":"276:1140:6","text":"@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"},"functionSelector":"3850c7bd","id":354,"implemented":false,"kind":"function","modifiers":[],"name":"slot0","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[],"src":"1435:2:6"},"returnParameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":354,"src":"1498:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":339,"name":"uint160","nodeType":"ElementaryTypeName","src":"1498:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":342,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":354,"src":"1532:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":341,"name":"int24","nodeType":"ElementaryTypeName","src":"1532:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":344,"mutability":"mutable","name":"observationIndex","nodeType":"VariableDeclaration","scope":354,"src":"1556:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":343,"name":"uint16","nodeType":"ElementaryTypeName","src":"1556:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"observationCardinality","nodeType":"VariableDeclaration","scope":354,"src":"1593:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":345,"name":"uint16","nodeType":"ElementaryTypeName","src":"1593:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"observationCardinalityNext","nodeType":"VariableDeclaration","scope":354,"src":"1636:33:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":347,"name":"uint16","nodeType":"ElementaryTypeName","src":"1636:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"feeProtocol","nodeType":"VariableDeclaration","scope":354,"src":"1683:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":349,"name":"uint8","nodeType":"ElementaryTypeName","src":"1683:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":352,"mutability":"mutable","name":"unlocked","nodeType":"VariableDeclaration","scope":354,"src":"1714:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":351,"name":"bool","nodeType":"ElementaryTypeName","src":"1714:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1484:253:6"},"scope":441,"src":"1421:317:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"1744:168:6","text":"@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"f3058399","id":360,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal0X128","nodeType":"FunctionDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[],"src":"1946:2:6"},"returnParameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":360,"src":"1972:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1971:9:6"},"scope":441,"src":"1917:64:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"1987:168:6","text":"@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"46141319","id":366,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal1X128","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[],"src":"2189:2:6"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":366,"src":"2215:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2214:9:6"},"scope":441,"src":"2160:64:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"2230:147:6","text":"@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"},"functionSelector":"1ad8b03b","id":374,"implemented":false,"kind":"function","modifiers":[],"name":"protocolFees","nodeType":"FunctionDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"2403:2:6"},"returnParameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":374,"src":"2429:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":369,"name":"uint128","nodeType":"ElementaryTypeName","src":"2429:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":374,"src":"2445:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":371,"name":"uint128","nodeType":"ElementaryTypeName","src":"2445:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2428:32:6"},"scope":441,"src":"2382:79:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"2467:150:6","text":"@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"},"functionSelector":"1a686502","id":380,"implemented":false,"kind":"function","modifiers":[],"name":"liquidity","nodeType":"FunctionDefinition","parameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"2640:2:6"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":380,"src":"2666:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":377,"name":"uint128","nodeType":"ElementaryTypeName","src":"2666:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2665:9:6"},"scope":441,"src":"2622:53:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"2681:1244:6","text":"@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."},"functionSelector":"f30dba93","id":402,"implemented":false,"kind":"function","modifiers":[],"name":"ticks","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":402,"src":"3945:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":382,"name":"int24","nodeType":"ElementaryTypeName","src":"3945:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3944:12:6"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"liquidityGross","nodeType":"VariableDeclaration","scope":402,"src":"4017:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":385,"name":"uint128","nodeType":"ElementaryTypeName","src":"4017:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"liquidityNet","nodeType":"VariableDeclaration","scope":402,"src":"4053:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":387,"name":"int128","nodeType":"ElementaryTypeName","src":"4053:6:6","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"feeGrowthOutside0X128","nodeType":"VariableDeclaration","scope":402,"src":"4086:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"4086:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"feeGrowthOutside1X128","nodeType":"VariableDeclaration","scope":402,"src":"4129:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":391,"name":"uint256","nodeType":"ElementaryTypeName","src":"4129:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"tickCumulativeOutside","nodeType":"VariableDeclaration","scope":402,"src":"4172:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":393,"name":"int56","nodeType":"ElementaryTypeName","src":"4172:5:6","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"secondsPerLiquidityOutsideX128","nodeType":"VariableDeclaration","scope":402,"src":"4213:38:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":395,"name":"uint160","nodeType":"ElementaryTypeName","src":"4213:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"secondsOutside","nodeType":"VariableDeclaration","scope":402,"src":"4265:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":397,"name":"uint32","nodeType":"ElementaryTypeName","src":"4265:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":400,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":402,"src":"4300:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":399,"name":"bool","nodeType":"ElementaryTypeName","src":"4300:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4003:323:6"},"scope":441,"src":"3930:397:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"4333:99:6","text":"@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"functionSelector":"5339c296","id":410,"implemented":false,"kind":"function","modifiers":[],"name":"tickBitmap","nodeType":"FunctionDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"wordPosition","nodeType":"VariableDeclaration","scope":410,"src":"4457:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":404,"name":"int16","nodeType":"ElementaryTypeName","src":"4457:5:6","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"4456:20:6"},"returnParameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":410,"src":"4500:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"4500:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:9:6"},"scope":441,"src":"4437:72:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"4515:700:6","text":"@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"},"functionSelector":"514ea4bf","id":426,"implemented":false,"kind":"function","modifiers":[],"name":"positions","nodeType":"FunctionDefinition","parameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"key","nodeType":"VariableDeclaration","scope":426,"src":"5239:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5239:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5238:13:6"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"_liquidity","nodeType":"VariableDeclaration","scope":426,"src":"5312:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":415,"name":"uint128","nodeType":"ElementaryTypeName","src":"5312:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"feeGrowthInside0LastX128","nodeType":"VariableDeclaration","scope":426,"src":"5344:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"5344:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"feeGrowthInside1LastX128","nodeType":"VariableDeclaration","scope":426,"src":"5390:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":419,"name":"uint256","nodeType":"ElementaryTypeName","src":"5390:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":422,"mutability":"mutable","name":"tokensOwed0","nodeType":"VariableDeclaration","scope":426,"src":"5436:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":421,"name":"uint128","nodeType":"ElementaryTypeName","src":"5436:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":424,"mutability":"mutable","name":"tokensOwed1","nodeType":"VariableDeclaration","scope":426,"src":"5469:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":423,"name":"uint128","nodeType":"ElementaryTypeName","src":"5469:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5298:200:6"},"scope":441,"src":"5220:279:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"5505:749:6","text":"@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"},"functionSelector":"252c09d7","id":440,"implemented":false,"kind":"function","modifiers":[],"name":"observations","nodeType":"FunctionDefinition","parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":440,"src":"6281:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"6281:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6280:15:6"},"returnParameters":{"id":439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"blockTimestamp","nodeType":"VariableDeclaration","scope":440,"src":"6356:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":431,"name":"uint32","nodeType":"ElementaryTypeName","src":"6356:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"tickCumulative","nodeType":"VariableDeclaration","scope":440,"src":"6391:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":433,"name":"int56","nodeType":"ElementaryTypeName","src":"6391:5:6","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":436,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128","nodeType":"VariableDeclaration","scope":440,"src":"6425:41:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":435,"name":"uint160","nodeType":"ElementaryTypeName","src":"6425:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":440,"src":"6480:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":437,"name":"bool","nodeType":"ElementaryTypeName","src":"6480:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6342:164:6"},"scope":441,"src":"6259:248:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":442,"src":"240:6269:6"}],"src":"45:6465:6"},"id":6},"@uniswap/v3-core/contracts/libraries/BitMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/BitMath.sol","exportedSymbols":{"BitMath":[720]},"id":721,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":443,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:7"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"71:116:7","text":"@title BitMath\n @dev This library provides functionality for computing bit properties of an unsigned integer"},"fullyImplemented":true,"id":720,"linearizedBaseContracts":[720],"name":"BitMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":557,"nodeType":"Block","src":"742:660:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":453,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"760:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"764:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"760:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":452,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"752:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"752:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"752:14:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":458,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"781:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"786:35:7","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"src":"781:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":470,"nodeType":"IfStatement","src":"777:102:7","trueBody":{"id":469,"nodeType":"Block","src":"823:56:7","statements":[{"expression":{"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":461,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"837:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"843:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"837:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":464,"nodeType":"ExpressionStatement","src":"837:9:7"},{"expression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":465,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"860:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"865:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"860:8:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":468,"nodeType":"ExpressionStatement","src":"860:8:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":471,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"892:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783130303030303030303030303030303030","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"897:19:7","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"value":"0x10000000000000000"},"src":"892:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"IfStatement","src":"888:84:7","trueBody":{"id":482,"nodeType":"Block","src":"918:54:7","statements":[{"expression":{"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":474,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"932:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"938:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"932:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":477,"nodeType":"ExpressionStatement","src":"932:8:7"},{"expression":{"id":480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":478,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"954:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"959:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"954:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":481,"nodeType":"ExpressionStatement","src":"954:7:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":484,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"985:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3078313030303030303030","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:11:7","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"value":"0x100000000"},"src":"985:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":496,"nodeType":"IfStatement","src":"981:76:7","trueBody":{"id":495,"nodeType":"Block","src":"1003:54:7","statements":[{"expression":{"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":487,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1017:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1023:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1017:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":490,"nodeType":"ExpressionStatement","src":"1017:8:7"},{"expression":{"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":491,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1039:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1039:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":494,"nodeType":"ExpressionStatement","src":"1039:7:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":497,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1070:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783130303030","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1075:7:7","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"0x10000"},"src":"1070:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"nodeType":"IfStatement","src":"1066:72:7","trueBody":{"id":508,"nodeType":"Block","src":"1084:54:7","statements":[{"expression":{"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":500,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1098:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1104:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"1098:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":503,"nodeType":"ExpressionStatement","src":"1098:8:7"},{"expression":{"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":504,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1120:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1125:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"1120:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":507,"nodeType":"ExpressionStatement","src":"1120:7:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":510,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1151:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3078313030","id":511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1156:5:7","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"0x100"},"src":"1151:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":522,"nodeType":"IfStatement","src":"1147:68:7","trueBody":{"id":521,"nodeType":"Block","src":"1163:52:7","statements":[{"expression":{"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":513,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1177:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1183:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1177:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":516,"nodeType":"ExpressionStatement","src":"1177:7:7"},{"expression":{"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":517,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1198:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1203:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1198:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":520,"nodeType":"ExpressionStatement","src":"1198:6:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":523,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1228:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783130","id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:4:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"0x10"},"src":"1228:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":535,"nodeType":"IfStatement","src":"1224:67:7","trueBody":{"id":534,"nodeType":"Block","src":"1239:52:7","statements":[{"expression":{"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":526,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1253:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1253:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":529,"nodeType":"ExpressionStatement","src":"1253:7:7"},{"expression":{"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":530,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1274:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1279:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1274:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":533,"nodeType":"ExpressionStatement","src":"1274:6:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":536,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1304:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"307834","id":537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1309:3:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"src":"1304:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":548,"nodeType":"IfStatement","src":"1300:66:7","trueBody":{"id":547,"nodeType":"Block","src":"1314:52:7","statements":[{"expression":{"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":539,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1328:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1328:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":542,"nodeType":"ExpressionStatement","src":"1328:7:7"},{"expression":{"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":543,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1349:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1349:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":546,"nodeType":"ExpressionStatement","src":"1349:6:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":549,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1379:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"307832","id":550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1384:3:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"0x2"},"src":"1379:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":556,"nodeType":"IfStatement","src":"1375:20:7","trueBody":{"expression":{"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":552,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1389:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1394:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1389:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":555,"nodeType":"ExpressionStatement","src":"1389:6:7"}}]},"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"209:457:7","text":"@notice Returns the index of the most significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n @param x the value for which to compute the most significant bit, must be greater than 0\n @return r the index of the most significant bit"},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"mostSignificantBit","nodeType":"FunctionDefinition","parameters":{"id":448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":558,"src":"699:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:11:7"},"returnParameters":{"id":451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":450,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":558,"src":"733:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":449,"name":"uint8","nodeType":"ElementaryTypeName","src":"733:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"732:9:7"},"scope":720,"src":"671:731:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":718,"nodeType":"Block","src":"1965:822:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":567,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"1983:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1987:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1983:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":566,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1975:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1975:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":571,"nodeType":"ExpressionStatement","src":"1975:14:7"},{"expression":{"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":572,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2000:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"323535","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2004:3:7","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2000:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":575,"nodeType":"ExpressionStatement","src":"2000:7:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":576,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2021:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2030:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":578,"name":"uint128","nodeType":"ElementaryTypeName","src":"2030:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":577,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2025:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2025:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2025:17:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2021:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2021:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":594,"nodeType":"Block","src":"2087:34:7","statements":[{"expression":{"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":590,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2101:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2107:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2101:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":593,"nodeType":"ExpressionStatement","src":"2101:9:7"}]},"id":595,"nodeType":"IfStatement","src":"2017:104:7","trueBody":{"id":589,"nodeType":"Block","src":"2048:33:7","statements":[{"expression":{"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":585,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2062:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"313238","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2067:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2062:8:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":588,"nodeType":"ExpressionStatement","src":"2062:8:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":596,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2134:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2143:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":598,"name":"uint64","nodeType":"ElementaryTypeName","src":"2143:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":597,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2138:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2138:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2138:16:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2134:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2134:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":614,"nodeType":"Block","src":"2198:33:7","statements":[{"expression":{"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":610,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2212:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2218:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"2212:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":613,"nodeType":"ExpressionStatement","src":"2212:8:7"}]},"id":615,"nodeType":"IfStatement","src":"2130:101:7","trueBody":{"id":609,"nodeType":"Block","src":"2160:32:7","statements":[{"expression":{"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":605,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2174:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3634","id":606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"2174:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":608,"nodeType":"ExpressionStatement","src":"2174:7:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2244:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2253:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":618,"name":"uint32","nodeType":"ElementaryTypeName","src":"2253:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":617,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2248:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2248:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2248:16:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2244:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2267:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2244:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":634,"nodeType":"Block","src":"2308:33:7","statements":[{"expression":{"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":630,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2322:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2328:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2322:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":633,"nodeType":"ExpressionStatement","src":"2322:8:7"}]},"id":635,"nodeType":"IfStatement","src":"2240:101:7","trueBody":{"id":629,"nodeType":"Block","src":"2270:32:7","statements":[{"expression":{"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":625,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2284:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2289:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2284:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":628,"nodeType":"ExpressionStatement","src":"2284:7:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":636,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2354:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2363:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":638,"name":"uint16","nodeType":"ElementaryTypeName","src":"2363:6:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":637,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2358:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2358:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2358:16:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2354:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2377:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2354:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":654,"nodeType":"Block","src":"2418:33:7","statements":[{"expression":{"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":650,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2432:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2438:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"2432:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":653,"nodeType":"ExpressionStatement","src":"2432:8:7"}]},"id":655,"nodeType":"IfStatement","src":"2350:101:7","trueBody":{"id":649,"nodeType":"Block","src":"2380:32:7","statements":[{"expression":{"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":645,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2394:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3136","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2399:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"2394:7:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":648,"nodeType":"ExpressionStatement","src":"2394:7:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":656,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2464:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2473:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":658,"name":"uint8","nodeType":"ElementaryTypeName","src":"2473:5:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":657,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2468:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2468:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2468:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2464:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2486:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2464:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":674,"nodeType":"Block","src":"2526:32:7","statements":[{"expression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":670,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2540:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2546:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"2540:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":673,"nodeType":"ExpressionStatement","src":"2540:7:7"}]},"id":675,"nodeType":"IfStatement","src":"2460:98:7","trueBody":{"id":669,"nodeType":"Block","src":"2489:31:7","statements":[{"expression":{"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":665,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2503:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"38","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2508:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"2503:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":668,"nodeType":"ExpressionStatement","src":"2503:6:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":676,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2571:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2575:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2571:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2581:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2571:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":690,"nodeType":"Block","src":"2621:32:7","statements":[{"expression":{"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":686,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2635:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2641:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2635:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":689,"nodeType":"ExpressionStatement","src":"2635:7:7"}]},"id":691,"nodeType":"IfStatement","src":"2567:86:7","trueBody":{"id":685,"nodeType":"Block","src":"2584:31:7","statements":[{"expression":{"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":681,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2598:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"34","id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2603:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2598:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":684,"nodeType":"ExpressionStatement","src":"2598:6:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":692,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2666:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307833","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2670:3:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"0x3"},"src":"2666:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2676:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2666:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":706,"nodeType":"Block","src":"2716:32:7","statements":[{"expression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":702,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2730:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2736:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2730:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"nodeType":"ExpressionStatement","src":"2730:7:7"}]},"id":707,"nodeType":"IfStatement","src":"2662:86:7","trueBody":{"id":701,"nodeType":"Block","src":"2679:31:7","statements":[{"expression":{"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":697,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2693:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"32","id":698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2698:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2693:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":700,"nodeType":"ExpressionStatement","src":"2693:6:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":708,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2761:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2765:3:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"},"src":"2761:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2771:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2761:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":717,"nodeType":"IfStatement","src":"2757:23:7","trueBody":{"expression":{"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":713,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2774:1:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2779:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2774:6:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":716,"nodeType":"ExpressionStatement","src":"2774:6:7"}}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"1408:480:7","text":"@notice Returns the index of the least significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n @param x the value for which to compute the least significant bit, must be greater than 0\n @return r the index of the least significant bit"},"id":719,"implemented":true,"kind":"function","modifiers":[],"name":"leastSignificantBit","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":719,"src":"1922:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":560,"name":"uint256","nodeType":"ElementaryTypeName","src":"1922:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1921:11:7"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":719,"src":"1956:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":563,"name":"uint8","nodeType":"ElementaryTypeName","src":"1956:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1955:9:7"},"scope":720,"src":"1893:894:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":721,"src":"187:2602:7"}],"src":"45:2745:7"},"id":7},"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol","exportedSymbols":{"FixedPoint128":[727]},"id":728,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":722,"literals":["solidity",">=","0.4",".0"],"nodeType":"PragmaDirective","src":"45:24:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":723,"nodeType":"StructuredDocumentation","src":"71:140:8","text":"@title FixedPoint128\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)"},"fullyImplemented":true,"id":727,"linearizedBaseContracts":[727],"name":"FixedPoint128","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":726,"mutability":"constant","name":"Q128","nodeType":"VariableDeclaration","scope":727,"src":"239:68:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":724,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"272:35:8","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"visibility":"internal"}],"scope":728,"src":"211:99:8"}],"src":"45:266:8"},"id":8},"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol","exportedSymbols":{"FixedPoint96":[737]},"id":738,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":729,"literals":["solidity",">=","0.4",".0"],"nodeType":"PragmaDirective","src":"45:24:9"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"71:174:9","text":"@title FixedPoint96\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n @dev Used in SqrtPriceMath.sol"},"fullyImplemented":true,"id":737,"linearizedBaseContracts":[737],"name":"FixedPoint96","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":733,"mutability":"constant","name":"RESOLUTION","nodeType":"VariableDeclaration","scope":737,"src":"272:39:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":731,"name":"uint8","nodeType":"ElementaryTypeName","src":"272:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3936","id":732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"309:2:9","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"visibility":"internal"},{"constant":true,"id":736,"mutability":"constant","name":"Q96","nodeType":"VariableDeclaration","scope":737,"src":"317:59:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307831303030303030303030303030303030303030303030303030","id":735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"349:27:9","typeDescriptions":{"typeIdentifier":"t_rational_79228162514264337593543950336_by_1","typeString":"int_const 79228162514264337593543950336"},"value":"0x1000000000000000000000000"},"visibility":"internal"}],"scope":738,"src":"245:134:9"}],"src":"45:335:9"},"id":9},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","exportedSymbols":{"FullMath":[910]},"id":911,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":739,"literals":["solidity",">=","0.4",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"32:31:10"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"65:297:10","text":"@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"},"fullyImplemented":true,"id":910,"linearizedBaseContracts":[910],"name":"FullMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":865,"nodeType":"Block","src":"877:3648:10","statements":[{"assignments":[753],"declarations":[{"constant":false,"id":753,"mutability":"mutable","name":"prod0","nodeType":"VariableDeclaration","scope":865,"src":"1190:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":752,"name":"uint256","nodeType":"ElementaryTypeName","src":"1190:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":754,"nodeType":"VariableDeclarationStatement","src":"1190:13:10"},{"assignments":[756],"declarations":[{"constant":false,"id":756,"mutability":"mutable","name":"prod1","nodeType":"VariableDeclaration","scope":865,"src":"1258:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":755,"name":"uint256","nodeType":"ElementaryTypeName","src":"1258:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":757,"nodeType":"VariableDeclarationStatement","src":"1258:13:10"},{"AST":{"nodeType":"YulBlock","src":"1334:141:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1348:30:10","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"1365:1:10"},{"name":"b","nodeType":"YulIdentifier","src":"1368:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1375:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1371:3:10"},"nodeType":"YulFunctionCall","src":"1371:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"1358:6:10"},"nodeType":"YulFunctionCall","src":"1358:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"1352:2:10","type":""}]},{"nodeType":"YulAssignment","src":"1391:18:10","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"1404:1:10"},{"name":"b","nodeType":"YulIdentifier","src":"1407:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1400:3:10"},"nodeType":"YulFunctionCall","src":"1400:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"1391:5:10"}]},{"nodeType":"YulAssignment","src":"1422:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"1439:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"1443:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:10"},"nodeType":"YulFunctionCall","src":"1435:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"1454:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"1458:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1451:2:10"},"nodeType":"YulFunctionCall","src":"1451:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1431:3:10"},"nodeType":"YulFunctionCall","src":"1431:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"1422:5:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":743,"isOffset":false,"isSlot":false,"src":"1365:1:10","valueSize":1},{"declaration":743,"isOffset":false,"isSlot":false,"src":"1404:1:10","valueSize":1},{"declaration":745,"isOffset":false,"isSlot":false,"src":"1368:1:10","valueSize":1},{"declaration":745,"isOffset":false,"isSlot":false,"src":"1407:1:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"1391:5:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"1443:5:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"1458:5:10","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"1422:5:10","valueSize":1}],"id":758,"nodeType":"InlineAssembly","src":"1325:150:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":759,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"1547:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1547:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":772,"nodeType":"IfStatement","src":"1543:179:10","trueBody":{"id":771,"nodeType":"Block","src":"1559:163:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":763,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"1581:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1595:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1581:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":762,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1573:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1573:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"ExpressionStatement","src":"1573:24:10"},{"AST":{"nodeType":"YulBlock","src":"1620:65:10","statements":[{"nodeType":"YulAssignment","src":"1638:33:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"1652:5:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"1659:11:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1648:3:10"},"nodeType":"YulFunctionCall","src":"1648:23:10"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1638:6:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":747,"isOffset":false,"isSlot":false,"src":"1659:11:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"1652:5:10","valueSize":1},{"declaration":750,"isOffset":false,"isSlot":false,"src":"1638:6:10","valueSize":1}],"id":768,"nodeType":"InlineAssembly","src":"1611:74:10"},{"expression":{"id":769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1705:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":751,"id":770,"nodeType":"Return","src":"1698:13:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":774,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"1835:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":775,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"1849:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1835:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":773,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1827:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":778,"nodeType":"ExpressionStatement","src":"1827:28:10"},{"assignments":[780],"declarations":[{"constant":false,"id":780,"mutability":"mutable","name":"remainder","nodeType":"VariableDeclaration","scope":865,"src":"2132:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"2132:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":781,"nodeType":"VariableDeclarationStatement","src":"2132:17:10"},{"AST":{"nodeType":"YulBlock","src":"2168:62:10","statements":[{"nodeType":"YulAssignment","src":"2182:38:10","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"2202:1:10"},{"name":"b","nodeType":"YulIdentifier","src":"2205:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"2208:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2195:6:10"},"nodeType":"YulFunctionCall","src":"2195:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"2182:9:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":743,"isOffset":false,"isSlot":false,"src":"2202:1:10","valueSize":1},{"declaration":745,"isOffset":false,"isSlot":false,"src":"2205:1:10","valueSize":1},{"declaration":747,"isOffset":false,"isSlot":false,"src":"2208:11:10","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"2182:9:10","valueSize":1}],"id":782,"nodeType":"InlineAssembly","src":"2159:71:10"},{"AST":{"nodeType":"YulBlock","src":"2303:108:10","statements":[{"nodeType":"YulAssignment","src":"2317:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"2330:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"2340:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2351:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2337:2:10"},"nodeType":"YulFunctionCall","src":"2337:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2326:3:10"},"nodeType":"YulFunctionCall","src":"2326:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2317:5:10"}]},{"nodeType":"YulAssignment","src":"2371:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"2391:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2380:3:10"},"nodeType":"YulFunctionCall","src":"2380:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2371:5:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":753,"isOffset":false,"isSlot":false,"src":"2351:5:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"2371:5:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"2384:5:10","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"2317:5:10","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"2330:5:10","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"2340:9:10","valueSize":1},{"declaration":780,"isOffset":false,"isSlot":false,"src":"2391:9:10","valueSize":1}],"id":783,"nodeType":"InlineAssembly","src":"2294:117:10"},{"assignments":[785],"declarations":[{"constant":false,"id":785,"mutability":"mutable","name":"twos","nodeType":"VariableDeclaration","scope":865,"src":"2560:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"2560:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":790,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2575:12:10","subExpression":{"id":786,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"2576:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":788,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"2590:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2575:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2560:41:10"},{"AST":{"nodeType":"YulBlock","src":"2666:61:10","statements":[{"nodeType":"YulAssignment","src":"2680:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"2699:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"2712:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2695:3:10"},"nodeType":"YulFunctionCall","src":"2695:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"2680:11:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":747,"isOffset":false,"isSlot":false,"src":"2680:11:10","valueSize":1},{"declaration":747,"isOffset":false,"isSlot":false,"src":"2699:11:10","valueSize":1},{"declaration":785,"isOffset":false,"isSlot":false,"src":"2712:4:10","valueSize":1}],"id":791,"nodeType":"InlineAssembly","src":"2657:70:10"},{"AST":{"nodeType":"YulBlock","src":"2800:49:10","statements":[{"nodeType":"YulAssignment","src":"2814:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"2827:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"2834:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2823:3:10"},"nodeType":"YulFunctionCall","src":"2823:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2814:5:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":753,"isOffset":false,"isSlot":false,"src":"2814:5:10","valueSize":1},{"declaration":753,"isOffset":false,"isSlot":false,"src":"2827:5:10","valueSize":1},{"declaration":785,"isOffset":false,"isSlot":false,"src":"2834:4:10","valueSize":1}],"id":792,"nodeType":"InlineAssembly","src":"2791:58:10"},{"AST":{"nodeType":"YulBlock","src":"3037:63:10","statements":[{"nodeType":"YulAssignment","src":"3051:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3071:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"3074:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3067:3:10"},"nodeType":"YulFunctionCall","src":"3067:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3081:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3063:3:10"},"nodeType":"YulFunctionCall","src":"3063:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"3088:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:10"},"nodeType":"YulFunctionCall","src":"3059:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3051:4:10"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":785,"isOffset":false,"isSlot":false,"src":"3051:4:10","valueSize":1},{"declaration":785,"isOffset":false,"isSlot":false,"src":"3074:4:10","valueSize":1},{"declaration":785,"isOffset":false,"isSlot":false,"src":"3081:4:10","valueSize":1}],"id":793,"nodeType":"InlineAssembly","src":"3028:72:10"},{"expression":{"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":794,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"3109:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"3118:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":796,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"3126:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3118:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3109:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":799,"nodeType":"ExpressionStatement","src":"3109:21:10"},{"assignments":[801],"declarations":[{"constant":false,"id":801,"mutability":"mutable","name":"inv","nodeType":"VariableDeclaration","scope":865,"src":"3464:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":800,"name":"uint256","nodeType":"ElementaryTypeName","src":"3464:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":808,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3479:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":803,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"3483:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3479:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":805,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3478:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3498:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3478:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3464:35:10"},{"expression":{"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":809,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3714:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3721:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":811,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"3725:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":812,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3739:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3725:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3721:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3714:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":816,"nodeType":"ExpressionStatement","src":"3714:28:10"},{"expression":{"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":817,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3772:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3779:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":819,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"3783:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":820,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3797:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3783:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3779:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3772:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":824,"nodeType":"ExpressionStatement","src":"3772:28:10"},{"expression":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":825,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3831:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3838:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":827,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"3842:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":828,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3856:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3842:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3838:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3831:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":832,"nodeType":"ExpressionStatement","src":"3831:28:10"},{"expression":{"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":833,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3890:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3897:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":835,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"3901:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":836,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3915:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3901:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3897:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3890:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":840,"nodeType":"ExpressionStatement","src":"3890:28:10"},{"expression":{"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":841,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3949:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3956:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":843,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"3960:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":844,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3974:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3960:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3956:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3949:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":848,"nodeType":"ExpressionStatement","src":"3949:28:10"},{"expression":{"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":849,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"4009:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4016:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":851,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"4020:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":852,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"4034:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4020:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4016:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4009:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":856,"nodeType":"ExpressionStatement","src":"4009:28:10"},{"expression":{"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":857,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"4475:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":858,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"4484:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":859,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"4492:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4484:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4475:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":862,"nodeType":"ExpressionStatement","src":"4475:20:10"},{"expression":{"id":863,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"4512:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":751,"id":864,"nodeType":"Return","src":"4505:13:10"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"385:359:10","text":"@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"},"id":866,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":866,"src":"774:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"774:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":866,"src":"793:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":744,"name":"uint256","nodeType":"ElementaryTypeName","src":"793:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":866,"src":"812:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":746,"name":"uint256","nodeType":"ElementaryTypeName","src":"812:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"764:73:10"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":866,"src":"861:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":749,"name":"uint256","nodeType":"ElementaryTypeName","src":"861:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"860:16:10"},"scope":910,"src":"749:3776:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":908,"nodeType":"Block","src":"4945:177:10","statements":[{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":878,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"4955:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":880,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"4971:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":881,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"4974:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":882,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"4977:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":879,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"4964:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4964:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4955:34:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":885,"nodeType":"ExpressionStatement","src":"4955:34:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":887,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"5010:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":888,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"5013:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":889,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5016:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":886,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5003:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5003:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5031:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5003:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":907,"nodeType":"IfStatement","src":"4999:117:10","trueBody":{"id":906,"nodeType":"Block","src":"5034:82:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":894,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"5056:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5070:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"5070:7:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":895,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5065:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5065:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"5065:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5056:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":893,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5048:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5048:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":902,"nodeType":"ExpressionStatement","src":"5048:35:10"},{"expression":{"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5097:8:10","subExpression":{"id":903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"5097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":905,"nodeType":"ExpressionStatement","src":"5097:8:10"}]}}]},"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"4531:271:10","text":"@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"},"id":909,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivRoundingUp","nodeType":"FunctionDefinition","parameters":{"id":874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":909,"src":"4842:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":868,"name":"uint256","nodeType":"ElementaryTypeName","src":"4842:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":871,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":909,"src":"4861:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"4861:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":873,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":909,"src":"4880:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":872,"name":"uint256","nodeType":"ElementaryTypeName","src":"4880:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4832:73:10"},"returnParameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":876,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":909,"src":"4929:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":875,"name":"uint256","nodeType":"ElementaryTypeName","src":"4929:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4928:16:10"},"scope":910,"src":"4807:315:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":911,"src":"362:4762:10"}],"src":"32:5093:10"},"id":10},"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol","exportedSymbols":{"LiquidityMath":[962]},"id":963,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":912,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:11"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"71:38:11","text":"@title Math library for liquidity"},"fullyImplemented":true,"id":962,"linearizedBaseContracts":[962],"name":"LiquidityMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":960,"nodeType":"Block","src":"456:163:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int128","typeString":"int128"},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":923,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"470:1:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"474:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"470:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":958,"nodeType":"Block","src":"548:65:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":944,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"571:1:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":945,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"575:1:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"id":948,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"587:1:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"579:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":946,"name":"uint128","nodeType":"ElementaryTypeName","src":"579:7:11","typeDescriptions":{}}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"579:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"575:14:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"571:18:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":952,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"570:20:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":953,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"594:1:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"570:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c41","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"597:4:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383","typeString":"literal_string \"LA\""},"value":"LA"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383","typeString":"literal_string \"LA\""}],"id":943,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"562:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"562:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":957,"nodeType":"ExpressionStatement","src":"562:40:11"}]},"id":959,"nodeType":"IfStatement","src":"466:147:11","trueBody":{"id":942,"nodeType":"Block","src":"477:65:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":927,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"500:1:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"504:1:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"516:2:11","subExpression":{"id":931,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"517:1:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"508:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":929,"name":"uint128","nodeType":"ElementaryTypeName","src":"508:7:11","typeDescriptions":{}}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"508:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"504:15:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"500:19:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":936,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"499:21:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":937,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"523:1:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"499:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c53","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"526:4:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985","typeString":"literal_string \"LS\""},"value":"LS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985","typeString":"literal_string \"LS\""}],"id":926,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"491:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"491:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":941,"nodeType":"ExpressionStatement","src":"491:40:11"}]}}]},"documentation":{"id":914,"nodeType":"StructuredDocumentation","src":"137:241:11","text":"@notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n @param x The liquidity before change\n @param y The delta by which liquidity should be changed\n @return z The liquidity delta"},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"addDelta","nodeType":"FunctionDefinition","parameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":961,"src":"401:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":915,"name":"uint128","nodeType":"ElementaryTypeName","src":"401:7:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":918,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":961,"src":"412:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":917,"name":"int128","nodeType":"ElementaryTypeName","src":"412:6:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"400:21:11"},"returnParameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":921,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":961,"src":"445:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":920,"name":"uint128","nodeType":"ElementaryTypeName","src":"445:7:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"444:11:11"},"scope":962,"src":"383:236:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":963,"src":"109:512:11"}],"src":"45:577:11"},"id":11},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","exportedSymbols":{"LowGasSafeMath":[1092]},"id":1093,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":964,"literals":["solidity",">=","0.7",".0"],"nodeType":"PragmaDirective","src":"45:24:12"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"71:178:12","text":"@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"},"fullyImplemented":true,"id":1092,"linearizedBaseContracts":[1092],"name":"LowGasSafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":986,"nodeType":"Block","src":"504:42:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":976,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"523:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":977,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"527:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":978,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"531:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"527:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"523:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":981,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"522:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":982,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"537:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"522:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":975,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"514:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"514:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"ExpressionStatement","src":"514:25:12"}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"278:152:12","text":"@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":987,"src":"448:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":967,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":987,"src":"459:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"459:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"447:22:12"},"returnParameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":987,"src":"493:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":972,"name":"uint256","nodeType":"ElementaryTypeName","src":"493:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"492:11:12"},"scope":1092,"src":"435:111:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"779:42:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":998,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"798:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":999,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"802:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1000,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"806:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"802:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"798:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1003,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"797:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1004,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"812:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"797:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":997,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"789:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"789:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"789:25:12"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"552:153:12","text":"@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"},"id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1009,"src":"723:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":989,"name":"uint256","nodeType":"ElementaryTypeName","src":"723:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1009,"src":"734:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"722:22:12"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1009,"src":"768:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":994,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"767:11:12"},"scope":1092,"src":"710:111:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1036,"nodeType":"Block","src":"1055:56:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1020,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"1073:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1073:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1023,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"1084:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1024,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"1088:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1025,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"1092:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1088:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1084:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1028,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1083:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1029,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"1097:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1031,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"1102:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1073:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1019,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1065:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1065:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"1065:39:12"}]},"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"827:154:12","text":"@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"},"id":1037,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1037,"src":"999:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"999:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1037,"src":"1010:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1013,"name":"uint256","nodeType":"ElementaryTypeName","src":"1010:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"998:22:12"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1037,"src":"1044:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:11:12"},"scope":1092,"src":"986:125:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1063,"nodeType":"Block","src":"1342:54:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1048,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"1361:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"1365:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1050,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"1369:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1365:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1361:9:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1053,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1360:11:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1054,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"1375:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1360:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1056,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"1381:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1386:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1381:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1059,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1380:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1360:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1352:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1352:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1062,"nodeType":"ExpressionStatement","src":"1352:37:12"}]},"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"1117:154:12","text":"@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"},"id":1064,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1064,"src":"1289:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1039,"name":"int256","nodeType":"ElementaryTypeName","src":"1289:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1064,"src":"1299:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1041,"name":"int256","nodeType":"ElementaryTypeName","src":"1299:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1288:20:12"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1064,"src":"1332:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1044,"name":"int256","nodeType":"ElementaryTypeName","src":"1332:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1331:10:12"},"scope":1092,"src":"1276:120:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1090,"nodeType":"Block","src":"1639:54:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1075,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"1658:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1076,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"1662:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1077,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"1666:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1662:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1658:9:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1657:11:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1081,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"1672:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1657:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1083,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"1678:1:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1683:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1678:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1086,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1677:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1657:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1074,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1649:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1649:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1089,"nodeType":"ExpressionStatement","src":"1649:37:12"}]},"documentation":{"id":1065,"nodeType":"StructuredDocumentation","src":"1402:166:12","text":"@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"},"id":1091,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1091,"src":"1586:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1066,"name":"int256","nodeType":"ElementaryTypeName","src":"1586:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1069,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1091,"src":"1596:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1068,"name":"int256","nodeType":"ElementaryTypeName","src":"1596:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1585:20:12"},"returnParameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1091,"src":"1629:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1071,"name":"int256","nodeType":"ElementaryTypeName","src":"1629:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1628:10:12"},"scope":1092,"src":"1573:120:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1093,"src":"249:1446:12"}],"src":"45:1651:12"},"id":12},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","exportedSymbols":{"SafeCast":[1162]},"id":1163,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1094,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:13"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1095,"nodeType":"StructuredDocumentation","src":"71:94:13","text":"@title Safe casting methods\n @notice Contains methods for safely casting between types"},"fullyImplemented":true,"id":1162,"linearizedBaseContracts":[1162],"name":"SafeCast","nodeType":"ContractDefinition","nodes":[{"body":{"id":1115,"nodeType":"Block","src":"421:47:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1104,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"440:1:13","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1107,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"452:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"444:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1105,"name":"uint160","nodeType":"ElementaryTypeName","src":"444:7:13","typeDescriptions":{}}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"444:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"440:14:13","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"439:16:13","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1111,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"459:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"439:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"431:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"431:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1114,"nodeType":"ExpressionStatement","src":"431:30:13"}]},"documentation":{"id":1096,"nodeType":"StructuredDocumentation","src":"188:164:13","text":"@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"},"id":1116,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nodeType":"FunctionDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1098,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1116,"src":"376:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1097,"name":"uint256","nodeType":"ElementaryTypeName","src":"376:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"375:11:13"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1116,"src":"410:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1100,"name":"uint160","nodeType":"ElementaryTypeName","src":"410:7:13","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"409:11:13"},"scope":1162,"src":"357:111:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1136,"nodeType":"Block","src":"713:46:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1125,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"732:1:13","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1128,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"743:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"736:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":1126,"name":"int128","nodeType":"ElementaryTypeName","src":"736:6:13","typeDescriptions":{}}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"736:9:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"732:13:13","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"id":1131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"731:15:13","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1132,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"750:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"731:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"723:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"723:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1135,"nodeType":"ExpressionStatement","src":"723:29:13"}]},"documentation":{"id":1117,"nodeType":"StructuredDocumentation","src":"474:173:13","text":"@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"},"id":1137,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nodeType":"FunctionDefinition","parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1119,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1137,"src":"670:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1118,"name":"int256","nodeType":"ElementaryTypeName","src":"670:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"669:10:13"},"returnParameters":{"id":1123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1137,"src":"703:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1121,"name":"int128","nodeType":"ElementaryTypeName","src":"703:6:13","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"702:10:13"},"scope":1162,"src":"652:107:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1160,"nodeType":"Block","src":"986:59:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1146,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"1004:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":1149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1008:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323535","id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1011:3:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1008:6:13","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"src":"1004:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"996:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"996:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1152,"nodeType":"ExpressionStatement","src":"996:19:13"},{"expression":{"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1153,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"1025:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1156,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"1036:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1029:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1154,"name":"int256","nodeType":"ElementaryTypeName","src":"1029:6:13","typeDescriptions":{}}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1029:9:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1025:13:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1159,"nodeType":"ExpressionStatement","src":"1025:13:13"}]},"documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"765:154:13","text":"@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"},"id":1161,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1161,"src":"942:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"941:11:13"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1161,"src":"976:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1142,"name":"int256","nodeType":"ElementaryTypeName","src":"976:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"975:10:13"},"scope":1162,"src":"924:121:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1163,"src":"165:882:13"}],"src":"45:1003:13"},"id":13},"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol","exportedSymbols":{"FixedPoint96":[737],"FullMath":[910],"LowGasSafeMath":[1092],"SafeCast":[1162],"SqrtPriceMath":[1678],"UnsafeMath":[2490]},"id":1679,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":1164,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"37:24:14"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","file":"./LowGasSafeMath.sol","id":1165,"nodeType":"ImportDirective","scope":1679,"sourceUnit":1093,"src":"63:30:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","file":"./SafeCast.sol","id":1166,"nodeType":"ImportDirective","scope":1679,"sourceUnit":1163,"src":"94:24:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","file":"./FullMath.sol","id":1167,"nodeType":"ImportDirective","scope":1679,"sourceUnit":911,"src":"120:24:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol","file":"./UnsafeMath.sol","id":1168,"nodeType":"ImportDirective","scope":1679,"sourceUnit":2491,"src":"145:26:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol","file":"./FixedPoint96.sol","id":1169,"nodeType":"ImportDirective","scope":1679,"sourceUnit":738,"src":"172:28:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1170,"nodeType":"StructuredDocumentation","src":"202:167:14","text":"@title Functions based on Q64.96 sqrt price and liquidity\n @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas"},"fullyImplemented":true,"id":1678,"linearizedBaseContracts":[1678],"name":"SqrtPriceMath","nodeType":"ContractDefinition","nodes":[{"id":1173,"libraryName":{"id":1171,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1092,"src":"403:14:14","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1092","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"397:33:14","typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"422:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":1176,"libraryName":{"id":1174,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1162,"src":"441:8:14","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1162","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"435:27:14","typeName":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"454:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"body":{"id":1295,"nodeType":"Block","src":"1585:1186:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1190,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1711:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1711:11:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"nodeType":"IfStatement","src":"1707:32:14","trueBody":{"expression":{"id":1193,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"1731:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1189,"id":1194,"nodeType":"Return","src":"1724:15:14"}},{"assignments":[1197],"declarations":[{"constant":false,"id":1197,"mutability":"mutable","name":"numerator1","nodeType":"VariableDeclaration","scope":1295,"src":"1749:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1205,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1200,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"1778:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":1199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1770:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1770:7:14","typeDescriptions":{}}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1770:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1202,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1792:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":733,"src":"1792:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1770:45:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1749:66:14"},{"condition":{"id":1206,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"1830:3:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1293,"nodeType":"Block","src":"2321:444:14","statements":[{"assignments":[1259],"declarations":[{"constant":false,"id":1259,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":1293,"src":"2335:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"2335:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1260,"nodeType":"VariableDeclarationStatement","src":"2335:15:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1262,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"2531:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1263,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"2541:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1264,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2550:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2541:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2531:27:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1267,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2530:29:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1268,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"2562:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2530:38:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1270,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2572:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2530:50:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1272,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2584:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1273,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"2597:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2584:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2530:74:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1261,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2522:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2522:83:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"ExpressionStatement","src":"2522:83:14"},{"assignments":[1279],"declarations":[{"constant":false,"id":1279,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":1293,"src":"2619:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1278,"name":"uint256","nodeType":"ElementaryTypeName","src":"2619:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1283,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1280,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2641:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1281,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"2654:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:20:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2619:42:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1286,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2708:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1287,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2720:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1288,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"2730:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1284,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2682:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":909,"src":"2682:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2682:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toUint160","nodeType":"MemberAccess","referencedDeclaration":1116,"src":"2682:70:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint160)"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2682:72:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1189,"id":1292,"nodeType":"Return","src":"2675:79:14"}]},"id":1294,"nodeType":"IfStatement","src":"1826:939:14","trueBody":{"id":1257,"nodeType":"Block","src":"1835:480:14","statements":[{"assignments":[1208],"declarations":[{"constant":false,"id":1208,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":1257,"src":"1849:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1209,"nodeType":"VariableDeclarationStatement","src":"1849:15:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1210,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1883:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1211,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1893:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1212,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"1902:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1893:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1883:27:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1215,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1882:29:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1216,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"1914:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1882:38:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1218,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"1924:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1882:50:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1241,"nodeType":"IfStatement","src":"1878:323:14","trueBody":{"id":1240,"nodeType":"Block","src":"1934:267:14","statements":[{"assignments":[1221],"declarations":[{"constant":false,"id":1221,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":1240,"src":"1952:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"1952:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1225,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1222,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1974:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1223,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"1987:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1974:20:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1952:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1226,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"2016:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1227,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2031:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1239,"nodeType":"IfStatement","src":"2012:174:14","trueBody":{"expression":{"arguments":[{"arguments":[{"id":1233,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2151:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1234,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2163:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1235,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"2173:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1231,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2125:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":909,"src":"2125:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2125:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2117:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1229,"name":"uint160","nodeType":"ElementaryTypeName","src":"2117:7:14","typeDescriptions":{}}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2117:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1189,"id":1238,"nodeType":"Return","src":"2110:76:14"}}]}},{"expression":{"arguments":[{"arguments":[{"id":1246,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2255:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1252,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"2295:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"2268:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1248,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2281:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2268:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1250,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2267:23:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":987,"src":"2267:27:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2267:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1244,"name":"UnsafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"2230:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UnsafeMath_$2490_$","typeString":"type(library UnsafeMath)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"divRoundingUp","nodeType":"MemberAccess","referencedDeclaration":2489,"src":"2230:24:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2230:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2222:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1242,"name":"uint160","nodeType":"ElementaryTypeName","src":"2222:7:14","typeDescriptions":{}}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2222:82:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1189,"id":1256,"nodeType":"Return","src":"2215:89:14"}]}}]},"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"468:932:14","text":"@notice Gets the next sqrt price given a delta of token0\n @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n price less in order to not send too much output.\n The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token0 to add or remove from virtual reserves\n @param add Whether to add or remove the amount of token0\n @return The price after adding or removing amount, depending on add"},"id":1296,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromAmount0RoundingUp","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1296,"src":"1461:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1178,"name":"uint160","nodeType":"ElementaryTypeName","src":"1461:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1296,"src":"1487:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1180,"name":"uint128","nodeType":"ElementaryTypeName","src":"1487:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1296,"src":"1514:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"1514:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"add","nodeType":"VariableDeclaration","scope":1296,"src":"1538:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1184,"name":"bool","nodeType":"ElementaryTypeName","src":"1538:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1451:101:14"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1296,"src":"1576:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1187,"name":"uint160","nodeType":"ElementaryTypeName","src":"1576:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1575:9:14"},"scope":1678,"src":"1405:1366:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1390,"nodeType":"Block","src":"3779:971:14","statements":[{"condition":{"id":1310,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"3947:3:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1388,"nodeType":"Block","src":"4303:441:14","statements":[{"assignments":[1349],"declarations":[{"constant":false,"id":1349,"mutability":"mutable","name":"quotient","nodeType":"VariableDeclaration","scope":1388,"src":"4317:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1348,"name":"uint256","nodeType":"ElementaryTypeName","src":"4317:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1374,"initialValue":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1350,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4374:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1352,"name":"uint160","nodeType":"ElementaryTypeName","src":"4389:7:14","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1351,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4384:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4384:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4384:17:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4374:27:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1367,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4551:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1368,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4559:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":736,"src":"4559:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1370,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"4577:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1365,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4525:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":909,"src":"4525:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4525:62:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4374:213:14","trueExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1359,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4453:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1360,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4463:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":733,"src":"4463:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4453:33:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1363,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"4488:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1357,"name":"UnsafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"4428:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UnsafeMath_$2490_$","typeString":"type(library UnsafeMath)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"divRoundingUp","nodeType":"MemberAccess","referencedDeclaration":2489,"src":"4428:24:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4428:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1373,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4352:253:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4317:288:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1376,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"4628:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1377,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"4639:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4628:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4620:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4620:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1380,"nodeType":"ExpressionStatement","src":"4620:28:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1383,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"4713:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1384,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"4724:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4713:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4705:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1381,"name":"uint160","nodeType":"ElementaryTypeName","src":"4705:7:14","typeDescriptions":{}}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4705:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1309,"id":1387,"nodeType":"Return","src":"4698:35:14"}]},"id":1389,"nodeType":"IfStatement","src":"3943:801:14","trueBody":{"id":1347,"nodeType":"Block","src":"3952:345:14","statements":[{"assignments":[1312],"declarations":[{"constant":false,"id":1312,"mutability":"mutable","name":"quotient","nodeType":"VariableDeclaration","scope":1347,"src":"3966:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1311,"name":"uint256","nodeType":"ElementaryTypeName","src":"3966:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1336,"initialValue":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1313,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4023:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4038:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1315,"name":"uint160","nodeType":"ElementaryTypeName","src":"4038:7:14","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1314,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4033:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4033:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4033:17:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4023:27:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1329,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4167:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1330,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4175:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":736,"src":"4175:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1332,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"4193:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1327,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4151:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":866,"src":"4151:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4151:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4023:180:14","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4078:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1321,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4088:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":733,"src":"4088:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4078:33:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4077:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1325,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"4115:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"4077:47:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4001:220:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3966:255:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1342,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"4265:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1339,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"4251:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"4243:7:14","typeDescriptions":{}}},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4243:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":987,"src":"4243:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4243:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toUint160","nodeType":"MemberAccess","referencedDeclaration":1116,"src":"4243:41:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint160)"}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4243:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1309,"id":1346,"nodeType":"Return","src":"4236:50:14"}]}}]},"documentation":{"id":1297,"nodeType":"StructuredDocumentation","src":"2777:815:14","text":"@notice Gets the next sqrt price given a delta of token1\n @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n price less in order to not send too much output.\n The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token1 to add, or remove, from virtual reserves\n @param add Whether to add, or remove, the amount of token1\n @return The price after adding or removing `amount`"},"id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromAmount1RoundingDown","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1391,"src":"3655:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1298,"name":"uint160","nodeType":"ElementaryTypeName","src":"3655:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1301,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1391,"src":"3681:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1300,"name":"uint128","nodeType":"ElementaryTypeName","src":"3681:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1303,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1391,"src":"3708:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"3708:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"add","nodeType":"VariableDeclaration","scope":1391,"src":"3732:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1304,"name":"bool","nodeType":"ElementaryTypeName","src":"3732:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3645:101:14"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1391,"src":"3770:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1307,"name":"uint160","nodeType":"ElementaryTypeName","src":"3770:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"3769:9:14"},"scope":1678,"src":"3597:1153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1432,"nodeType":"Block","src":"5485:364:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1406,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"5503:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5514:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5503:12:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1405,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5495:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5495:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1410,"nodeType":"ExpressionStatement","src":"5495:21:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1412,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"5534:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5546:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5534:13:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1411,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5526:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5526:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1416,"nodeType":"ExpressionStatement","src":"5526:22:14"},{"expression":{"condition":{"id":1417,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"5644:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1425,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"5806:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1426,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"5816:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1427,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"5827:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5837:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1424,"name":"getNextSqrtPriceFromAmount1RoundingDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"5766:39:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5766:76:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5644:198:14","trueExpression":{"arguments":[{"id":1419,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"5711:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1420,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"5721:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1421,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"5732:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5742:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1418,"name":"getNextSqrtPriceFromAmount0RoundingUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"5673:37:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5673:74:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1404,"id":1431,"nodeType":"Return","src":"5625:217:14"}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"4756:538:14","text":"@notice Gets the next sqrt price given an input amount of token0 or token1\n @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n @param liquidity The amount of usable liquidity\n @param amountIn How much of token0, or token1, is being swapped in\n @param zeroForOne Whether the amount in is token0 or token1\n @return sqrtQX96 The price after adding the input amount to token0 or token1"},"id":1433,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromInput","nodeType":"FunctionDefinition","parameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1433,"src":"5343:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1393,"name":"uint160","nodeType":"ElementaryTypeName","src":"5343:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1433,"src":"5369:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1395,"name":"uint128","nodeType":"ElementaryTypeName","src":"5369:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":1433,"src":"5396:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"5396:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":1433,"src":"5422:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1399,"name":"bool","nodeType":"ElementaryTypeName","src":"5422:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5333:110:14"},"returnParameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"sqrtQX96","nodeType":"VariableDeclaration","scope":1433,"src":"5467:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1402,"name":"uint160","nodeType":"ElementaryTypeName","src":"5467:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"5466:18:14"},"scope":1678,"src":"5299:550:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1474,"nodeType":"Block","src":"6583:362:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1448,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"6601:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6612:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:12:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1447,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6593:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6593:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1452,"nodeType":"ExpressionStatement","src":"6593:21:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1454,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"6632:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6644:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6632:13:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1453,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6624:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6624:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1458,"nodeType":"ExpressionStatement","src":"6624:22:14"},{"expression":{"condition":{"id":1459,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"6736:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1467,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"6900:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1468,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"6910:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1469,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"6921:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6932:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1466,"name":"getNextSqrtPriceFromAmount0RoundingUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"6862:37:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6862:76:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6736:202:14","trueExpression":{"arguments":[{"id":1461,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"6805:8:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1462,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"6815:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1463,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"6826:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6837:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1460,"name":"getNextSqrtPriceFromAmount1RoundingDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"6765:39:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6765:78:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1446,"id":1473,"nodeType":"Return","src":"6717:221:14"}]},"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"5855:535:14","text":"@notice Gets the next sqrt price given an output amount of token0 or token1\n @dev Throws if price or liquidity are 0 or the next price is out of bounds\n @param sqrtPX96 The starting price before accounting for the output amount\n @param liquidity The amount of usable liquidity\n @param amountOut How much of token0, or token1, is being swapped out\n @param zeroForOne Whether the amount out is token0 or token1\n @return sqrtQX96 The price after removing the output amount of token0 or token1"},"id":1475,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromOutput","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1475,"src":"6440:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1435,"name":"uint160","nodeType":"ElementaryTypeName","src":"6440:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1475,"src":"6466:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1437,"name":"uint128","nodeType":"ElementaryTypeName","src":"6466:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":1475,"src":"6493:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"6493:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":1475,"src":"6520:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1441,"name":"bool","nodeType":"ElementaryTypeName","src":"6520:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6430:111:14"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"sqrtQX96","nodeType":"VariableDeclaration","scope":1475,"src":"6565:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1444,"name":"uint160","nodeType":"ElementaryTypeName","src":"6565:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"6564:18:14"},"scope":1678,"src":"6395:550:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1544,"nodeType":"Block","src":"7675:597:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"7689:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1490,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"7705:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7689:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1500,"nodeType":"IfStatement","src":"7685:98:14","trueBody":{"expression":{"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1492,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"7721:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1493,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"7736:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1494,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"7720:30:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1495,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"7754:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1496,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"7769:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1497,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7753:30:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"src":"7720:63:14","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1499,"nodeType":"ExpressionStatement","src":"7720:63:14"}},{"assignments":[1502],"declarations":[{"constant":false,"id":1502,"mutability":"mutable","name":"numerator1","nodeType":"VariableDeclaration","scope":1544,"src":"7794:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1501,"name":"uint256","nodeType":"ElementaryTypeName","src":"7794:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1510,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1505,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"7823:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":1504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7815:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"7815:7:14","typeDescriptions":{}}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7815:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1507,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"7837:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":733,"src":"7837:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7815:45:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7794:66:14"},{"assignments":[1512],"declarations":[{"constant":false,"id":1512,"mutability":"mutable","name":"numerator2","nodeType":"VariableDeclaration","scope":1544,"src":"7870:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1511,"name":"uint256","nodeType":"ElementaryTypeName","src":"7870:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1516,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1513,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"7891:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1514,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"7907:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7891:29:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"7870:50:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1518,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"7939:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7955:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7939:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7931:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7931:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1522,"nodeType":"ExpressionStatement","src":"7931:26:14"},{"expression":{"condition":{"id":1523,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"7987:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1536,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"8211:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1537,"name":"numerator2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"8223:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1538,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"8235:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":1534,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"8195:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":866,"src":"8195:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8195:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1540,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8252:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8195:70:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"7987:278:14","trueExpression":{"arguments":[{"arguments":[{"id":1528,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"8085:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1529,"name":"numerator2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"8097:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1530,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"8109:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":1526,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"8059:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":909,"src":"8059:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8059:64:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1532,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"8145:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":1524,"name":"UnsafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"8013:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UnsafeMath_$2490_$","typeString":"type(library UnsafeMath)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"divRoundingUp","nodeType":"MemberAccess","referencedDeclaration":2489,"src":"8013:24:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8013:163:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1488,"id":1543,"nodeType":"Return","src":"7968:297:14"}]},"documentation":{"id":1476,"nodeType":"StructuredDocumentation","src":"6951:537:14","text":"@notice Gets the amount0 delta between two prices\n @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up or down\n @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices"},"id":1545,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount0Delta","nodeType":"FunctionDefinition","parameters":{"id":1485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1545,"src":"7527:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1477,"name":"uint160","nodeType":"ElementaryTypeName","src":"7527:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1480,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1545,"src":"7558:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1479,"name":"uint160","nodeType":"ElementaryTypeName","src":"7558:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1545,"src":"7589:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1481,"name":"uint128","nodeType":"ElementaryTypeName","src":"7589:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1484,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","scope":1545,"src":"7616:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1483,"name":"bool","nodeType":"ElementaryTypeName","src":"7616:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7517:117:14"},"returnParameters":{"id":1488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1487,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1545,"src":"7658:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1486,"name":"uint256","nodeType":"ElementaryTypeName","src":"7658:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7657:17:14"},"scope":1678,"src":"7493:779:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"8909:350:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1559,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"8923:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1560,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"8939:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8923:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1570,"nodeType":"IfStatement","src":"8919:98:14","trueBody":{"expression":{"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1562,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"8955:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1563,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"8970:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1564,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"8954:30:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1565,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"8988:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1566,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"9003:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8987:30:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"src":"8954:63:14","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1569,"nodeType":"ExpressionStatement","src":"8954:63:14"}},{"expression":{"condition":{"id":1571,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"9047:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1583,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"9193:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1584,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"9204:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1585,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"9220:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"9204:29:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":1587,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"9235:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":736,"src":"9235:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1581,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"9177:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":866,"src":"9177:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9177:75:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9047:205:14","trueExpression":{"arguments":[{"id":1574,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"9099:9:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1575,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"9110:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1576,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"9126:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"9110:29:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":1578,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"9141:12:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$737_$","typeString":"type(library FixedPoint96)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":736,"src":"9141:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1572,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"9073:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":909,"src":"9073:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9073:85:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1558,"id":1591,"nodeType":"Return","src":"9028:224:14"}]},"documentation":{"id":1546,"nodeType":"StructuredDocumentation","src":"8278:444:14","text":"@notice Gets the amount1 delta between two prices\n @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up, or down\n @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices"},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount1Delta","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1593,"src":"8761:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1547,"name":"uint160","nodeType":"ElementaryTypeName","src":"8761:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1550,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1593,"src":"8792:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1549,"name":"uint160","nodeType":"ElementaryTypeName","src":"8792:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1552,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1593,"src":"8823:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1551,"name":"uint128","nodeType":"ElementaryTypeName","src":"8823:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","scope":1593,"src":"8850:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1553,"name":"bool","nodeType":"ElementaryTypeName","src":"8850:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8751:117:14"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1593,"src":"8892:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1556,"name":"uint256","nodeType":"ElementaryTypeName","src":"8892:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8891:17:14"},"scope":1678,"src":"8727:532:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1634,"nodeType":"Block","src":"9761:254:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int128","typeString":"int128"},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1605,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"9790:9:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9802:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9790:13:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1622,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"9942:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1623,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"9957:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1626,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"9980:9:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9972:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1624,"name":"uint128","nodeType":"ElementaryTypeName","src":"9972:7:14","typeDescriptions":{}}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9972:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9992:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1621,"name":"getAmount0Delta","nodeType":"Identifier","overloadedDeclarations":[1545,1635],"referencedDeclaration":1545,"src":"9926:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9926:71:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"9926:80:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9926:82:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9790:218:14","trueExpression":{"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9822:85:14","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1609,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"9839:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1610,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"9854:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9877:10:14","subExpression":{"id":1613,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"9878:9:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9869:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1611,"name":"uint128","nodeType":"ElementaryTypeName","src":"9869:7:14","typeDescriptions":{}}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9869:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9890:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1608,"name":"getAmount0Delta","nodeType":"Identifier","overloadedDeclarations":[1545,1635],"referencedDeclaration":1545,"src":"9823:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9823:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"9823:82:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9823:84:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1604,"id":1633,"nodeType":"Return","src":"9771:237:14"}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"9265:333:14","text":"@notice Helper that gets signed token0 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount0 delta\n @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices"},"id":1635,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount0Delta","nodeType":"FunctionDefinition","parameters":{"id":1601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1635,"src":"9637:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1595,"name":"uint160","nodeType":"ElementaryTypeName","src":"9637:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1635,"src":"9668:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1597,"name":"uint160","nodeType":"ElementaryTypeName","src":"9668:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1635,"src":"9699:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1599,"name":"int128","nodeType":"ElementaryTypeName","src":"9699:6:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"9627:94:14"},"returnParameters":{"id":1604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1635,"src":"9745:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1602,"name":"int256","nodeType":"ElementaryTypeName","src":"9745:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9744:16:14"},"scope":1678,"src":"9603:412:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1676,"nodeType":"Block","src":"10517:254:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int128","typeString":"int128"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1647,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"10546:9:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10558:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10546:13:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1664,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"10698:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1665,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"10713:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1668,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"10736:9:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10728:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1666,"name":"uint128","nodeType":"ElementaryTypeName","src":"10728:7:14","typeDescriptions":{}}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10728:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10748:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1663,"name":"getAmount1Delta","nodeType":"Identifier","overloadedDeclarations":[1593,1677],"referencedDeclaration":1593,"src":"10682:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10682:71:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"10682:80:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10682:82:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10546:218:14","trueExpression":{"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"10578:85:14","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1651,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"10595:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1652,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"10610:13:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"10633:10:14","subExpression":{"id":1655,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"10634:9:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10625:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1653,"name":"uint128","nodeType":"ElementaryTypeName","src":"10625:7:14","typeDescriptions":{}}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10625:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10646:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1650,"name":"getAmount1Delta","nodeType":"Identifier","overloadedDeclarations":[1593,1677],"referencedDeclaration":1593,"src":"10579:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10579:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"10579:82:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10579:84:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1646,"id":1675,"nodeType":"Return","src":"10527:237:14"}]},"documentation":{"id":1636,"nodeType":"StructuredDocumentation","src":"10021:333:14","text":"@notice Helper that gets signed token1 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount1 delta\n @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices"},"id":1677,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount1Delta","nodeType":"FunctionDefinition","parameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1677,"src":"10393:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1637,"name":"uint160","nodeType":"ElementaryTypeName","src":"10393:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1640,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1677,"src":"10424:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1639,"name":"uint160","nodeType":"ElementaryTypeName","src":"10424:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1677,"src":"10455:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1641,"name":"int128","nodeType":"ElementaryTypeName","src":"10455:6:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"10383:94:14"},"returnParameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1677,"src":"10501:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1644,"name":"int256","nodeType":"ElementaryTypeName","src":"10501:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"10500:16:14"},"scope":1678,"src":"10359:412:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1679,"src":"369:10404:14"}],"src":"37:10737:14"},"id":14},"@uniswap/v3-core/contracts/libraries/SwapMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/SwapMath.sol","exportedSymbols":{"FixedPoint96":[737],"FullMath":[910],"LowGasSafeMath":[1092],"SafeCast":[1162],"SqrtPriceMath":[1678],"SwapMath":[1939],"UnsafeMath":[2490]},"id":1940,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":1680,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"37:24:15"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","file":"./FullMath.sol","id":1681,"nodeType":"ImportDirective","scope":1940,"sourceUnit":911,"src":"63:24:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol","file":"./SqrtPriceMath.sol","id":1682,"nodeType":"ImportDirective","scope":1940,"sourceUnit":1679,"src":"88:29:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1683,"nodeType":"StructuredDocumentation","src":"119:173:15","text":"@title Computes the result of a swap within ticks\n @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick."},"fullyImplemented":true,"id":1939,"linearizedBaseContracts":[1939],"name":"SwapMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":1937,"nodeType":"Block","src":"1769:2861:15","statements":[{"assignments":[1706],"declarations":[{"constant":false,"id":1706,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":1937,"src":"1779:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1705,"name":"bool","nodeType":"ElementaryTypeName","src":"1779:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1710,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1707,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"1797:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1708,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"1820:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1797:41:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1779:59:15"},{"assignments":[1712],"declarations":[{"constant":false,"id":1712,"mutability":"mutable","name":"exactIn","nodeType":"VariableDeclaration","scope":1937,"src":"1848:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1711,"name":"bool","nodeType":"ElementaryTypeName","src":"1848:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1716,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1713,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"1863:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1882:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1863:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1848:35:15"},{"condition":{"id":1717,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"1898:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1815,"nodeType":"Block","src":"2629:619:15","statements":[{"expression":{"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1770,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2643:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":1771,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"2655:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1781,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2821:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1782,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2842:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1783,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"2862:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2873:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1779,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2791:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1545,"src":"2791:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2791:88:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2655:224:15","trueExpression":{"arguments":[{"id":1774,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2714:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1775,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2734:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1776,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"2755:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2766:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1772,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2684:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"2684:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2684:88:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2643:236:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1788,"nodeType":"ExpressionStatement","src":"2643:236:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2905:16:15","subExpression":{"id":1791,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"2906:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2897:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"2897:7:15","typeDescriptions":{}}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2897:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1794,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2926:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2897:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1800,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3009:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1803,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"3090:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1804,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3131:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"arguments":[{"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3170:16:15","subExpression":{"id":1807,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"3171:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3162:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"3162:7:15","typeDescriptions":{}}},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3162:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1810,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"3209:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1801,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3028:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getNextSqrtPriceFromOutput","nodeType":"MemberAccess","referencedDeclaration":1475,"src":"3028:40:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3028:209:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3009:228:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1813,"nodeType":"ExpressionStatement","src":"3009:228:15"},"id":1814,"nodeType":"IfStatement","src":"2893:344:15","trueBody":{"expression":{"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1796,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"2937:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1797,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2956:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2937:37:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1799,"nodeType":"ExpressionStatement","src":"2937:37:15"}}]},"id":1816,"nodeType":"IfStatement","src":"1894:1354:15","trueBody":{"id":1769,"nodeType":"Block","src":"1907:716:15","statements":[{"assignments":[1719],"declarations":[{"constant":false,"id":1719,"mutability":"mutable","name":"amountRemainingLessFee","nodeType":"VariableDeclaration","scope":1769,"src":"1921:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"1921:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1731,"initialValue":{"arguments":[{"arguments":[{"id":1724,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"1978:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1970:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1970:7:15","typeDescriptions":{}}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1970:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"316536","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1996:3:15","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1727,"name":"feePips","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"2002:7:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"1996:13:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"hexValue":"316536","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2011:3:15","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"}],"expression":{"id":1720,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"1954:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":866,"src":"1954:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1954:61:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1921:94:15"},{"expression":{"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1732,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"2029:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":1733,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"2040:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1743,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2205:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1744,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2226:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1745,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"2246:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2257:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1741,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2175:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"2175:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2175:87:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2040:222:15","trueExpression":{"arguments":[{"id":1736,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2099:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1737,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2119:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1738,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"2140:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2151:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1734,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2069:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1545,"src":"2069:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2069:87:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2029:233:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1750,"nodeType":"ExpressionStatement","src":"2029:233:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1751,"name":"amountRemainingLessFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"2280:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1752,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"2306:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2280:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1758,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"2388:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1761,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2468:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1762,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"2509:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1763,"name":"amountRemainingLessFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"2540:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1764,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"2584:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1759,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2407:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getNextSqrtPriceFromInput","nodeType":"MemberAccess","referencedDeclaration":1433,"src":"2407:39:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2407:205:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2388:224:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1767,"nodeType":"ExpressionStatement","src":"2388:224:15"},"id":1768,"nodeType":"IfStatement","src":"2276:336:15","trueBody":{"expression":{"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1754,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"2316:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1755,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2335:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2316:37:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1757,"nodeType":"ExpressionStatement","src":"2316:37:15"}}]}},{"assignments":[1818],"declarations":[{"constant":false,"id":1818,"mutability":"mutable","name":"max","nodeType":"VariableDeclaration","scope":1937,"src":"3258:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1817,"name":"bool","nodeType":"ElementaryTypeName","src":"3258:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1822,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1819,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"3269:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1820,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3291:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3269:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3258:49:15"},{"condition":{"id":1823,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"3362:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1887,"nodeType":"Block","src":"3735:355:15","statements":[{"expression":{"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1856,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"3749:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1857,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"3760:3:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1858,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3767:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3760:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1863,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"3850:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1864,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3871:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1865,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3889:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3900:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1861,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3820:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"3820:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3820:85:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3760:145:15","trueExpression":{"id":1860,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"3793:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3749:156:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1870,"nodeType":"ExpressionStatement","src":"3749:156:15"},{"expression":{"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1871,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"3919:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1872,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"3931:3:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3938:8:15","subExpression":{"id":1873,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3939:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3931:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1879,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"4023:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1880,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"4044:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1881,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"4062:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4073:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1877,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3993:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1545,"src":"3993:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3993:86:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3931:148:15","trueExpression":{"id":1876,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"3965:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3919:160:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1886,"nodeType":"ExpressionStatement","src":"3919:160:15"}]},"id":1888,"nodeType":"IfStatement","src":"3358:732:15","trueBody":{"id":1855,"nodeType":"Block","src":"3374:355:15","statements":[{"expression":{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1824,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"3388:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1825,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"3399:3:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1826,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3406:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3399:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1831,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3489:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1832,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"3507:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1833,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3528:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3539:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1829,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3459:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1545,"src":"3459:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3459:85:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3399:145:15","trueExpression":{"id":1828,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"3432:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3388:156:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1838,"nodeType":"ExpressionStatement","src":"3388:156:15"},{"expression":{"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1839,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"3558:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1840,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"3570:3:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3577:8:15","subExpression":{"id":1841,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3578:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3570:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1847,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3662:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1848,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"3680:19:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1849,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3701:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3712:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1845,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3632:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1678_$","typeString":"type(library SqrtPriceMath)"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1593,"src":"3632:29:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3632:86:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3570:148:15","trueExpression":{"id":1844,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"3604:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3558:160:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1854,"nodeType":"ExpressionStatement","src":"3558:160:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4179:8:15","subExpression":{"id":1889,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4180:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1891,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"4191:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4211:16:15","subExpression":{"id":1894,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4212:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4203:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"4203:7:15","typeDescriptions":{}}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4203:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4191:37:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4179:49:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1908,"nodeType":"IfStatement","src":"4175:117:15","trueBody":{"id":1907,"nodeType":"Block","src":"4230:62:15","statements":[{"expression":{"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1899,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"4244:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4264:16:15","subExpression":{"id":1902,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4265:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4256:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1900,"name":"uint256","nodeType":"ElementaryTypeName","src":"4256:7:15","typeDescriptions":{}}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4256:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4244:37:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1906,"nodeType":"ExpressionStatement","src":"4244:37:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1909,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4306:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1910,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"4317:16:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1911,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"4337:18:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4317:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4306:49:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1935,"nodeType":"Block","src":"4528:96:15","statements":[{"expression":{"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1924,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4542:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1927,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"4580:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1928,"name":"feePips","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4590:7:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"316536","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4599:3:15","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1930,"name":"feePips","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4605:7:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"4599:13:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":1925,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4554:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$910_$","typeString":"type(library FullMath)"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":909,"src":"4554:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4554:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4542:71:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1934,"nodeType":"ExpressionStatement","src":"4542:71:15"}]},"id":1936,"nodeType":"IfStatement","src":"4302:322:15","trueBody":{"id":1923,"nodeType":"Block","src":"4357:165:15","statements":[{"expression":{"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1914,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4464:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1917,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4484:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4476:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"4476:7:15","typeDescriptions":{}}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4476:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1919,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"4503:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4476:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4464:47:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1922,"nodeType":"ExpressionStatement","src":"4464:47:15"}]}}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"315:1071:15","text":"@notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n @param sqrtRatioCurrentX96 The current sqrt price of the pool\n @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n @param liquidity The usable liquidity\n @param amountRemaining How much input or output amount is remaining to be swapped in/out\n @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n @return feeAmount The amount of input that will be taken as a fee"},"id":1938,"implemented":true,"kind":"function","modifiers":[],"name":"computeSwapStep","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"sqrtRatioCurrentX96","nodeType":"VariableDeclaration","scope":1938,"src":"1425:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1685,"name":"uint160","nodeType":"ElementaryTypeName","src":"1425:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"sqrtRatioTargetX96","nodeType":"VariableDeclaration","scope":1938,"src":"1462:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1687,"name":"uint160","nodeType":"ElementaryTypeName","src":"1462:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1690,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1938,"src":"1498:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1689,"name":"uint128","nodeType":"ElementaryTypeName","src":"1498:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"amountRemaining","nodeType":"VariableDeclaration","scope":1938,"src":"1525:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1691,"name":"int256","nodeType":"ElementaryTypeName","src":"1525:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"feePips","nodeType":"VariableDeclaration","scope":1938,"src":"1557:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1693,"name":"uint24","nodeType":"ElementaryTypeName","src":"1557:6:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"1415:162:15"},"returnParameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"sqrtRatioNextX96","nodeType":"VariableDeclaration","scope":1938,"src":"1638:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1696,"name":"uint160","nodeType":"ElementaryTypeName","src":"1638:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1699,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":1938,"src":"1676:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1698,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1701,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":1938,"src":"1706:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"1706:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1703,"mutability":"mutable","name":"feeAmount","nodeType":"VariableDeclaration","scope":1938,"src":"1737:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1737:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1624:140:15"},"scope":1939,"src":"1391:3239:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1940,"src":"292:4340:15"}],"src":"37:4596:15"},"id":15},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/TickMath.sol","exportedSymbols":{"TickMath":[2474]},"id":2475,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1941,"literals":["solidity",">=","0.5",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"45:31:16"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1942,"nodeType":"StructuredDocumentation","src":"78:235:16","text":"@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"},"fullyImplemented":true,"id":2474,"linearizedBaseContracts":[2474],"name":"TickMath","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":1943,"nodeType":"StructuredDocumentation","src":"336:108:16","text":"@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"},"id":1947,"mutability":"constant","name":"MIN_TICK","nodeType":"VariableDeclaration","scope":2474,"src":"449:42:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1944,"name":"int24","nodeType":"ElementaryTypeName","src":"449:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":1946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"484:7:16","subExpression":{"hexValue":"383837323732","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"485:6:16","typeDescriptions":{"typeIdentifier":"t_rational_887272_by_1","typeString":"int_const 887272"},"value":"887272"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_887272_by_1","typeString":"int_const -887272"}},"visibility":"internal"},{"constant":true,"documentation":{"id":1948,"nodeType":"StructuredDocumentation","src":"497:107:16","text":"@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"id":1952,"mutability":"constant","name":"MAX_TICK","nodeType":"VariableDeclaration","scope":2474,"src":"609:44:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1949,"name":"int24","nodeType":"ElementaryTypeName","src":"609:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":1951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"644:9:16","subExpression":{"id":1950,"name":"MIN_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"645:8:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":true,"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"660:116:16","text":"@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"id":1956,"mutability":"constant","name":"MIN_SQRT_RATIO","nodeType":"VariableDeclaration","scope":2474,"src":"781:53:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1954,"name":"uint160","nodeType":"ElementaryTypeName","src":"781:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"34323935313238373339","id":1955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"824:10:16","typeDescriptions":{"typeIdentifier":"t_rational_4295128739_by_1","typeString":"int_const 4295128739"},"value":"4295128739"},"visibility":"internal"},{"constant":true,"documentation":{"id":1957,"nodeType":"StructuredDocumentation","src":"840:116:16","text":"@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"id":1960,"mutability":"constant","name":"MAX_SQRT_RATIO","nodeType":"VariableDeclaration","scope":2474,"src":"961:92:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1958,"name":"uint160","nodeType":"ElementaryTypeName","src":"961:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432","id":1959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:49:16","typeDescriptions":{"typeIdentifier":"t_rational_1461446703485210103287273052203988822378723970342_by_1","typeString":"int_const 1461...(41 digits omitted)...0342"},"value":"1461446703485210103287273052203988822378723970342"},"visibility":"internal"},{"body":{"id":2333,"nodeType":"Block","src":"1447:2495:16","statements":[{"assignments":[1969],"declarations":[{"constant":false,"id":1969,"mutability":"mutable","name":"absTick","nodeType":"VariableDeclaration","scope":2333,"src":"1457:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1989,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"1475:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1482:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1475:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":1985,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"1526:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":1984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1519:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1983,"name":"int256","nodeType":"ElementaryTypeName","src":"1519:6:16","typeDescriptions":{}}},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1519:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1982,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1511:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1511:7:16","typeDescriptions":{}}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1511:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1475:57:16","trueExpression":{"arguments":[{"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1494:13:16","subExpression":{"arguments":[{"id":1977,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"1502:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":1976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1495:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1975,"name":"int256","nodeType":"ElementaryTypeName","src":"1495:6:16","typeDescriptions":{}}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1495:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1486:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1973,"name":"uint256","nodeType":"ElementaryTypeName","src":"1486:7:16","typeDescriptions":{}}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1486:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1457:75:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1991,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"1550:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":1994,"name":"MAX_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"1569:8:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":1993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1561:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1992,"name":"uint256","nodeType":"ElementaryTypeName","src":"1561:7:16","typeDescriptions":{}}},"id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1561:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1550:28:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1580:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""},"value":"T"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""}],"id":1990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1542:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1542:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1999,"nodeType":"ExpressionStatement","src":"1542:42:16"},{"assignments":[2001],"declarations":[{"constant":false,"id":2001,"mutability":"mutable","name":"ratio","nodeType":"VariableDeclaration","scope":2333,"src":"1595:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2010,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2002,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"1611:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1621:3:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"},"src":"1611:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1628:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1611:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1669:35:16","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1611:93:16","trueExpression":{"hexValue":"30786666666362393333626436666164333761613264313632643161353934303031","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340265354078544963557816517032075149313_by_1","typeString":"int_const 3402...(31 digits omitted)...9313"},"value":"0xfffcb933bd6fad37aa2d162d1a594001"},"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"nodeType":"VariableDeclarationStatement","src":"1595:109:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"1718:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1728:3:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"0x2"},"src":"1718:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1718:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2025,"nodeType":"IfStatement","src":"1714:83:16","trueBody":{"expression":{"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2016,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1738:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1747:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663937323732333733643431333235396134363939303538306532313361","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340248342086729790484326174814286782778_by_1","typeString":"int_const 3402...(31 digits omitted)...2778"},"value":"0xfff97272373d413259a46990580e213a"},"src":"1747:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2020,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1746:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1746:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1738:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2024,"nodeType":"ExpressionStatement","src":"1738:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2026,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"1811:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1821:3:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"src":"1811:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1828:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1811:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2040,"nodeType":"IfStatement","src":"1807:83:16","trueBody":{"expression":{"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2031,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1831:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2032,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1840:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663265353066356636353639333265663132333537636633633766646363","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1848:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340214320654664324051920982716015181260_by_1","typeString":"int_const 3402...(31 digits omitted)...1260"},"value":"0xfff2e50f5f656932ef12357cf3c7fdcc"},"src":"1840:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1839:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1839:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1831:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2039,"nodeType":"ExpressionStatement","src":"1831:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2041,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"1904:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838","id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1914:3:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x8"},"src":"1904:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1921:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1904:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2055,"nodeType":"IfStatement","src":"1900:83:16","trueBody":{"expression":{"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2046,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1924:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2047,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1933:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666653563616361376531306534653631633336323465616130393431636430","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1941:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340146287995602323631171512101879684304_by_1","typeString":"int_const 3401...(31 digits omitted)...4304"},"value":"0xffe5caca7e10e4e61c3624eaa0941cd0"},"src":"1933:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2050,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1932:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1980:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1932:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1924:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2054,"nodeType":"ExpressionStatement","src":"1924:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2056,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"1997:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130","id":2057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:4:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"0x10"},"src":"1997:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2015:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1997:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2070,"nodeType":"IfStatement","src":"1993:84:16","trueBody":{"expression":{"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2061,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2018:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2062,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2027:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666636239383433643630663631353963396462353838333563393236363434","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2035:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340010263488231146823593991679159461444_by_1","typeString":"int_const 3400...(31 digits omitted)...1444"},"value":"0xffcb9843d60f6159c9db58835c926644"},"src":"2027:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2065,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2026:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2074:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2026:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2018:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2069,"nodeType":"ExpressionStatement","src":"2018:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2071,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2091:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2101:4:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"2091:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2109:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2091:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2085,"nodeType":"IfStatement","src":"2087:84:16","trueBody":{"expression":{"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2076,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2112:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2077,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2121:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666393733623431666139386330383134373265363839366466623235346330","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2129:34:16","typeDescriptions":{"typeIdentifier":"t_rational_339738377640345403697157401104375502016_by_1","typeString":"int_const 3397...(31 digits omitted)...2016"},"value":"0xff973b41fa98c081472e6896dfb254c0"},"src":"2121:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2120:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2168:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2120:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2112:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2084,"nodeType":"ExpressionStatement","src":"2112:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2086,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2185:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2195:4:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"src":"2185:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2203:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2185:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2100,"nodeType":"IfStatement","src":"2181:84:16","trueBody":{"expression":{"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2091,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2206:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2092,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2215:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666326561313634363663393661333834336563373862333236623532383631","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2223:34:16","typeDescriptions":{"typeIdentifier":"t_rational_339195258003219555707034227454543997025_by_1","typeString":"int_const 3391...(31 digits omitted)...7025"},"value":"0xff2ea16466c96a3843ec78b326b52861"},"src":"2215:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2095,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2214:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2262:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2214:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2206:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2099,"nodeType":"ExpressionStatement","src":"2206:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2101,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2279:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830","id":2102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2289:4:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"src":"2279:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2279:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2115,"nodeType":"IfStatement","src":"2275:84:16","trueBody":{"expression":{"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2106,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2300:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2107,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2309:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786665356465653034366139396132613831316334363166313936396333303533","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:34:16","typeDescriptions":{"typeIdentifier":"t_rational_338111622100601834656805679988414885971_by_1","typeString":"int_const 3381...(31 digits omitted)...5971"},"value":"0xfe5dee046a99a2a811c461f1969c3053"},"src":"2309:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2308:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2356:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2308:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2300:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2114,"nodeType":"ExpressionStatement","src":"2300:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2116,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2373:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078313030","id":2117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2383:5:16","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"0x100"},"src":"2373:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2392:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2373:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2130,"nodeType":"IfStatement","src":"2369:85:16","trueBody":{"expression":{"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2121,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2395:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2122,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2404:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786663626538366337393030613838616564636666633833623437396161336134","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2412:34:16","typeDescriptions":{"typeIdentifier":"t_rational_335954724994790223023589805789778977700_by_1","typeString":"int_const 3359...(31 digits omitted)...7700"},"value":"0xfcbe86c7900a88aedcffc83b479aa3a4"},"src":"2404:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2403:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2451:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2403:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2395:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2129,"nodeType":"ExpressionStatement","src":"2395:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2468:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078323030","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2478:5:16","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"value":"0x200"},"src":"2468:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2487:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2468:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2145,"nodeType":"IfStatement","src":"2464:85:16","trueBody":{"expression":{"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2136,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2490:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2499:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786639383761373235336163343133313736663262303734636637383135653534","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2507:34:16","typeDescriptions":{"typeIdentifier":"t_rational_331682121138379247127172139078559817300_by_1","typeString":"int_const 3316...(31 digits omitted)...7300"},"value":"0xf987a7253ac413176f2b074cf7815e54"},"src":"2499:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2140,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2498:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2546:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2498:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2490:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2144,"nodeType":"ExpressionStatement","src":"2490:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2146,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2563:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078343030","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2573:5:16","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"value":"0x400"},"src":"2563:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2582:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2563:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2160,"nodeType":"IfStatement","src":"2559:85:16","trueBody":{"expression":{"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2151,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2585:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2594:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786633333932623038323262373030303539343063376133393865346237306633","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2602:34:16","typeDescriptions":{"typeIdentifier":"t_rational_323299236684853023288211250268160618739_by_1","typeString":"int_const 3232...(31 digits omitted)...8739"},"value":"0xf3392b0822b70005940c7a398e4b70f3"},"src":"2594:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2593:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2641:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2593:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2585:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2159,"nodeType":"ExpressionStatement","src":"2585:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2161,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2658:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078383030","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2668:5:16","typeDescriptions":{"typeIdentifier":"t_rational_2048_by_1","typeString":"int_const 2048"},"value":"0x800"},"src":"2658:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2677:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2658:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2175,"nodeType":"IfStatement","src":"2654:85:16","trueBody":{"expression":{"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2166,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2680:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2167,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2689:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786537313539343735613263323962373434336232396337666136653838396439","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2697:34:16","typeDescriptions":{"typeIdentifier":"t_rational_307163716377032989948697243942600083929_by_1","typeString":"int_const 3071...(31 digits omitted)...3929"},"value":"0xe7159475a2c29b7443b29c7fa6e889d9"},"src":"2689:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2170,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2688:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2736:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2688:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2680:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2174,"nodeType":"ExpressionStatement","src":"2680:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2176,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2753:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831303030","id":2177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2763:6:16","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"},"value":"0x1000"},"src":"2753:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2773:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2753:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2190,"nodeType":"IfStatement","src":"2749:86:16","trueBody":{"expression":{"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2181,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2776:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2182,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2785:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786430393766336264666432303232623838343561643866373932616135383235","id":2183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2793:34:16","typeDescriptions":{"typeIdentifier":"t_rational_277268403626896220162999269216087595045_by_1","typeString":"int_const 2772...(31 digits omitted)...5045"},"value":"0xd097f3bdfd2022b8845ad8f792aa5825"},"src":"2785:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2784:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2832:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2784:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2776:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2189,"nodeType":"ExpressionStatement","src":"2776:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2849:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832303030","id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2859:6:16","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"value":"0x2000"},"src":"2849:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2869:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2849:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2205,"nodeType":"IfStatement","src":"2845:86:16","trueBody":{"expression":{"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2196,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2872:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2881:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786139663734363436326438373066646638613635646331663930653036316535","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2889:34:16","typeDescriptions":{"typeIdentifier":"t_rational_225923453940442621947126027127485391333_by_1","typeString":"int_const 2259...(31 digits omitted)...1333"},"value":"0xa9f746462d870fdf8a65dc1f90e061e5"},"src":"2881:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2880:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2928:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2880:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2872:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2204,"nodeType":"ExpressionStatement","src":"2872:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2206,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2945:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834303030","id":2207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2955:6:16","typeDescriptions":{"typeIdentifier":"t_rational_16384_by_1","typeString":"int_const 16384"},"value":"0x4000"},"src":"2945:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2965:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2945:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2220,"nodeType":"IfStatement","src":"2941:86:16","trueBody":{"expression":{"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2211,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2968:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2212,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"2977:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783730643836396131353664326131623839306262336466363262616633326637","id":2213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2985:34:16","typeDescriptions":{"typeIdentifier":"t_rational_149997214084966997727330242082538205943_by_1","typeString":"int_const 1499...(31 digits omitted)...5943"},"value":"0x70d869a156d2a1b890bb3df62baf32f7"},"src":"2977:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2215,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2976:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3024:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2976:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2968:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2219,"nodeType":"ExpressionStatement","src":"2968:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2221,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"3041:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838303030","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3051:6:16","typeDescriptions":{"typeIdentifier":"t_rational_32768_by_1","typeString":"int_const 32768"},"value":"0x8000"},"src":"3041:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3061:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3041:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2235,"nodeType":"IfStatement","src":"3037:86:16","trueBody":{"expression":{"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2226,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3064:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3073:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783331626531333566393764303866643938313233313530353534326663666136","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3081:34:16","typeDescriptions":{"typeIdentifier":"t_rational_66119101136024775622716233608466517926_by_1","typeString":"int_const 6611...(30 digits omitted)...7926"},"value":"0x31be135f97d08fd981231505542fcfa6"},"src":"3073:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3072:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3120:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3072:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3064:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2234,"nodeType":"ExpressionStatement","src":"3064:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"3137:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130303030","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:7:16","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"0x10000"},"src":"3137:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3158:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3137:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2250,"nodeType":"IfStatement","src":"3133:86:16","trueBody":{"expression":{"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2241,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3161:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2242,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3170:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307839616135303862356237613834653163363737646535346633653939626339","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3178:33:16","typeDescriptions":{"typeIdentifier":"t_rational_12847376061809297530290974190478138313_by_1","typeString":"int_const 1284...(30 digits omitted)...8313"},"value":"0x9aa508b5b7a84e1c677de54f3e99bc9"},"src":"3170:41:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2245,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3169:43:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3216:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3169:50:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3161:58:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2249,"nodeType":"ExpressionStatement","src":"3161:58:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2251,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"3233:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230303030","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3243:7:16","typeDescriptions":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"},"value":"0x20000"},"src":"3233:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3254:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2265,"nodeType":"IfStatement","src":"3229:85:16","trueBody":{"expression":{"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2256,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3257:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3266:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3078356436616638646564623831313936363939633332393232356565363034","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3274:32:16","typeDescriptions":{"typeIdentifier":"t_rational_485053260817066172746253684029974020_by_1","typeString":"int_const 4850...(28 digits omitted)...4020"},"value":"0x5d6af8dedb81196699c329225ee604"},"src":"3266:40:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2260,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3265:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3311:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3265:49:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:57:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2264,"nodeType":"ExpressionStatement","src":"3257:57:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2266,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"3328:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430303030","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3338:7:16","typeDescriptions":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"},"value":"0x40000"},"src":"3328:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3349:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3328:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2280,"nodeType":"IfStatement","src":"3324:83:16","trueBody":{"expression":{"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2271,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3352:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3361:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307832323136653538346635666131656139323630343162656466653938","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:30:16","typeDescriptions":{"typeIdentifier":"t_rational_691415978906521570653435304214168_by_1","typeString":"int_const 6914...(25 digits omitted)...4168"},"value":"0x2216e584f5fa1ea926041bedfe98"},"src":"3361:38:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2275,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3360:40:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3404:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3360:47:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3352:55:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2279,"nodeType":"ExpressionStatement","src":"3352:55:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2281,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"3421:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830303030","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3431:7:16","typeDescriptions":{"typeIdentifier":"t_rational_524288_by_1","typeString":"int_const 524288"},"value":"0x80000"},"src":"3421:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3442:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3421:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2295,"nodeType":"IfStatement","src":"3417:78:16","trueBody":{"expression":{"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2286,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3445:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3454:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783438613137303339316637646334323434346538666132","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:25:16","typeDescriptions":{"typeIdentifier":"t_rational_1404880482679654955896180642_by_1","typeString":"int_const 1404880482679654955896180642"},"value":"0x48a170391f7dc42444e8fa2"},"src":"3454:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3453:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3492:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3453:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3445:50:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2294,"nodeType":"ExpressionStatement","src":"3445:50:16"}},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2296,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"3510:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3517:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3510:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2309,"nodeType":"IfStatement","src":"3506:47:16","trueBody":{"expression":{"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2299,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3520:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3533:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"3533:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2300,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3528:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3528:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3528:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2305,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3548:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3528:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3520:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2308,"nodeType":"ExpressionStatement","src":"3520:33:16"}},{"expression":{"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2310,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"3863:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3887:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3896:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3887:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3886:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2317,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3903:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3912:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3917:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3912:7:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2321,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3911:9:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"3903:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3924:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3903:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"31","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3932:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3903:30:16","trueExpression":{"hexValue":"30","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3928:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2328,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3902:32:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3886:48:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3878:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2311,"name":"uint160","nodeType":"ElementaryTypeName","src":"3878:7:16","typeDescriptions":{}}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3878:57:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3863:72:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2332,"nodeType":"ExpressionStatement","src":"3863:72:16"}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"1060:297:16","text":"@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"},"id":2334,"implemented":true,"kind":"function","modifiers":[],"name":"getSqrtRatioAtTick","nodeType":"FunctionDefinition","parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2334,"src":"1390:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1962,"name":"int24","nodeType":"ElementaryTypeName","src":"1390:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1389:12:16"},"returnParameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2334,"src":"1425:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1965,"name":"uint160","nodeType":"ElementaryTypeName","src":"1425:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1424:22:16"},"scope":2474,"src":"1362:2580:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2472,"nodeType":"Block","src":"4446:4196:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"4563:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2344,"name":"MIN_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"4579:14:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4563:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"4597:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2347,"name":"MAX_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"4612:14:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4597:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4563:63:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4628:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""},"value":"R"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""}],"id":2342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4555:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4555:77:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2352,"nodeType":"ExpressionStatement","src":"4555:77:16"},{"assignments":[2354],"declarations":[{"constant":false,"id":2354,"mutability":"mutable","name":"ratio","nodeType":"VariableDeclaration","scope":2472,"src":"4642:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2353,"name":"uint256","nodeType":"ElementaryTypeName","src":"4642:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2361,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2357,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"4666:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4658:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2355,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:16","typeDescriptions":{}}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4658:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4683:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4658:27:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4642:43:16"},{"assignments":[2363],"declarations":[{"constant":false,"id":2363,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":2472,"src":"4696:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2362,"name":"uint256","nodeType":"ElementaryTypeName","src":"4696:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2365,"initialValue":{"id":2364,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4708:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4696:17:16"},{"assignments":[2367],"declarations":[{"constant":false,"id":2367,"mutability":"mutable","name":"msb","nodeType":"VariableDeclaration","scope":2472,"src":"4723:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2366,"name":"uint256","nodeType":"ElementaryTypeName","src":"4723:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2369,"initialValue":{"hexValue":"30","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4723:15:16"},{"AST":{"nodeType":"YulBlock","src":"4758:139:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4772:58:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4785:1:16","type":"","value":"7"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4791:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"4794:34:16","type":"","value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4788:2:16"},"nodeType":"YulFunctionCall","src":"4788:41:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4781:3:16"},"nodeType":"YulFunctionCall","src":"4781:49:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"4776:1:16","type":""}]},{"nodeType":"YulAssignment","src":"4843:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"4853:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"4858:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4850:2:16"},"nodeType":"YulFunctionCall","src":"4850:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"4843:3:16"}]},{"nodeType":"YulAssignment","src":"4873:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"4882:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"4885:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4878:3:16"},"nodeType":"YulFunctionCall","src":"4878:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4873:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"4843:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"4853:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"4791:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"4873:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"4885:1:16","valueSize":1}],"id":2370,"nodeType":"InlineAssembly","src":"4749:148:16"},{"AST":{"nodeType":"YulBlock","src":"4915:123:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4929:42:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4942:1:16","type":"","value":"6"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4948:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"4951:18:16","type":"","value":"0xFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4945:2:16"},"nodeType":"YulFunctionCall","src":"4945:25:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4938:3:16"},"nodeType":"YulFunctionCall","src":"4938:33:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"4933:1:16","type":""}]},{"nodeType":"YulAssignment","src":"4984:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"4994:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"4999:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4991:2:16"},"nodeType":"YulFunctionCall","src":"4991:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"4984:3:16"}]},{"nodeType":"YulAssignment","src":"5014:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5023:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5026:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5019:3:16"},"nodeType":"YulFunctionCall","src":"5019:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5014:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"4984:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"4994:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"4948:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5014:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5026:1:16","valueSize":1}],"id":2371,"nodeType":"InlineAssembly","src":"4906:132:16"},{"AST":{"nodeType":"YulBlock","src":"5056:115:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5070:34:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5083:1:16","type":"","value":"5"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5089:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5092:10:16","type":"","value":"0xFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5086:2:16"},"nodeType":"YulFunctionCall","src":"5086:17:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5079:3:16"},"nodeType":"YulFunctionCall","src":"5079:25:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5074:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5117:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5127:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5132:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5124:2:16"},"nodeType":"YulFunctionCall","src":"5124:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5117:3:16"}]},{"nodeType":"YulAssignment","src":"5147:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5156:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5159:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5152:3:16"},"nodeType":"YulFunctionCall","src":"5152:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5147:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5117:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5127:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5089:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5147:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5159:1:16","valueSize":1}],"id":2372,"nodeType":"InlineAssembly","src":"5047:124:16"},{"AST":{"nodeType":"YulBlock","src":"5189:111:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5203:30:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5216:1:16","type":"","value":"4"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5222:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5225:6:16","type":"","value":"0xFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5219:2:16"},"nodeType":"YulFunctionCall","src":"5219:13:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5212:3:16"},"nodeType":"YulFunctionCall","src":"5212:21:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5207:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5246:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5256:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5261:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5253:2:16"},"nodeType":"YulFunctionCall","src":"5253:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5246:3:16"}]},{"nodeType":"YulAssignment","src":"5276:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5285:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5288:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5281:3:16"},"nodeType":"YulFunctionCall","src":"5281:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5276:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5246:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5256:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5222:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5276:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5288:1:16","valueSize":1}],"id":2373,"nodeType":"InlineAssembly","src":"5180:120:16"},{"AST":{"nodeType":"YulBlock","src":"5318:109:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5332:28:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5345:1:16","type":"","value":"3"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5351:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5354:4:16","type":"","value":"0xFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5348:2:16"},"nodeType":"YulFunctionCall","src":"5348:11:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5341:3:16"},"nodeType":"YulFunctionCall","src":"5341:19:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5336:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5373:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5383:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5388:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5380:2:16"},"nodeType":"YulFunctionCall","src":"5380:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5373:3:16"}]},{"nodeType":"YulAssignment","src":"5403:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5412:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5415:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5408:3:16"},"nodeType":"YulFunctionCall","src":"5408:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5403:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5373:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5383:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5351:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5403:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5415:1:16","valueSize":1}],"id":2374,"nodeType":"InlineAssembly","src":"5309:118:16"},{"AST":{"nodeType":"YulBlock","src":"5445:108:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5459:27:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5472:1:16","type":"","value":"2"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5478:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5481:3:16","type":"","value":"0xF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5475:2:16"},"nodeType":"YulFunctionCall","src":"5475:10:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5468:3:16"},"nodeType":"YulFunctionCall","src":"5468:18:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5463:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5499:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5509:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5514:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5506:2:16"},"nodeType":"YulFunctionCall","src":"5506:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5499:3:16"}]},{"nodeType":"YulAssignment","src":"5529:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5538:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5541:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5534:3:16"},"nodeType":"YulFunctionCall","src":"5534:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5529:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5499:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5509:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5478:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5529:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5541:1:16","valueSize":1}],"id":2375,"nodeType":"InlineAssembly","src":"5436:117:16"},{"AST":{"nodeType":"YulBlock","src":"5571:108:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5585:27:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5598:1:16","type":"","value":"1"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5604:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5607:3:16","type":"","value":"0x3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5601:2:16"},"nodeType":"YulFunctionCall","src":"5601:10:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5594:3:16"},"nodeType":"YulFunctionCall","src":"5594:18:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5589:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5625:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5635:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5640:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5632:2:16"},"nodeType":"YulFunctionCall","src":"5632:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5625:3:16"}]},{"nodeType":"YulAssignment","src":"5655:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5664:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5667:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5660:3:16"},"nodeType":"YulFunctionCall","src":"5660:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5655:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5625:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5635:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5604:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5655:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5667:1:16","valueSize":1}],"id":2376,"nodeType":"InlineAssembly","src":"5562:117:16"},{"AST":{"nodeType":"YulBlock","src":"5697:73:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5711:19:16","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5723:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5726:3:16","type":"","value":"0x1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5720:2:16"},"nodeType":"YulFunctionCall","src":"5720:10:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5715:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5743:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5753:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5758:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5750:2:16"},"nodeType":"YulFunctionCall","src":"5750:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5743:3:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5743:3:16","valueSize":1},{"declaration":2367,"isOffset":false,"isSlot":false,"src":"5753:3:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5723:1:16","valueSize":1}],"id":2377,"nodeType":"InlineAssembly","src":"5688:82:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"5784:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313238","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5791:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5784:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2390,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"5835:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2391,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"5839:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313237","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5849:3:16","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2393,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"5855:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5849:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2395,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5848:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5839:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5835:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2398,"nodeType":"ExpressionStatement","src":"5835:24:16"},"id":2399,"nodeType":"IfStatement","src":"5780:79:16","trueBody":{"expression":{"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2381,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"5796:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2382,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"5800:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2383,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"5810:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313237","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5816:3:16","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"src":"5810:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5809:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5800:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5796:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2389,"nodeType":"ExpressionStatement","src":"5796:24:16"}},{"assignments":[2401],"declarations":[{"constant":false,"id":2401,"mutability":"mutable","name":"log_2","nodeType":"VariableDeclaration","scope":2472,"src":"5870:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2400,"name":"int256","nodeType":"ElementaryTypeName","src":"5870:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2411,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2404,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"5893:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5886:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2402,"name":"int256","nodeType":"ElementaryTypeName","src":"5886:6:16","typeDescriptions":{}}},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5886:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5900:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5886:17:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2408,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5885:19:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5908:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5885:25:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5870:40:16"},{"AST":{"nodeType":"YulBlock","src":"5930:151:16","statements":[{"nodeType":"YulAssignment","src":"5944:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5953:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5962:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5965:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5958:3:16"},"nodeType":"YulFunctionCall","src":"5958:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5949:3:16"},"nodeType":"YulFunctionCall","src":"5949:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5944:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"5981:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5994:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"5999:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5990:3:16"},"nodeType":"YulFunctionCall","src":"5990:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5985:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6014:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6026:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6037:2:16","type":"","value":"63"},{"name":"f","nodeType":"YulIdentifier","src":"6041:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6033:3:16"},"nodeType":"YulFunctionCall","src":"6033:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6023:2:16"},"nodeType":"YulFunctionCall","src":"6023:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6014:5:16"}]},{"nodeType":"YulAssignment","src":"6057:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6066:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6069:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6062:3:16"},"nodeType":"YulFunctionCall","src":"6062:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6057:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6014:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6026:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5944:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5962:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5965:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"5999:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6057:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6069:1:16","valueSize":1}],"id":2412,"nodeType":"InlineAssembly","src":"5921:160:16"},{"AST":{"nodeType":"YulBlock","src":"6099:151:16","statements":[{"nodeType":"YulAssignment","src":"6113:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6122:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6131:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6134:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6127:3:16"},"nodeType":"YulFunctionCall","src":"6127:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6118:3:16"},"nodeType":"YulFunctionCall","src":"6118:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6113:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6150:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6163:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6168:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6159:3:16"},"nodeType":"YulFunctionCall","src":"6159:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6154:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6183:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6195:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6206:2:16","type":"","value":"62"},{"name":"f","nodeType":"YulIdentifier","src":"6210:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6202:3:16"},"nodeType":"YulFunctionCall","src":"6202:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6192:2:16"},"nodeType":"YulFunctionCall","src":"6192:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6183:5:16"}]},{"nodeType":"YulAssignment","src":"6226:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6235:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6238:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6231:3:16"},"nodeType":"YulFunctionCall","src":"6231:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6226:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6183:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6195:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6113:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6131:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6134:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6168:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6226:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6238:1:16","valueSize":1}],"id":2413,"nodeType":"InlineAssembly","src":"6090:160:16"},{"AST":{"nodeType":"YulBlock","src":"6268:151:16","statements":[{"nodeType":"YulAssignment","src":"6282:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6291:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6300:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6303:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6296:3:16"},"nodeType":"YulFunctionCall","src":"6296:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6287:3:16"},"nodeType":"YulFunctionCall","src":"6287:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6282:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6319:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6332:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6337:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6328:3:16"},"nodeType":"YulFunctionCall","src":"6328:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6323:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6352:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6364:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6375:2:16","type":"","value":"61"},{"name":"f","nodeType":"YulIdentifier","src":"6379:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6371:3:16"},"nodeType":"YulFunctionCall","src":"6371:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6361:2:16"},"nodeType":"YulFunctionCall","src":"6361:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6352:5:16"}]},{"nodeType":"YulAssignment","src":"6395:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6404:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6407:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6400:3:16"},"nodeType":"YulFunctionCall","src":"6400:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6395:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6352:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6364:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6282:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6300:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6303:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6337:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6395:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6407:1:16","valueSize":1}],"id":2414,"nodeType":"InlineAssembly","src":"6259:160:16"},{"AST":{"nodeType":"YulBlock","src":"6437:151:16","statements":[{"nodeType":"YulAssignment","src":"6451:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6460:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6469:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6472:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6465:3:16"},"nodeType":"YulFunctionCall","src":"6465:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6456:3:16"},"nodeType":"YulFunctionCall","src":"6456:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6451:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6488:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6501:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6506:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6497:3:16"},"nodeType":"YulFunctionCall","src":"6497:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6492:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6521:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6533:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6544:2:16","type":"","value":"60"},{"name":"f","nodeType":"YulIdentifier","src":"6548:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6540:3:16"},"nodeType":"YulFunctionCall","src":"6540:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6530:2:16"},"nodeType":"YulFunctionCall","src":"6530:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6521:5:16"}]},{"nodeType":"YulAssignment","src":"6564:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6573:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6576:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6569:3:16"},"nodeType":"YulFunctionCall","src":"6569:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6564:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6521:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6533:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6451:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6469:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6472:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6506:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6564:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6576:1:16","valueSize":1}],"id":2415,"nodeType":"InlineAssembly","src":"6428:160:16"},{"AST":{"nodeType":"YulBlock","src":"6606:151:16","statements":[{"nodeType":"YulAssignment","src":"6620:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6629:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6638:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6641:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6634:3:16"},"nodeType":"YulFunctionCall","src":"6634:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6625:3:16"},"nodeType":"YulFunctionCall","src":"6625:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6620:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6657:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6670:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6675:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6666:3:16"},"nodeType":"YulFunctionCall","src":"6666:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6661:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6690:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6702:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6713:2:16","type":"","value":"59"},{"name":"f","nodeType":"YulIdentifier","src":"6717:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6709:3:16"},"nodeType":"YulFunctionCall","src":"6709:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6699:2:16"},"nodeType":"YulFunctionCall","src":"6699:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6690:5:16"}]},{"nodeType":"YulAssignment","src":"6733:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6742:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6745:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6738:3:16"},"nodeType":"YulFunctionCall","src":"6738:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6733:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6690:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6702:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6620:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6638:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6641:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6675:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6733:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6745:1:16","valueSize":1}],"id":2416,"nodeType":"InlineAssembly","src":"6597:160:16"},{"AST":{"nodeType":"YulBlock","src":"6775:151:16","statements":[{"nodeType":"YulAssignment","src":"6789:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6798:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6807:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6810:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6803:3:16"},"nodeType":"YulFunctionCall","src":"6803:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6794:3:16"},"nodeType":"YulFunctionCall","src":"6794:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6789:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6826:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6839:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6844:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6835:3:16"},"nodeType":"YulFunctionCall","src":"6835:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6830:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6859:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6871:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6882:2:16","type":"","value":"58"},{"name":"f","nodeType":"YulIdentifier","src":"6886:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6878:3:16"},"nodeType":"YulFunctionCall","src":"6878:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6868:2:16"},"nodeType":"YulFunctionCall","src":"6868:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6859:5:16"}]},{"nodeType":"YulAssignment","src":"6902:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6911:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6914:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6907:3:16"},"nodeType":"YulFunctionCall","src":"6907:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6902:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6859:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"6871:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6789:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6807:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6810:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6844:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6902:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6914:1:16","valueSize":1}],"id":2417,"nodeType":"InlineAssembly","src":"6766:160:16"},{"AST":{"nodeType":"YulBlock","src":"6944:151:16","statements":[{"nodeType":"YulAssignment","src":"6958:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6967:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6976:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6979:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6972:3:16"},"nodeType":"YulFunctionCall","src":"6972:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6963:3:16"},"nodeType":"YulFunctionCall","src":"6963:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6958:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6995:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7008:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7013:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7004:3:16"},"nodeType":"YulFunctionCall","src":"7004:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6999:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7028:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7040:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7051:2:16","type":"","value":"57"},{"name":"f","nodeType":"YulIdentifier","src":"7055:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7047:3:16"},"nodeType":"YulFunctionCall","src":"7047:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7037:2:16"},"nodeType":"YulFunctionCall","src":"7037:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7028:5:16"}]},{"nodeType":"YulAssignment","src":"7071:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7080:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7083:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7076:3:16"},"nodeType":"YulFunctionCall","src":"7076:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7071:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7028:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7040:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6958:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6976:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"6979:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7013:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7071:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7083:1:16","valueSize":1}],"id":2418,"nodeType":"InlineAssembly","src":"6935:160:16"},{"AST":{"nodeType":"YulBlock","src":"7113:151:16","statements":[{"nodeType":"YulAssignment","src":"7127:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7136:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7145:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7148:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7141:3:16"},"nodeType":"YulFunctionCall","src":"7141:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7132:3:16"},"nodeType":"YulFunctionCall","src":"7132:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7127:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7164:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7177:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7182:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7173:3:16"},"nodeType":"YulFunctionCall","src":"7173:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7168:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7197:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7209:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7220:2:16","type":"","value":"56"},{"name":"f","nodeType":"YulIdentifier","src":"7224:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7216:3:16"},"nodeType":"YulFunctionCall","src":"7216:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7206:2:16"},"nodeType":"YulFunctionCall","src":"7206:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7197:5:16"}]},{"nodeType":"YulAssignment","src":"7240:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7249:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7252:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7245:3:16"},"nodeType":"YulFunctionCall","src":"7245:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7240:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7197:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7209:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7127:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7145:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7148:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7182:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7240:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7252:1:16","valueSize":1}],"id":2419,"nodeType":"InlineAssembly","src":"7104:160:16"},{"AST":{"nodeType":"YulBlock","src":"7282:151:16","statements":[{"nodeType":"YulAssignment","src":"7296:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7305:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7314:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7317:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7310:3:16"},"nodeType":"YulFunctionCall","src":"7310:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7301:3:16"},"nodeType":"YulFunctionCall","src":"7301:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7296:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7333:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7346:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7351:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7342:3:16"},"nodeType":"YulFunctionCall","src":"7342:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7337:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7366:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7378:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7389:2:16","type":"","value":"55"},{"name":"f","nodeType":"YulIdentifier","src":"7393:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7385:3:16"},"nodeType":"YulFunctionCall","src":"7385:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7375:2:16"},"nodeType":"YulFunctionCall","src":"7375:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7366:5:16"}]},{"nodeType":"YulAssignment","src":"7409:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7418:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7421:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7414:3:16"},"nodeType":"YulFunctionCall","src":"7414:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7409:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7366:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7378:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7296:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7314:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7317:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7351:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7409:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7421:1:16","valueSize":1}],"id":2420,"nodeType":"InlineAssembly","src":"7273:160:16"},{"AST":{"nodeType":"YulBlock","src":"7451:151:16","statements":[{"nodeType":"YulAssignment","src":"7465:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7474:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7483:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7486:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7479:3:16"},"nodeType":"YulFunctionCall","src":"7479:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7470:3:16"},"nodeType":"YulFunctionCall","src":"7470:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7465:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7502:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7515:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7520:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7511:3:16"},"nodeType":"YulFunctionCall","src":"7511:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7506:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7535:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7547:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7558:2:16","type":"","value":"54"},{"name":"f","nodeType":"YulIdentifier","src":"7562:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7554:3:16"},"nodeType":"YulFunctionCall","src":"7554:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7544:2:16"},"nodeType":"YulFunctionCall","src":"7544:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7535:5:16"}]},{"nodeType":"YulAssignment","src":"7578:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7587:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7590:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7583:3:16"},"nodeType":"YulFunctionCall","src":"7583:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7578:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7535:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7547:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7465:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7483:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7486:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7520:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7578:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7590:1:16","valueSize":1}],"id":2421,"nodeType":"InlineAssembly","src":"7442:160:16"},{"AST":{"nodeType":"YulBlock","src":"7620:151:16","statements":[{"nodeType":"YulAssignment","src":"7634:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7643:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7652:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7655:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7648:3:16"},"nodeType":"YulFunctionCall","src":"7648:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7639:3:16"},"nodeType":"YulFunctionCall","src":"7639:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7634:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7671:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7684:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7689:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7680:3:16"},"nodeType":"YulFunctionCall","src":"7680:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7675:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7704:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7716:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7727:2:16","type":"","value":"53"},{"name":"f","nodeType":"YulIdentifier","src":"7731:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7723:3:16"},"nodeType":"YulFunctionCall","src":"7723:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7713:2:16"},"nodeType":"YulFunctionCall","src":"7713:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7704:5:16"}]},{"nodeType":"YulAssignment","src":"7747:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7756:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7759:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7752:3:16"},"nodeType":"YulFunctionCall","src":"7752:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7747:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7704:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7716:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7634:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7652:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7655:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7689:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7747:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7759:1:16","valueSize":1}],"id":2422,"nodeType":"InlineAssembly","src":"7611:160:16"},{"AST":{"nodeType":"YulBlock","src":"7789:151:16","statements":[{"nodeType":"YulAssignment","src":"7803:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7812:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7821:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7824:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7817:3:16"},"nodeType":"YulFunctionCall","src":"7817:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7808:3:16"},"nodeType":"YulFunctionCall","src":"7808:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7803:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7840:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7853:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7858:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7849:3:16"},"nodeType":"YulFunctionCall","src":"7849:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7844:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7873:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7885:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7896:2:16","type":"","value":"52"},{"name":"f","nodeType":"YulIdentifier","src":"7900:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7892:3:16"},"nodeType":"YulFunctionCall","src":"7892:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7882:2:16"},"nodeType":"YulFunctionCall","src":"7882:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7873:5:16"}]},{"nodeType":"YulAssignment","src":"7916:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7925:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7928:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7921:3:16"},"nodeType":"YulFunctionCall","src":"7921:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7916:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7873:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"7885:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7803:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7821:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7824:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7858:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7916:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7928:1:16","valueSize":1}],"id":2423,"nodeType":"InlineAssembly","src":"7780:160:16"},{"AST":{"nodeType":"YulBlock","src":"7958:151:16","statements":[{"nodeType":"YulAssignment","src":"7972:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7981:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7990:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7993:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7986:3:16"},"nodeType":"YulFunctionCall","src":"7986:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7977:3:16"},"nodeType":"YulFunctionCall","src":"7977:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7972:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"8009:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8022:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8027:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8018:3:16"},"nodeType":"YulFunctionCall","src":"8018:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8013:1:16","type":""}]},{"nodeType":"YulAssignment","src":"8042:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8054:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8065:2:16","type":"","value":"51"},{"name":"f","nodeType":"YulIdentifier","src":"8069:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8061:3:16"},"nodeType":"YulFunctionCall","src":"8061:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8051:2:16"},"nodeType":"YulFunctionCall","src":"8051:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8042:5:16"}]},{"nodeType":"YulAssignment","src":"8085:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"8094:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8097:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8090:3:16"},"nodeType":"YulFunctionCall","src":"8090:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8085:1:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"8042:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"8054:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7972:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7990:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"7993:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8027:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8085:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8097:1:16","valueSize":1}],"id":2424,"nodeType":"InlineAssembly","src":"7949:160:16"},{"AST":{"nodeType":"YulBlock","src":"8127:124:16","statements":[{"nodeType":"YulAssignment","src":"8141:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8150:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8159:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8162:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8155:3:16"},"nodeType":"YulFunctionCall","src":"8155:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8146:3:16"},"nodeType":"YulFunctionCall","src":"8146:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8141:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"8178:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8191:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8196:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8187:3:16"},"nodeType":"YulFunctionCall","src":"8187:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8182:1:16","type":""}]},{"nodeType":"YulAssignment","src":"8211:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8223:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8234:2:16","type":"","value":"50"},{"name":"f","nodeType":"YulIdentifier","src":"8238:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8230:3:16"},"nodeType":"YulFunctionCall","src":"8230:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8220:2:16"},"nodeType":"YulFunctionCall","src":"8220:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8211:5:16"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2401,"isOffset":false,"isSlot":false,"src":"8211:5:16","valueSize":1},{"declaration":2401,"isOffset":false,"isSlot":false,"src":"8223:5:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8141:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8159:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8162:1:16","valueSize":1},{"declaration":2363,"isOffset":false,"isSlot":false,"src":"8196:1:16","valueSize":1}],"id":2425,"nodeType":"InlineAssembly","src":"8118:133:16"},{"assignments":[2427],"declarations":[{"constant":false,"id":2427,"mutability":"mutable","name":"log_sqrt10001","nodeType":"VariableDeclaration","scope":2472,"src":"8261:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2426,"name":"int256","nodeType":"ElementaryTypeName","src":"8261:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2431,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2428,"name":"log_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"8284:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"323535373338393538393939363033383236333437313431","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8292:24:16","typeDescriptions":{"typeIdentifier":"t_rational_255738958999603826347141_by_1","typeString":"int_const 255738958999603826347141"},"value":"255738958999603826347141"},"src":"8284:32:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"8261:55:16"},{"assignments":[2433],"declarations":[{"constant":false,"id":2433,"mutability":"mutable","name":"tickLow","nodeType":"VariableDeclaration","scope":2472,"src":"8345:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2432,"name":"int24","nodeType":"ElementaryTypeName","src":"8345:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2443,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2436,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"8368:13:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"33343032393932393536383039313332343138353936313430313030363630323437323130","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8384:37:16","typeDescriptions":{"typeIdentifier":"t_rational_3402992956809132418596140100660247210_by_1","typeString":"int_const 3402...(29 digits omitted)...7210"},"value":"3402992956809132418596140100660247210"},"src":"8368:53:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2439,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8367:55:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8426:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8367:62:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8361:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2434,"name":"int24","nodeType":"ElementaryTypeName","src":"8361:5:16","typeDescriptions":{}}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8361:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8345:85:16"},{"assignments":[2445],"declarations":[{"constant":false,"id":2445,"mutability":"mutable","name":"tickHi","nodeType":"VariableDeclaration","scope":2472,"src":"8440:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2444,"name":"int24","nodeType":"ElementaryTypeName","src":"8440:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2455,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2448,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"8462:13:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"323931333339343634373731393839363232393037303237363231313533333938303838343935","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8478:39:16","typeDescriptions":{"typeIdentifier":"t_rational_291339464771989622907027621153398088495_by_1","typeString":"int_const 2913...(31 digits omitted)...8495"},"value":"291339464771989622907027621153398088495"},"src":"8462:55:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8461:57:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8522:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8461:64:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8455:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2446,"name":"int24","nodeType":"ElementaryTypeName","src":"8455:5:16","typeDescriptions":{}}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8455:71:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8440:86:16"},{"expression":{"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2456,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"8537:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"8544:7:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2458,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"8555:6:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8544:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2462,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"8593:6:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2461,"name":"getSqrtRatioAtTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"8574:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8574:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2464,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8604:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8574:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2467,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"8628:7:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8574:61:16","trueExpression":{"id":2466,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"8619:6:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8544:91:16","trueExpression":{"id":2460,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"8564:7:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8537:98:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2471,"nodeType":"ExpressionStatement","src":"8537:98:16"}]},"documentation":{"id":2335,"nodeType":"StructuredDocumentation","src":"3948:408:16","text":"@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"},"id":2473,"implemented":true,"kind":"function","modifiers":[],"name":"getTickAtSqrtRatio","nodeType":"FunctionDefinition","parameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2473,"src":"4389:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2336,"name":"uint160","nodeType":"ElementaryTypeName","src":"4389:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4388:22:16"},"returnParameters":{"id":2341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2340,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2473,"src":"4434:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2339,"name":"int24","nodeType":"ElementaryTypeName","src":"4434:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"4433:12:16"},"scope":2474,"src":"4361:4281:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2475,"src":"313:8331:16"}],"src":"45:8600:16"},"id":16},"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol","exportedSymbols":{"UnsafeMath":[2490]},"id":2491,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2476,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:17"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2477,"nodeType":"StructuredDocumentation","src":"71:173:17","text":"@title Math functions that do not check inputs or outputs\n @notice Contains methods that perform common math functions but do not do any overflow or underflow checks"},"fullyImplemented":true,"id":2490,"linearizedBaseContracts":[2490],"name":"UnsafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":2488,"nodeType":"Block","src":"571:86:17","statements":[{"AST":{"nodeType":"YulBlock","src":"590:61:17","statements":[{"nodeType":"YulAssignment","src":"604:37:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"617:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"620:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"613:3:17"},"nodeType":"YulFunctionCall","src":"613:9:17"},{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"631:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"634:1:17"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"627:3:17"},"nodeType":"YulFunctionCall","src":"627:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"638:1:17","type":"","value":"0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"624:2:17"},"nodeType":"YulFunctionCall","src":"624:16:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"609:3:17"},"nodeType":"YulFunctionCall","src":"609:32:17"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"604:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2480,"isOffset":false,"isSlot":false,"src":"617:1:17","valueSize":1},{"declaration":2480,"isOffset":false,"isSlot":false,"src":"631:1:17","valueSize":1},{"declaration":2482,"isOffset":false,"isSlot":false,"src":"620:1:17","valueSize":1},{"declaration":2482,"isOffset":false,"isSlot":false,"src":"634:1:17","valueSize":1},{"declaration":2485,"isOffset":false,"isSlot":false,"src":"604:1:17","valueSize":1}],"id":2487,"nodeType":"InlineAssembly","src":"581:70:17"}]},"documentation":{"id":2478,"nodeType":"StructuredDocumentation","src":"269:218:17","text":"@notice Returns ceil(x / y)\n @dev division by 0 has unspecified behavior, and must be checked externally\n @param x The dividend\n @param y The divisor\n @return z The quotient, ceil(x / y)"},"id":2489,"implemented":true,"kind":"function","modifiers":[],"name":"divRoundingUp","nodeType":"FunctionDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":2489,"src":"515:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2482,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":2489,"src":"526:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"514:22:17"},"returnParameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":2489,"src":"560:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2484,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"559:11:17"},"scope":2490,"src":"492:165:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2491,"src":"244:415:17"}],"src":"45:615:17"},"id":17},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol","exportedSymbols":{"IPeripheryImmutableState":[2537],"PeripheryImmutableState":[2521]},"id":2522,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2492,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:18"},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol","file":"../interfaces/IPeripheryImmutableState.sol","id":2493,"nodeType":"ImportDirective","scope":2522,"sourceUnit":2538,"src":"70:52:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2495,"name":"IPeripheryImmutableState","nodeType":"UserDefinedTypeName","referencedDeclaration":2537,"src":"252:24:18","typeDescriptions":{"typeIdentifier":"t_contract$_IPeripheryImmutableState_$2537","typeString":"contract IPeripheryImmutableState"}},"id":2496,"nodeType":"InheritanceSpecifier","src":"252:24:18"}],"contractDependencies":[2537],"contractKind":"contract","documentation":{"id":2494,"nodeType":"StructuredDocumentation","src":"124:83:18","text":"@title Immutable state\n @notice Immutable state used by periphery contracts"},"fullyImplemented":true,"id":2521,"linearizedBaseContracts":[2521,2537],"name":"PeripheryImmutableState","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2530],"constant":false,"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"283:40:18","text":"@inheritdoc IPeripheryImmutableState"},"functionSelector":"c45a0155","id":2500,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","overrides":{"id":2499,"nodeType":"OverrideSpecifier","overrides":[],"src":"353:8:18"},"scope":2521,"src":"328:41:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"328:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"baseFunctions":[2536],"constant":false,"documentation":{"id":2501,"nodeType":"StructuredDocumentation","src":"375:40:18","text":"@inheritdoc IPeripheryImmutableState"},"functionSelector":"4aa4a4fc","id":2504,"mutability":"immutable","name":"WETH9","nodeType":"VariableDeclaration","overrides":{"id":2503,"nodeType":"OverrideSpecifier","overrides":[],"src":"445:8:18"},"scope":2521,"src":"420:39:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2502,"name":"address","nodeType":"ElementaryTypeName","src":"420:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":2519,"nodeType":"Block","src":"512:59:18","statements":[{"expression":{"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2511,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"522:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2512,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"532:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"522:18:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2514,"nodeType":"ExpressionStatement","src":"522:18:18"},{"expression":{"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2515,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"550:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2516,"name":"_WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"558:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"550:14:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2518,"nodeType":"ExpressionStatement","src":"550:14:18"}]},"id":2520,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2506,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":2520,"src":"478:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2505,"name":"address","nodeType":"ElementaryTypeName","src":"478:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2508,"mutability":"mutable","name":"_WETH9","nodeType":"VariableDeclaration","scope":2520,"src":"496:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"496:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"477:34:18"},"returnParameters":{"id":2510,"nodeType":"ParameterList","parameters":[],"src":"512:0:18"},"scope":2521,"src":"466:105:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2522,"src":"207:366:18"}],"src":"45:529:18"},"id":18},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol","exportedSymbols":{"IPeripheryImmutableState":[2537]},"id":2538,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2523,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:19"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2524,"nodeType":"StructuredDocumentation","src":"71:91:19","text":"@title Immutable state\n @notice Functions that return immutable state of the router"},"fullyImplemented":false,"id":2537,"linearizedBaseContracts":[2537],"name":"IPeripheryImmutableState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2525,"nodeType":"StructuredDocumentation","src":"203:57:19","text":"@return Returns the address of the Uniswap V3 factory"},"functionSelector":"c45a0155","id":2530,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":2526,"nodeType":"ParameterList","parameters":[],"src":"281:2:19"},"returnParameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2528,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2530,"src":"307:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2527,"name":"address","nodeType":"ElementaryTypeName","src":"307:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"306:9:19"},"scope":2537,"src":"265:51:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2531,"nodeType":"StructuredDocumentation","src":"322:40:19","text":"@return Returns the address of WETH9"},"functionSelector":"4aa4a4fc","id":2536,"implemented":false,"kind":"function","modifiers":[],"name":"WETH9","nodeType":"FunctionDefinition","parameters":{"id":2532,"nodeType":"ParameterList","parameters":[],"src":"381:2:19"},"returnParameters":{"id":2535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2534,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2536,"src":"407:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2533,"name":"address","nodeType":"ElementaryTypeName","src":"407:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"406:9:19"},"scope":2537,"src":"367:49:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2538,"src":"162:256:19"}],"src":"45:374:19"},"id":19},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol","exportedSymbols":{"BytesLib":[2656]},"id":2657,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2539,"literals":["solidity",">=","0.5",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"343:31:20"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2656,"linearizedBaseContracts":[2656],"name":"BytesLib","nodeType":"ContractDefinition","nodes":[{"body":{"id":2584,"nodeType":"Block","src":"535:2871:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2551,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"553:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"563:2:20","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"553:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2554,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"569:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"553:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"578:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":2550,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"545:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"545:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2558,"nodeType":"ExpressionStatement","src":"545:50:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2560,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"613:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2561,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"622:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"613:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2563,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"633:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"613:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"641:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":2559,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"605:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"605:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2567,"nodeType":"ExpressionStatement","src":"605:53:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2569,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"676:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"676:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2571,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"693:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2572,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"702:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"693:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"676:33:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f75744f66426f756e6473","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"711:19:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""},"value":"slice_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""}],"id":2568,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"668:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"668:63:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2577,"nodeType":"ExpressionStatement","src":"668:63:20"},{"assignments":[2579],"declarations":[{"constant":false,"id":2579,"mutability":"mutable","name":"tempBytes","nodeType":"VariableDeclaration","scope":2584,"src":"742:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2578,"name":"bytes","nodeType":"ElementaryTypeName","src":"742:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2580,"nodeType":"VariableDeclarationStatement","src":"742:22:20"},{"AST":{"nodeType":"YulBlock","src":"784:2589:20","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"844:2092:20","statements":[{"nodeType":"YulAssignment","src":"1012:24:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1031:4:20","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1025:5:20"},"nodeType":"YulFunctionCall","src":"1025:11:20"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1012:9:20"}]},{"nodeType":"YulVariableDeclaration","src":"1696:33:20","value":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"1717:7:20"},{"kind":"number","nodeType":"YulLiteral","src":"1726:2:20","type":"","value":"31"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1713:3:20"},"nodeType":"YulFunctionCall","src":"1713:16:20"},"variables":[{"name":"lengthmod","nodeType":"YulTypedName","src":"1700:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2070:70:20","value":{"arguments":[{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2088:9:20"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"2099:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2084:3:20"},"nodeType":"YulFunctionCall","src":"2084:25:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2115:4:20","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"2128:9:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2121:6:20"},"nodeType":"YulFunctionCall","src":"2121:17:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2111:3:20"},"nodeType":"YulFunctionCall","src":"2111:28:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2080:3:20"},"nodeType":"YulFunctionCall","src":"2080:60:20"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"2074:2:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2161:27:20","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2176:2:20"},{"name":"_length","nodeType":"YulIdentifier","src":"2180:7:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2172:3:20"},"nodeType":"YulFunctionCall","src":"2172:16:20"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"2165:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"2602:69:20","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2635:2:20"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2645:2:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2639:5:20"},"nodeType":"YulFunctionCall","src":"2639:9:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2628:6:20"},"nodeType":"YulFunctionCall","src":"2628:21:20"},"nodeType":"YulExpressionStatement","src":"2628:21:20"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2481:2:20"},{"name":"end","nodeType":"YulIdentifier","src":"2485:3:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2478:2:20"},"nodeType":"YulFunctionCall","src":"2478:11:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2490:111:20","statements":[{"nodeType":"YulAssignment","src":"2516:19:20","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2526:2:20"},{"kind":"number","nodeType":"YulLiteral","src":"2530:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2522:3:20"},"nodeType":"YulFunctionCall","src":"2522:13:20"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2516:2:20"}]},{"nodeType":"YulAssignment","src":"2560:19:20","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2570:2:20"},{"kind":"number","nodeType":"YulLiteral","src":"2574:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2566:3:20"},"nodeType":"YulFunctionCall","src":"2566:13:20"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"2560:2:20"}]}]},"pre":{"nodeType":"YulBlock","src":"2214:263:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2375:80:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"2397:6:20"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"2405:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2393:3:20"},"nodeType":"YulFunctionCall","src":"2393:22:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2421:4:20","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"2434:9:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2427:6:20"},"nodeType":"YulFunctionCall","src":"2427:17:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2417:3:20"},"nodeType":"YulFunctionCall","src":"2417:28:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2389:3:20"},"nodeType":"YulFunctionCall","src":"2389:57:20"},{"name":"_start","nodeType":"YulIdentifier","src":"2448:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2385:3:20"},"nodeType":"YulFunctionCall","src":"2385:70:20"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"2379:2:20","type":""}]}]},"src":"2210:461:20"},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2700:9:20"},{"name":"_length","nodeType":"YulIdentifier","src":"2711:7:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2693:6:20"},"nodeType":"YulFunctionCall","src":"2693:26:20"},"nodeType":"YulExpressionStatement","src":"2693:26:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2886:4:20","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2900:2:20"},{"kind":"number","nodeType":"YulLiteral","src":"2904:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2896:3:20"},"nodeType":"YulFunctionCall","src":"2896:11:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2913:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2909:3:20"},"nodeType":"YulFunctionCall","src":"2909:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2892:3:20"},"nodeType":"YulFunctionCall","src":"2892:25:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2879:6:20"},"nodeType":"YulFunctionCall","src":"2879:39:20"},"nodeType":"YulExpressionStatement","src":"2879:39:20"}]},"nodeType":"YulCase","src":"837:2099:20","value":{"kind":"number","nodeType":"YulLiteral","src":"842:1:20","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"3048:315:20","statements":[{"nodeType":"YulAssignment","src":"3070:24:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3089:4:20","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3083:5:20"},"nodeType":"YulFunctionCall","src":"3083:11:20"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3070:9:20"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3276:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3287:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3269:6:20"},"nodeType":"YulFunctionCall","src":"3269:20:20"},"nodeType":"YulExpressionStatement","src":"3269:20:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3318:4:20","type":"","value":"0x40"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3328:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3339:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3324:3:20"},"nodeType":"YulFunctionCall","src":"3324:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3311:6:20"},"nodeType":"YulFunctionCall","src":"3311:34:20"},"nodeType":"YulExpressionStatement","src":"3311:34:20"}]},"nodeType":"YulCase","src":"3040:323:20","value":"default"}],"expression":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"812:7:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"805:6:20"},"nodeType":"YulFunctionCall","src":"805:15:20"},"nodeType":"YulSwitch","src":"798:2565:20"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2541,"isOffset":false,"isSlot":false,"src":"2397:6:20","valueSize":1},{"declaration":2545,"isOffset":false,"isSlot":false,"src":"1717:7:20","valueSize":1},{"declaration":2545,"isOffset":false,"isSlot":false,"src":"2180:7:20","valueSize":1},{"declaration":2545,"isOffset":false,"isSlot":false,"src":"2711:7:20","valueSize":1},{"declaration":2545,"isOffset":false,"isSlot":false,"src":"812:7:20","valueSize":1},{"declaration":2543,"isOffset":false,"isSlot":false,"src":"2448:6:20","valueSize":1},{"declaration":2579,"isOffset":false,"isSlot":false,"src":"1012:9:20","valueSize":1},{"declaration":2579,"isOffset":false,"isSlot":false,"src":"2088:9:20","valueSize":1},{"declaration":2579,"isOffset":false,"isSlot":false,"src":"2700:9:20","valueSize":1},{"declaration":2579,"isOffset":false,"isSlot":false,"src":"3070:9:20","valueSize":1},{"declaration":2579,"isOffset":false,"isSlot":false,"src":"3276:9:20","valueSize":1},{"declaration":2579,"isOffset":false,"isSlot":false,"src":"3328:9:20","valueSize":1}],"id":2581,"nodeType":"InlineAssembly","src":"775:2598:20"},{"expression":{"id":2582,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"3390:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2549,"id":2583,"nodeType":"Return","src":"3383:16:20"}]},"id":2585,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nodeType":"FunctionDefinition","parameters":{"id":2546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2541,"mutability":"mutable","name":"_bytes","nodeType":"VariableDeclaration","scope":2585,"src":"423:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2540,"name":"bytes","nodeType":"ElementaryTypeName","src":"423:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2543,"mutability":"mutable","name":"_start","nodeType":"VariableDeclaration","scope":2585,"src":"452:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2542,"name":"uint256","nodeType":"ElementaryTypeName","src":"452:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"_length","nodeType":"VariableDeclaration","scope":2585,"src":"476:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2544,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:84:20"},"returnParameters":{"id":2549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2548,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2585,"src":"521:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2547,"name":"bytes","nodeType":"ElementaryTypeName","src":"521:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"520:14:20"},"scope":2656,"src":"399:3007:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2619,"nodeType":"Block","src":"3500:328:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2595,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"3518:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3527:2:20","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"3518:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2598,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"3533:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3518:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f766572666c6f77","id":2600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3541:20:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95","typeString":"literal_string \"toAddress_overflow\""},"value":"toAddress_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95","typeString":"literal_string \"toAddress_overflow\""}],"id":2594,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3510:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3510:52:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2602,"nodeType":"ExpressionStatement","src":"3510:52:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2604,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"3580:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3580:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"3597:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3606:2:20","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"3597:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3580:28:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f75744f66426f756e6473","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3610:23:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""},"value":"toAddress_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""}],"id":2603,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3572:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2612,"nodeType":"ExpressionStatement","src":"3572:62:20"},{"assignments":[2614],"declarations":[{"constant":false,"id":2614,"mutability":"mutable","name":"tempAddress","nodeType":"VariableDeclaration","scope":2619,"src":"3644:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2613,"name":"address","nodeType":"ElementaryTypeName","src":"3644:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2615,"nodeType":"VariableDeclarationStatement","src":"3644:19:20"},{"AST":{"nodeType":"YulBlock","src":"3683:110:20","statements":[{"nodeType":"YulAssignment","src":"3697:86:20","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"3730:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"3738:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3726:3:20"},"nodeType":"YulFunctionCall","src":"3726:17:20"},{"name":"_start","nodeType":"YulIdentifier","src":"3745:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3722:3:20"},"nodeType":"YulFunctionCall","src":"3722:30:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3716:5:20"},"nodeType":"YulFunctionCall","src":"3716:37:20"},{"kind":"number","nodeType":"YulLiteral","src":"3755:27:20","type":"","value":"0x1000000000000000000000000"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3712:3:20"},"nodeType":"YulFunctionCall","src":"3712:71:20"},"variableNames":[{"name":"tempAddress","nodeType":"YulIdentifier","src":"3697:11:20"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2587,"isOffset":false,"isSlot":false,"src":"3730:6:20","valueSize":1},{"declaration":2589,"isOffset":false,"isSlot":false,"src":"3745:6:20","valueSize":1},{"declaration":2614,"isOffset":false,"isSlot":false,"src":"3697:11:20","valueSize":1}],"id":2616,"nodeType":"InlineAssembly","src":"3674:119:20"},{"expression":{"id":2617,"name":"tempAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"3810:11:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2593,"id":2618,"nodeType":"Return","src":"3803:18:20"}]},"id":2620,"implemented":true,"kind":"function","modifiers":[],"name":"toAddress","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2587,"mutability":"mutable","name":"_bytes","nodeType":"VariableDeclaration","scope":2620,"src":"3431:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2586,"name":"bytes","nodeType":"ElementaryTypeName","src":"3431:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"_start","nodeType":"VariableDeclaration","scope":2620,"src":"3452:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"3452:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3430:37:20"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2620,"src":"3491:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2591,"name":"address","nodeType":"ElementaryTypeName","src":"3491:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3490:9:20"},"scope":2656,"src":"3412:416:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2654,"nodeType":"Block","src":"3920:279:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2630,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"3938:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3947:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"3938:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2633,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"3952:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3938:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7432345f6f766572666c6f77","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3960:19:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5","typeString":"literal_string \"toUint24_overflow\""},"value":"toUint24_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5","typeString":"literal_string \"toUint24_overflow\""}],"id":2629,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3930:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3930:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2637,"nodeType":"ExpressionStatement","src":"3930:50:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2639,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"3998:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3998:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2641,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"4015:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4024:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"4015:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3998:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7432345f6f75744f66426f756e6473","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4027:22:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc","typeString":"literal_string \"toUint24_outOfBounds\""},"value":"toUint24_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc","typeString":"literal_string \"toUint24_outOfBounds\""}],"id":2638,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3990:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3990:60:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2647,"nodeType":"ExpressionStatement","src":"3990:60:20"},{"assignments":[2649],"declarations":[{"constant":false,"id":2649,"mutability":"mutable","name":"tempUint","nodeType":"VariableDeclaration","scope":2654,"src":"4060:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2648,"name":"uint24","nodeType":"ElementaryTypeName","src":"4060:6:20","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":2650,"nodeType":"VariableDeclarationStatement","src":"4060:15:20"},{"AST":{"nodeType":"YulBlock","src":"4095:72:20","statements":[{"nodeType":"YulAssignment","src":"4109:48:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"4135:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4143:3:20","type":"","value":"0x3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4131:3:20"},"nodeType":"YulFunctionCall","src":"4131:16:20"},{"name":"_start","nodeType":"YulIdentifier","src":"4149:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4127:3:20"},"nodeType":"YulFunctionCall","src":"4127:29:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4121:5:20"},"nodeType":"YulFunctionCall","src":"4121:36:20"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"4109:8:20"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2622,"isOffset":false,"isSlot":false,"src":"4135:6:20","valueSize":1},{"declaration":2624,"isOffset":false,"isSlot":false,"src":"4149:6:20","valueSize":1},{"declaration":2649,"isOffset":false,"isSlot":false,"src":"4109:8:20","valueSize":1}],"id":2651,"nodeType":"InlineAssembly","src":"4086:81:20"},{"expression":{"id":2652,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"4184:8:20","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":2628,"id":2653,"nodeType":"Return","src":"4177:15:20"}]},"id":2655,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nodeType":"FunctionDefinition","parameters":{"id":2625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2622,"mutability":"mutable","name":"_bytes","nodeType":"VariableDeclaration","scope":2655,"src":"3852:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2621,"name":"bytes","nodeType":"ElementaryTypeName","src":"3852:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2624,"mutability":"mutable","name":"_start","nodeType":"VariableDeclaration","scope":2655,"src":"3873:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2623,"name":"uint256","nodeType":"ElementaryTypeName","src":"3873:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3851:37:20"},"returnParameters":{"id":2628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2655,"src":"3912:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2626,"name":"uint24","nodeType":"ElementaryTypeName","src":"3912:6:20","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"3911:8:20"},"scope":2656,"src":"3834:365:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2657,"src":"376:3825:20"}],"src":"343:3859:20"},"id":20},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/Path.sol","exportedSymbols":{"BytesLib":[2656],"Path":[2789]},"id":2790,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2658,"literals":["solidity",">=","0.6",".0"],"nodeType":"PragmaDirective","src":"45:24:21"},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol","file":"./BytesLib.sol","id":2659,"nodeType":"ImportDirective","scope":2790,"sourceUnit":2657,"src":"71:24:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2660,"nodeType":"StructuredDocumentation","src":"97:67:21","text":"@title Functions for manipulating path data for multihop swaps"},"fullyImplemented":true,"id":2789,"linearizedBaseContracts":[2789],"name":"Path","nodeType":"ContractDefinition","nodes":[{"id":2663,"libraryName":{"id":2661,"name":"BytesLib","nodeType":"UserDefinedTypeName","referencedDeclaration":2656,"src":"189:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_BytesLib_$2656","typeString":"library BytesLib"}},"nodeType":"UsingForDirective","src":"183:25:21","typeName":{"id":2662,"name":"bytes","nodeType":"ElementaryTypeName","src":"202:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"documentation":{"id":2664,"nodeType":"StructuredDocumentation","src":"214:48:21","text":"@dev The length of the bytes encoded address"},"id":2667,"mutability":"constant","name":"ADDR_SIZE","nodeType":"VariableDeclaration","scope":2789,"src":"267:39:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2665,"name":"uint256","nodeType":"ElementaryTypeName","src":"267:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3230","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"304:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"documentation":{"id":2668,"nodeType":"StructuredDocumentation","src":"312:44:21","text":"@dev The length of the bytes encoded fee"},"id":2671,"mutability":"constant","name":"FEE_SIZE","nodeType":"VariableDeclaration","scope":2789,"src":"361:37:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"361:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"397:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"documentation":{"id":2672,"nodeType":"StructuredDocumentation","src":"405:58:21","text":"@dev The offset of a single token address and pool fee"},"id":2677,"mutability":"constant","name":"NEXT_OFFSET","nodeType":"VariableDeclaration","scope":2789,"src":"468:59:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2674,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"507:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2675,"name":"FEE_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"519:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"507:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"documentation":{"id":2678,"nodeType":"StructuredDocumentation","src":"533:42:21","text":"@dev The offset of an encoded pool key"},"id":2683,"mutability":"constant","name":"POP_OFFSET","nodeType":"VariableDeclaration","scope":2789,"src":"580:61:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2679,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2680,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"618:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2681,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"632:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"618:23:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"documentation":{"id":2684,"nodeType":"StructuredDocumentation","src":"647:72:21","text":"@dev The minimum length of an encoding that contains 2 or more pools"},"id":2689,"mutability":"constant","name":"MULTIPLE_POOLS_MIN_LENGTH","nodeType":"VariableDeclaration","scope":2789,"src":"724:77:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2685,"name":"uint256","nodeType":"ElementaryTypeName","src":"724:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2686,"name":"POP_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"777:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2687,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"790:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"777:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":2702,"nodeType":"Block","src":"1066:64:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2697,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"1083:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1083:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2699,"name":"MULTIPLE_POOLS_MIN_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1098:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:40:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2696,"id":2701,"nodeType":"Return","src":"1076:47:21"}]},"documentation":{"id":2690,"nodeType":"StructuredDocumentation","src":"808:179:21","text":"@notice Returns true iff the path contains two or more pools\n @param path The encoded swap path\n @return True if path contains two or more pools, otherwise false"},"id":2703,"implemented":true,"kind":"function","modifiers":[],"name":"hasMultiplePools","nodeType":"FunctionDefinition","parameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2703,"src":"1018:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2691,"name":"bytes","nodeType":"ElementaryTypeName","src":"1018:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1017:19:21"},"returnParameters":{"id":2696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2695,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2703,"src":"1060:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2694,"name":"bool","nodeType":"ElementaryTypeName","src":"1060:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1059:6:21"},"scope":2789,"src":"992:138:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2720,"nodeType":"Block","src":"1351:166:21","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2711,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"1471:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1471:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2713,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"1485:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1471:23:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2715,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1470:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2716,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"1498:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1470:39:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2718,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1469:41:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2710,"id":2719,"nodeType":"Return","src":"1462:48:21"}]},"documentation":{"id":2704,"nodeType":"StructuredDocumentation","src":"1136:141:21","text":"@notice Returns the number of pools in the path\n @param path The encoded swap path\n @return The number of pools in the path"},"id":2721,"implemented":true,"kind":"function","modifiers":[],"name":"numPools","nodeType":"FunctionDefinition","parameters":{"id":2707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2706,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2721,"src":"1300:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2705,"name":"bytes","nodeType":"ElementaryTypeName","src":"1300:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1299:19:21"},"returnParameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2709,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2721,"src":"1342:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2708,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1341:9:21"},"scope":2789,"src":"1282:235:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2754,"nodeType":"Block","src":"1964:129:21","statements":[{"expression":{"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2733,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"1974:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1998:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2734,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"1983:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toAddress","nodeType":"MemberAccess","referencedDeclaration":2620,"src":"1983:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (address)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1983:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1974:26:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2739,"nodeType":"ExpressionStatement","src":"1974:26:21"},{"expression":{"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2740,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"2010:3:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2743,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"2030:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2741,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"2016:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toUint24","nodeType":"MemberAccess","referencedDeclaration":2655,"src":"2016:13:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint24_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint24)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2016:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"2010:30:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":2746,"nodeType":"ExpressionStatement","src":"2010:30:21"},{"expression":{"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2747,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"2050:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2750,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"2074:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2748,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"2059:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toAddress","nodeType":"MemberAccess","referencedDeclaration":2620,"src":"2059:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (address)"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2059:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2050:36:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2753,"nodeType":"ExpressionStatement","src":"2050:36:21"}]},"documentation":{"id":2722,"nodeType":"StructuredDocumentation","src":"1523:251:21","text":"@notice Decodes the first pool in path\n @param path The bytes encoded swap path\n @return tokenA The first token of the given pool\n @return tokenB The second token of the given pool\n @return fee The fee level of the pool"},"id":2755,"implemented":true,"kind":"function","modifiers":[],"name":"decodeFirstPool","nodeType":"FunctionDefinition","parameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2755,"src":"1804:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2723,"name":"bytes","nodeType":"ElementaryTypeName","src":"1804:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1803:19:21"},"returnParameters":{"id":2732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":2755,"src":"1883:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2726,"name":"address","nodeType":"ElementaryTypeName","src":"1883:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2729,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":2755,"src":"1911:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2728,"name":"address","nodeType":"ElementaryTypeName","src":"1911:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2731,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2755,"src":"1939:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2730,"name":"uint24","nodeType":"ElementaryTypeName","src":"1939:6:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"1869:90:21"},"scope":2789,"src":"1779:314:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2769,"nodeType":"Block","src":"2397:49:21","statements":[{"expression":{"arguments":[{"hexValue":"30","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2425:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2766,"name":"POP_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"2428:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2763,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"2414:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2585,"src":"2414:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2414:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2762,"id":2768,"nodeType":"Return","src":"2407:32:21"}]},"documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"2099:215:21","text":"@notice Gets the segment corresponding to the first pool in the path\n @param path The bytes encoded swap path\n @return The segment containing all data necessary to target the first pool in the path"},"id":2770,"implemented":true,"kind":"function","modifiers":[],"name":"getFirstPool","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2770,"src":"2341:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2757,"name":"bytes","nodeType":"ElementaryTypeName","src":"2341:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2340:19:21"},"returnParameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2770,"src":"2383:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2760,"name":"bytes","nodeType":"ElementaryTypeName","src":"2383:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2382:14:21"},"scope":2789,"src":"2319:127:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2787,"nodeType":"Block","src":"2710:74:21","statements":[{"expression":{"arguments":[{"id":2780,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"2738:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2781,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"2751:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2751:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2783,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"2765:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2751:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2778,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"2727:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2585,"src":"2727:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2727:50:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2777,"id":2786,"nodeType":"Return","src":"2720:57:21"}]},"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"2452:178:21","text":"@notice Skips a token + fee element from the buffer and returns the remainder\n @param path The swap path\n @return The remaining token + fee elements in the path"},"id":2788,"implemented":true,"kind":"function","modifiers":[],"name":"skipToken","nodeType":"FunctionDefinition","parameters":{"id":2774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2773,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2788,"src":"2654:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2772,"name":"bytes","nodeType":"ElementaryTypeName","src":"2654:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2653:19:21"},"returnParameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2788,"src":"2696:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2775,"name":"bytes","nodeType":"ElementaryTypeName","src":"2696:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2695:14:21"},"scope":2789,"src":"2635:149:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2790,"src":"164:2622:21"}],"src":"45:2742:21"},"id":21},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol","exportedSymbols":{"PoolAddress":[2881]},"id":2882,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2791,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:22"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2792,"nodeType":"StructuredDocumentation","src":"71:96:22","text":"@title Provides functions for deriving a pool address from the factory, tokens, and the fee"},"fullyImplemented":true,"id":2881,"linearizedBaseContracts":[2881],"name":"PoolAddress","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2795,"mutability":"constant","name":"POOL_INIT_CODE_HASH","nodeType":"VariableDeclaration","scope":2881,"src":"193:114:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"193:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"241:66:22","typeDescriptions":{"typeIdentifier":"t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1","typeString":"int_const 1028...(70 digits omitted)...6276"},"value":"0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"},"visibility":"internal"},{"canonicalName":"PoolAddress.PoolKey","id":2802,"members":[{"constant":false,"id":2797,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":2802,"src":"387:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2796,"name":"address","nodeType":"ElementaryTypeName","src":"387:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2799,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":2802,"src":"411:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2798,"name":"address","nodeType":"ElementaryTypeName","src":"411:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2801,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2802,"src":"435:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2800,"name":"uint24","nodeType":"ElementaryTypeName","src":"435:6:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"name":"PoolKey","nodeType":"StructDefinition","scope":2881,"src":"362:90:22","visibility":"public"},{"body":{"id":2832,"nodeType":"Block","src":"917:141:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2814,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"931:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2815,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"940:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"931:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2825,"nodeType":"IfStatement","src":"927:56:22","trueBody":{"expression":{"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":2817,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"949:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2818,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"957:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2819,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"948:16:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":2820,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"968:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2821,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"976:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2822,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"967:16:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"src":"948:35:22","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2824,"nodeType":"ExpressionStatement","src":"948:35:22"}},{"expression":{"arguments":[{"id":2827,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"1017:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2828,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"1033:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2829,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"1046:3:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":2826,"name":"PoolKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"1000:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolKey_$2802_storage_ptr_$","typeString":"type(struct PoolAddress.PoolKey storage pointer)"}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["token0","token1","fee"],"nodeType":"FunctionCall","src":"1000:51:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"functionReturnParameters":2813,"id":2831,"nodeType":"Return","src":"993:58:22"}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"458:321:22","text":"@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"},"id":2833,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolKey","nodeType":"FunctionDefinition","parameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":2833,"src":"813:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2804,"name":"address","nodeType":"ElementaryTypeName","src":"813:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2807,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":2833,"src":"837:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2806,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2809,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2833,"src":"861:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2808,"name":"uint24","nodeType":"ElementaryTypeName","src":"861:6:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"803:74:22"},"returnParameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2833,"src":"901:14:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey"},"typeName":{"id":2811,"name":"PoolKey","nodeType":"UserDefinedTypeName","referencedDeclaration":2802,"src":"901:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_storage_ptr","typeString":"struct PoolAddress.PoolKey"}},"visibility":"internal"}],"src":"900:16:22"},"scope":2881,"src":"784:274:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2879,"nodeType":"Block","src":"1403:414:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2844,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1421:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2845,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":2797,"src":"1421:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2846,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1434:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":2799,"src":"1434:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1421:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2843,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1413:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1413:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2850,"nodeType":"ExpressionStatement","src":"1413:32:22"},{"expression":{"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2851,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1455:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"ff","id":2859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"1581:7:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""}},{"id":2860,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"1614:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"expression":{"id":2864,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1668:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2865,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":2797,"src":"1668:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2866,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1680:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":2799,"src":"1680:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2868,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1692:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}},"id":2869,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":2801,"src":"1692:7:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":2862,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1657:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1657:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1657:43:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2861,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1647:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1647:54:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2872,"name":"POOL_INIT_CODE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"1727:19:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2857,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1539:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1539:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1539:229:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2856,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1508:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1508:278:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1483:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2854,"name":"uint256","nodeType":"ElementaryTypeName","src":"1483:7:22","typeDescriptions":{}}},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1483:317:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1462:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2852,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:22","typeDescriptions":{}}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1462:348:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1455:355:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2878,"nodeType":"ExpressionStatement","src":"1455:355:22"}]},"documentation":{"id":2834,"nodeType":"StructuredDocumentation","src":"1064:236:22","text":"@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"},"id":2880,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nodeType":"FunctionDefinition","parameters":{"id":2839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"factory","nodeType":"VariableDeclaration","scope":2880,"src":"1329:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2835,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2838,"mutability":"mutable","name":"key","nodeType":"VariableDeclaration","scope":2880,"src":"1346:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey"},"typeName":{"id":2837,"name":"PoolKey","nodeType":"UserDefinedTypeName","referencedDeclaration":2802,"src":"1346:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_storage_ptr","typeString":"struct PoolAddress.PoolKey"}},"visibility":"internal"}],"src":"1328:37:22"},"returnParameters":{"id":2842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2841,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":2880,"src":"1389:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2840,"name":"address","nodeType":"ElementaryTypeName","src":"1389:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1388:14:22"},"scope":2881,"src":"1305:512:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2882,"src":"167:1652:22"}],"src":"45:1775:22"},"id":22},"contracts/UniV3QuoterCore.sol":{"ast":{"absolutePath":"contracts/UniV3QuoterCore.sol","exportedSymbols":{"BitMath":[720],"FixedPoint128":[727],"FixedPoint96":[737],"FullMath":[910],"GlobalState":[3839],"IUniV3likeQuoterCore":[3881],"IUniswapV3Pool":[21],"IUniswapV3PoolActions":[117],"IUniswapV3PoolDerivedState":[148],"IUniswapV3PoolEvents":[267],"IUniswapV3PoolImmutables":[307],"IUniswapV3PoolOwnerActions":[333],"IUniswapV3PoolState":[441],"LiquidityMath":[962],"LowGasSafeMath":[1092],"SafeCast":[1162],"SqrtPriceMath":[1678],"StepComputations":[3865],"SwapMath":[1939],"SwapState":[3850],"TickBitmap":[4163],"TickMath":[2474],"UniV3QuoterCore":[3010],"UniV3likeQuoterCore":[3830],"UnsafeMath":[2490]},"id":3011,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2883,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:23"},{"absolutePath":"contracts/base/UniV3likeQuoterCore.sol","file":"./base/UniV3likeQuoterCore.sol","id":2884,"nodeType":"ImportDirective","scope":3011,"sourceUnit":3831,"src":"70:40:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/TickBitmap.sol","file":"./libraries/TickBitmap.sol","id":2885,"nodeType":"ImportDirective","scope":3011,"sourceUnit":4164,"src":"111:36:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2886,"name":"UniV3likeQuoterCore","nodeType":"UserDefinedTypeName","referencedDeclaration":3830,"src":"177:19:23","typeDescriptions":{"typeIdentifier":"t_contract$_UniV3likeQuoterCore_$3830","typeString":"contract UniV3likeQuoterCore"}},"id":2887,"nodeType":"InheritanceSpecifier","src":"177:19:23"}],"contractDependencies":[3830],"contractKind":"contract","fullyImplemented":true,"id":3010,"linearizedBaseContracts":[3010,3830],"name":"UniV3QuoterCore","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3777],"body":{"id":2921,"nodeType":"Block","src":"315:135:23","statements":[{"expression":{"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2895,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"325:2:23","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":2897,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":3838,"src":"325:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2901,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"356:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2900,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"341:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"341:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":294,"src":"341:24:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint24_$","typeString":"function () view external returns (uint24)"}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"341:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":2899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"334:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":2898,"name":"uint16","nodeType":"ElementaryTypeName","src":"334:6:23","typeDescriptions":{}}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"334:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"325:43:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2907,"nodeType":"ExpressionStatement","src":"325:43:23"},{"expression":{"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":2908,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"379:2:23","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":2910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startPrice","nodeType":"MemberAccess","referencedDeclaration":3834,"src":"379:13:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":2911,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"394:2:23","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":2912,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startTick","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"394:12:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},null,null,null,null,null],"id":2913,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"378:34:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$__$__$__$__$__$","typeString":"tuple(uint160,int24,,,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2915,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"430:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2914,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"415:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"415:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":354,"src":"415:26:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"415:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"src":"378:65:23","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2920,"nodeType":"ExpressionStatement","src":"378:65:23"}]},"id":2922,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolGlobalState","nodeType":"FunctionDefinition","overrides":{"id":2891,"nodeType":"OverrideSpecifier","overrides":[],"src":"269:8:23"},"parameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":2922,"src":"241:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2888,"name":"address","nodeType":"ElementaryTypeName","src":"241:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"231:28:23"},"returnParameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"gs","nodeType":"VariableDeclaration","scope":2922,"src":"292:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState"},"typeName":{"id":2892,"name":"GlobalState","nodeType":"UserDefinedTypeName","referencedDeclaration":3839,"src":"292:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_storage_ptr","typeString":"struct GlobalState"}},"visibility":"internal"}],"src":"291:23:23"},"scope":3010,"src":"204:246:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3791],"body":{"id":2936,"nodeType":"Block","src":"551:58:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2931,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"583:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2930,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"568:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"568:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickSpacing","nodeType":"MemberAccess","referencedDeclaration":300,"src":"568:32:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int24_$","typeString":"function () view external returns (int24)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"568:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"functionReturnParameters":2929,"id":2935,"nodeType":"Return","src":"561:41:23"}]},"id":2937,"implemented":true,"kind":"function","modifiers":[],"name":"getTickSpacing","nodeType":"FunctionDefinition","overrides":{"id":2926,"nodeType":"OverrideSpecifier","overrides":[],"src":"521:8:23"},"parameters":{"id":2925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2924,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":2937,"src":"493:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2923,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"483:28:23"},"returnParameters":{"id":2929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2928,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2937,"src":"544:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2927,"name":"int24","nodeType":"ElementaryTypeName","src":"544:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"543:7:23"},"scope":3010,"src":"460:149:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3784],"body":{"id":2951,"nodeType":"Block","src":"696:56:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2946,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"728:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2945,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"713:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"713:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":380,"src":"713:30:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint128_$","typeString":"function () view external returns (uint128)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"713:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":2944,"id":2950,"nodeType":"Return","src":"706:39:23"}]},"id":2952,"implemented":true,"kind":"function","modifiers":[],"name":"getLiquidity","nodeType":"FunctionDefinition","overrides":{"id":2941,"nodeType":"OverrideSpecifier","overrides":[],"src":"664:8:23"},"parameters":{"id":2940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2939,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":2952,"src":"641:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"641:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"640:14:23"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2952,"src":"687:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2942,"name":"uint128","nodeType":"ElementaryTypeName","src":"687:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"686:9:23"},"scope":3010,"src":"619:133:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3806],"body":{"id":2976,"nodeType":"Block","src":"973:169:23","statements":[{"expression":{"arguments":[{"id":2970,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"1047:11:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2971,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"1072:4:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":2972,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"1090:11:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":2973,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"1115:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2968,"name":"TickBitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"990:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickBitmap_$4163_$","typeString":"type(library TickBitmap)"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nextInitializedTickWithinOneWord","nodeType":"MemberAccess","referencedDeclaration":4162,"src":"990:43:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$_t_int24_$_t_bool_$returns$_t_int24_$_t_bool_$","typeString":"function (address,int24,int24,bool) view returns (int24,bool)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"990:145:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$","typeString":"tuple(int24,bool)"}},"functionReturnParameters":2967,"id":2975,"nodeType":"Return","src":"983:152:23"}]},"id":2977,"implemented":true,"kind":"function","modifiers":[],"name":"nextInitializedTickWithinOneWord","nodeType":"FunctionDefinition","overrides":{"id":2962,"nodeType":"OverrideSpecifier","overrides":[],"src":"920:8:23"},"parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2954,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":2977,"src":"813:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2953,"name":"address","nodeType":"ElementaryTypeName","src":"813:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2956,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2977,"src":"842:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2955,"name":"int24","nodeType":"ElementaryTypeName","src":"842:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2958,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":2977,"src":"862:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2957,"name":"int24","nodeType":"ElementaryTypeName","src":"862:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":2977,"src":"889:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2959,"name":"bool","nodeType":"ElementaryTypeName","src":"889:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:107:23"},"returnParameters":{"id":2967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":2977,"src":"943:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2963,"name":"int24","nodeType":"ElementaryTypeName","src":"943:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":2966,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":2977,"src":"955:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2965,"name":"bool","nodeType":"ElementaryTypeName","src":"955:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"942:30:23"},"scope":3010,"src":"762:380:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3829],"body":{"id":3008,"nodeType":"Block","src":"1510:56:23","statements":[{"expression":{"arguments":[{"id":3005,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"1554:4:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"expression":{"arguments":[{"id":3002,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"1542:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3001,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"1527:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1527:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ticks","nodeType":"MemberAccess","referencedDeclaration":402,"src":"1527:26:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_int24_$returns$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"function (int24) view external returns (uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1527:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"tuple(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"functionReturnParameters":3000,"id":3007,"nodeType":"Return","src":"1520:39:23"}]},"id":3009,"implemented":true,"kind":"function","modifiers":[],"name":"getTicks","nodeType":"FunctionDefinition","overrides":{"id":2983,"nodeType":"OverrideSpecifier","overrides":[],"src":"1205:8:23"},"parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2979,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3009,"src":"1170:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2978,"name":"address","nodeType":"ElementaryTypeName","src":"1170:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2981,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3009,"src":"1184:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2980,"name":"int24","nodeType":"ElementaryTypeName","src":"1184:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1169:26:23"},"returnParameters":{"id":3000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"liquidityTotal","nodeType":"VariableDeclaration","scope":3009,"src":"1237:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2984,"name":"uint128","nodeType":"ElementaryTypeName","src":"1237:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2987,"mutability":"mutable","name":"liquidityDelta","nodeType":"VariableDeclaration","scope":3009,"src":"1269:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":2986,"name":"int128","nodeType":"ElementaryTypeName","src":"1269:6:23","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":2989,"mutability":"mutable","name":"outerFeeGrowth0Token","nodeType":"VariableDeclaration","scope":3009,"src":"1300:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"1300:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2991,"mutability":"mutable","name":"outerFeeGrowth1Token","nodeType":"VariableDeclaration","scope":3009,"src":"1338:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2990,"name":"uint256","nodeType":"ElementaryTypeName","src":"1338:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2993,"mutability":"mutable","name":"outerTickCumulative","nodeType":"VariableDeclaration","scope":3009,"src":"1376:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":2992,"name":"int56","nodeType":"ElementaryTypeName","src":"1376:5:23","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":2995,"mutability":"mutable","name":"outerSecondsPerLiquidity","nodeType":"VariableDeclaration","scope":3009,"src":"1411:32:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2994,"name":"uint160","nodeType":"ElementaryTypeName","src":"1411:7:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":2997,"mutability":"mutable","name":"outerSecondsSpent","nodeType":"VariableDeclaration","scope":3009,"src":"1453:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2996,"name":"uint32","nodeType":"ElementaryTypeName","src":"1453:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2999,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3009,"src":"1487:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2998,"name":"bool","nodeType":"ElementaryTypeName","src":"1487:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1227:282:23"},"scope":3010,"src":"1152:414:23","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3011,"src":"149:1420:23"}],"src":"45:1524:23"},"id":23},"contracts/UniswapV3StaticQuoter.sol":{"ast":{"absolutePath":"contracts/UniswapV3StaticQuoter.sol","exportedSymbols":{"BitMath":[720],"BytesLib":[2656],"FixedPoint128":[727],"FixedPoint96":[737],"FullMath":[910],"GlobalState":[3839],"IPeripheryImmutableState":[2537],"IUniV3likeQuoterCore":[3881],"IUniswapV3Pool":[21],"IUniswapV3PoolActions":[117],"IUniswapV3PoolDerivedState":[148],"IUniswapV3PoolEvents":[267],"IUniswapV3PoolImmutables":[307],"IUniswapV3PoolOwnerActions":[333],"IUniswapV3PoolState":[441],"IUniswapV3StaticQuoter":[3943],"LiquidityMath":[962],"LowGasSafeMath":[1092],"Path":[2789],"PeripheryImmutableState":[2521],"PoolAddress":[2881],"SafeCast":[1162],"SqrtPriceMath":[1678],"StepComputations":[3865],"SwapMath":[1939],"SwapState":[3850],"TickBitmap":[4163],"TickMath":[2474],"UniV3QuoterCore":[3010],"UniV3likeQuoterCore":[3830],"UniswapV3StaticQuoter":[3324],"UnsafeMath":[2490]},"id":3325,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3012,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:24"},{"id":3013,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"69:19:24"},{"absolutePath":"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol","file":"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol","id":3014,"nodeType":"ImportDirective","scope":3325,"sourceUnit":2522,"src":"90:74:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol","file":"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol","id":3015,"nodeType":"ImportDirective","scope":3325,"sourceUnit":2882,"src":"165:67:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/Path.sol","file":"@uniswap/v3-periphery/contracts/libraries/Path.sol","id":3016,"nodeType":"ImportDirective","scope":3325,"sourceUnit":2790,"src":"233:60:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IUniswapV3StaticQuoter.sol","file":"./interfaces/IUniswapV3StaticQuoter.sol","id":3017,"nodeType":"ImportDirective","scope":3325,"sourceUnit":3944,"src":"295:49:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/UniV3QuoterCore.sol","file":"./UniV3QuoterCore.sol","id":3018,"nodeType":"ImportDirective","scope":3325,"sourceUnit":3011,"src":"345:31:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3019,"name":"IUniswapV3StaticQuoter","nodeType":"UserDefinedTypeName","referencedDeclaration":3943,"src":"412:22:24","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3StaticQuoter_$3943","typeString":"contract IUniswapV3StaticQuoter"}},"id":3020,"nodeType":"InheritanceSpecifier","src":"412:22:24"},{"baseName":{"id":3021,"name":"UniV3QuoterCore","nodeType":"UserDefinedTypeName","referencedDeclaration":3010,"src":"436:15:24","typeDescriptions":{"typeIdentifier":"t_contract$_UniV3QuoterCore_$3010","typeString":"contract UniV3QuoterCore"}},"id":3022,"nodeType":"InheritanceSpecifier","src":"436:15:24"}],"contractDependencies":[3010,3830,3943],"contractKind":"contract","fullyImplemented":true,"id":3324,"linearizedBaseContracts":[3324,3010,3830,3943],"name":"UniswapV3StaticQuoter","nodeType":"ContractDefinition","nodes":[{"id":3025,"libraryName":{"id":3023,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1092,"src":"464:14:24","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1092","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"458:33:24","typeName":{"id":3024,"name":"uint256","nodeType":"ElementaryTypeName","src":"483:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3028,"libraryName":{"id":3026,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1092,"src":"502:14:24","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1092","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"496:32:24","typeName":{"id":3027,"name":"int256","nodeType":"ElementaryTypeName","src":"521:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":3031,"libraryName":{"id":3029,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1162,"src":"539:8:24","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1162","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"533:27:24","typeName":{"id":3030,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3034,"libraryName":{"id":3032,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1162,"src":"571:8:24","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1162","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"565:26:24","typeName":{"id":3033,"name":"int256","nodeType":"ElementaryTypeName","src":"584:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":3037,"libraryName":{"id":3035,"name":"Path","nodeType":"UserDefinedTypeName","referencedDeclaration":2789,"src":"602:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_Path_$2789","typeString":"library Path"}},"nodeType":"UsingForDirective","src":"596:21:24","typeName":{"id":3036,"name":"bytes","nodeType":"ElementaryTypeName","src":"611:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":false,"id":3039,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","scope":3324,"src":"623:25:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3038,"name":"address","nodeType":"ElementaryTypeName","src":"623:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"body":{"id":3048,"nodeType":"Block","src":"685:35:24","statements":[{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3044,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"695:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3045,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"705:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"695:18:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3047,"nodeType":"ExpressionStatement","src":"695:18:24"}]},"id":3049,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":3049,"src":"667:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3040,"name":"address","nodeType":"ElementaryTypeName","src":"667:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"666:18:24"},"returnParameters":{"id":3043,"nodeType":"ParameterList","parameters":[],"src":"685:0:24"},"scope":3324,"src":"655:65:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3073,"nodeType":"Block","src":"855:220:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":3063,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"964:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3066,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"1016:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3067,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"1024:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3068,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"1032:3:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":3064,"name":"PoolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"993:11:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoolAddress_$2881_$","typeString":"type(library PoolAddress)"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPoolKey","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"993:22:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$2802_memory_ptr_$","typeString":"function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"}},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"993:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_PoolKey_$2802_memory_ptr","typeString":"struct PoolAddress.PoolKey memory"}],"expression":{"id":3061,"name":"PoolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"916:11:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PoolAddress_$2881_$","typeString":"type(library PoolAddress)"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"computeAddress","nodeType":"MemberAccess","referencedDeclaration":2880,"src":"916:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$2802_memory_ptr_$returns$_t_address_$","typeString":"function (address,struct PoolAddress.PoolKey memory) pure returns (address)"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"916:138:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3060,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"884:14:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"884:184:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"functionReturnParameters":3059,"id":3072,"nodeType":"Return","src":"865:203:24"}]},"id":3074,"implemented":true,"kind":"function","modifiers":[],"name":"getPool","nodeType":"FunctionDefinition","parameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3051,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":3074,"src":"752:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3050,"name":"address","nodeType":"ElementaryTypeName","src":"752:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3053,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":3074,"src":"776:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3052,"name":"address","nodeType":"ElementaryTypeName","src":"776:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3055,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3074,"src":"800:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3054,"name":"uint24","nodeType":"ElementaryTypeName","src":"800:6:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"742:74:24"},"returnParameters":{"id":3059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3058,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3074,"src":"839:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"},"typeName":{"id":3057,"name":"IUniswapV3Pool","nodeType":"UserDefinedTypeName","referencedDeclaration":21,"src":"839:14:24","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"visibility":"internal"}],"src":"838:16:24"},"scope":3324,"src":"726:349:24","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[3913],"body":{"id":3148,"nodeType":"Block","src":"1218:680:24","statements":[{"assignments":[3083],"declarations":[{"constant":false,"id":3083,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3148,"src":"1228:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3082,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3089,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3084,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1246:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3896,"src":"1246:14:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3086,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1263:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3898,"src":"1263:15:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1246:32:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1228:50:24"},{"assignments":[3091],"declarations":[{"constant":false,"id":3091,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3148,"src":"1288:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"},"typeName":{"id":3090,"name":"IUniswapV3Pool","nodeType":"UserDefinedTypeName","referencedDeclaration":21,"src":"1288:14:24","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"visibility":"internal"}],"id":3100,"initialValue":{"arguments":[{"expression":{"id":3093,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1331:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3896,"src":"1331:14:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3095,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1359:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3096,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3898,"src":"1359:15:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3097,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1388:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3098,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":3902,"src":"1388:10:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":3092,"name":"getPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"1310:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$21_$","typeString":"function (address,address,uint24) view returns (contract IUniswapV3Pool)"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1310:98:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"nodeType":"VariableDeclarationStatement","src":"1288:120:24"},{"assignments":[3102,3104],"declarations":[{"constant":false,"id":3102,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3148,"src":"1420:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3101,"name":"int256","nodeType":"ElementaryTypeName","src":"1420:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3104,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3148,"src":"1436:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3103,"name":"int256","nodeType":"ElementaryTypeName","src":"1436:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3134,"initialValue":{"arguments":[{"arguments":[{"id":3108,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"1481:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}],"id":3107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1473:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3106,"name":"address","nodeType":"ElementaryTypeName","src":"1473:7:24","typeDescriptions":{}}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1473:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3110,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"1500:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3111,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1524:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3112,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"1524:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"1524:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1524:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3115,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1564:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":3904,"src":"1564:24:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1592:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1564:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":3130,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"1789:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":3131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":3904,"src":"1789:24:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1564:249:24","trueExpression":{"components":[{"condition":{"id":3119,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"1634:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3124,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"1725:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1960,"src":"1725:23:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1751:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1725:27:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1634:118:24","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3120,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"1671:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1956,"src":"1671:23:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1697:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1671:27:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":3129,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1612:158:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3105,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"1454:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1454:369:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"1419:404:24"},{"expression":{"condition":{"id":3135,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"1841:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1882:8:24","subExpression":{"id":3143,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"1883:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1874:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"1874:7:24","typeDescriptions":{}}},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1874:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1841:50:24","trueExpression":{"arguments":[{"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1862:8:24","subExpression":{"id":3138,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"1863:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1854:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:24","typeDescriptions":{}}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1854:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3081,"id":3147,"nodeType":"Return","src":"1834:57:24"}]},"functionSelector":"c6a5026a","id":3149,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactInputSingle","nodeType":"FunctionDefinition","overrides":{"id":3078,"nodeType":"OverrideSpecifier","overrides":[],"src":"1181:8:24"},"parameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3076,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":3149,"src":"1121:41:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"},"typeName":{"id":3075,"name":"QuoteExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":3905,"src":"1121:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"}},"visibility":"internal"}],"src":"1111:57:24"},"returnParameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3149,"src":"1199:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1198:19:24"},"scope":3324,"src":"1081:817:24","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3894],"body":{"id":3198,"nodeType":"Block","src":"2037:746:24","statements":[{"body":{"id":3196,"nodeType":"Block","src":"2060:717:24","statements":[{"assignments":[3161,3163,3165],"declarations":[{"constant":false,"id":3161,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3196,"src":"2075:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3160,"name":"address","nodeType":"ElementaryTypeName","src":"2075:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3163,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3196,"src":"2092:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3162,"name":"address","nodeType":"ElementaryTypeName","src":"2092:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3165,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3196,"src":"2110:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3164,"name":"uint24","nodeType":"ElementaryTypeName","src":"2110:6:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":3169,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3166,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"2124:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decodeFirstPool","nodeType":"MemberAccess","referencedDeclaration":2755,"src":"2124:37:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (address,address,uint24)"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2124:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint24_$","typeString":"tuple(address,address,uint24)"}},"nodeType":"VariableDeclarationStatement","src":"2074:89:24"},{"expression":{"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3170,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"2257:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3173,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"2366:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3174,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"2405:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3175,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3165,"src":"2440:3:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":3176,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"2475:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2524:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3172,"name":"QuoteExactInputSingleParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"2307:27:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_QuoteExactInputSingleParams_$3905_storage_ptr_$","typeString":"type(struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams storage pointer)"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","fee","amountIn","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"2307:237:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}],"id":3171,"name":"quoteExactInputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"2268:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory) view returns (uint256)"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2268:290:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2257:301:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3181,"nodeType":"ExpressionStatement","src":"2257:301:24"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3182,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"2632:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"hasMultiplePools","nodeType":"MemberAccess","referencedDeclaration":2703,"src":"2632:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2632:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3194,"nodeType":"Block","src":"2719:48:24","statements":[{"expression":{"id":3192,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"2744:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3158,"id":3193,"nodeType":"Return","src":"2737:15:24"}]},"id":3195,"nodeType":"IfStatement","src":"2628:139:24","trueBody":{"id":3191,"nodeType":"Block","src":"2657:56:24","statements":[{"expression":{"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3185,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"2675:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3186,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"2682:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"skipToken","nodeType":"MemberAccess","referencedDeclaration":2788,"src":"2682:14:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2682:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2675:23:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3190,"nodeType":"ExpressionStatement","src":"2675:23:24"}]}}]},"condition":{"hexValue":"74727565","id":3159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2054:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3197,"nodeType":"WhileStatement","src":"2047:730:24"}]},"functionSelector":"cdca1753","id":3199,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactInput","nodeType":"FunctionDefinition","overrides":{"id":3155,"nodeType":"OverrideSpecifier","overrides":[],"src":"2000:8:24"},"parameters":{"id":3154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3199,"src":"1938:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3150,"name":"bytes","nodeType":"ElementaryTypeName","src":"1938:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3153,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3199,"src":"1965:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1965:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1928:59:24"},"returnParameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3199,"src":"2018:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"2018:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2017:19:24"},"scope":3324,"src":"1904:879:24","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3942],"body":{"id":3272,"nodeType":"Block","src":"2927:677:24","statements":[{"assignments":[3208],"declarations":[{"constant":false,"id":3208,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3272,"src":"2937:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3207,"name":"bool","nodeType":"ElementaryTypeName","src":"2937:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3214,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3209,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2955:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3925,"src":"2955:14:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3211,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2972:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3927,"src":"2972:15:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2955:32:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2937:50:24"},{"assignments":[3216],"declarations":[{"constant":false,"id":3216,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3272,"src":"2997:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"},"typeName":{"id":3215,"name":"IUniswapV3Pool","nodeType":"UserDefinedTypeName","referencedDeclaration":21,"src":"2997:14:24","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"visibility":"internal"}],"id":3225,"initialValue":{"arguments":[{"expression":{"id":3218,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3040:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3925,"src":"3040:14:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3220,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3068:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3927,"src":"3068:15:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3222,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3097:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":3931,"src":"3097:10:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":3217,"name":"getPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"3019:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$21_$","typeString":"function (address,address,uint24) view returns (contract IUniswapV3Pool)"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:98:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"nodeType":"VariableDeclarationStatement","src":"2997:120:24"},{"assignments":[3227,3229],"declarations":[{"constant":false,"id":3227,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3272,"src":"3129:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3226,"name":"int256","nodeType":"ElementaryTypeName","src":"3129:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3229,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3272,"src":"3145:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3228,"name":"int256","nodeType":"ElementaryTypeName","src":"3145:6:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3260,"initialValue":{"arguments":[{"arguments":[{"id":3233,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"3190:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}],"id":3232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3182:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3231,"name":"address","nodeType":"ElementaryTypeName","src":"3182:7:24","typeDescriptions":{}}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3182:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3235,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3209:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3233:25:24","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3236,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3234:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3929,"src":"3234:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"3234:22:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3234:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3241,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3272:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":3933,"src":"3272:24:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3300:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3272:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":3256,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"3497:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":3257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":3933,"src":"3497:24:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3272:249:24","trueExpression":{"components":[{"condition":{"id":3245,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3342:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3250,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"3433:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1960,"src":"3433:23:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3459:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3433:27:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3342:118:24","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3246,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"3379:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1956,"src":"3379:23:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3405:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3379:27:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":3255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3320:158:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3230,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"3163:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3163:368:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"3128:403:24"},{"expression":{"condition":{"id":3261,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3549:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":3268,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"3589:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3581:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"3581:7:24","typeDescriptions":{}}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3581:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3549:48:24","trueExpression":{"arguments":[{"id":3264,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"3570:7:24","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3562:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3262,"name":"uint256","nodeType":"ElementaryTypeName","src":"3562:7:24","typeDescriptions":{}}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3562:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3206,"id":3271,"nodeType":"Return","src":"3542:55:24"}]},"functionSelector":"bd21704a","id":3273,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactOutputSingle","nodeType":"FunctionDefinition","overrides":{"id":3203,"nodeType":"OverrideSpecifier","overrides":[],"src":"2891:8:24"},"parameters":{"id":3202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":3273,"src":"2830:42:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"},"typeName":{"id":3200,"name":"QuoteExactOutputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":3934,"src":"2830:28:24","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"}},"visibility":"internal"}],"src":"2820:58:24"},"returnParameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3273,"src":"2909:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"2909:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2908:18:24"},"scope":3324,"src":"2789:815:24","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3923],"body":{"id":3322,"nodeType":"Block","src":"3744:749:24","statements":[{"body":{"id":3320,"nodeType":"Block","src":"3767:720:24","statements":[{"assignments":[3285,3287,3289],"declarations":[{"constant":false,"id":3285,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3320,"src":"3782:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3284,"name":"address","nodeType":"ElementaryTypeName","src":"3782:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3320,"src":"3800:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3286,"name":"address","nodeType":"ElementaryTypeName","src":"3800:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3289,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3320,"src":"3817:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3288,"name":"uint24","nodeType":"ElementaryTypeName","src":"3817:6:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":3293,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3290,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"3831:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decodeFirstPool","nodeType":"MemberAccess","referencedDeclaration":2755,"src":"3831:37:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (address,address,uint24)"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3831:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint24_$","typeString":"tuple(address,address,uint24)"}},"nodeType":"VariableDeclarationStatement","src":"3781:89:24"},{"expression":{"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3294,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"3964:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3297,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"4076:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3298,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"4115:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3299,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"4150:3:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":3300,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4183:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4233:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3296,"name":"QuoteExactOutputSingleParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"4016:28:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_QuoteExactOutputSingleParams_$3934_storage_ptr_$","typeString":"type(struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams storage pointer)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","fee","amount","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"4016:237:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}],"id":3295,"name":"quoteExactOutputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"3976:22:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory) view returns (uint256)"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3976:291:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3964:303:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3305,"nodeType":"ExpressionStatement","src":"3964:303:24"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3306,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"4341:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"hasMultiplePools","nodeType":"MemberAccess","referencedDeclaration":2703,"src":"4341:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4341:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3318,"nodeType":"Block","src":"4428:49:24","statements":[{"expression":{"id":3316,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"4453:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3282,"id":3317,"nodeType":"Return","src":"4446:16:24"}]},"id":3319,"nodeType":"IfStatement","src":"4337:140:24","trueBody":{"id":3315,"nodeType":"Block","src":"4366:56:24","statements":[{"expression":{"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3309,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"4384:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3310,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"4391:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"skipToken","nodeType":"MemberAccess","referencedDeclaration":2788,"src":"4391:14:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4391:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4384:23:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3314,"nodeType":"ExpressionStatement","src":"4384:23:24"}]}}]},"condition":{"hexValue":"74727565","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3761:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3321,"nodeType":"WhileStatement","src":"3754:733:24"}]},"functionSelector":"2f80bb1d","id":3323,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactOutput","nodeType":"FunctionDefinition","overrides":{"id":3279,"nodeType":"OverrideSpecifier","overrides":[],"src":"3708:8:24"},"parameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3275,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3323,"src":"3645:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3274,"name":"bytes","nodeType":"ElementaryTypeName","src":"3645:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3277,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3323,"src":"3672:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint256","nodeType":"ElementaryTypeName","src":"3672:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3635:60:24"},"returnParameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3281,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3323,"src":"3726:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"3726:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3725:18:24"},"scope":3324,"src":"3610:883:24","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3325,"src":"378:4117:24"}],"src":"45:4451:24"},"id":24},"contracts/base/UniV3likeQuoterCore.sol":{"ast":{"absolutePath":"contracts/base/UniV3likeQuoterCore.sol","exportedSymbols":{"FixedPoint128":[727],"FixedPoint96":[737],"FullMath":[910],"GlobalState":[3839],"IUniV3likeQuoterCore":[3881],"LiquidityMath":[962],"LowGasSafeMath":[1092],"SafeCast":[1162],"SqrtPriceMath":[1678],"StepComputations":[3865],"SwapMath":[1939],"SwapState":[3850],"TickMath":[2474],"UniV3likeQuoterCore":[3830],"UnsafeMath":[2490]},"id":3831,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3326,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:25"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","file":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","id":3327,"nodeType":"ImportDirective","scope":3831,"sourceUnit":1093,"src":"70:65:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol","file":"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol","id":3328,"nodeType":"ImportDirective","scope":3831,"sourceUnit":963,"src":"136:64:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol","file":"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol","id":3329,"nodeType":"ImportDirective","scope":3831,"sourceUnit":728,"src":"201:64:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","file":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","id":3330,"nodeType":"ImportDirective","scope":3831,"sourceUnit":1163,"src":"266:59:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/TickMath.sol","file":"@uniswap/v3-core/contracts/libraries/TickMath.sol","id":3331,"nodeType":"ImportDirective","scope":3831,"sourceUnit":2475,"src":"326:59:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","file":"@uniswap/v3-core/contracts/libraries/FullMath.sol","id":3332,"nodeType":"ImportDirective","scope":3831,"sourceUnit":911,"src":"386:59:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SwapMath.sol","file":"@uniswap/v3-core/contracts/libraries/SwapMath.sol","id":3333,"nodeType":"ImportDirective","scope":3831,"sourceUnit":1940,"src":"446:59:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IUniV3likeQuoterCore.sol","file":"../interfaces/IUniV3likeQuoterCore.sol","id":3334,"nodeType":"ImportDirective","scope":3831,"sourceUnit":3882,"src":"506:48:25","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":3830,"linearizedBaseContracts":[3830],"name":"UniV3likeQuoterCore","nodeType":"ContractDefinition","nodes":[{"id":3337,"libraryName":{"id":3335,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1092,"src":"607:14:25","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1092","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"601:32:25","typeName":{"id":3336,"name":"int256","nodeType":"ElementaryTypeName","src":"626:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":3340,"libraryName":{"id":3338,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1162,"src":"644:8:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1162","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"638:27:25","typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3343,"libraryName":{"id":3341,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1162,"src":"676:8:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1162","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"670:26:25","typeName":{"id":3342,"name":"int256","nodeType":"ElementaryTypeName","src":"689:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"body":{"id":3596,"nodeType":"Block","src":"905:3081:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3359,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"923:15:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"942:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"923:20:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"616d6f756e745370656369666965642063616e6e6f74206265207a65726f","id":3362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"945:32:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_bc23a3cab2e1b389c1dc1dd0cd3093ed83859bcfcc938d0ab91d1b009c811c10","typeString":"literal_string \"amountSpecified cannot be zero\""},"value":"amountSpecified cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bc23a3cab2e1b389c1dc1dd0cd3093ed83859bcfcc938d0ab91d1b009c811c10","typeString":"literal_string \"amountSpecified cannot be zero\""}],"id":3358,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"915:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:63:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3364,"nodeType":"ExpressionStatement","src":"915:63:25"},{"assignments":[3366],"declarations":[{"constant":false,"id":3366,"mutability":"mutable","name":"exactInput","nodeType":"VariableDeclaration","scope":3596,"src":"988:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3365,"name":"bool","nodeType":"ElementaryTypeName","src":"988:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3370,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3367,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"1006:15:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1024:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1006:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"988:37:25"},{"assignments":[3372,3374,3376],"declarations":[{"constant":false,"id":3372,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":3596,"src":"1036:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3371,"name":"int24","nodeType":"ElementaryTypeName","src":"1036:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3374,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3596,"src":"1055:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3373,"name":"uint16","nodeType":"ElementaryTypeName","src":"1055:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3376,"mutability":"mutable","name":"state","nodeType":"VariableDeclaration","scope":3596,"src":"1067:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState"},"typeName":{"id":3375,"name":"SwapState","nodeType":"UserDefinedTypeName","referencedDeclaration":3850,"src":"1067:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_storage_ptr","typeString":"struct SwapState"}},"visibility":"internal"}],"id":3383,"initialValue":{"arguments":[{"id":3378,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"1119:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3379,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"1144:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3380,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"1168:15:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":3381,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3351,"src":"1197:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3377,"name":"getInitState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"1093:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int24_$_t_uint16_$_t_struct$_SwapState_$3850_memory_ptr_$","typeString":"function (address,bool,int256,uint160) view returns (int24,uint16,struct SwapState memory)"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1093:131:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_uint16_$_t_struct$_SwapState_$3850_memory_ptr_$","typeString":"tuple(int24,uint16,struct SwapState memory)"}},"nodeType":"VariableDeclarationStatement","src":"1035:189:25"},{"body":{"id":3571,"nodeType":"Block","src":"1437:2309:25","statements":[{"assignments":[3394],"declarations":[{"constant":false,"id":3394,"mutability":"mutable","name":"step","nodeType":"VariableDeclaration","scope":3571,"src":"1451:28:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations"},"typeName":{"id":3393,"name":"StepComputations","nodeType":"UserDefinedTypeName","referencedDeclaration":3865,"src":"1451:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_storage_ptr","typeString":"struct StepComputations"}},"visibility":"internal"}],"id":3395,"nodeType":"VariableDeclarationStatement","src":"1451:28:25"},{"expression":{"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3396,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1493:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"sqrtPriceStartX96","nodeType":"MemberAccess","referencedDeclaration":3852,"src":"1493:22:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3399,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1518:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"1518:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1493:43:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3402,"nodeType":"ExpressionStatement","src":"1493:43:25"},{"expression":{"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":3403,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1552:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":3854,"src":"1552:13:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"expression":{"id":3406,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1567:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3407,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"initialized","nodeType":"MemberAccess","referencedDeclaration":3856,"src":"1567:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":3408,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1585:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3409,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"sqrtPriceNextX96","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"1585:21:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":3410,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1551:56:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$_t_uint160_$","typeString":"tuple(int24,bool,uint160)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3412,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"1655:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3413,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1684:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":3847,"src":"1684:10:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3415,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"1712:11:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3416,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"1741:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3411,"name":"nextInitializedTickAndPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"1610:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$_t_int24_$_t_bool_$returns$_t_int24_$_t_bool_$_t_uint160_$","typeString":"function (address,int24,int24,bool) view returns (int24,bool,uint160)"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1610:155:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$_t_uint160_$","typeString":"tuple(int24,bool,uint160)"}},"src":"1551:214:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3419,"nodeType":"ExpressionStatement","src":"1551:214:25"},{"expression":{"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":3420,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1899:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3422,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"1899:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":3423,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1919:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":3860,"src":"1919:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3425,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1934:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountOut","nodeType":"MemberAccess","referencedDeclaration":3862,"src":"1934:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3427,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"1950:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"feeAmount","nodeType":"MemberAccess","referencedDeclaration":3864,"src":"1950:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3429,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1898:67:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint160,uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3432,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2010:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"2010:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":3435,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"2068:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":3436,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2080:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceNextX96","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"2080:21:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":3438,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3351,"src":"2103:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3434,"name":"getSqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"2046:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint160_$_t_uint160_$returns$_t_uint160_$","typeString":"function (bool,uint160,uint160) pure returns (uint160)"}},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2046:75:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":3440,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2139:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":3849,"src":"2139:15:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"id":3442,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2172:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"2172:30:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":3444,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"2220:3:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":3430,"name":"SwapMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"1968:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SwapMath_$1939_$","typeString":"type(library SwapMath)"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"computeSwapStep","nodeType":"MemberAccess","referencedDeclaration":1938,"src":"1968:24:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_int256_$_t_uint24_$returns$_t_uint160_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint160,uint160,uint128,int256,uint24) pure returns (uint160,uint256,uint256,uint256)"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1968:269:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint160,uint256,uint256,uint256)"}},"src":"1898:339:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3447,"nodeType":"ExpressionStatement","src":"1898:339:25"},{"condition":{"id":3448,"name":"exactInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"2255:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3502,"nodeType":"Block","src":"2479:206:25","statements":[{"expression":{"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3476,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2497:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"2497:30:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3479,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2531:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3480,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountOut","nodeType":"MemberAccess","referencedDeclaration":3862,"src":"2531:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"2531:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2531:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2497:59:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3484,"nodeType":"ExpressionStatement","src":"2497:59:25"},{"expression":{"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3485,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2574:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"2574:22:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3491,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2627:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":3860,"src":"2627:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3493,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2643:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3494,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feeAmount","nodeType":"MemberAccess","referencedDeclaration":3864,"src":"2643:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2627:30:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2626:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"2626:41:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2626:43:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":3488,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2599:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3489,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"2599:22:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1064,"src":"2599:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2599:71:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2574:96:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3501,"nodeType":"ExpressionStatement","src":"2574:96:25"}]},"id":3503,"nodeType":"IfStatement","src":"2251:434:25","trueBody":{"id":3475,"nodeType":"Block","src":"2267:206:25","statements":[{"expression":{"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3449,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2285:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"2285:30:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3452,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2320:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":3860,"src":"2320:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3454,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2336:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3455,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feeAmount","nodeType":"MemberAccess","referencedDeclaration":3864,"src":"2336:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2320:30:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2319:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"2319:41:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2319:43:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2285:77:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3461,"nodeType":"ExpressionStatement","src":"2285:77:25"},{"expression":{"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3462,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2380:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3464,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"2380:22:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3468,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2432:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3469,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountOut","nodeType":"MemberAccess","referencedDeclaration":3862,"src":"2432:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1161,"src":"2432:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2432:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":3465,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2405:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"2405:22:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1091,"src":"2405:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2405:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2380:78:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3474,"nodeType":"ExpressionStatement","src":"2380:78:25"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3504,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"2757:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3505,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"2757:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3506,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2779:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3507,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceNextX96","nodeType":"MemberAccess","referencedDeclaration":3858,"src":"2779:21:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2757:43:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3553,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3477:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3554,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"3477:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3555,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"3499:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3556,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceStartX96","nodeType":"MemberAccess","referencedDeclaration":3852,"src":"3499:22:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3477:44:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3569,"nodeType":"IfStatement","src":"3473:263:25","trueBody":{"id":3568,"nodeType":"Block","src":"3523:213:25","statements":[{"expression":{"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3558,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3661:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3560,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":3847,"src":"3661:10:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3563,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3702:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"3702:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":3561,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"3674:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getTickAtSqrtRatio","nodeType":"MemberAccess","referencedDeclaration":2473,"src":"3674:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$returns$_t_int24_$","typeString":"function (uint160) pure returns (int24)"}},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3674:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3661:60:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3567,"nodeType":"ExpressionStatement","src":"3661:60:25"}]}},"id":3570,"nodeType":"IfStatement","src":"2753:983:25","trueBody":{"id":3552,"nodeType":"Block","src":"2802:665:25","statements":[{"condition":{"expression":{"id":3509,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2895:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialized","nodeType":"MemberAccess","referencedDeclaration":3856,"src":"2895:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3538,"nodeType":"IfStatement","src":"2891:485:25","trueBody":{"id":3537,"nodeType":"Block","src":"2913:463:25","statements":[{"assignments":[null,3512,null,null,null,null,null,null],"declarations":[null,{"constant":false,"id":3512,"mutability":"mutable","name":"liquidityNet","nodeType":"VariableDeclaration","scope":3537,"src":"2937:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":3511,"name":"int128","nodeType":"ElementaryTypeName","src":"2937:6:25","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},null,null,null,null,null,null],"id":3518,"initialValue":{"arguments":[{"id":3514,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2975:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3515,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"2988:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":3854,"src":"2988:13:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":3513,"name":"getTicks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"2966:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$returns$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"function (address,int24) view returns (uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2966:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"tuple(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"nodeType":"VariableDeclarationStatement","src":"2935:67:25"},{"condition":{"id":3519,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"3200:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3525,"nodeType":"IfStatement","src":"3196:68:25","trueBody":{"expression":{"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3520,"name":"liquidityNet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"3236:12:25","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3251:13:25","subExpression":{"id":3521,"name":"liquidityNet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"3252:12:25","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"3236:28:25","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":3524,"nodeType":"ExpressionStatement","src":"3236:28:25"}},{"expression":{"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3526,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3286:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":3849,"src":"3286:15:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3531,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3327:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3532,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":3849,"src":"3327:15:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":3533,"name":"liquidityNet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"3344:12:25","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_int128","typeString":"int128"}],"expression":{"id":3529,"name":"LiquidityMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"3304:13:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LiquidityMath_$962_$","typeString":"type(library LiquidityMath)"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"addDelta","nodeType":"MemberAccess","referencedDeclaration":961,"src":"3304:22:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_int128_$returns$_t_uint128_$","typeString":"function (uint128,int128) pure returns (uint128)"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3304:53:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"3286:71:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3536,"nodeType":"ExpressionStatement","src":"3286:71:25"}]}},{"expression":{"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3539,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3393:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":3847,"src":"3393:10:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":3542,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"3406:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":3547,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"3439:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":3854,"src":"3439:13:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3406:46:25","trueExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3543,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"3419:4:25","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$3865_memory_ptr","typeString":"struct StepComputations memory"}},"id":3544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":3854,"src":"3419:13:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3435:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3419:17:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3393:59:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3551,"nodeType":"ExpressionStatement","src":"3393:59:25"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3384,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1357:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"1357:30:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1391:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1357:35:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3388,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"1396:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3389,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":3845,"src":"1396:18:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3390,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3351,"src":"1418:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1396:39:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1357:78:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3572,"nodeType":"WhileStatement","src":"1350:2396:25"},{"expression":{"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":3573,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"3757:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":3574,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"3766:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3575,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3756:18:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3576,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"3777:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3577,"name":"exactInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"3791:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3777:24:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"expression":{"id":3586,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3906:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"3906:22:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3588,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"3930:15:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3589,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3948:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"3948:30:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"3930:48:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3592,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3905:74:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3777:202:25","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3579,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"3817:15:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3580,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3835:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3581,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"3835:30:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"3817:48:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"expression":{"id":3583,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3867:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"3867:22:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3585,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3816:74:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"src":"3756:223:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3595,"nodeType":"ExpressionStatement","src":"3756:223:25"}]},"functionSelector":"90405d36","id":3597,"implemented":true,"kind":"function","modifiers":[],"name":"quote","nodeType":"FunctionDefinition","parameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":3597,"src":"726:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3597,"src":"755:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3346,"name":"bool","nodeType":"ElementaryTypeName","src":"755:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3349,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":3597,"src":"780:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3348,"name":"int256","nodeType":"ElementaryTypeName","src":"780:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3351,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":3597,"src":"812:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3350,"name":"uint160","nodeType":"ElementaryTypeName","src":"812:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"716:127:25"},"returnParameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3354,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3597,"src":"873:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3353,"name":"int256","nodeType":"ElementaryTypeName","src":"873:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3597,"src":"889:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3355,"name":"int256","nodeType":"ElementaryTypeName","src":"889:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"872:32:25"},"scope":3830,"src":"702:3284:25","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3652,"nodeType":"Block","src":"4210:474:25","statements":[{"assignments":[3615],"declarations":[{"constant":false,"id":3615,"mutability":"mutable","name":"gs","nodeType":"VariableDeclaration","scope":3652,"src":"4220:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState"},"typeName":{"id":3614,"name":"GlobalState","nodeType":"UserDefinedTypeName","referencedDeclaration":3839,"src":"4220:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_storage_ptr","typeString":"struct GlobalState"}},"visibility":"internal"}],"id":3619,"initialValue":{"arguments":[{"id":3617,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"4263:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3616,"name":"getPoolGlobalState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"4244:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_struct$_GlobalState_$3839_memory_ptr_$","typeString":"function (address) view returns (struct GlobalState memory)"}},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4244:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"nodeType":"VariableDeclarationStatement","src":"4220:55:25"},{"expression":{"arguments":[{"id":3621,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"4318:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3622,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4330:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":3623,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"4349:2:25","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":3624,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startPrice","nodeType":"MemberAccess","referencedDeclaration":3834,"src":"4349:13:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3620,"name":"checkSqrtPriceLimitWithinAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"4285:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint160_$_t_uint160_$returns$__$","typeString":"function (bool,uint160,uint160) pure"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4285:78:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3626,"nodeType":"ExpressionStatement","src":"4285:78:25"},{"expression":{"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3627,"name":"ts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"4373:2:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3629,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"4393:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3628,"name":"getTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"4378:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_int24_$","typeString":"function (address) view returns (int24)"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4378:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"4373:32:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3632,"nodeType":"ExpressionStatement","src":"4373:32:25"},{"expression":{"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3633,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"4415:3:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3634,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"4421:2:25","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":3635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":3838,"src":"4421:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"4415:12:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":3637,"nodeType":"ExpressionStatement","src":"4415:12:25"},{"expression":{"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3638,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"4437:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3640,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"4495:15:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"arguments":[{"id":3642,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"4548:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3641,"name":"getLiquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"4535:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint128_$","typeString":"function (address) view returns (uint128)"}},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4535:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"id":3644,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"4588:2:25","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":3645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startPrice","nodeType":"MemberAccess","referencedDeclaration":3834,"src":"4588:13:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"hexValue":"30","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4633:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":3647,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"4654:2:25","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState memory"}},"id":3648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startTick","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"4654:12:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":3639,"name":"SwapState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"4445:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_SwapState_$3850_storage_ptr_$","typeString":"type(struct SwapState storage pointer)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["amountSpecifiedRemaining","liquidity","sqrtPriceX96","amountCalculated","tick"],"nodeType":"FunctionCall","src":"4445:232:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"src":"4437:240:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState memory"}},"id":3651,"nodeType":"ExpressionStatement","src":"4437:240:25"}]},"id":3653,"implemented":true,"kind":"function","modifiers":[],"name":"getInitState","nodeType":"FunctionDefinition","parameters":{"id":3606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3599,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":3653,"src":"4023:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3598,"name":"address","nodeType":"ElementaryTypeName","src":"4023:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3601,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3653,"src":"4052:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3600,"name":"bool","nodeType":"ElementaryTypeName","src":"4052:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3603,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":3653,"src":"4077:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3602,"name":"int256","nodeType":"ElementaryTypeName","src":"4077:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3605,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":3653,"src":"4109:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3604,"name":"uint160","nodeType":"ElementaryTypeName","src":"4109:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4013:127:25"},"returnParameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3608,"mutability":"mutable","name":"ts","nodeType":"VariableDeclaration","scope":3653,"src":"4164:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3607,"name":"int24","nodeType":"ElementaryTypeName","src":"4164:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3653,"src":"4174:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3609,"name":"uint16","nodeType":"ElementaryTypeName","src":"4174:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"state","nodeType":"VariableDeclaration","scope":3653,"src":"4186:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_memory_ptr","typeString":"struct SwapState"},"typeName":{"id":3611,"name":"SwapState","nodeType":"UserDefinedTypeName","referencedDeclaration":3850,"src":"4186:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$3850_storage_ptr","typeString":"struct SwapState"}},"visibility":"internal"}],"src":"4163:46:25"},"scope":3830,"src":"3992:692:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3688,"nodeType":"Block","src":"4838:284:25","statements":[{"assignments":[3663],"declarations":[{"constant":false,"id":3663,"mutability":"mutable","name":"withinAllowed","nodeType":"VariableDeclaration","scope":3688,"src":"4848:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3662,"name":"bool","nodeType":"ElementaryTypeName","src":"4848:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3682,"initialValue":{"condition":{"id":3664,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"4869:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3673,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"4980:14:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3674,"name":"startPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"4997:10:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4980:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3676,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"5011:14:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3677,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5028:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1960,"src":"5028:23:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"5011:40:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4980:71:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4869:182:25","trueExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3665,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"4894:14:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3666,"name":"startPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"4911:10:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4894:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3668,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"4925:14:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3669,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"4942:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":1956,"src":"4942:23:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4925:40:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4894:71:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4848:203:25"},{"expression":{"arguments":[{"id":3684,"name":"withinAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3663,"src":"5069:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"7371727450726963654c696d6974206f7574206f6620626f756e6473","id":3685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5084:30:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca4aaa3158dfd44db1a6eb12aade985c9fa4ae1a0cf109837acc0028275e4275","typeString":"literal_string \"sqrtPriceLimit out of bounds\""},"value":"sqrtPriceLimit out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ca4aaa3158dfd44db1a6eb12aade985c9fa4ae1a0cf109837acc0028275e4275","typeString":"literal_string \"sqrtPriceLimit out of bounds\""}],"id":3683,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5061:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5061:54:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3687,"nodeType":"ExpressionStatement","src":"5061:54:25"}]},"id":3689,"implemented":true,"kind":"function","modifiers":[],"name":"checkSqrtPriceLimitWithinAllowed","nodeType":"FunctionDefinition","parameters":{"id":3660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3689,"src":"4741:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3654,"name":"bool","nodeType":"ElementaryTypeName","src":"4741:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3657,"mutability":"mutable","name":"sqrtPriceLimit","nodeType":"VariableDeclaration","scope":3689,"src":"4766:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3656,"name":"uint160","nodeType":"ElementaryTypeName","src":"4766:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3659,"mutability":"mutable","name":"startPrice","nodeType":"VariableDeclaration","scope":3689,"src":"4799:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3658,"name":"uint160","nodeType":"ElementaryTypeName","src":"4799:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4731:92:25"},"returnParameters":{"id":3661,"nodeType":"ParameterList","parameters":[],"src":"4838:0:25"},"scope":3830,"src":"4690:432:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3744,"nodeType":"Block","src":"5350:503:25","statements":[{"expression":{"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":3706,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5361:8:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3707,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"5371:11:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3708,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"5360:23:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$","typeString":"tuple(int24,bool)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3710,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"5419:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3711,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"5425:4:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3712,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"5431:11:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3713,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"5444:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3709,"name":"nextInitializedTickWithinOneWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"5386:32:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$_t_int24_$_t_bool_$returns$_t_int24_$_t_bool_$","typeString":"function (address,int24,int24,bool) view returns (int24,bool)"}},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5386:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$","typeString":"tuple(int24,bool)"}},"src":"5360:95:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3716,"nodeType":"ExpressionStatement","src":"5360:95:25"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3717,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5578:8:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3718,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5589:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_TICK","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"5589:17:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5578:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3726,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5667:8:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3727,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5678:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":1952,"src":"5678:17:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5667:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3735,"nodeType":"IfStatement","src":"5663:74:25","trueBody":{"expression":{"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3730,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5709:8:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3731,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5720:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":1952,"src":"5720:17:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5709:28:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3734,"nodeType":"ExpressionStatement","src":"5709:28:25"}},"id":3736,"nodeType":"IfStatement","src":"5574:163:25","trueBody":{"expression":{"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3721,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5620:8:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3722,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5631:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_TICK","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"5631:17:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5620:28:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":3725,"nodeType":"ExpressionStatement","src":"5620:28:25"}},{"expression":{"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3737,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"5790:16:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3740,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5837:8:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"expression":{"id":3738,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5809:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2474_$","typeString":"type(library TickMath)"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getSqrtRatioAtTick","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"5809:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5809:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"5790:56:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3743,"nodeType":"ExpressionStatement","src":"5790:56:25"}]},"id":3745,"implemented":true,"kind":"function","modifiers":[],"name":"nextInitializedTickAndPrice","nodeType":"FunctionDefinition","parameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3745,"src":"5174:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"5174:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3693,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3745,"src":"5197:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3692,"name":"int24","nodeType":"ElementaryTypeName","src":"5197:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":3745,"src":"5218:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3694,"name":"int24","nodeType":"ElementaryTypeName","src":"5218:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3745,"src":"5245:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3696,"name":"bool","nodeType":"ElementaryTypeName","src":"5245:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5164:102:25"},"returnParameters":{"id":3705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3700,"mutability":"mutable","name":"tickNext","nodeType":"VariableDeclaration","scope":3745,"src":"5290:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3699,"name":"int24","nodeType":"ElementaryTypeName","src":"5290:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3702,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3745,"src":"5306:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3701,"name":"bool","nodeType":"ElementaryTypeName","src":"5306:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"sqrtPriceNextX96","nodeType":"VariableDeclaration","scope":3745,"src":"5324:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3703,"name":"uint160","nodeType":"ElementaryTypeName","src":"5324:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"5289:60:25"},"scope":3830,"src":"5128:725:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3769,"nodeType":"Block","src":"6022:173:25","statements":[{"expression":{"condition":{"components":[{"condition":{"id":3756,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3747,"src":"6040:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3760,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"6090:16:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3761,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"6107:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"6090:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6040:84:25","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3757,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"6053:16:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3758,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"6070:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"6053:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3764,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6039:86:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3766,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"6172:16:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6039:149:25","trueExpression":{"id":3765,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"6140:17:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":3755,"id":3768,"nodeType":"Return","src":"6032:156:25"}]},"id":3770,"implemented":true,"kind":"function","modifiers":[],"name":"getSqrtRatioTargetX96","nodeType":"FunctionDefinition","parameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3770,"src":"5899:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3746,"name":"bool","nodeType":"ElementaryTypeName","src":"5899:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3749,"mutability":"mutable","name":"sqrtPriceNextX96","nodeType":"VariableDeclaration","scope":3770,"src":"5924:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3748,"name":"uint160","nodeType":"ElementaryTypeName","src":"5924:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":3770,"src":"5958:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3750,"name":"uint160","nodeType":"ElementaryTypeName","src":"5958:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"5889:100:25"},"returnParameters":{"id":3755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3754,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3770,"src":"6013:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3753,"name":"uint160","nodeType":"ElementaryTypeName","src":"6013:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"6012:9:25"},"scope":3830,"src":"5859:336:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3777,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolGlobalState","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3777,"src":"6229:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3771,"name":"address","nodeType":"ElementaryTypeName","src":"6229:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6228:14:25"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3777,"src":"6274:18:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_memory_ptr","typeString":"struct GlobalState"},"typeName":{"id":3774,"name":"GlobalState","nodeType":"UserDefinedTypeName","referencedDeclaration":3839,"src":"6274:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$3839_storage_ptr","typeString":"struct GlobalState"}},"visibility":"internal"}],"src":"6273:20:25"},"scope":3830,"src":"6201:93:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":3784,"implemented":false,"kind":"function","modifiers":[],"name":"getLiquidity","nodeType":"FunctionDefinition","parameters":{"id":3780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3779,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3784,"src":"6326:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3778,"name":"address","nodeType":"ElementaryTypeName","src":"6326:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6325:14:25"},"returnParameters":{"id":3783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3782,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3784,"src":"6371:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3781,"name":"uint128","nodeType":"ElementaryTypeName","src":"6371:7:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"6370:9:25"},"scope":3830,"src":"6304:76:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":3791,"implemented":false,"kind":"function","modifiers":[],"name":"getTickSpacing","nodeType":"FunctionDefinition","parameters":{"id":3787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3786,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3791,"src":"6410:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3785,"name":"address","nodeType":"ElementaryTypeName","src":"6410:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6409:14:25"},"returnParameters":{"id":3790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3789,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3791,"src":"6455:5:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3788,"name":"int24","nodeType":"ElementaryTypeName","src":"6455:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"6454:7:25"},"scope":3830,"src":"6386:76:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":3806,"implemented":false,"kind":"function","modifiers":[],"name":"nextInitializedTickWithinOneWord","nodeType":"FunctionDefinition","parameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3793,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":3806,"src":"6523:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3792,"name":"address","nodeType":"ElementaryTypeName","src":"6523:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3795,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3806,"src":"6552:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3794,"name":"int24","nodeType":"ElementaryTypeName","src":"6552:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3797,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":3806,"src":"6572:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3796,"name":"int24","nodeType":"ElementaryTypeName","src":"6572:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3799,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3806,"src":"6599:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3798,"name":"bool","nodeType":"ElementaryTypeName","src":"6599:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6513:107:25"},"returnParameters":{"id":3805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3802,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":3806,"src":"6652:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3801,"name":"int24","nodeType":"ElementaryTypeName","src":"6652:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3804,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3806,"src":"6664:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3803,"name":"bool","nodeType":"ElementaryTypeName","src":"6664:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6651:30:25"},"scope":3830,"src":"6472:210:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":3829,"implemented":false,"kind":"function","modifiers":[],"name":"getTicks","nodeType":"FunctionDefinition","parameters":{"id":3811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3808,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3829,"src":"6710:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3807,"name":"address","nodeType":"ElementaryTypeName","src":"6710:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3810,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3829,"src":"6724:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3809,"name":"int24","nodeType":"ElementaryTypeName","src":"6724:5:25","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"6709:26:25"},"returnParameters":{"id":3828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3813,"mutability":"mutable","name":"liquidityTotal","nodeType":"VariableDeclaration","scope":3829,"src":"6776:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3812,"name":"uint128","nodeType":"ElementaryTypeName","src":"6776:7:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3815,"mutability":"mutable","name":"liquidityDelta","nodeType":"VariableDeclaration","scope":3829,"src":"6808:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":3814,"name":"int128","nodeType":"ElementaryTypeName","src":"6808:6:25","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":3817,"mutability":"mutable","name":"outerFeeGrowth0Token","nodeType":"VariableDeclaration","scope":3829,"src":"6839:28:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3816,"name":"uint256","nodeType":"ElementaryTypeName","src":"6839:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3819,"mutability":"mutable","name":"outerFeeGrowth1Token","nodeType":"VariableDeclaration","scope":3829,"src":"6877:28:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3818,"name":"uint256","nodeType":"ElementaryTypeName","src":"6877:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3821,"mutability":"mutable","name":"outerTickCumulative","nodeType":"VariableDeclaration","scope":3829,"src":"6915:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":3820,"name":"int56","nodeType":"ElementaryTypeName","src":"6915:5:25","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":3823,"mutability":"mutable","name":"outerSecondsPerLiquidity","nodeType":"VariableDeclaration","scope":3829,"src":"6950:32:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3822,"name":"uint160","nodeType":"ElementaryTypeName","src":"6950:7:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3825,"mutability":"mutable","name":"outerSecondsSpent","nodeType":"VariableDeclaration","scope":3829,"src":"6992:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3824,"name":"uint32","nodeType":"ElementaryTypeName","src":"6992:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3827,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3829,"src":"7026:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3826,"name":"bool","nodeType":"ElementaryTypeName","src":"7026:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6766:282:25"},"scope":3830,"src":"6692:357:25","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3831,"src":"557:6495:25"}],"src":"45:7007:25"},"id":25},"contracts/interfaces/IUniV3likeQuoterCore.sol":{"ast":{"absolutePath":"contracts/interfaces/IUniV3likeQuoterCore.sol","exportedSymbols":{"GlobalState":[3839],"IUniV3likeQuoterCore":[3881],"StepComputations":[3865],"SwapState":[3850]},"id":3882,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3832,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:26"},{"canonicalName":"GlobalState","id":3839,"members":[{"constant":false,"id":3834,"mutability":"mutable","name":"startPrice","nodeType":"VariableDeclaration","scope":3839,"src":"95:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3833,"name":"uint160","nodeType":"ElementaryTypeName","src":"95:7:26","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3836,"mutability":"mutable","name":"startTick","nodeType":"VariableDeclaration","scope":3839,"src":"119:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3835,"name":"int24","nodeType":"ElementaryTypeName","src":"119:5:26","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3838,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3839,"src":"140:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3837,"name":"uint16","nodeType":"ElementaryTypeName","src":"140:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"name":"GlobalState","nodeType":"StructDefinition","scope":3882,"src":"70:83:26","visibility":"public"},{"canonicalName":"SwapState","id":3850,"members":[{"constant":false,"id":3841,"mutability":"mutable","name":"amountSpecifiedRemaining","nodeType":"VariableDeclaration","scope":3850,"src":"345:31:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3840,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3843,"mutability":"mutable","name":"amountCalculated","nodeType":"VariableDeclaration","scope":3850,"src":"449:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3842,"name":"int256","nodeType":"ElementaryTypeName","src":"449:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3845,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":3850,"src":"505:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3844,"name":"uint160","nodeType":"ElementaryTypeName","src":"505:7:26","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3847,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3850,"src":"581:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3846,"name":"int24","nodeType":"ElementaryTypeName","src":"581:5:26","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3849,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":3850,"src":"635:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3848,"name":"uint128","nodeType":"ElementaryTypeName","src":"635:7:26","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"SwapState","nodeType":"StructDefinition","scope":3882,"src":"247:408:26","visibility":"public"},{"canonicalName":"StepComputations","id":3865,"members":[{"constant":false,"id":3852,"mutability":"mutable","name":"sqrtPriceStartX96","nodeType":"VariableDeclaration","scope":3865,"src":"733:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3851,"name":"uint160","nodeType":"ElementaryTypeName","src":"733:7:26","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3854,"mutability":"mutable","name":"tickNext","nodeType":"VariableDeclaration","scope":3865,"src":"840:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3853,"name":"int24","nodeType":"ElementaryTypeName","src":"840:5:26","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3856,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3865,"src":"906:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3855,"name":"bool","nodeType":"ElementaryTypeName","src":"906:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3858,"mutability":"mutable","name":"sqrtPriceNextX96","nodeType":"VariableDeclaration","scope":3865,"src":"971:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3857,"name":"uint160","nodeType":"ElementaryTypeName","src":"971:7:26","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3860,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3865,"src":"1050:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3859,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3862,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3865,"src":"1109:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1109:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3864,"mutability":"mutable","name":"feeAmount","nodeType":"VariableDeclaration","scope":3865,"src":"1169:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StepComputations","nodeType":"StructDefinition","scope":3882,"src":"657:532:26","visibility":"public"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3881,"linearizedBaseContracts":[3881],"name":"IUniV3likeQuoterCore","nodeType":"ContractDefinition","nodes":[{"functionSelector":"90405d36","id":3880,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nodeType":"FunctionDefinition","parameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3867,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":3880,"src":"1253:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3866,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3869,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3880,"src":"1282:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3868,"name":"bool","nodeType":"ElementaryTypeName","src":"1282:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3871,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":3880,"src":"1307:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3870,"name":"int256","nodeType":"ElementaryTypeName","src":"1307:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3873,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":3880,"src":"1339:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3872,"name":"uint160","nodeType":"ElementaryTypeName","src":"1339:7:26","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1243:127:26"},"returnParameters":{"id":3879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3876,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3880,"src":"1394:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3875,"name":"int256","nodeType":"ElementaryTypeName","src":"1394:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3878,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3880,"src":"1410:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3877,"name":"int256","nodeType":"ElementaryTypeName","src":"1410:6:26","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1393:32:26"},"scope":3881,"src":"1229:197:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3882,"src":"1191:238:26"}],"src":"45:1384:26"},"id":26},"contracts/interfaces/IUniswapV3StaticQuoter.sol":{"ast":{"absolutePath":"contracts/interfaces/IUniswapV3StaticQuoter.sol","exportedSymbols":{"IUniswapV3StaticQuoter":[3943]},"id":3944,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3883,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:27"},{"id":3884,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:27"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3943,"linearizedBaseContracts":[3943],"name":"IUniswapV3StaticQuoter","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3885,"nodeType":"StructuredDocumentation","src":"130:319:27","text":"@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received"},"functionSelector":"cdca1753","id":3894,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactInput","nodeType":"FunctionDefinition","parameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3894,"src":"488:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3886,"name":"bytes","nodeType":"ElementaryTypeName","src":"488:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3889,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3894,"src":"515:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"478:59:27"},"returnParameters":{"id":3893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3894,"src":"561:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3891,"name":"uint256","nodeType":"ElementaryTypeName","src":"561:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"560:19:27"},"scope":3943,"src":"454:126:27","stateMutability":"view","virtual":false,"visibility":"external"},{"canonicalName":"IUniswapV3StaticQuoter.QuoteExactInputSingleParams","id":3905,"members":[{"constant":false,"id":3896,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3905,"src":"631:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3895,"name":"address","nodeType":"ElementaryTypeName","src":"631:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3898,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3905,"src":"656:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3897,"name":"address","nodeType":"ElementaryTypeName","src":"656:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3900,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3905,"src":"682:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3899,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3902,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3905,"src":"708:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3901,"name":"uint24","nodeType":"ElementaryTypeName","src":"708:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":3905,"src":"728:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3903,"name":"uint160","nodeType":"ElementaryTypeName","src":"728:7:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"QuoteExactInputSingleParams","nodeType":"StructDefinition","scope":3943,"src":"586:174:27","visibility":"public"},{"documentation":{"id":3906,"nodeType":"StructuredDocumentation","src":"766:545:27","text":"@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountIn The desired input amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received"},"functionSelector":"c6a5026a","id":3913,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactInputSingle","nodeType":"FunctionDefinition","parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":3913,"src":"1356:41:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"},"typeName":{"id":3907,"name":"QuoteExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":3905,"src":"1356:27:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$3905_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"}},"visibility":"internal"}],"src":"1346:57:27"},"returnParameters":{"id":3912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3911,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3913,"src":"1427:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3910,"name":"uint256","nodeType":"ElementaryTypeName","src":"1427:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1426:19:27"},"scope":3943,"src":"1316:130:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3914,"nodeType":"StructuredDocumentation","src":"1452:317:27","text":"@notice Returns the amount in needed for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountOut The amount of the last token that would be received\n @return amountIn The amount of the first token to swap"},"functionSelector":"2f80bb1d","id":3923,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactOutput","nodeType":"FunctionDefinition","parameters":{"id":3919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3923,"src":"1809:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3915,"name":"bytes","nodeType":"ElementaryTypeName","src":"1809:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3918,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3923,"src":"1836:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1799:60:27"},"returnParameters":{"id":3922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3923,"src":"1883:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3920,"name":"uint256","nodeType":"ElementaryTypeName","src":"1883:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1882:18:27"},"scope":3943,"src":"1774:127:27","stateMutability":"view","virtual":false,"visibility":"external"},{"canonicalName":"IUniswapV3StaticQuoter.QuoteExactOutputSingleParams","id":3934,"members":[{"constant":false,"id":3925,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3934,"src":"1953:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3924,"name":"address","nodeType":"ElementaryTypeName","src":"1953:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3927,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3934,"src":"1978:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3926,"name":"address","nodeType":"ElementaryTypeName","src":"1978:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3929,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3934,"src":"2004:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2004:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3931,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":3934,"src":"2028:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3930,"name":"uint24","nodeType":"ElementaryTypeName","src":"2028:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":3933,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":3934,"src":"2048:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3932,"name":"uint160","nodeType":"ElementaryTypeName","src":"2048:7:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"QuoteExactOutputSingleParams","nodeType":"StructDefinition","scope":3943,"src":"1907:173:27","visibility":"public"},{"documentation":{"id":3935,"nodeType":"StructuredDocumentation","src":"2086:542:27","text":"@notice Returns the amount in needed for a given exact output but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountOut The desired output amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount of `tokenIn` that would be needed"},"functionSelector":"bd21704a","id":3942,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactOutputSingle","nodeType":"FunctionDefinition","parameters":{"id":3938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3937,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":3942,"src":"2674:42:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"},"typeName":{"id":3936,"name":"QuoteExactOutputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":3934,"src":"2674:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$3934_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"}},"visibility":"internal"}],"src":"2664:58:27"},"returnParameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3942,"src":"2746:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2746:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2745:18:27"},"scope":3943,"src":"2633:131:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3944,"src":"91:2675:27"}],"src":"45:2722:27"},"id":27},"contracts/libraries/TickBitmap.sol":{"ast":{"absolutePath":"contracts/libraries/TickBitmap.sol","exportedSymbols":{"BitMath":[720],"IUniswapV3Pool":[21],"IUniswapV3PoolActions":[117],"IUniswapV3PoolDerivedState":[148],"IUniswapV3PoolEvents":[267],"IUniswapV3PoolImmutables":[307],"IUniswapV3PoolOwnerActions":[333],"IUniswapV3PoolState":[441],"TickBitmap":[4163]},"id":4164,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3945,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:28"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","id":3946,"nodeType":"ImportDirective","scope":4164,"sourceUnit":22,"src":"70:66:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/BitMath.sol","file":"@uniswap/v3-core/contracts/libraries/BitMath.sol","id":3947,"nodeType":"ImportDirective","scope":4164,"sourceUnit":721,"src":"137:58:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":3948,"nodeType":"StructuredDocumentation","src":"197:243:28","text":"@title Packed tick initialized state library\n @notice Stores a packed mapping of tick index to its initialized state\n @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word."},"fullyImplemented":true,"id":4163,"linearizedBaseContracts":[4163],"name":"TickBitmap","nodeType":"ContractDefinition","nodes":[{"body":{"id":3976,"nodeType":"Block","src":"876:79:28","statements":[{"expression":{"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3958,"name":"wordPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"886:7:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3961,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"902:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"910:1:28","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"902:9:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":3960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"896:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":3959,"name":"int16","nodeType":"ElementaryTypeName","src":"896:5:28","typeDescriptions":{}}},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"896:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"886:26:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":3966,"nodeType":"ExpressionStatement","src":"886:26:28"},{"expression":{"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3967,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"922:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3970,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"937:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"323536","id":3971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"944:3:28","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"937:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":3969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"931:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3968,"name":"uint8","nodeType":"ElementaryTypeName","src":"931:5:28","typeDescriptions":{}}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"931:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"922:26:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3975,"nodeType":"ExpressionStatement","src":"922:26:28"}]},"documentation":{"id":3949,"nodeType":"StructuredDocumentation","src":"465:325:28","text":"@notice Computes the position in the mapping where the initialized bit for a tick lives\n @param tick The tick for which to compute the position\n @return wordPos The key in the mapping containing the word in which the bit is stored\n @return bitPos The bit position in the word where the flag is stored"},"id":3977,"implemented":true,"kind":"function","modifiers":[],"name":"position","nodeType":"FunctionDefinition","parameters":{"id":3952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3951,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3977,"src":"813:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3950,"name":"int24","nodeType":"ElementaryTypeName","src":"813:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"812:12:28"},"returnParameters":{"id":3957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3954,"mutability":"mutable","name":"wordPos","nodeType":"VariableDeclaration","scope":3977,"src":"847:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":3953,"name":"int16","nodeType":"ElementaryTypeName","src":"847:5:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"},{"constant":false,"id":3956,"mutability":"mutable","name":"bitPos","nodeType":"VariableDeclaration","scope":3977,"src":"862:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3955,"name":"uint8","nodeType":"ElementaryTypeName","src":"862:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"846:29:28"},"scope":4163,"src":"795:160:28","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4161,"nodeType":"Block","src":"1911:1788:28","statements":[{"assignments":[3994],"declarations":[{"constant":false,"id":3994,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4161,"src":"1921:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"},"typeName":{"id":3993,"name":"IUniswapV3Pool","nodeType":"UserDefinedTypeName","referencedDeclaration":21,"src":"1921:14:28","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"visibility":"internal"}],"id":3998,"initialValue":{"arguments":[{"id":3996,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1958:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3995,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"1943:14:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$21_$","typeString":"type(contract IUniswapV3Pool)"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1943:27:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"nodeType":"VariableDeclarationStatement","src":"1921:49:28"},{"assignments":[4000],"declarations":[{"constant":false,"id":4000,"mutability":"mutable","name":"compressed","nodeType":"VariableDeclaration","scope":4161,"src":"1980:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3999,"name":"int24","nodeType":"ElementaryTypeName","src":"1980:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":4004,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4001,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"1999:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4002,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"2006:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"1999:18:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"1980:37:28"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4005,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"2031:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2038:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2031:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4008,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"2043:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4009,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"2050:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2043:18:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2065:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2043:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2031:35:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4017,"nodeType":"IfStatement","src":"2027:53:28","trueBody":{"expression":{"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"2068:12:28","subExpression":{"id":4014,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"2068:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4016,"nodeType":"ExpressionStatement","src":"2068:12:28"}},{"condition":{"id":4018,"name":"lte","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2130:3:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4159,"nodeType":"Block","src":"2868:825:28","statements":[{"assignments":[4086,4088],"declarations":[{"constant":false,"id":4086,"mutability":"mutable","name":"wordPos","nodeType":"VariableDeclaration","scope":4159,"src":"2980:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":4085,"name":"int16","nodeType":"ElementaryTypeName","src":"2980:5:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"},{"constant":false,"id":4088,"mutability":"mutable","name":"bitPos","nodeType":"VariableDeclaration","scope":4159,"src":"2995:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4087,"name":"uint8","nodeType":"ElementaryTypeName","src":"2995:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4094,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4090,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"3020:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3033:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3020:14:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4089,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"3011:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$","typeString":"function (int24) pure returns (int16,uint8)"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3011:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int16_$_t_uint8_$","typeString":"tuple(int16,uint8)"}},"nodeType":"VariableDeclarationStatement","src":"2979:56:28"},{"assignments":[4096],"declarations":[{"constant":false,"id":4096,"mutability":"mutable","name":"mask","nodeType":"VariableDeclaration","scope":4159,"src":"3107:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4095,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4105,"initialValue":{"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3122:20:28","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4098,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"3130:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3125:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4100,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3124:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3140:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3124:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3123:19:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3107:35:28"},{"assignments":[4107],"declarations":[{"constant":false,"id":4107,"mutability":"mutable","name":"masked","nodeType":"VariableDeclaration","scope":4159,"src":"3156:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4106,"name":"uint256","nodeType":"ElementaryTypeName","src":"3156:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4114,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4110,"name":"wordPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"3189:7:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int16","typeString":"int16"}],"expression":{"id":4108,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"3173:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickBitmap","nodeType":"MemberAccess","referencedDeclaration":410,"src":"3173:15:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_int16_$returns$_t_uint256_$","typeString":"function (int16) view external returns (uint256)"}},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3173:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4112,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4096,"src":"3200:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3173:31:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3156:48:28"},{"expression":{"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4115,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"3329:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4116,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"3343:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3353:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3343:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3329:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4120,"nodeType":"ExpressionStatement","src":"3329:25:28"},{"expression":{"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4121,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"3478:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":4122,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"3485:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4139,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"3619:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3632:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3619:14:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3647:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4145,"name":"uint8","nodeType":"ElementaryTypeName","src":"3647:5:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":4144,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3642:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3642:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3642:15:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4149,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"3660:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3642:24:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3636:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4142,"name":"int24","nodeType":"ElementaryTypeName","src":"3636:5:28","typeDescriptions":{}}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3636:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3619:48:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3618:50:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4154,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"3671:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3618:64:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3485:197:28","trueExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4123,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"3516:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3529:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3516:14:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4130,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"3567:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4128,"name":"BitMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"3539:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BitMath_$720_$","typeString":"type(library BitMath)"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"leastSignificantBit","nodeType":"MemberAccess","referencedDeclaration":719,"src":"3539:27:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint8_$","typeString":"function (uint256) pure returns (uint8)"}},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3539:35:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4132,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4088,"src":"3577:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3539:44:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3533:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4126,"name":"int24","nodeType":"ElementaryTypeName","src":"3533:5:28","typeDescriptions":{}}},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3533:51:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3516:68:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3515:70:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4137,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"3588:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3515:84:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3478:204:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4158,"nodeType":"ExpressionStatement","src":"3478:204:28"}]},"id":4160,"nodeType":"IfStatement","src":"2126:1567:28","trueBody":{"id":4084,"nodeType":"Block","src":"2135:727:28","statements":[{"assignments":[4020,4022],"declarations":[{"constant":false,"id":4020,"mutability":"mutable","name":"wordPos","nodeType":"VariableDeclaration","scope":4084,"src":"2150:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":4019,"name":"int16","nodeType":"ElementaryTypeName","src":"2150:5:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"},{"constant":false,"id":4022,"mutability":"mutable","name":"bitPos","nodeType":"VariableDeclaration","scope":4084,"src":"2165:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4021,"name":"uint8","nodeType":"ElementaryTypeName","src":"2165:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4026,"initialValue":{"arguments":[{"id":4024,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"2190:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":4023,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"2181:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$","typeString":"function (int24) pure returns (int16,uint8)"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2181:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int16_$_t_uint8_$","typeString":"tuple(int16,uint8)"}},"nodeType":"VariableDeclarationStatement","src":"2149:52:28"},{"assignments":[4028],"declarations":[{"constant":false,"id":4028,"mutability":"mutable","name":"mask","nodeType":"VariableDeclaration","scope":4084,"src":"2282:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4027,"name":"uint256","nodeType":"ElementaryTypeName","src":"2282:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4040,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2298:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4030,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"2303:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2298:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4032,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2297:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2313:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2297:17:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2318:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4036,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"2323:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2318:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2317:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2297:33:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2282:48:28"},{"assignments":[4042],"declarations":[{"constant":false,"id":4042,"mutability":"mutable","name":"masked","nodeType":"VariableDeclaration","scope":4084,"src":"2344:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4041,"name":"uint256","nodeType":"ElementaryTypeName","src":"2344:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4049,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4045,"name":"wordPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"2377:7:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int16","typeString":"int16"}],"expression":{"id":4043,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"2361:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$21","typeString":"contract IUniswapV3Pool"}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickBitmap","nodeType":"MemberAccess","referencedDeclaration":410,"src":"2361:15:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_int16_$returns$_t_uint256_$","typeString":"function (int16) view external returns (uint256)"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2361:24:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4047,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"2388:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2361:31:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2344:48:28"},{"expression":{"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4050,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"2525:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4051,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"2539:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2549:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2539:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2525:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4055,"nodeType":"ExpressionStatement","src":"2525:25:28"},{"expression":{"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4056,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"2674:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":4057,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3991,"src":"2681:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4072,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"2810:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":4075,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"2829:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2823:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4073,"name":"int24","nodeType":"ElementaryTypeName","src":"2823:5:28","typeDescriptions":{}}},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2823:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2810:26:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4078,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:28:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4079,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"2840:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2809:42:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2681:170:28","trueExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4058,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"2712:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4061,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"2731:6:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":4064,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"2767:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4062,"name":"BitMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"2740:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BitMath_$720_$","typeString":"type(library BitMath)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mostSignificantBit","nodeType":"MemberAccess","referencedDeclaration":558,"src":"2740:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint8_$","typeString":"function (uint256) pure returns (uint8)"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2740:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2731:43:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2725:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4059,"name":"int24","nodeType":"ElementaryTypeName","src":"2725:5:28","typeDescriptions":{}}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2725:50:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2712:63:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":4069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2711:65:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4070,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"2779:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2711:79:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2674:177:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4083,"nodeType":"ExpressionStatement","src":"2674:177:28"}]}}]},"documentation":{"id":3978,"nodeType":"StructuredDocumentation","src":"961:750:28","text":"@notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n to the left (less than or equal to) or right (greater than) of the given tick\n @param poolAddress Pool containing the mapping in which to compute the next initialized tick\n @param tick The starting tick\n @param tickSpacing The spacing between usable ticks\n @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks"},"id":4162,"implemented":true,"kind":"function","modifiers":[],"name":"nextInitializedTickWithinOneWord","nodeType":"FunctionDefinition","parameters":{"id":3987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":4162,"src":"1767:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3979,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":4162,"src":"1796:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3981,"name":"int24","nodeType":"ElementaryTypeName","src":"1796:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3984,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":4162,"src":"1816:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3983,"name":"int24","nodeType":"ElementaryTypeName","src":"1816:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3986,"mutability":"mutable","name":"lte","nodeType":"VariableDeclaration","scope":4162,"src":"1843:8:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3985,"name":"bool","nodeType":"ElementaryTypeName","src":"1843:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1757:100:28"},"returnParameters":{"id":3992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3989,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":4162,"src":"1881:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3988,"name":"int24","nodeType":"ElementaryTypeName","src":"1881:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3991,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":4162,"src":"1893:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3990,"name":"bool","nodeType":"ElementaryTypeName","src":"1893:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1880:30:28"},"scope":4163,"src":"1716:1983:28","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4164,"src":"440:3261:28"}],"src":"45:3656:28"},"id":28}},"contracts":{"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"IUniswapV3Pool":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The pool interface is broken up into many smaller pieces","kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"The interface for a Uniswap V3 Pool","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","collectProtocol(address,uint128,uint128)":"85b66729","factory()":"c45a0155","fee()":"ddca3f43","feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","liquidity()":"1a686502","maxLiquidityPerTick()":"70cf754a","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","observations(uint256)":"252c09d7","observe(uint32[])":"883bdbfd","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","setFeeProtocol(uint8,uint8)":"8206a4d1","slot0()":"3850c7bd","snapshotCumulativesInside(int24,int24)":"a38807f2","swap(address,bool,int256,uint160,bytes)":"128acb08","tickBitmap(int16)":"5339c296","tickSpacing()":"d0c93a7c","ticks(int24)":"f30dba93","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"tickSpacing()":{"notice":"The pool tick spacing"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"IUniswapV3PoolActions":{"abi":[{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}}},"title":"Permissionless pool actions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","swap(address,bool,int256,uint160,bytes)":"128acb08"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"}},"notice":"Contains pool methods that can be called by anyone","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"IUniswapV3PoolDerivedState":{"abi":[{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}}},"title":"Pool state that is not stored","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"observe(uint32[])":"883bdbfd","snapshotCumulativesInside(int24,int24)":"a38807f2"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"}},"notice":"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"IUniswapV3PoolEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"}],"devdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"details":"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect","params":{"amount":"The amount of liquidity to remove","amount0":"The amount of token0 withdrawn","amount1":"The amount of token1 withdrawn","owner":"The owner of the position for which liquidity is removed","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"Collect(address,address,int24,int24,uint128,uint128)":{"details":"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees","params":{"amount0":"The amount of token0 fees collected","amount1":"The amount of token1 fees collected","owner":"The owner of the position for which fees are collected","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"CollectProtocol(address,address,uint128,uint128)":{"params":{"amount0":"The amount of token1 protocol fees that is withdrawn","recipient":"The address that receives the collected protocol fees","sender":"The address that collects the protocol fees"}},"Flash(address,address,uint256,uint256,uint256,uint256)":{"params":{"amount0":"The amount of token0 that was flashed","amount1":"The amount of token1 that was flashed","paid0":"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee","paid1":"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee","recipient":"The address that received the tokens from flash","sender":"The address that initiated the swap call, and that received the callback"}},"IncreaseObservationCardinalityNext(uint16,uint16)":{"details":"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.","params":{"observationCardinalityNextNew":"The updated value of the next observation cardinality","observationCardinalityNextOld":"The previous value of the next observation cardinality"}},"Initialize(uint160,int24)":{"details":"Mint/Burn/Swap cannot be emitted by the pool before Initialize","params":{"sqrtPriceX96":"The initial sqrt price of the pool, as a Q64.96","tick":"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"}},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"params":{"amount":"The amount of liquidity minted to the position range","amount0":"How much token0 was required for the minted liquidity","amount1":"How much token1 was required for the minted liquidity","owner":"The owner of the position and recipient of any minted liquidity","sender":"The address that minted the liquidity","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"params":{"feeProtocol0New":"The updated value of the token0 protocol fee","feeProtocol0Old":"The previous value of the token0 protocol fee","feeProtocol1New":"The updated value of the token1 protocol fee","feeProtocol1Old":"The previous value of the token1 protocol fee"}},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"params":{"amount0":"The delta of the token0 balance of the pool","amount1":"The delta of the token1 balance of the pool","liquidity":"The liquidity of the pool after the swap","recipient":"The address that received the output of the swap","sender":"The address that initiated the swap call, and that received the callback","sqrtPriceX96":"The sqrt(price) of the pool after the swap, as a Q64.96","tick":"The log base 1.0001 of price of the pool after the swap"}}},"kind":"dev","methods":{},"title":"Events emitted by a pool","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{},"notice":"Contains all events emitted by the pool","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"IUniswapV3PoolImmutables":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"Pool state that never changes","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"These parameters are fixed for a pool forever, i.e., the methods will always return the same values","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"IUniswapV3PoolOwnerActions":{"abi":[{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}}},"title":"Permissioned pool actions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"collectProtocol(address,uint128,uint128)":"85b66729","setFeeProtocol(uint8,uint8)":"8206a4d1"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"}},"notice":"Contains pool methods that may only be called by the factory owner","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"IUniswapV3PoolState":{"abi":[{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}}},"title":"Pool state that can change","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","liquidity()":"1a686502","observations(uint256)":"252c09d7","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","slot0()":"3850c7bd","tickBitmap(int16)":"5339c296","ticks(int24)":"f30dba93"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"}},"notice":"These methods compose the pool's state, and can change with any frequency including multiple times per transaction","version":1}}},"@uniswap/v3-core/contracts/libraries/BitMath.sol":{"BitMath":{"abi":[],"devdoc":{"details":"This library provides functionality for computing bit properties of an unsigned integer","kind":"dev","methods":{},"title":"BitMath","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e417bce6734c4dd9f7deb9fceb2ad038d0bbddc6e9bc8e7379678c856ae8ef6664736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 OR 0xBC 0xE6 PUSH20 0x4C4DD9F7DEB9FCEB2AD038D0BBDDC6E9BC8E7379 PUSH8 0x8C856AE8EF666473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"187:2602:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e417bce6734c4dd9f7deb9fceb2ad038d0bbddc6e9bc8e7379678c856ae8ef6664736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 OR 0xBC 0xE6 PUSH20 0x4C4DD9F7DEB9FCEB2AD038D0BBDDC6E9BC8E7379 PUSH8 0x8C856AE8EF666473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"187:2602:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"leastSignificantBit(uint256)":"infinite","mostSignificantBit(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides functionality for computing bit properties of an unsigned integer\",\"kind\":\"dev\",\"methods\":{},\"title\":\"BitMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":\"BitMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol":{"FixedPoint128":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"FixedPoint128","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d94d33fdf0ac538b777d123c1bee9ca615253bbefda1f32a457dda4e34aa9a4964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0x4D CALLER REVERT CREATE 0xAC MSTORE8 DUP12 PUSH24 0x7D123C1BEE9CA615253BBEFDA1F32A457DDA4E34AA9A4964 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"211:99:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d94d33fdf0ac538b777d123c1bee9ca615253bbefda1f32a457dda4e34aa9a4964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0x4D CALLER REVERT CREATE 0xAC MSTORE8 DUP12 PUSH24 0x7D123C1BEE9CA615253BBEFDA1F32A457DDA4E34AA9A4964 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"211:99:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint128\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":\"FixedPoint128\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)","version":1}}},"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol":{"FixedPoint96":{"abi":[],"devdoc":{"details":"Used in SqrtPriceMath.sol","kind":"dev","methods":{},"title":"FixedPoint96","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ab02790369fea180ae19abc717a111f21f5424cf4147896086134b0c3205f8b64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0xB0 0x27 SWAP1 CALLDATASIZE SWAP16 0xEA XOR EXP 0xE1 SWAP11 0xBC PUSH18 0x7A111F21F5424CF4147896086134B0C3205F DUP12 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"245:134:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ab02790369fea180ae19abc717a111f21f5424cf4147896086134b0c3205f8b64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0xB0 0x27 SWAP1 CALLDATASIZE SWAP16 0xEA XOR EXP 0xE1 SWAP11 0xBC PUSH18 0x7A111F21F5424CF4147896086134B0C3205F DUP12 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"245:134:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Used in SqrtPriceMath.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint96\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":\"FixedPoint96\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)","version":1}}},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"FullMath":{"abi":[],"devdoc":{"details":"Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits","kind":"dev","methods":{},"title":"Contains 512-bit math functions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9f1054fd3212bf47f32024e1dfcb94af379b3534b707f543d73e6893228f17964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 CALL SDIV 0x4F 0xD3 0x21 0x2B DELEGATECALL PUSH32 0x32024E1DFCB94AF379B3534B707F543D73E6893228F17964736F6C6343000706 STOP CALLER ","sourceMap":"362:4762:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9f1054fd3212bf47f32024e1dfcb94af379b3534b707f543d73e6893228f17964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 CALL SDIV 0x4F 0xD3 0x21 0x2B DELEGATECALL PUSH32 0x32024E1DFCB94AF379B3534B707F543D73E6893228F17964736F6C6343000706 STOP CALLER ","sourceMap":"362:4762:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"mulDiv(uint256,uint256,uint256)":"infinite","mulDivRoundingUp(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision","version":1}}},"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol":{"LiquidityMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Math library for liquidity","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c60a3d330102a00967620606f3e38694500c8d58b977cce9b0a4dd8cd5fd490964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 EXP RETURNDATASIZE CALLER ADD MUL LOG0 MULMOD PUSH8 0x620606F3E3869450 0xC DUP14 PC 0xB9 PUSH24 0xCCE9B0A4DD8CD5FD490964736F6C63430007060033000000 ","sourceMap":"109:512:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c60a3d330102a00967620606f3e38694500c8d58b977cce9b0a4dd8cd5fd490964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 EXP RETURNDATASIZE CALLER ADD MUL LOG0 MULMOD PUSH8 0x620606F3E3869450 0xC DUP14 PC 0xB9 PUSH24 0xCCE9B0A4DD8CD5FD490964736F6C63430007060033000000 ","sourceMap":"109:512:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"addDelta(uint128,int128)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math library for liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":\"LiquidityMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"LowGasSafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Optimized overflow and underflow safe math operations","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e08ea9c41e3a3a5b523d8856a2c07648db286255df4ea4de37eb1d2073bcbc4064736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 DUP15 0xA9 0xC4 0x1E GASPRICE GASPRICE JUMPDEST MSTORE RETURNDATASIZE DUP9 JUMP LOG2 0xC0 PUSH23 0x48DB286255DF4EA4DE37EB1D2073BCBC4064736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"249:1446:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e08ea9c41e3a3a5b523d8856a2c07648db286255df4ea4de37eb1d2073bcbc4064736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 DUP15 0xA9 0xC4 0x1E GASPRICE GASPRICE JUMPDEST MSTORE RETURNDATASIZE DUP9 JUMP LOG2 0xC0 PUSH23 0x48DB286255DF4EA4DE37EB1D2073BCBC4064736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"249:1446:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(int256,int256)":"infinite","add(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(int256,int256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost","version":1}}},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"SafeCast":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Safe casting methods","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d280561a6c313cd89c0aa687248ffbc3903936d5804806c88b921ae18ae8e7b64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0x28 SDIV PUSH2 0xA6C3 SGT 0xCD DUP10 0xC0 0xAA PUSH9 0x7248FFBC3903936D58 DIV DUP1 PUSH13 0x88B921AE18AE8E7B64736F6C63 NUMBER STOP SMOD MOD STOP CALLER ","sourceMap":"165:882:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d280561a6c313cd89c0aa687248ffbc3903936d5804806c88b921ae18ae8e7b64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0x28 SDIV PUSH2 0xA6C3 SGT 0xCD DUP10 0xC0 0xAA PUSH9 0x7248FFBC3903936D58 DIV DUP1 PUSH13 0x88B921AE18AE8E7B64736F6C63 NUMBER STOP SMOD MOD STOP CALLER ","sourceMap":"165:882:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toInt128(int256)":"infinite","toInt256(uint256)":"infinite","toUint160(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods for safely casting between types","version":1}}},"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol":{"SqrtPriceMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Functions based on Q64.96 sqrt price and liquidity","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087b7ab7bea57d0ef102f7fad47601a6ce1090b84b678b7cbfb67763170f596b364736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xB7 0xAB PUSH28 0xEA57D0EF102F7FAD47601A6CE1090B84B678B7CBFB67763170F596B3 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"369:10404:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087b7ab7bea57d0ef102f7fad47601a6ce1090b84b678b7cbfb67763170f596b364736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xB7 0xAB PUSH28 0xEA57D0EF102F7FAD47601A6CE1090B84B678B7CBFB67763170F596B3 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"369:10404:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAmount0Delta(uint160,uint160,int128)":"infinite","getAmount0Delta(uint160,uint160,uint128,bool)":"infinite","getAmount1Delta(uint160,uint160,int128)":"infinite","getAmount1Delta(uint160,uint160,uint128,bool)":"infinite","getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool)":"infinite","getNextSqrtPriceFromAmount1RoundingDown(uint160,uint128,uint256,bool)":"infinite","getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)":"infinite","getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Functions based on Q64.96 sqrt price and liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":\"SqrtPriceMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas","version":1}}},"@uniswap/v3-core/contracts/libraries/SwapMath.sol":{"SwapMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Computes the result of a swap within ticks","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035e7b52505786c7ad1b829921128f3b3b618c44ac46b7d254177e90f8a80d05964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0xE7 0xB5 0x25 SDIV PUSH25 0x6C7AD1B829921128F3B3B618C44AC46B7D254177E90F8A80D0 MSIZE PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"292:4340:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035e7b52505786c7ad1b829921128f3b3b618c44ac46b7d254177e90f8a80d05964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0xE7 0xB5 0x25 SDIV PUSH25 0x6C7AD1B829921128F3B3B618C44AC46B7D254177E90F8A80D0 MSIZE PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"292:4340:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"computeSwapStep(uint160,uint160,uint128,int256,uint24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Computes the result of a swap within ticks\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":\"SwapMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.","version":1}}},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"TickMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"MAX_SQRT_RATIO":{"details":"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"MAX_TICK":{"details":"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"MIN_SQRT_RATIO":{"details":"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"MIN_TICK":{"details":"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"}},"title":"Math library for computing sqrt prices from ticks and vice versa","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a20542c4d28ec3480cf31407a7e14b5160277a09228799502620d51582c64c8964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 SDIV TIMESTAMP 0xC4 0xD2 DUP15 0xC3 0x48 0xC RETURN EQ SMOD 0xA7 0xE1 0x4B MLOAD PUSH1 0x27 PUSH27 0x9228799502620D51582C64C8964736F6C63430007060033000000 ","sourceMap":"313:8331:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a20542c4d28ec3480cf31407a7e14b5160277a09228799502620d51582c64c8964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 SDIV TIMESTAMP 0xC4 0xD2 DUP15 0xC3 0x48 0xC RETURN EQ SMOD 0xA7 0xE1 0x4B MLOAD PUSH1 0x27 PUSH27 0x9228799502620D51582C64C8964736F6C63430007060033000000 ","sourceMap":"313:8331:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getSqrtRatioAtTick(int24)":"infinite","getTickAtSqrtRatio(uint160)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128","version":1}}},"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol":{"UnsafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Math functions that do not check inputs or outputs","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f7609daa56b3b0292466b06a2034215164c16f359089ae76ab3ab249566cba1e64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 PUSH1 0x9D 0xAA JUMP 0xB3 0xB0 0x29 0x24 PUSH7 0xB06A2034215164 0xC1 PUSH16 0x359089AE76AB3AB249566CBA1E64736F PUSH13 0x63430007060033000000000000 ","sourceMap":"244:415:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f7609daa56b3b0292466b06a2034215164c16f359089ae76ab3ab249566cba1e64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 PUSH1 0x9D 0xAA JUMP 0xB3 0xB0 0x29 0x24 PUSH7 0xB06A2034215164 0xC1 PUSH16 0x359089AE76AB3AB249566CBA1E64736F PUSH13 0x63430007060033000000000000 ","sourceMap":"244:415:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"divRoundingUp(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math functions that do not check inputs or outputs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods that perform common math functions but do not do any overflow or underflow checks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":\"UnsafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods that perform common math functions but do not do any overflow or underflow checks","version":1}}},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"PeripheryImmutableState":{"abi":[{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"WETH9":{"return":"Returns the address of WETH9"},"factory":{"return":"Returns the address of the Uniswap V3 factory"}},"title":"Immutable state","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"WETH9()":"4aa4a4fc","factory()":"c45a0155"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '../interfaces/IPeripheryImmutableState.sol';\\n\\n/// @title Immutable state\\n/// @notice Immutable state used by periphery contracts\\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override factory;\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override WETH9;\\n\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n}\\n\",\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Immutable state used by periphery contracts","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"IPeripheryImmutableState":{"abi":[{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"WETH9()":{"returns":{"_0":"Returns the address of WETH9"}},"factory()":{"returns":{"_0":"Returns the address of the Uniswap V3 factory"}}},"title":"Immutable state","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"WETH9()":"4aa4a4fc","factory()":"c45a0155"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Functions that return immutable state of the router","version":1}}},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"BytesLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d4754722f2ec2dcdd1e90d256a95cb5b468b5e7357ce88b79fa444daf468d7be64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 PUSH22 0x4722F2EC2DCDD1E90D256A95CB5B468B5E7357CE88B7 SWAP16 LOG4 DIFFICULTY 0xDA DELEGATECALL PUSH9 0xD7BE64736F6C634300 SMOD MOD STOP CALLER ","sourceMap":"376:3825:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d4754722f2ec2dcdd1e90d256a95cb5b468b5e7357ce88b79fa444daf468d7be64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 PUSH22 0x4722F2EC2DCDD1E90D256A95CB5B468B5E7357CE88B7 SWAP16 LOG4 DIFFICULTY 0xDA DELEGATECALL PUSH9 0xD7BE64736F6C634300 SMOD MOD STOP CALLER ","sourceMap":"376:3825:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"slice(bytes memory,uint256,uint256)":"infinite","toAddress(bytes memory,uint256)":"infinite","toUint24(bytes memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"Path":{"abi":[],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"ADDR_SIZE":{"details":"The length of the bytes encoded address"},"FEE_SIZE":{"details":"The length of the bytes encoded fee"},"MULTIPLE_POOLS_MIN_LENGTH":{"details":"The minimum length of an encoding that contains 2 or more pools"},"NEXT_OFFSET":{"details":"The offset of a single token address and pool fee"},"POP_OFFSET":{"details":"The offset of an encoded pool key"}},"title":"Functions for manipulating path data for multihop swaps","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c2cf7d7e9030d82dc3644fc5e142a69aee2972dbfbe9905ce7394a342520c0c464736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 0xCF PUSH30 0x7E9030D82DC3644FC5E142A69AEE2972DBFBE9905CE7394A342520C0C464 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"164:2622:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c2cf7d7e9030d82dc3644fc5e142a69aee2972dbfbe9905ce7394a342520c0c464736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 0xCF PUSH30 0x7E9030D82DC3644FC5E142A69AEE2972DBFBE9905CE7394A342520C0C464 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"164:2622:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"decodeFirstPool(bytes memory)":"infinite","getFirstPool(bytes memory)":"infinite","hasMultiplePools(bytes memory)":"infinite","numPools(bytes memory)":"infinite","skipToken(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"MULTIPLE_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_OFFSET\":{\"details\":\"The offset of a single token address and pool fee\"},\"POP_OFFSET\":{\"details\":\"The offset of an encoded pool key\"}},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":\"Path\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol":{"PoolAddress":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Provides functions for deriving a pool address from the factory, tokens, and the fee","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204649210d39f7cfe3671f45e4c79e9aab013a77938399d68d11b89e48aa98900164736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0x49 0x21 0xD CODECOPY 0xF7 0xCF 0xE3 PUSH8 0x1F45E4C79E9AAB01 GASPRICE PUSH24 0x938399D68D11B89E48AA98900164736F6C63430007060033 ","sourceMap":"167:1652:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204649210d39f7cfe3671f45e4c79e9aab013a77938399d68d11b89e48aa98900164736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0x49 0x21 0xD CODECOPY 0xF7 0xCF 0xE3 PUSH8 0x1F45E4C79E9AAB01 GASPRICE PUSH24 0x938399D68D11B89E48AA98900164736F6C63430007060033 ","sourceMap":"167:1652:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"computeAddress(address,struct PoolAddress.PoolKey memory)":"infinite","getPoolKey(address,address,uint24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/UniV3QuoterCore.sol":{"UniV3QuoterCore":{"abi":[{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611a1e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806390405d3614610030575b600080fd5b61006c6004803603608081101561004657600080fd5b506001600160a01b03813581169160208101351515916040820135916060013516610085565b6040805192835260208301919091528051918290030190f35b600080836100da576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806100ee8a8a8a8a610343565b9250925092505b80511580159061011b5750866001600160a01b031681604001516001600160a01b031614155b1561030c5761012861195e565b60408201516001600160a01b03168152606082015161014a908c90868d6103d6565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b60208401529083015161019891610187908d908c610433565b6080850151855161ffff8816610480565b60c085015260a084015260808301526001600160a01b0316604083015284156101fa576101ce8160c00151826080015101610672565b825103825260a08101516101f0906101e590610672565b602084015190610688565b6020830152610235565b6102078160a00151610672565b825101825260c0810151608082015161022f916102249101610672565b6020840151906106a4565b60208301525b80606001516001600160a01b031682604001516001600160a01b031614156102cb578060400151156102a25760006102718c83602001516106ba565b5050505050509150508a15610284576000035b610292836080015182610781565b6001600160801b03166080840152505b896102b15780602001516102ba565b60018160200151035b600290810b900b6060830152610306565b80600001516001600160a01b031682604001516001600160a01b031614610306576102f98260400151610837565b600290810b900b60608301525b506100f5565b8315158915151461032557602081015181518903610332565b8060000151880381602001515b909b909a5098505050505050505050565b60008061034e61199a565b600061035988610b56565b905061036a87868360000151610c5f565b61037388610d30565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b81526020016103bd8a610d9f565b6001600160801b03168152509150509450945094915050565b60008060006103e787878787610dda565b9093509150620d89e719600284900b121561040857620d89e719925061041e565b620d89e8600284900b131561041e57620d89e892505b61042783610df6565b90509450945094915050565b60008361045457816001600160a01b0316836001600160a01b03161161046a565b816001600160a01b0316836001600160a01b0316105b6104745782610476565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906105055760006104b98989620f42400362ffffff16620f4240611128565b9050826104d2576104cd8c8c8c60016111d7565b6104df565b6104df8b8d8c6001611252565b95508581106104f0578a96506104ff565b6104fc8c8b83866112fd565b96505b5061054f565b8161051c576105178b8b8b6000611252565b610529565b6105298a8c8b60006111d7565b935083886000031061053d5789955061054f565b61054c8b8a8a60000385611349565b95505b6001600160a01b038a81169087161482156105b25780801561056e5750815b6105845761057f878d8c6001611252565b610586565b855b9550808015610593575081155b6105a9576105a4878d8c60006111d7565b6105ab565b845b94506105fc565b8080156105bc5750815b6105d2576105cd8c888c60016111d7565b6105d4565b855b95508080156105e1575081155b6105f7576105f28c888c6000611252565b6105f9565b845b94505b8115801561060c57508860000385115b15610618578860000394505b81801561063757508a6001600160a01b0316876001600160a01b031614155b15610646578589039350610663565b610660868962ffffff168a620f42400362ffffff16611395565b93505b50505095509550955095915050565b6000600160ff1b821061068457600080fd5b5090565b8082038281131560008312151461069e57600080fd5b92915050565b8181018281121560008312151461069e57600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d61010081101561073957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b12156107e657826001600160801b03168260000384039150816001600160801b0316106107e1576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b61069e565b826001600160801b03168284019150816001600160801b0316101561069e576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610873575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6108a8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061093c57607f810383901c9150610946565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610b4757886001600160a01b0316610b2b82610df6565b6001600160a01b03161115610b405781610b42565b805b610b49565b815b9998505050505050505050565b610b5e6119c8565b816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9757600080fd5b505afa158015610bab573d6000803e3d6000fd5b505050506040513d6020811015610bc157600080fd5b505161ffff166040808301919091528051633850c7bd60e01b815290516001600160a01b03841691633850c7bd9160048083019260e0929190829003018186803b158015610c0e57600080fd5b505afa158015610c22573d6000803e3d6000fd5b505050506040513d60e0811015610c3857600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b600083610ca857816001600160a01b0316836001600160a01b0316118015610ca3575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b610cd6565b816001600160a01b0316836001600160a01b0316108015610cd657506401000276a36001600160a01b038416115b905080610d2a576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d6020811015610d9557600080fd5b505190505b919050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6b57600080fd5b600080610de9868686866113cf565b9150915094509492505050565b60008060008360020b12610e0d578260020b610e15565b8260020b6000035b9050620d89e8811115610e53576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610e6757600160801b610e79565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610ead576ffff97272373d413259a46990580e213a0260801c5b6004821615610ecc576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610eeb576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610f0a576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610f29576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610f48576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610f67576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610f87576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610fa7576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610fc7576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610fe7576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611007576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611027576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611047576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611067576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611088576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156110a8576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156110c7576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156110e4576b048a170391f7dc42444e8fa20260801c5b60008460020b13156110ff5780600019816110fb57fe5b0490505b640100000000810615611113576001611116565b60005b60ff16602082901c0192505050919050565b600080806000198587098686029250828110908390030390508061115e576000841161115357600080fd5b508290049050610479565b80841161116a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b031611156111f7579293925b816112245761121f836001600160801b03168686036001600160a01b0316600160601b611128565b611247565b611247836001600160801b03168686036001600160a01b0316600160601b611395565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611272579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661129c57600080fd5b836112cc57866001600160a01b03166112bf8383896001600160a01b0316611128565b816112c657fe5b046112f2565b6112f26112e38383896001600160a01b0316611395565b886001600160a01b03166115cd565b979650505050505050565b600080856001600160a01b03161161131457600080fd5b6000846001600160801b03161161132a57600080fd5b8161133c5761121f85858560016115d8565b61124785858560016116b9565b600080856001600160a01b03161161136057600080fd5b6000846001600160801b03161161137657600080fd5b816113885761121f85858560006116b9565b61124785858560006115d8565b60006113a2848484611128565b9050600082806113ae57fe5b84860911156104795760001981106113c557600080fd5b6001019392505050565b6000808581600286810b9088900b816113e457fe5b05905060008760020b12801561140b57508560020b8760020b8161140457fe5b0760020b15155b1561141557600019015b84156114ec576000806114278361179c565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b15801561148857600080fd5b505afa15801561149c573d6000803e3d6000fd5b505050506040513d60208110156114b257600080fd5b50511680151597509050866114ce57898360ff168603026114e1565b896114d8826117ae565b840360ff168603025b9750505050506115c2565b6000806114fb8360010161179c565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d602081101561158357600080fd5b50511680151597509050866115a557898360ff0360ff168660010101026115bb565b89836115b08361184e565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b6000811561164b5760006001600160a01b0384111561160e5761160984600160601b876001600160801b0316611128565b611626565b6001600160801b038516606085901b8161162457fe5b045b905061164361163e6001600160a01b03881683611938565b611948565b91505061124a565b60006001600160a01b038411156116795761167484600160601b876001600160801b0316611395565b611690565b611690606085901b6001600160801b0387166115cd565b905080866001600160a01b0316116116a757600080fd5b6001600160a01b03861603905061124a565b6000826116c757508361124a565b600160601b600160e01b03606085901b168215611755576001600160a01b038616848102908582816116f557fe5b041415611726578181018281106117245761171a83896001600160a01b031683611395565b935050505061124a565b505b61174c82611747878a6001600160a01b0316868161174057fe5b0490611938565b6115cd565b9250505061124a565b6001600160a01b0386168481029085828161176c57fe5b0414801561177957508082115b61178257600080fd5b80820361171a61163e846001600160a01b038b1684611395565b60020b600881901d9161010090910790565b60008082116117bc57600080fd5b600160801b82106117cf57608091821c91015b6801000000000000000082106117e757604091821c91015b64010000000082106117fb57602091821c91015b62010000821061180d57601091821c91015b610100821061181e57600891821c91015b6010821061182e57600491821c91015b6004821061183e57600291821c91015b60028210610d9a57600101919050565b600080821161185c57600080fd5b5060ff6001600160801b0382161561187757607f190161187f565b608082901c91505b67ffffffffffffffff82161561189857603f19016118a0565b604082901c91505b63ffffffff8216156118b557601f19016118bd565b602082901c91505b61ffff8216156118d057600f19016118d8565b601082901c91505b60ff8216156118ea57600719016118f2565b600882901c91505b600f821615611904576003190161190c565b600482901c91505b600382161561191e5760011901611926565b600282901c91505b6001821615610d9a5760001901919050565b8082018281101561069e57600080fd5b806001600160a01b0381168114610d9a57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051606081018252600080825260208201819052918101919091529056fea2646970667358221220fc14b5dcb77d03eec8d5b71fb8dfd5274f3e70c424f6a0b428252ae9201efd4764736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A1E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x90405D36 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD AND PUSH2 0x85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xDA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xEE DUP11 DUP11 DUP11 DUP11 PUSH2 0x343 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x11B JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x30C JUMPI PUSH2 0x128 PUSH2 0x195E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x14A SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x198 SWAP2 PUSH2 0x187 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x480 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x1FA JUMPI PUSH2 0x1CE DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x1F0 SWAP1 PUSH2 0x1E5 SWAP1 PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x688 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x235 JUMP JUMPDEST PUSH2 0x207 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x22F SWAP2 PUSH2 0x224 SWAP2 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2CB JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 PUSH2 0x271 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x6BA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x292 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x781 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x2B1 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x306 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x306 JUMPI PUSH2 0x2F9 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x837 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xF5 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x325 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x332 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34E PUSH2 0x199A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359 DUP9 PUSH2 0xB56 JUMP JUMPDEST SWAP1 POP PUSH2 0x36A DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x373 DUP9 PUSH2 0xD30 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD DUP11 PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E7 DUP8 DUP8 DUP8 DUP8 PUSH2 0xDDA JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x408 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x41E JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x41E JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x427 DUP4 PUSH2 0xDF6 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x454 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x46A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x474 JUMPI DUP3 PUSH2 0x476 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x505 JUMPI PUSH1 0x0 PUSH2 0x4B9 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x4D2 JUMPI PUSH2 0x4CD DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x4DF DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1252 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x4F0 JUMPI DUP11 SWAP7 POP PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x4FC DUP13 DUP12 DUP4 DUP7 PUSH2 0x12FD JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x54F JUMP JUMPDEST DUP2 PUSH2 0x51C JUMPI PUSH2 0x517 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x529 JUMP JUMPDEST PUSH2 0x529 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x11D7 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x53D JUMPI DUP10 SWAP6 POP PUSH2 0x54F JUMP JUMPDEST PUSH2 0x54C DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1349 JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x5B2 JUMPI DUP1 DUP1 ISZERO PUSH2 0x56E JUMPI POP DUP2 JUMPDEST PUSH2 0x584 JUMPI PUSH2 0x57F DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x586 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x593 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5A9 JUMPI PUSH2 0x5A4 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x5FC JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x5BC JUMPI POP DUP2 JUMPDEST PUSH2 0x5D2 JUMPI PUSH2 0x5CD DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x5E1 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5F7 JUMPI PUSH2 0x5F2 DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x5F9 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x618 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x637 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x646 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x663 JUMP JUMPDEST PUSH2 0x660 DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x1395 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x722 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x7E6 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x7E1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x69E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x873 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x8A8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x93C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x946 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0xB47 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB2B DUP3 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xB40 JUMPI DUP2 PUSH2 0xB42 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0xB49 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB5E PUSH2 0x19C8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xFFFF AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH4 0x3850C7BD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0x3850C7BD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0xE0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0xC38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0xCA8 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0xCA3 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0xCD6 JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0xD2A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE9 DUP7 DUP7 DUP7 DUP7 PUSH2 0x13CF JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0xE0D JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0xE15 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0xE53 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0xE67 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0xE79 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0xEAD JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0xECC JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0xEEB JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0xF0A JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0xF29 JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0xF48 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0xF67 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0xF87 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0xFA7 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0xFC7 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0xFE7 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1007 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1027 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1047 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1067 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1088 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x10A8 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x10C7 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x10E4 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x10FF JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x10FB JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1113 JUMPI PUSH1 0x1 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x115E JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x479 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x116A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x11F7 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1224 JUMPI PUSH2 0x121F DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1128 JUMP JUMPDEST PUSH2 0x1247 JUMP JUMPDEST PUSH2 0x1247 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1395 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1272 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x129C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x12CC JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12BF DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1128 JUMP JUMPDEST DUP2 PUSH2 0x12C6 JUMPI INVALID JUMPDEST DIV PUSH2 0x12F2 JUMP JUMPDEST PUSH2 0x12F2 PUSH2 0x12E3 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1395 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15CD JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x132A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x133C JUMPI PUSH2 0x121F DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x15D8 JUMP JUMPDEST PUSH2 0x1247 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1388 JUMPI PUSH2 0x121F DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x1247 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x15D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A2 DUP5 DUP5 DUP5 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x13AE JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x13C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x13E4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x140B JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1404 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1415 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x14EC JUMPI PUSH1 0x0 DUP1 PUSH2 0x1427 DUP4 PUSH2 0x179C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x149C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x14CE JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x14E1 JUMP JUMPDEST DUP10 PUSH2 0x14D8 DUP3 PUSH2 0x17AE JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x15C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14FB DUP4 PUSH1 0x1 ADD PUSH2 0x179C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x156D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x15A5 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x15BB JUMP JUMPDEST DUP10 DUP4 PUSH2 0x15B0 DUP4 PUSH2 0x184E JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x160E JUMPI PUSH2 0x1609 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1128 JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x1624 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x1643 PUSH2 0x163E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x1938 JUMP JUMPDEST PUSH2 0x1948 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x1679 JUMPI PUSH2 0x1674 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1395 JUMP JUMPDEST PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x1690 PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x15CD JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x16A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16C7 JUMPI POP DUP4 PUSH2 0x124A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x1755 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x16F5 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x1726 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x1724 JUMPI PUSH2 0x171A DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1395 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x124A JUMP JUMPDEST POP JUMPDEST PUSH2 0x174C DUP3 PUSH2 0x1747 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x1740 JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x1938 JUMP JUMPDEST PUSH2 0x15CD JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x176C JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x1779 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x171A PUSH2 0x163E DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x1395 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x17BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x17CF JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x17E7 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x17FB JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x180D JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x181E JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x182E JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x183E JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xD9A JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x185C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x1877 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x187F JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x1898 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x18A0 JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x18B5 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x18D0 JUMPI PUSH1 0xF NOT ADD PUSH2 0x18D8 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x18EA JUMPI PUSH1 0x7 NOT ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x1904 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x190C JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x191E JUMPI PUSH1 0x1 NOT ADD PUSH2 0x1926 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xD9A JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC EQ 0xB5 0xDC 0xB7 PUSH30 0x3EEC8D5B71FB8DFD5274F3E70C424F6A0B428252AE9201EFD4764736F6C PUSH4 0x43000706 STOP CALLER ","sourceMap":"149:1420:23:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c806390405d3614610030575b600080fd5b61006c6004803603608081101561004657600080fd5b506001600160a01b03813581169160208101351515916040820135916060013516610085565b6040805192835260208301919091528051918290030190f35b600080836100da576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806100ee8a8a8a8a610343565b9250925092505b80511580159061011b5750866001600160a01b031681604001516001600160a01b031614155b1561030c5761012861195e565b60408201516001600160a01b03168152606082015161014a908c90868d6103d6565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b60208401529083015161019891610187908d908c610433565b6080850151855161ffff8816610480565b60c085015260a084015260808301526001600160a01b0316604083015284156101fa576101ce8160c00151826080015101610672565b825103825260a08101516101f0906101e590610672565b602084015190610688565b6020830152610235565b6102078160a00151610672565b825101825260c0810151608082015161022f916102249101610672565b6020840151906106a4565b60208301525b80606001516001600160a01b031682604001516001600160a01b031614156102cb578060400151156102a25760006102718c83602001516106ba565b5050505050509150508a15610284576000035b610292836080015182610781565b6001600160801b03166080840152505b896102b15780602001516102ba565b60018160200151035b600290810b900b6060830152610306565b80600001516001600160a01b031682604001516001600160a01b031614610306576102f98260400151610837565b600290810b900b60608301525b506100f5565b8315158915151461032557602081015181518903610332565b8060000151880381602001515b909b909a5098505050505050505050565b60008061034e61199a565b600061035988610b56565b905061036a87868360000151610c5f565b61037388610d30565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b81526020016103bd8a610d9f565b6001600160801b03168152509150509450945094915050565b60008060006103e787878787610dda565b9093509150620d89e719600284900b121561040857620d89e719925061041e565b620d89e8600284900b131561041e57620d89e892505b61042783610df6565b90509450945094915050565b60008361045457816001600160a01b0316836001600160a01b03161161046a565b816001600160a01b0316836001600160a01b0316105b6104745782610476565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906105055760006104b98989620f42400362ffffff16620f4240611128565b9050826104d2576104cd8c8c8c60016111d7565b6104df565b6104df8b8d8c6001611252565b95508581106104f0578a96506104ff565b6104fc8c8b83866112fd565b96505b5061054f565b8161051c576105178b8b8b6000611252565b610529565b6105298a8c8b60006111d7565b935083886000031061053d5789955061054f565b61054c8b8a8a60000385611349565b95505b6001600160a01b038a81169087161482156105b25780801561056e5750815b6105845761057f878d8c6001611252565b610586565b855b9550808015610593575081155b6105a9576105a4878d8c60006111d7565b6105ab565b845b94506105fc565b8080156105bc5750815b6105d2576105cd8c888c60016111d7565b6105d4565b855b95508080156105e1575081155b6105f7576105f28c888c6000611252565b6105f9565b845b94505b8115801561060c57508860000385115b15610618578860000394505b81801561063757508a6001600160a01b0316876001600160a01b031614155b15610646578589039350610663565b610660868962ffffff168a620f42400362ffffff16611395565b93505b50505095509550955095915050565b6000600160ff1b821061068457600080fd5b5090565b8082038281131560008312151461069e57600080fd5b92915050565b8181018281121560008312151461069e57600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d61010081101561073957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b12156107e657826001600160801b03168260000384039150816001600160801b0316106107e1576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b61069e565b826001600160801b03168284019150816001600160801b0316101561069e576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610873575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6108a8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061093c57607f810383901c9150610946565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610b4757886001600160a01b0316610b2b82610df6565b6001600160a01b03161115610b405781610b42565b805b610b49565b815b9998505050505050505050565b610b5e6119c8565b816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9757600080fd5b505afa158015610bab573d6000803e3d6000fd5b505050506040513d6020811015610bc157600080fd5b505161ffff166040808301919091528051633850c7bd60e01b815290516001600160a01b03841691633850c7bd9160048083019260e0929190829003018186803b158015610c0e57600080fd5b505afa158015610c22573d6000803e3d6000fd5b505050506040513d60e0811015610c3857600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b600083610ca857816001600160a01b0316836001600160a01b0316118015610ca3575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b610cd6565b816001600160a01b0316836001600160a01b0316108015610cd657506401000276a36001600160a01b038416115b905080610d2a576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d6020811015610d9557600080fd5b505190505b919050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6b57600080fd5b600080610de9868686866113cf565b9150915094509492505050565b60008060008360020b12610e0d578260020b610e15565b8260020b6000035b9050620d89e8811115610e53576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610e6757600160801b610e79565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610ead576ffff97272373d413259a46990580e213a0260801c5b6004821615610ecc576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610eeb576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610f0a576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610f29576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610f48576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610f67576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610f87576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610fa7576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610fc7576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610fe7576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611007576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611027576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611047576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611067576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611088576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156110a8576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156110c7576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156110e4576b048a170391f7dc42444e8fa20260801c5b60008460020b13156110ff5780600019816110fb57fe5b0490505b640100000000810615611113576001611116565b60005b60ff16602082901c0192505050919050565b600080806000198587098686029250828110908390030390508061115e576000841161115357600080fd5b508290049050610479565b80841161116a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b031611156111f7579293925b816112245761121f836001600160801b03168686036001600160a01b0316600160601b611128565b611247565b611247836001600160801b03168686036001600160a01b0316600160601b611395565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611272579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661129c57600080fd5b836112cc57866001600160a01b03166112bf8383896001600160a01b0316611128565b816112c657fe5b046112f2565b6112f26112e38383896001600160a01b0316611395565b886001600160a01b03166115cd565b979650505050505050565b600080856001600160a01b03161161131457600080fd5b6000846001600160801b03161161132a57600080fd5b8161133c5761121f85858560016115d8565b61124785858560016116b9565b600080856001600160a01b03161161136057600080fd5b6000846001600160801b03161161137657600080fd5b816113885761121f85858560006116b9565b61124785858560006115d8565b60006113a2848484611128565b9050600082806113ae57fe5b84860911156104795760001981106113c557600080fd5b6001019392505050565b6000808581600286810b9088900b816113e457fe5b05905060008760020b12801561140b57508560020b8760020b8161140457fe5b0760020b15155b1561141557600019015b84156114ec576000806114278361179c565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b15801561148857600080fd5b505afa15801561149c573d6000803e3d6000fd5b505050506040513d60208110156114b257600080fd5b50511680151597509050866114ce57898360ff168603026114e1565b896114d8826117ae565b840360ff168603025b9750505050506115c2565b6000806114fb8360010161179c565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d602081101561158357600080fd5b50511680151597509050866115a557898360ff0360ff168660010101026115bb565b89836115b08361184e565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b6000811561164b5760006001600160a01b0384111561160e5761160984600160601b876001600160801b0316611128565b611626565b6001600160801b038516606085901b8161162457fe5b045b905061164361163e6001600160a01b03881683611938565b611948565b91505061124a565b60006001600160a01b038411156116795761167484600160601b876001600160801b0316611395565b611690565b611690606085901b6001600160801b0387166115cd565b905080866001600160a01b0316116116a757600080fd5b6001600160a01b03861603905061124a565b6000826116c757508361124a565b600160601b600160e01b03606085901b168215611755576001600160a01b038616848102908582816116f557fe5b041415611726578181018281106117245761171a83896001600160a01b031683611395565b935050505061124a565b505b61174c82611747878a6001600160a01b0316868161174057fe5b0490611938565b6115cd565b9250505061124a565b6001600160a01b0386168481029085828161176c57fe5b0414801561177957508082115b61178257600080fd5b80820361171a61163e846001600160a01b038b1684611395565b60020b600881901d9161010090910790565b60008082116117bc57600080fd5b600160801b82106117cf57608091821c91015b6801000000000000000082106117e757604091821c91015b64010000000082106117fb57602091821c91015b62010000821061180d57601091821c91015b610100821061181e57600891821c91015b6010821061182e57600491821c91015b6004821061183e57600291821c91015b60028210610d9a57600101919050565b600080821161185c57600080fd5b5060ff6001600160801b0382161561187757607f190161187f565b608082901c91505b67ffffffffffffffff82161561189857603f19016118a0565b604082901c91505b63ffffffff8216156118b557601f19016118bd565b602082901c91505b61ffff8216156118d057600f19016118d8565b601082901c91505b60ff8216156118ea57600719016118f2565b600882901c91505b600f821615611904576003190161190c565b600482901c91505b600382161561191e5760011901611926565b600282901c91505b6001821615610d9a5760001901919050565b8082018281101561069e57600080fd5b806001600160a01b0381168114610d9a57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051606081018252600080825260208201819052918101919091529056fea2646970667358221220fc14b5dcb77d03eec8d5b71fb8dfd5274f3e70c424f6a0b428252ae9201efd4764736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x90405D36 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD AND PUSH2 0x85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xDA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xEE DUP11 DUP11 DUP11 DUP11 PUSH2 0x343 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x11B JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x30C JUMPI PUSH2 0x128 PUSH2 0x195E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x14A SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x198 SWAP2 PUSH2 0x187 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x480 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x1FA JUMPI PUSH2 0x1CE DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x1F0 SWAP1 PUSH2 0x1E5 SWAP1 PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x688 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x235 JUMP JUMPDEST PUSH2 0x207 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x22F SWAP2 PUSH2 0x224 SWAP2 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2CB JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 PUSH2 0x271 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x6BA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x292 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x781 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x2B1 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x306 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x306 JUMPI PUSH2 0x2F9 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x837 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xF5 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x325 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x332 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34E PUSH2 0x199A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359 DUP9 PUSH2 0xB56 JUMP JUMPDEST SWAP1 POP PUSH2 0x36A DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xC5F JUMP JUMPDEST PUSH2 0x373 DUP9 PUSH2 0xD30 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD DUP11 PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E7 DUP8 DUP8 DUP8 DUP8 PUSH2 0xDDA JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x408 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x41E JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x41E JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x427 DUP4 PUSH2 0xDF6 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x454 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x46A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x474 JUMPI DUP3 PUSH2 0x476 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x505 JUMPI PUSH1 0x0 PUSH2 0x4B9 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x4D2 JUMPI PUSH2 0x4CD DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x4DF DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1252 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x4F0 JUMPI DUP11 SWAP7 POP PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x4FC DUP13 DUP12 DUP4 DUP7 PUSH2 0x12FD JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x54F JUMP JUMPDEST DUP2 PUSH2 0x51C JUMPI PUSH2 0x517 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x529 JUMP JUMPDEST PUSH2 0x529 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x11D7 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x53D JUMPI DUP10 SWAP6 POP PUSH2 0x54F JUMP JUMPDEST PUSH2 0x54C DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1349 JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x5B2 JUMPI DUP1 DUP1 ISZERO PUSH2 0x56E JUMPI POP DUP2 JUMPDEST PUSH2 0x584 JUMPI PUSH2 0x57F DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x586 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x593 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5A9 JUMPI PUSH2 0x5A4 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x5FC JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x5BC JUMPI POP DUP2 JUMPDEST PUSH2 0x5D2 JUMPI PUSH2 0x5CD DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x5E1 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5F7 JUMPI PUSH2 0x5F2 DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x5F9 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x618 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x637 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x646 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x663 JUMP JUMPDEST PUSH2 0x660 DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x1395 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x722 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x7E6 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x7E1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x69E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x873 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x8A8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x93C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x946 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0xB47 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB2B DUP3 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xB40 JUMPI DUP2 PUSH2 0xB42 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0xB49 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB5E PUSH2 0x19C8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xFFFF AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH4 0x3850C7BD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0x3850C7BD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0xE0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0xC38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0xCA8 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0xCA3 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0xCD6 JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0xD2A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE9 DUP7 DUP7 DUP7 DUP7 PUSH2 0x13CF JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0xE0D JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0xE15 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0xE53 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0xE67 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0xE79 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0xEAD JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0xECC JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0xEEB JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0xF0A JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0xF29 JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0xF48 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0xF67 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0xF87 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0xFA7 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0xFC7 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0xFE7 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1007 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1027 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1047 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1067 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1088 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x10A8 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x10C7 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x10E4 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x10FF JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x10FB JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1113 JUMPI PUSH1 0x1 PUSH2 0x1116 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x115E JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x479 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x116A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x11F7 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1224 JUMPI PUSH2 0x121F DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1128 JUMP JUMPDEST PUSH2 0x1247 JUMP JUMPDEST PUSH2 0x1247 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1395 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1272 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x129C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x12CC JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12BF DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1128 JUMP JUMPDEST DUP2 PUSH2 0x12C6 JUMPI INVALID JUMPDEST DIV PUSH2 0x12F2 JUMP JUMPDEST PUSH2 0x12F2 PUSH2 0x12E3 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1395 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15CD JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x132A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x133C JUMPI PUSH2 0x121F DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x15D8 JUMP JUMPDEST PUSH2 0x1247 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1388 JUMPI PUSH2 0x121F DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x1247 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x15D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A2 DUP5 DUP5 DUP5 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x13AE JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x13C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x13E4 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x140B JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1404 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1415 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x14EC JUMPI PUSH1 0x0 DUP1 PUSH2 0x1427 DUP4 PUSH2 0x179C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x149C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x14CE JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x14E1 JUMP JUMPDEST DUP10 PUSH2 0x14D8 DUP3 PUSH2 0x17AE JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x15C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14FB DUP4 PUSH1 0x1 ADD PUSH2 0x179C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x156D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x15A5 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x15BB JUMP JUMPDEST DUP10 DUP4 PUSH2 0x15B0 DUP4 PUSH2 0x184E JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x160E JUMPI PUSH2 0x1609 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1128 JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x1624 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x1643 PUSH2 0x163E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x1938 JUMP JUMPDEST PUSH2 0x1948 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x1679 JUMPI PUSH2 0x1674 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1395 JUMP JUMPDEST PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x1690 PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x15CD JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x16A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16C7 JUMPI POP DUP4 PUSH2 0x124A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x1755 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x16F5 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x1726 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x1724 JUMPI PUSH2 0x171A DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1395 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x124A JUMP JUMPDEST POP JUMPDEST PUSH2 0x174C DUP3 PUSH2 0x1747 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x1740 JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x1938 JUMP JUMPDEST PUSH2 0x15CD JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x176C JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x1779 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x171A PUSH2 0x163E DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x1395 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x17BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x17CF JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x17E7 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x17FB JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x180D JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x181E JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x182E JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x183E JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xD9A JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x185C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x1877 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x187F JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x1898 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x18A0 JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x18B5 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x18D0 JUMPI PUSH1 0xF NOT ADD PUSH2 0x18D8 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x18EA JUMPI PUSH1 0x7 NOT ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x1904 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x190C JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x191E JUMPI PUSH1 0x1 NOT ADD PUSH2 0x1926 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xD9A JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC EQ 0xB5 0xDC 0xB7 PUSH30 0x3EEC8D5B71FB8DFD5274F3E70C424F6A0B428252AE9201EFD4764736F6C PUSH4 0x43000706 STOP CALLER ","sourceMap":"149:1420:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;702:3284:25;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;702:3284:25;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;873:14;;923:20;915:63;;;;;-1:-1:-1;;;915:63:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;988:15;1006:19;;;;988:15;;1093:131;1119:11;1144:10;1006:15;1197:17;1093:12;:131::i;:::-;1035:189;;;;;;1350:2396;1357:30;;:35;;;;:78;;;1418:17;-1:-1:-1;;;;;1396:39:25;:5;:18;;;-1:-1:-1;;;;;1396:39:25;;;1357:78;1350:2396;;;1451:28;;:::i;:::-;1518:18;;;;-1:-1:-1;;;;;1493:43:25;;;1684:10;;;;1610:155;;1655:11;;1712;1741:10;1610:27;:155::i;:::-;-1:-1:-1;;;;;1551:214:25;1585:21;;;1551:214;;;;;;1567:16;;;;1551:214;;;;;;;;;;;1552:13;;;1551:214;2010:18;;;;1968:269;;2046:75;;2068:10;;2103:17;2046:21;:75::i;:::-;2139:15;;;;2172:30;;1968:269;;;:24;:269::i;:::-;1950:14;;;1898:339;1934:14;;;1898:339;1919:13;;;1898:339;-1:-1:-1;;;;;1898:339:25;1899:18;;;1898:339;2251:434;;;;2319:43;2336:4;:14;;;2320:4;:13;;;:30;2319:41;:43::i;:::-;2285:77;;;;;2432:14;;;;2405:53;;2432:25;;:23;:25::i;:::-;2405:22;;;;;:26;:53::i;:::-;2380:22;;;:78;2251:434;;;2531:25;:4;:14;;;:23;:25::i;:::-;2497:59;;;;;2643:14;;;;2627:13;;;;2599:71;;2626:43;;2627:30;2626:41;:43::i;:::-;2599:22;;;;;:26;:71::i;:::-;2574:22;;;:96;2251:434;2779:4;:21;;;-1:-1:-1;;;;;2757:43:25;:5;:18;;;-1:-1:-1;;;;;2757:43:25;;2753:983;;;2895:4;:16;;;2891:485;;;2937:19;2966:36;2975:11;2988:4;:13;;;2966:8;:36::i;:::-;2935:67;;;;;;;;;3200:10;3196:68;;;3251:13;;3196:68;3304:53;3327:5;:15;;;3344:12;3304:22;:53::i;:::-;-1:-1:-1;;;;;3286:71:25;:15;;;:71;-1:-1:-1;2891:485:25;3406:10;:46;;3439:4;:13;;;3406:46;;;3435:1;3419:4;:13;;;:17;3406:46;3393:59;;;;;;:10;;;:59;2753:983;;;3499:4;:22;;;-1:-1:-1;;;;;3477:44:25;:5;:18;;;-1:-1:-1;;;;;3477:44:25;;3473:263;;3674:47;3702:5;:18;;;3674:27;:47::i;:::-;3661:60;;;;;;:10;;;:60;3473:263;1350:2396;;;;3791:10;3777:24;;:10;:24;;;:202;;3906:22;;;;3948:30;;3930:48;;3777:202;;;3835:5;:30;;;3817:15;:48;3867:5;:22;;;3777:202;3756:223;;;;-1:-1:-1;702:3284:25;-1:-1:-1;;;;;;;;;702:3284:25:o;3992:692::-;4164:8;4174:10;4186:22;;:::i;:::-;4220:21;4244:31;4263:11;4244:18;:31::i;:::-;4220:55;;4285:78;4318:10;4330:17;4349:2;:13;;;4285:32;:78::i;:::-;4378:27;4393:11;4378:14;:27::i;:::-;4373:32;;4421:2;:6;;;4415:12;;4445:232;;;;;;;;4495:15;4445:232;;;;4633:1;4445:232;;;;4588:2;:13;;;-1:-1:-1;;;;;4445:232:25;;;;;4654:2;:12;;;4445:232;;;;;;4535:25;4548:11;4535:12;:25::i;:::-;-1:-1:-1;;;;;4445:232:25;;;;4437:240;;3992:692;;;;;;;;;:::o;5128:725::-;5290:14;5306:16;5324:24;5386:69;5419:4;5425;5431:11;5444:10;5386:32;:69::i;:::-;5360:95;;-1:-1:-1;5360:95:25;-1:-1:-1;;;5578:28:25;;;;;5574:163;;;-1:-1:-1;;5620:28:25;;5574:163;;;644:9:16;5667:28:25;;;;;5663:74;;;644:9:16;;-1:-1:-1;5663:74:25;5809:37;5837:8;5809:27;:37::i;:::-;5790:56;;5128:725;;;;;;;;:::o;5859:336::-;6013:7;6040:10;:84;;6107:17;-1:-1:-1;;;;;6090:34:25;:16;-1:-1:-1;;;;;6090:34:25;;6040:84;;;6070:17;-1:-1:-1;;;;;6053:34:25;:16;-1:-1:-1;;;;;6053:34:25;;6040:84;6039:149;;6172:16;6039:149;;;6140:17;6039:149;6032:156;;5859:336;;;;;;:::o;1391:3239:15:-;1638:24;;;;-1:-1:-1;;;;;1797:41:15;;;;;;;;1863:20;;;;;;1894:1354;;1921:30;1954:61;1978:15;2002:7;1996:3;:13;1954:61;;2011:3;1954:15;:61::i;:::-;1921:94;;2040:10;:222;;2175:87;2205:19;2226:18;2246:9;2257:4;2175:29;:87::i;:::-;2040:222;;;2069:87;2099:18;2119:19;2140:9;2151:4;2069:29;:87::i;:::-;2029:233;;2306:8;2280:22;:34;2276:336;;2335:18;2316:37;;2276:336;;;2407:205;2468:19;2509:9;2540:22;2584:10;2407:39;:205::i;:::-;2388:224;;2276:336;1894:1354;;;;2655:10;:224;;2791:88;2821:19;2842:18;2862:9;2873:5;2791:29;:88::i;:::-;2655:224;;;2684:88;2714:18;2734:19;2755:9;2766:5;2684:29;:88::i;:::-;2643:236;;2926:9;2906:15;2905:16;;2897:38;2893:344;;2956:18;2937:37;;2893:344;;;3028:209;3090:19;3131:9;3171:15;3170:16;;3209:10;3028:40;:209::i;:::-;3009:228;;2893:344;-1:-1:-1;;;;;3269:38:15;;;;;;;3358:732;;;;3399:3;:14;;;;;3406:7;3399:14;:145;;3459:85;3489:16;3507:19;3528:9;3539:4;3459:29;:85::i;:::-;3399:145;;;3432:8;3399:145;3388:156;;3570:3;:15;;;;;3578:7;3577:8;3570:15;:148;;3632:86;3662:16;3680:19;3701:9;3712:5;3632:29;:86::i;:::-;3570:148;;;3604:9;3570:148;3558:160;;3358:732;;;3760:3;:14;;;;;3767:7;3760:14;:145;;3820:85;3850:19;3871:16;3889:9;3900:4;3820:29;:85::i;:::-;3760:145;;;3793:8;3760:145;3749:156;;3931:3;:15;;;;;3939:7;3938:8;3931:15;:148;;3993:86;4023:19;4044:16;4062:9;4073:5;3993:29;:86::i;:::-;3931:148;;;3965:9;3931:148;3919:160;;3358:732;4180:7;4179:8;:49;;;;;4212:15;4211:16;;4191:9;:37;4179:49;4175:117;;;4265:15;4264:16;;4244:37;;4175:117;4306:7;:49;;;;;4337:18;-1:-1:-1;;;;;4317:38:15;:16;-1:-1:-1;;;;;4317:38:15;;;4306:49;4302:322;;;4503:8;4484:15;4476:35;4464:47;;4302:322;;;4554:59;4580:8;4590:7;4554:59;;4605:7;4599:3;:13;4554:59;;:25;:59::i;:::-;4542:71;;4302:322;1391:3239;;;;;;;;;;;;;:::o;924:121:13:-;976:8;-1:-1:-1;;;1004:1:13;:10;996:19;;;;;;-1:-1:-1;1036:1:13;924:121::o;1573:120:12:-;1662:5;;;1657:16;;;;1629:8;1678:6;;;1657:28;1649:37;;;;;;1573:120;;;;:::o;1276:::-;1365:5;;;1360:16;;;;1332:8;1381:6;;;1360:28;1352:37;;;;;1152:414:23;1237:22;1269:21;1300:28;1338;1376:25;1411:32;1453:24;1487:16;1542:4;-1:-1:-1;;;;;1527:26:23;;1554:4;1527:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1527:32:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1527:32:23;;-1:-1:-1;1527:32:23;;-1:-1:-1;1527:32:23;-1:-1:-1;1527:32:23;-1:-1:-1;1527:32:23;-1:-1:-1;1527:32:23;;-1:-1:-1;1527:32:23;-1:-1:-1;1152:414:23;;;;;;;;;;;:::o;383:236:11:-;445:9;474:1;470;:5;;;466:147;;;523:1;-1:-1:-1;;;;;499:25:11;517:1;516:2;;504:1;:15;500:19;;;-1:-1:-1;;;;;499:25:11;;491:40;;;;;-1:-1:-1;;;491:40:11;;;;;;;;;;;;-1:-1:-1;;;491:40:11;;;;;;;;;;;;;;;466:147;;;594:1;-1:-1:-1;;;;;570:25:11;587:1;575;:14;571:18;;;-1:-1:-1;;;;;570:25:11;;;562:40;;;;;-1:-1:-1;;;562:40:11;;;;;;;;;;;;-1:-1:-1;;;562:40:11;;;;;;;;;;;;;;4361:4281:16;4434:10;824;-1:-1:-1;;;;;4563:30:16;;;;;;:63;;-1:-1:-1;1004:49:16;-1:-1:-1;;;;;4597:29:16;;;4563:63;4555:77;;;;;-1:-1:-1;;;4555:77:16;;;;;;;;;;;;-1:-1:-1;;;4555:77:16;;;;;;;;;;;;;;;-1:-1:-1;;;;;4683:2:16;4658:27;;;;-1:-1:-1;;;;;4788:41:16;;4785:1;4781:49;4878:9;;;4951:18;4945:25;;4942:1;4938:33;5019:9;;;5092:10;5086:17;;5083:1;5079:25;5152:9;;;5225:6;5219:13;;5216:1;5212:21;5281:9;;;5354:4;5348:11;;5345:1;5341:19;;;5408:9;;;5481:3;5475:10;;5472:1;5468:18;5534:9;;;5601:10;;;5598:1;5594:18;;;5660:9;;;;5720:10;;;4991;;5124;;;5253;;;5380;5506;;;5632;5750;5791:3;5784:10;;5780:79;;5816:3;5810;:9;5800:5;:20;;5796:24;;5780:79;;;5855:3;5849;:9;5839:5;:20;;5835:24;;5780:79;5958:9;;;5953:3;5949:19;;;5990:11;;;;6062:9;;;;6127;;6118:19;;;6159:11;;;6231:9;6296;;6287:19;;;6328:11;;;6400:9;6465;;6456:19;;;6497:11;;;6569:9;6634;;6625:19;;;6666:11;;;6738:9;6803;;6794:19;;;6835:11;;;6907:9;6972;;6963:19;;;7004:11;;;7076:9;7141;;7132:19;;;7173:11;;;7245:9;7310;;7301:19;;;7342:11;;;7414:9;7479;;7470:19;;;7511:11;;;7583:9;7648;;7639:19;;;7680:11;;;7752:9;7817;;7808:19;;;7849:11;;;7921:9;7986;;7977:19;;;8018:11;;;;8090:9;;;;8155;;8146:19;;;;;5958:9;-1:-1:-1;;5886:17:16;;5908:2;5885:25;6033:10;;;;;;;6023:21;6202:10;;;;;;;6192:21;;;;6371:10;;;;;;;6361:21;;;;6540:10;;;;;;;6530:21;;;;6709:10;;;;;;;6699:21;;;;6878:10;;;;;;;6868:21;;;;7047:10;;;;;;;7037:21;7216:10;;;;;;;7206:21;7385:10;;;;;;;7375:21;7554:10;;;;;;;7544:21;7723:10;;;;;;;7713:21;7892:10;;;;;;;7882:21;8061:10;;;;;;;8051:21;8230:10;;;;;;;8220:21;8292:24;8284:32;;-1:-1:-1;;8368:53:16;;5900:3;8367:62;;;;8478:39;8462:55;;8461:64;;8544:17;;;;;;;;;:91;;8604:12;-1:-1:-1;;;;;8574:42:16;:26;8593:6;8574:18;:26::i;:::-;-1:-1:-1;;;;;8574:42:16;;;:61;;8628:7;8574:61;;;8619:6;8574:61;8544:91;;;8564:7;8544:91;8537:98;4361:4281;-1:-1:-1;;;;;;;;;4361:4281:16:o;204:246:23:-;292:21;;:::i;:::-;356:4;-1:-1:-1;;;;;341:24:23;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;341:26:23;325:43;;:6;;;;:43;;;;415:28;;-1:-1:-1;;;415:28:23;;;;-1:-1:-1;;;;;415:26:23;;;;;:28;;;;;;;;;;;;;;:26;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;415:28:23;;;;;;;378:65;;;;;;394:12;;;378:65;;;;-1:-1:-1;;;;;378:65:23;;;379:2;204:246;-1:-1:-1;204:246:23:o;4690:432:25:-;4848:18;4869:10;:182;;4997:10;-1:-1:-1;;;;;4980:27:25;:14;-1:-1:-1;;;;;4980:27:25;;:71;;;;-1:-1:-1;1004:49:16;-1:-1:-1;;;;;5011:40:25;;;4980:71;4869:182;;;4911:10;-1:-1:-1;;;;;4894:27:25;:14;-1:-1:-1;;;;;4894:27:25;;:71;;;;-1:-1:-1;824:10:16;-1:-1:-1;;;;;4925:40:25;;;4894:71;4848:203;;5069:13;5061:54;;;;;-1:-1:-1;;;5061:54:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:432;;;;:::o;460:149:23:-;544:5;583:4;-1:-1:-1;;;;;568:32:23;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;568:34:23;;-1:-1:-1;460:149:23;;;;:::o;619:133::-;687:7;728:4;-1:-1:-1;;;;;713:30:23;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;762:380;943:10;955:16;990:145;1047:11;1072:4;1090:11;1115:10;990:43;:145::i;:::-;983:152;;;;762:380;;;;;;;:::o;1362:2580:16:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;-1:-1:-1;644:9:16;1550:28;;;1542:42;;;;;-1:-1:-1;;;1542:42:16;;;;;;;;;;;;-1:-1:-1;;;1542:42:16;;;;;;;;;;;;;;;1595:13;1621:3;1611:13;;:93;;-1:-1:-1;;;1611:93:16;;;1632:34;1611:93;1595:109;;;-1:-1:-1;1728:3:16;1718:13;;:18;1714:83;;1755:34;1747:42;1794:3;1746:51;1714:83;1821:3;1811:13;;:18;1807:83;;1848:34;1840:42;1887:3;1839:51;1807:83;1914:3;1904:13;;:18;1900:83;;1941:34;1933:42;1980:3;1932:51;1900:83;2007:4;1997:14;;:19;1993:84;;2035:34;2027:42;2074:3;2026:51;1993:84;2101:4;2091:14;;:19;2087:84;;2129:34;2121:42;2168:3;2120:51;2087:84;2195:4;2185:14;;:19;2181:84;;2223:34;2215:42;2262:3;2214:51;2181:84;2289:4;2279:14;;:19;2275:84;;2317:34;2309:42;2356:3;2308:51;2275:84;2383:5;2373:15;;:20;2369:85;;2412:34;2404:42;2451:3;2403:51;2369:85;2478:5;2468:15;;:20;2464:85;;2507:34;2499:42;2546:3;2498:51;2464:85;2573:5;2563:15;;:20;2559:85;;2602:34;2594:42;2641:3;2593:51;2559:85;2668:5;2658:15;;:20;2654:85;;2697:34;2689:42;2736:3;2688:51;2654:85;2763:6;2753:16;;:21;2749:86;;2793:34;2785:42;2832:3;2784:51;2749:86;2859:6;2849:16;;:21;2845:86;;2889:34;2881:42;2928:3;2880:51;2845:86;2955:6;2945:16;;:21;2941:86;;2985:34;2977:42;3024:3;2976:51;2941:86;3051:6;3041:16;;:21;3037:86;;3081:34;3073:42;3120:3;3072:51;3037:86;3147:7;3137:17;;:22;3133:86;;3178:33;3170:41;3216:3;3169:50;3133:86;3243:7;3233:17;;:22;3229:85;;3274:32;3266:40;3311:3;3265:49;3229:85;3338:7;3328:17;;:22;3324:83;;3369:30;3361:38;3404:3;3360:47;3324:83;3431:7;3421:17;;:22;3417:78;;3462:25;3454:33;3492:3;3453:42;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;-1:-1:-1;;3528:25:16;;;;;;3520:33;;3506:47;3912:7;3903:5;:17;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:10:-;861:14;;;-1:-1:-1;;1368:1:10;1365;1358:20;1400:9;;;;-1:-1:-1;1451:13:10;;;1435:14;;;;1431:34;;-1:-1:-1;1547:10:10;1543:179;;1595:1;1581:11;:15;1573:24;;;;;;-1:-1:-1;1648:23:10;;;;-1:-1:-1;1698:13:10;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2560:12;2575;;;:26;;2695:22;;;;;3498:1;3479;:15;;3478:21;;3725:17;;;3721:21;;3714:28;3783:17;;;3779:21;;3772:28;3842:17;;;3838:21;;3831:28;3901:17;;;3897:21;;3890:28;3960:17;;;3956:21;;3949:28;4020:17;;;4016:21;;;4009:28;3067:12;;;;3063:23;;;3088:1;3059:31;2337:20;;;2326:32;;;3118:12;;;;2380:21;;;;2823:16;;;;3109:21;;;;4484:11;;;;;-1:-1:-1;;749:3776:10;;;;;:::o;8727:532:14:-;8892:15;8939:13;-1:-1:-1;;;;;8923:29:14;:13;-1:-1:-1;;;;;8923:29:14;;8919:98;;;8988:13;;9003;8919:98;9047:7;:205;;9177:75;9193:9;-1:-1:-1;;;;;9177:75:14;9220:13;9204;:29;-1:-1:-1;;;;;9177:75:14;-1:-1:-1;;;9177:15:14;:75::i;:::-;9047:205;;;9073:85;9099:9;-1:-1:-1;;;;;9073:85:14;9126:13;9110;:29;-1:-1:-1;;;;;9073:85:14;-1:-1:-1;;;9073:25:14;:85::i;:::-;9028:224;;8727:532;;;;;;;:::o;7493:779::-;7658:15;7705:13;-1:-1:-1;;;;;7689:29:14;:13;-1:-1:-1;;;;;7689:29:14;;7685:98;;;7754:13;;7769;7685:98;-1:-1:-1;;;;;;;309:2:9;7815:45:14;;;;-1:-1:-1;;;;;7891:29:14;;;7870:50;;;7939:17;;7931:26;;;;;;7987:7;:278;;8252:13;-1:-1:-1;;;;;8195:70:14;:54;8211:10;8223;8235:13;-1:-1:-1;;;;;8195:54:14;:15;:54::i;:::-;:70;;;;;;7987:278;;;8013:163;8059:64;8085:10;8097;8109:13;-1:-1:-1;;;;;8059:64:14;:25;:64::i;:::-;8145:13;-1:-1:-1;;;;;8013:163:14;:24;:163::i;:::-;7968:297;7493:779;-1:-1:-1;;;;;;;7493:779:14:o;5299:550::-;5467:16;5514:1;5503:8;-1:-1:-1;;;;;5503:12:14;;5495:21;;;;;;5546:1;5534:9;-1:-1:-1;;;;;5534:13:14;;5526:22;;;;;;5644:10;:198;;5766:76;5806:8;5816:9;5827:8;5837:4;5766:39;:76::i;5644:198::-;5673:74;5711:8;5721:9;5732:8;5742:4;5673:37;:74::i;6395:550::-;6565:16;6612:1;6601:8;-1:-1:-1;;;;;6601:12:14;;6593:21;;;;;;6644:1;6632:9;-1:-1:-1;;;;;6632:13:14;;6624:22;;;;;;6736:10;:202;;6862:76;6900:8;6910:9;6921;6932:5;6862:37;:76::i;6736:202::-;6765:78;6805:8;6815:9;6826;6837:5;6765:39;:78::i;4807:315:10:-;4929:14;4964:25;4971:1;4974;4977:11;4964:6;:25::i;:::-;4955:34;;5031:1;5016:11;5003:25;;;;;5013:1;5010;5003:25;:29;4999:117;;;-1:-1:-1;;5056:6:10;:26;5048:35;;;;;;5097:8;;4807:315;;;;;:::o;1716:1983:28:-;1881:10;;1958:11;1881:10;1999:18;;;;;;;;;;;;;;1980:37;;2038:1;2031:4;:8;;;:35;;;;;2050:11;2043:18;;:4;:18;;;;;;;;:23;;;;2031:35;2027:53;;;-1:-1:-1;;2068:12:28;2027:53;2130:3;2126:1567;;;2150:13;2165:12;2181:20;2190:10;2181:8;:20::i;:::-;2361:24;;;-1:-1:-1;;;2361:24:28;;2318:1;2361:24;;;;;;;;;2149:52;;-1:-1:-1;2149:52:28;;-1:-1:-1;2318:11:28;;;;2297:33;;-1:-1:-1;;2297:33:28;;2282:12;;2297:33;;-1:-1:-1;;;;;2361:15:28;;;;;:24;;;;;;;;;;;;;;:15;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2361:24:28;:31;2539:11;;;;-1:-1:-1;2361:31:28;-1:-1:-1;2539:11:28;2681:170;;2840:11;2829:6;2823:13;;2810:10;:26;2809:42;2681:170;;;2779:11;2740:34;2767:6;2740:26;:34::i;:::-;2731:6;:43;2725:50;;2712:10;:63;2711:79;2681:170;2674:177;;2126:1567;;;;;;;2980:13;2995:12;3011:24;3020:10;3033:1;3020:14;3011:8;:24::i;:::-;2979:56;;;;3107:12;3140:1;3130:6;3125:11;;:1;:11;;3124:17;3122:20;3107:35;;3156:14;3200:4;3173;-1:-1:-1;;;;;3173:15:28;;3189:7;3173:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3173:24:28;:31;3343:11;;;;-1:-1:-1;3173:31:28;-1:-1:-1;3343:11:28;3485:197;;3671:11;3660:6;3642:15;:24;3636:31;;3619:10;3632:1;3619:14;:48;3618:64;3485:197;;;3588:11;3577:6;3539:35;3567:6;3539:27;:35::i;:::-;:44;3533:51;;3516:10;3529:1;3516:14;:68;3515:84;3485:197;3478:204;;2126:1567;;;;;1716:1983;;;;;;;;;:::o;492:165:17:-;613:9;;;627;;624:16;;609:32;;590:61::o;3597:1153:14:-;3770:7;3947:3;3943:801;;;3966:16;-1:-1:-1;;;;;4023:27:14;;;:180;;4151:52;4167:6;-1:-1:-1;;;4193:9:14;-1:-1:-1;;;;;4151:52:14;:15;:52::i;:::-;4023:180;;;-1:-1:-1;;;;;4077:47:14;;309:2:9;4078:33:14;;;4077:47;;;;;;4023:180;3966:255;-1:-1:-1;4243:43:14;:31;-1:-1:-1;;;;;4243:17:14;;3966:255;4243:21;:31::i;:::-;:41;:43::i;:::-;4236:50;;;;;3943:801;4317:16;-1:-1:-1;;;;;4374:27:14;;;:213;;4525:62;4551:6;-1:-1:-1;;;4577:9:14;-1:-1:-1;;;;;4525:62:14;:25;:62::i;:::-;4374:213;;;4428:70;309:2:9;4453:33:14;;;-1:-1:-1;;;;;4428:70:14;;:24;:70::i;:::-;4317:288;;4639:8;4628;-1:-1:-1;;;;;4628:19:14;;4620:28;;;;;;-1:-1:-1;;;;;4713:19:14;;;;-1:-1:-1;4698:35:14;;1405:1366;1576:7;1711:11;1707:32;;-1:-1:-1;1731:8:14;1724:15;;1707:32;-1:-1:-1;;;;;;;309:2:9;1770:45:14;;;;1826:939;;;;-1:-1:-1;;;;;1882:50:14;;1893:17;;;;1914:6;1893:17;1914:6;1882:38;;;;;:50;1878:323;;;1974:20;;;2016:25;;;2012:174;;2125:60;2151:10;2163:8;-1:-1:-1;;;;;2125:60:14;2173:11;2125:25;:60::i;:::-;2110:76;;;;;;;2012:174;1878:323;;2230:73;2255:10;2267:35;2295:6;2281:8;-1:-1:-1;;;;;2268:21:14;:10;:21;;;;;;;2267:27;:35::i;:::-;2230:24;:73::i;:::-;2215:89;;;;;;1826:939;-1:-1:-1;;;;;2530:50:14;;2541:17;;;;2562:6;2541:17;2562:6;2530:38;;;;;:50;:74;;;;;2597:7;2584:10;:20;2530:74;2522:83;;;;;;2641:20;;;2682:72;:60;2641:10;-1:-1:-1;;;;;2682:60:14;;2641:20;2682:25;:60::i;795:160:28:-;902:9;;910:1;902:9;;;;944:3;937:10;;;;795:160::o;671:731:7:-;733:7;764:1;760;:5;752:14;;;;;;-1:-1:-1;;;781:1:7;:40;777:102;;843:3;837:9;;;;860:8;777:102;897:19;892:1;:24;888:84;;938:2;932:8;;;;954:7;888:84;990:11;985:1;:16;981:76;;1023:2;1017:8;;;;1039:7;981:76;1075:7;1070:1;:12;1066:72;;1104:2;1098:8;;;;1120:7;1066:72;1156:5;1151:1;:10;1147:68;;1183:1;1177:7;;;;1198:6;1147:68;1233:4;1228:1;:9;1224:67;;1259:1;1253:7;;;;1274:6;1224:67;1309:3;1304:1;:8;1300:66;;1334:1;1328:7;;;;1349:6;1300:66;1384:3;1379:1;:8;1375:20;;1394:1;1389:6;671:731;;;:::o;1893:894::-;1956:7;1987:1;1983;:5;1975:14;;;;;;-1:-1:-1;2004:3:7;-1:-1:-1;;;;;2021:21:7;;:25;2017:104;;-1:-1:-1;;2062:8:7;2017:104;;;2107:3;2101:9;;;;;2017:104;2138:16;2134:20;;:24;2130:101;;-1:-1:-1;;2174:7:7;2130:101;;;2218:2;2212:8;;;;;2130:101;2248:16;2244:20;;:24;2240:101;;-1:-1:-1;;2284:7:7;2240:101;;;2328:2;2322:8;;;;;2240:101;2358:16;2354:20;;:24;2350:101;;-1:-1:-1;;2394:7:7;2350:101;;;2438:2;2432:8;;;;;2350:101;2468:15;2464:19;;:23;2460:98;;-1:-1:-1;;2503:6:7;2460:98;;;2546:1;2540:7;;;;;2460:98;2575:3;2571:7;;:11;2567:86;;-1:-1:-1;;2598:6:7;2567:86;;;2641:1;2635:7;;;;;2567:86;2670:3;2666:7;;:11;2662:86;;-1:-1:-1;;2693:6:7;2662:86;;;2736:1;2730:7;;;;;2662:86;2765:3;2761:7;;:11;2757:23;;-1:-1:-1;;2774:6:7;1893:894;;;:::o;435:111:12:-;527:5;;;522:16;;;;514:25;;;;;357:111:13;459:1;-1:-1:-1;;;;;439:21:13;;;;431:30;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1337200","executionCost":"1390","totalCost":"1338590"},"external":{"quote(address,bool,int256,uint160)":"infinite"},"internal":{"getLiquidity(address)":"infinite","getPoolGlobalState(address)":"infinite","getTickSpacing(address)":"infinite","getTicks(address,int24)":"infinite","nextInitializedTickWithinOneWord(address,int24,int24,bool)":"infinite"}},"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniV3QuoterCore.sol\":\"UniV3QuoterCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV3QuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport './base/UniV3likeQuoterCore.sol';\\nimport './libraries/TickBitmap.sol';\\n\\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\\n\\n    function getPoolGlobalState(\\n        address pool\\n    ) internal override view returns (GlobalState memory gs) {\\n        gs.fee = uint16(IUniswapV3Pool(pool).fee());\\n        (gs.startPrice, gs.startTick,,,,,) = IUniswapV3Pool(pool).slot0();\\n    }\\n    \\n    function getTickSpacing(\\n        address pool\\n    ) internal override view returns (int24) {\\n        return IUniswapV3Pool(pool).tickSpacing();\\n    }\\n    \\n    function getLiquidity(address pool) internal override view returns (uint128) {\\n        return IUniswapV3Pool(pool).liquidity();\\n    }\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal override view returns (int24 next, bool initialized) {\\n        return TickBitmap.nextInitializedTickWithinOneWord(\\n            poolAddress,\\n            tick,\\n            tickSpacing,\\n            zeroForOne\\n        );\\n    }\\n    \\n    function getTicks(address pool, int24 tick) internal override view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    ) {\\n        return IUniswapV3Pool(pool).ticks(tick);\\n    }\\n\\n}\",\"keccak256\":\"0x3a23b5f9b4d46bd04909b5e5a2562f4600ee2b9bc315e0f16d82a01832ea03d0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4f72b68d321274361c94ce518806f8fbcbde61e88481a8b1cbeb439e5d9364de\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/UniswapV3StaticQuoter.sol":{"UniswapV3StaticQuoter":{"abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"quoteExactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"quoteExactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"quoteExactInput(bytes,uint256)":{"params":{"amountIn":"The amount of the first token to swap","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountOut":"The amount of the last token that would be received"}},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountOut":"The amount of `tokenOut` that would be received"}},"quoteExactOutput(bytes,uint256)":{"params":{"amountOut":"The amount of the last token that would be received","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountIn":"The amount of the first token to swap"}},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountIn":"The amount of `tokenIn` that would be needed"}}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:326:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:229:29","statements":[{"body":{"nodeType":"YulBlock","src":"141:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"150:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"158:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:29"},"nodeType":"YulFunctionCall","src":"143:22:29"},"nodeType":"YulExpressionStatement","src":"143:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:29"},"nodeType":"YulFunctionCall","src":"112:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:29"},"nodeType":"YulFunctionCall","src":"108:32:29"},"nodeType":"YulIf","src":"105:2:29"},{"nodeType":"YulVariableDeclaration","src":"176:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"195:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"189:5:29"},"nodeType":"YulFunctionCall","src":"189:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"180:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"268:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"277:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"285:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"270:6:29"},"nodeType":"YulFunctionCall","src":"270:22:29"},"nodeType":"YulExpressionStatement","src":"270:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"227:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"238:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"253:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"258:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"249:3:29"},"nodeType":"YulFunctionCall","src":"249:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"262:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"245:3:29"},"nodeType":"YulFunctionCall","src":"245:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"234:3:29"},"nodeType":"YulFunctionCall","src":"234:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"224:2:29"},"nodeType":"YulFunctionCall","src":"224:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"217:6:29"},"nodeType":"YulFunctionCall","src":"217:50:29"},"nodeType":"YulIf","src":"214:2:29"},{"nodeType":"YulAssignment","src":"303:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"313:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"303:6:29"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:29","type":""}],"src":"14:310:29"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b50604051620023aa380380620023aa83398101604081905261003191610046565b60601b6001600160601b031916608052610074565b600060208284031215610057578081fd5b81516001600160a01b038116811461006d578182fd5b9392505050565b60805160601c6123186200009260003980610e5352506123186000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632f80bb1d1461005c57806390405d3614610085578063bd21704a146100a6578063c6a5026a146100b9578063cdca1753146100cc575b600080fd5b61006f61006a3660046121e6565b6100df565b60405161007c919061229d565b60405180910390f35b610098610093366004612190565b61017f565b60405161007c92919061228f565b61006f6100b4366004612274565b61043d565b61006f6100c7366004612274565b6104e8565b61006f6100da3660046121e6565b610565565b60005b60008060006100f0866105ef565b9250925092506101466040518060a00160405280846001600160a01b03168152602001856001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b031681525061043d565b945061015186610620565b156101665761015f86610628565b9550610171565b849350505050610179565b5050506100e2565b92915050565b600080836101d4576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806101e88a8a8a8a61063f565b9250925092505b8051158015906102155750866001600160a01b031681604001516001600160a01b031614155b156104065761022261206a565b60408201516001600160a01b031681526060820151610244908c90868d6106d2565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b60208401529083015161029291610281908d908c61072f565b6080850151855161ffff881661077c565b60c085015260a084015260808301526001600160a01b0316604083015284156102f4576102c88160c0015182608001510161096e565b825103825260a08101516102ea906102df9061096e565b602084015190610984565b602083015261032f565b6103018160a0015161096e565b825101825260c081015160808201516103299161031e910161096e565b60208401519061099a565b60208301525b80606001516001600160a01b031682604001516001600160a01b031614156103c55780604001511561039c57600061036b8c83602001516109b0565b5050505050509150508a1561037e576000035b61038c836080015182610a77565b6001600160801b03166080840152505b896103ab5780602001516103b4565b60018160200151035b600290810b900b6060830152610400565b80600001516001600160a01b031682604001516001600160a01b031614610400576103f38260400151610b2d565b600290810b900b60608301525b506101ef565b8315158915151461041f5760208101518151890361042c565b8060000151880381602001515b909b909a5098505050505050505050565b6020810151815160608301516000926001600160a01b03808216908416109284926104689290610e4c565b90506000806104cb838561047f896040015161096e565b60000389608001516001600160a01b03166000146104a1578960800151610093565b876104c05773fffd8963efd1fc6a506488495d951d5263988d25610093565b6401000276a461017f565b91509150836104da57806104dc565b815b9450505050505b919050565b6020810151815160608301516000926001600160a01b03808216908416109284926105139290610e4c565b9050600080610547838561052a896040015161096e565b60808a01516001600160a01b0316156104a1578960800151610093565b915091508361055957816000036104dc565b60000395945050505050565b60005b6000806000610576866105ef565b9250925092506105cc6040518060a00160405280856001600160a01b03168152602001846001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b03168152506104e8565b94506105d786610620565b15610166576105e586610628565b9550505050610568565b600080806105fd8482610e82565b925061060a846014610f32565b9050610617846017610e82565b91509193909250565b516042111590565b805160609061017990839060179060161901610fd9565b60008061064a6120a6565b60006106558861112a565b905061066687868360000151611233565b61066f88611304565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b81526020016106b98a611371565b6001600160801b03168152509150509450945094915050565b60008060006106e3878787876113ac565b9093509150620d89e719600284900b121561070457620d89e719925061071a565b620d89e8600284900b131561071a57620d89e892505b610723836113c8565b90509450945094915050565b60008361075057816001600160a01b0316836001600160a01b031611610766565b816001600160a01b0316836001600160a01b0316105b6107705782610772565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906108015760006107b58989620f42400362ffffff16620f42406116fa565b9050826107ce576107c98c8c8c60016117a9565b6107db565b6107db8b8d8c6001611824565b95508581106107ec578a96506107fb565b6107f88c8b83866118cf565b96505b5061084b565b81610818576108138b8b8b6000611824565b610825565b6108258a8c8b60006117a9565b93508388600003106108395789955061084b565b6108488b8a8a6000038561191b565b95505b6001600160a01b038a81169087161482156108ae5780801561086a5750815b6108805761087b878d8c6001611824565b610882565b855b955080801561088f575081155b6108a5576108a0878d8c60006117a9565b6108a7565b845b94506108f8565b8080156108b85750815b6108ce576108c98c888c60016117a9565b6108d0565b855b95508080156108dd575081155b6108f3576108ee8c888c6000611824565b6108f5565b845b94505b8115801561090857508860000385115b15610914578860000394505b81801561093357508a6001600160a01b0316876001600160a01b031614155b1561094257858903935061095f565b61095c868962ffffff168a620f42400362ffffff16611967565b93505b50505095509550955095915050565b6000600160ff1b821061098057600080fd5b5090565b8082038281131560008312151461017957600080fd5b8181018281121560008312151461017957600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d610100811015610a2f57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b1215610adc57826001600160801b03168260000384039150816001600160801b031610610ad7576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b610179565b826001600160801b03168284019150816001600160801b03161015610179576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610b69575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b610b9e576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110610c3257607f810383901c9150610c3c565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610e3d57886001600160a01b0316610e21826113c8565b6001600160a01b03161115610e365781610e38565b805b610e3f565b815b9998505050505050505050565b60006107727f0000000000000000000000000000000000000000000000000000000000000000610e7d8686866119a1565b6119f7565b600081826014011015610ed1576040805162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b604482015290519081900360640190fd5b8160140183511015610f22576040805162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015290519081900360640190fd5b500160200151600160601b900490565b600081826003011015610f80576040805162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015290519081900360640190fd5b8160030183511015610fd0576040805162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015290519081900360640190fd5b50016003015190565b60608182601f011015611024576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b82828401101561106c576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b818301845110156110b8576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b6060821580156110d75760405191506000825260208201604052611121565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156111105780518352602092830192016110f8565b5050858452601f01601f1916604052505b50949350505050565b6111326120d4565b816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d602081101561119557600080fd5b505161ffff166040808301919091528051633850c7bd60e01b815290516001600160a01b03841691633850c7bd9160048083019260e0929190829003018186803b1580156111e257600080fd5b505afa1580156111f6573d6000803e3d6000fd5b505050506040513d60e081101561120c57600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361127c57816001600160a01b0316836001600160a01b0316118015611277575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b6112aa565b816001600160a01b0316836001600160a01b03161080156112aa57506401000276a36001600160a01b038416115b9050806112fe576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133f57600080fd5b505afa158015611353573d6000803e3d6000fd5b505050506040513d602081101561136957600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561133f57600080fd5b6000806113bb86868686611adb565b9150915094509492505050565b60008060008360020b126113df578260020b6113e7565b8260020b6000035b9050620d89e8811115611425576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b60006001821661143957600160801b61144b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561147f576ffff97272373d413259a46990580e213a0260801c5b600482161561149e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156114bd576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156114dc576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156114fb576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561151a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611539576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611559576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611579576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611599576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156115b9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156115d9576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156115f9576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611619576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611639576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561165a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561167a576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611699576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156116b6576b048a170391f7dc42444e8fa20260801c5b60008460020b13156116d15780600019816116cd57fe5b0490505b6401000000008106156116e55760016116e8565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611730576000841161172557600080fd5b508290049050610775565b80841161173c57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b031611156117c9579293925b816117f6576117f1836001600160801b03168686036001600160a01b0316600160601b6116fa565b611819565b611819836001600160801b03168686036001600160a01b0316600160601b611967565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611844579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661186e57600080fd5b8361189e57866001600160a01b03166118918383896001600160a01b03166116fa565b8161189857fe5b046118c4565b6118c46118b58383896001600160a01b0316611967565b886001600160a01b0316611cd9565b979650505050505050565b600080856001600160a01b0316116118e657600080fd5b6000846001600160801b0316116118fc57600080fd5b8161190e576117f18585856001611ce4565b6118198585856001611dc5565b600080856001600160a01b03161161193257600080fd5b6000846001600160801b03161161194857600080fd5b8161195a576117f18585856000611dc5565b6118198585856000611ce4565b60006119748484846116fa565b90506000828061198057fe5b848609111561077557600019811061199757600080fd5b6001019392505050565b6119a96120d4565b826001600160a01b0316846001600160a01b031611156119c7579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610611a1f57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000808581600286810b9088900b81611af057fe5b05905060008760020b128015611b1757508560020b8760020b81611b1057fe5b0760020b15155b15611b2157600019015b8415611bf857600080611b3383611ea8565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d6020811015611bbe57600080fd5b5051168015159750905086611bda57898360ff16860302611bed565b89611be482611eba565b840360ff168603025b975050505050611cce565b600080611c0783600101611ea8565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b158015611c6557600080fd5b505afa158015611c79573d6000803e3d6000fd5b505050506040513d6020811015611c8f57600080fd5b5051168015159750905086611cb157898360ff0360ff16866001010102611cc7565b8983611cbc83611f5a565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b60008115611d575760006001600160a01b03841115611d1a57611d1584600160601b876001600160801b03166116fa565b611d32565b6001600160801b038516606085901b81611d3057fe5b045b9050611d4f611d4a6001600160a01b03881683612044565b612054565b91505061181c565b60006001600160a01b03841115611d8557611d8084600160601b876001600160801b0316611967565b611d9c565b611d9c606085901b6001600160801b038716611cd9565b905080866001600160a01b031611611db357600080fd5b6001600160a01b03861603905061181c565b600082611dd357508361181c565b600160601b600160e01b03606085901b168215611e61576001600160a01b03861684810290858281611e0157fe5b041415611e3257818101828110611e3057611e2683896001600160a01b031683611967565b935050505061181c565b505b611e5882611e53878a6001600160a01b03168681611e4c57fe5b0490612044565b611cd9565b9250505061181c565b6001600160a01b03861684810290858281611e7857fe5b04148015611e8557508082115b611e8e57600080fd5b808203611e26611d4a846001600160a01b038b1684611967565b60020b600881901d9161010090910790565b6000808211611ec857600080fd5b600160801b8210611edb57608091821c91015b680100000000000000008210611ef357604091821c91015b6401000000008210611f0757602091821c91015b620100008210611f1957601091821c91015b6101008210611f2a57600891821c91015b60108210611f3a57600491821c91015b60048210611f4a57600291821c91015b600282106104e357600101919050565b6000808211611f6857600080fd5b5060ff6001600160801b03821615611f8357607f1901611f8b565b608082901c91505b67ffffffffffffffff821615611fa457603f1901611fac565b604082901c91505b63ffffffff821615611fc157601f1901611fc9565b602082901c91505b61ffff821615611fdc57600f1901611fe4565b601082901c91505b60ff821615611ff65760071901611ffe565b600882901c91505b600f8216156120105760031901612018565b600482901c91505b600382161561202a5760011901612032565b600282901c91505b60018216156104e35760001901919050565b8082018281101561017957600080fd5b806001600160a01b03811681146104e357600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b600060a08284031215612105578081fd5b60405160a0810181811067ffffffffffffffff8211171561212257fe5b6040529050808235612133816122ca565b81526020830135612143816122ca565b602082015260408381013590820152606083013562ffffff8116811461216857600080fd5b606082015261217960808401612185565b60808201525092915050565b80356104e3816122ca565b600080600080608085870312156121a5578384fd5b84356121b0816122ca565b9350602085013580151581146121c4578384fd5b92506040850135915060608501356121db816122ca565b939692955090935050565b600080604083850312156121f8578182fd5b823567ffffffffffffffff8082111561220f578384fd5b818501915085601f830112612222578384fd5b813560208282111561223057fe5b612242601f8301601f191682016122a6565b92508183528781838601011115612257578586fd5b818185018285013790820181019490945295939092013593505050565b600060a08284031215612285578081fd5b61077583836120f4565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff811182821017156122c257fe5b604052919050565b6001600160a01b03811681146122df57600080fd5b5056fea264697066735822122010aaa50db12e71483513c54f67c1501ec940c77a2b1eae9eb52a456c0756beab64736f6c63430007060033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x23AA CODESIZE SUB DUP1 PUSH3 0x23AA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x31 SWAP2 PUSH2 0x46 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE PUSH2 0x74 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x57 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x2318 PUSH3 0x92 PUSH1 0x0 CODECOPY DUP1 PUSH2 0xE53 MSTORE POP PUSH2 0x2318 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0xBD21704A EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xC6A5026A EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0xCC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x21E6 JUMP JUMPDEST PUSH2 0xDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x229D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x98 PUSH2 0x93 CALLDATASIZE PUSH1 0x4 PUSH2 0x2190 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP3 SWAP2 SWAP1 PUSH2 0x228F JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2274 JUMP JUMPDEST PUSH2 0x43D JUMP JUMPDEST PUSH2 0x6F PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2274 JUMP JUMPDEST PUSH2 0x4E8 JUMP JUMPDEST PUSH2 0x6F PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x21E6 JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF0 DUP7 PUSH2 0x5EF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x146 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x43D JUMP JUMPDEST SWAP5 POP PUSH2 0x151 DUP7 PUSH2 0x620 JUMP JUMPDEST ISZERO PUSH2 0x166 JUMPI PUSH2 0x15F DUP7 PUSH2 0x628 JUMP JUMPDEST SWAP6 POP PUSH2 0x171 JUMP JUMPDEST DUP5 SWAP4 POP POP POP POP PUSH2 0x179 JUMP JUMPDEST POP POP POP PUSH2 0xE2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x1D4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0x1E8 DUP11 DUP11 DUP11 DUP11 PUSH2 0x63F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x215 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x406 JUMPI PUSH2 0x222 PUSH2 0x206A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x244 SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x292 SWAP2 PUSH2 0x281 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x72F JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x77C JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x2F4 JUMPI PUSH2 0x2C8 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0x96E JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x2EA SWAP1 PUSH2 0x2DF SWAP1 PUSH2 0x96E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x32F JUMP JUMPDEST PUSH2 0x301 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0x96E JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x329 SWAP2 PUSH2 0x31E SWAP2 ADD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x99A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3C5 JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x39C JUMPI PUSH1 0x0 PUSH2 0x36B DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x9B0 JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x38C DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0xA77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x3AB JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x400 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x400 JUMPI PUSH2 0x3F3 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0xB2D JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0x1EF JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x41F JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x42C JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x468 SWAP3 SWAP1 PUSH2 0xE4C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x4CB DUP4 DUP6 PUSH2 0x47F DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x0 SUB DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 EQ PUSH2 0x4A1 JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x93 JUMP JUMPDEST DUP8 PUSH2 0x4C0 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x93 JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0x17F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x4DA JUMPI DUP1 PUSH2 0x4DC JUMP JUMPDEST DUP2 JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x513 SWAP3 SWAP1 PUSH2 0xE4C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x547 DUP4 DUP6 PUSH2 0x52A DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x4A1 JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x93 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x559 JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x0 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x576 DUP7 PUSH2 0x5EF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x5CC PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x4E8 JUMP JUMPDEST SWAP5 POP PUSH2 0x5D7 DUP7 PUSH2 0x620 JUMP JUMPDEST ISZERO PUSH2 0x166 JUMPI PUSH2 0x5E5 DUP7 PUSH2 0x628 JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x568 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x5FD DUP5 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP3 POP PUSH2 0x60A DUP5 PUSH1 0x14 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP PUSH2 0x617 DUP5 PUSH1 0x17 PUSH2 0xE82 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x179 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x64A PUSH2 0x20A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x655 DUP9 PUSH2 0x112A JUMP JUMPDEST SWAP1 POP PUSH2 0x666 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1233 JUMP JUMPDEST PUSH2 0x66F DUP9 PUSH2 0x1304 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6B9 DUP11 PUSH2 0x1371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6E3 DUP8 DUP8 DUP8 DUP8 PUSH2 0x13AC JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x704 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x71A JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x71A JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x723 DUP4 PUSH2 0x13C8 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x750 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x766 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x770 JUMPI DUP3 PUSH2 0x772 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x801 JUMPI PUSH1 0x0 PUSH2 0x7B5 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x16FA JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x7CE JUMPI PUSH2 0x7C9 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x7DB DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1824 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x7EC JUMPI DUP11 SWAP7 POP PUSH2 0x7FB JUMP JUMPDEST PUSH2 0x7F8 DUP13 DUP12 DUP4 DUP7 PUSH2 0x18CF JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x84B JUMP JUMPDEST DUP2 PUSH2 0x818 JUMPI PUSH2 0x813 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0x825 JUMP JUMPDEST PUSH2 0x825 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x839 JUMPI DUP10 SWAP6 POP PUSH2 0x84B JUMP JUMPDEST PUSH2 0x848 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x191B JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x8AE JUMPI DUP1 DUP1 ISZERO PUSH2 0x86A JUMPI POP DUP2 JUMPDEST PUSH2 0x880 JUMPI PUSH2 0x87B DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x88F JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x8A5 JUMPI PUSH2 0x8A0 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x8A7 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x8F8 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x8B8 JUMPI POP DUP2 JUMPDEST PUSH2 0x8CE JUMPI PUSH2 0x8C9 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x8D0 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x8DD JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x8F3 JUMPI PUSH2 0x8EE DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0x8F5 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x908 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x914 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x933 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x942 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x95F JUMP JUMPDEST PUSH2 0x95C DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x1967 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x980 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xA2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0xADC JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0xAD7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x179 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x179 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0xB69 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0xB9E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0xC32 JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0xC3C JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0xE3D JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE21 DUP3 PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xE36 JUMPI DUP2 PUSH2 0xE38 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0xE3F JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x772 PUSH32 0x0 PUSH2 0xE7D DUP7 DUP7 DUP7 PUSH2 0x19A1 JUMP JUMPDEST PUSH2 0x19F7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0xED1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0xF22 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0xF80 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x1024 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x106C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x10B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x10D7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1121 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x1110 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x10F8 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1132 PUSH2 0x20D4 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x117F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xFFFF AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH4 0x3850C7BD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0x3850C7BD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0xE0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x120C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x127C JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1277 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x12AA JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x12AA JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x12FE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x133F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1353 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x133F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13BB DUP7 DUP7 DUP7 DUP7 PUSH2 0x1ADB JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x13DF JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x13E7 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1425 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1439 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x144B JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x147F JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x149E JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x14BD JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x14DC JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x14FB JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x151A JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1539 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1559 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1579 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1599 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x15B9 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x15D9 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x15F9 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1619 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1639 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x165A JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x167A JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1699 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x16B6 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x16D1 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x16CD JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x16E5 JUMPI PUSH1 0x1 PUSH2 0x16E8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1730 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x775 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x173C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x17C9 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x17F6 JUMPI PUSH2 0x17F1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x1819 JUMP JUMPDEST PUSH2 0x1819 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1967 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1844 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x186E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1891 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16FA JUMP JUMPDEST DUP2 PUSH2 0x1898 JUMPI INVALID JUMPDEST DIV PUSH2 0x18C4 JUMP JUMPDEST PUSH2 0x18C4 PUSH2 0x18B5 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1967 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CD9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x18FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x190E JUMPI PUSH2 0x17F1 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1CE4 JUMP JUMPDEST PUSH2 0x1819 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1DC5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1948 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x195A JUMPI PUSH2 0x17F1 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1DC5 JUMP JUMPDEST PUSH2 0x1819 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1CE4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP5 DUP5 DUP5 PUSH2 0x16FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x1980 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19A9 PUSH2 0x20D4 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x19C7 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x1A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x1AF0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1B17 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1B10 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x1BF8 JUMPI PUSH1 0x0 DUP1 PUSH2 0x1B33 DUP4 PUSH2 0x1EA8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1BBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x1BDA JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x1BED JUMP JUMPDEST DUP10 PUSH2 0x1BE4 DUP3 PUSH2 0x1EBA JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x1CCE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C07 DUP4 PUSH1 0x1 ADD PUSH2 0x1EA8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x1CB1 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x1CC7 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x1CBC DUP4 PUSH2 0x1F5A JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x1D57 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x1D1A JUMPI PUSH2 0x1D15 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x1D30 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x1D4F PUSH2 0x1D4A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x2054 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x181C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x1D85 JUMPI PUSH2 0x1D80 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1967 JUMP JUMPDEST PUSH2 0x1D9C JUMP JUMPDEST PUSH2 0x1D9C PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x1CD9 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x181C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1DD3 JUMPI POP DUP4 PUSH2 0x181C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x1E61 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x1E01 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x1E32 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x1E30 JUMPI PUSH2 0x1E26 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1967 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x181C JUMP JUMPDEST POP JUMPDEST PUSH2 0x1E58 DUP3 PUSH2 0x1E53 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x1E4C JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x1CD9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x181C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x1E78 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x1E85 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x1E8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x1E26 PUSH2 0x1D4A DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x1967 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1EC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x1EDB JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x1EF3 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x1F07 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x1F19 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x1F2A JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x1F3A JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x1F4A JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x4E3 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1F68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x1F83 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x1F8B JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x1FA4 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x1FAC JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x1FC1 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x1FDC JUMPI PUSH1 0xF NOT ADD PUSH2 0x1FE4 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x1FF6 JUMPI PUSH1 0x7 NOT ADD PUSH2 0x1FFE JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x2010 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x2018 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x202A JUMPI PUSH1 0x1 NOT ADD PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2105 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2122 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP3 CALLDATALOAD PUSH2 0x2133 DUP2 PUSH2 0x22CA JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2143 DUP2 PUSH2 0x22CA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2179 PUSH1 0x80 DUP5 ADD PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x4E3 DUP2 PUSH2 0x22CA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x21A5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x21B0 DUP2 PUSH2 0x22CA JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x21C4 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x21DB DUP2 PUSH2 0x22CA JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21F8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x220F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2222 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x2230 JUMPI INVALID JUMPDEST PUSH2 0x2242 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH2 0x22A6 JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP8 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2257 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP2 DUP2 DUP6 ADD DUP3 DUP6 ADD CALLDATACOPY SWAP1 DUP3 ADD DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SWAP4 SWAP1 SWAP3 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2285 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x775 DUP4 DUP4 PUSH2 0x20F4 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x22C2 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x22DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT 0xAA 0xA5 0xD 0xB1 0x2E PUSH18 0x483513C54F67C1501EC940C77A2B1EAE9EB5 0x2A GASLIMIT PUSH13 0x756BEAB64736F6C6343000706 STOP CALLER ","sourceMap":"378:4117:24:-:0;;;655:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;695:18;;-1:-1:-1;;;;;;695:18:24;;;378:4117;;14:310:29;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:29;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:29:o;:::-;378:4117:24;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4030:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"101:868:29","statements":[{"body":{"nodeType":"YulBlock","src":"145:24:29","statements":[{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"154:5:29"},{"name":"value","nodeType":"YulIdentifier","src":"161:5:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"147:6:29"},"nodeType":"YulFunctionCall","src":"147:20:29"},"nodeType":"YulExpressionStatement","src":"147:20:29"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"122:3:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"127:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:29"},"nodeType":"YulFunctionCall","src":"118:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"139:4:29","type":"","value":"0xa0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"114:3:29"},"nodeType":"YulFunctionCall","src":"114:30:29"},"nodeType":"YulIf","src":"111:2:29"},{"nodeType":"YulVariableDeclaration","src":"178:23:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"192:5:29"},"nodeType":"YulFunctionCall","src":"192:9:29"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"182:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"210:35:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"232:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"240:4:29","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"228:3:29"},"nodeType":"YulFunctionCall","src":"228:17:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"214:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"320:13:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"322:7:29"},"nodeType":"YulFunctionCall","src":"322:9:29"},"nodeType":"YulExpressionStatement","src":"322:9:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"263:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"275:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"260:2:29"},"nodeType":"YulFunctionCall","src":"260:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"299:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"311:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"296:2:29"},"nodeType":"YulFunctionCall","src":"296:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"257:2:29"},"nodeType":"YulFunctionCall","src":"257:62:29"},"nodeType":"YulIf","src":"254:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"353:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"342:6:29"},"nodeType":"YulFunctionCall","src":"342:22:29"},"nodeType":"YulExpressionStatement","src":"342:22:29"},{"nodeType":"YulAssignment","src":"373:15:29","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"382:6:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"373:5:29"}]},{"nodeType":"YulVariableDeclaration","src":"397:38:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"412:12:29"},"nodeType":"YulFunctionCall","src":"412:23:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"401:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"471:7:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"444:26:29"},"nodeType":"YulFunctionCall","src":"444:35:29"},"nodeType":"YulExpressionStatement","src":"444:35:29"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"495:6:29"},{"name":"value_1","nodeType":"YulIdentifier","src":"503:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"488:6:29"},"nodeType":"YulFunctionCall","src":"488:23:29"},"nodeType":"YulExpressionStatement","src":"488:23:29"},{"nodeType":"YulVariableDeclaration","src":"520:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"552:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"563:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"548:3:29"},"nodeType":"YulFunctionCall","src":"548:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"535:12:29"},"nodeType":"YulFunctionCall","src":"535:32:29"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"524:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"603:7:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"576:26:29"},"nodeType":"YulFunctionCall","src":"576:35:29"},"nodeType":"YulExpressionStatement","src":"576:35:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"631:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"639:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"627:3:29"},"nodeType":"YulFunctionCall","src":"627:15:29"},{"name":"value_2","nodeType":"YulIdentifier","src":"644:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"620:6:29"},"nodeType":"YulFunctionCall","src":"620:32:29"},"nodeType":"YulExpressionStatement","src":"620:32:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"672:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"680:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"668:3:29"},"nodeType":"YulFunctionCall","src":"668:15:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"702:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"713:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"698:3:29"},"nodeType":"YulFunctionCall","src":"698:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:29"},"nodeType":"YulFunctionCall","src":"685:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"661:6:29"},"nodeType":"YulFunctionCall","src":"661:57:29"},"nodeType":"YulExpressionStatement","src":"661:57:29"},{"nodeType":"YulVariableDeclaration","src":"727:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"759:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"770:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"755:3:29"},"nodeType":"YulFunctionCall","src":"755:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"742:12:29"},"nodeType":"YulFunctionCall","src":"742:32:29"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"731:7:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"830:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"839:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"842:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"832:6:29"},"nodeType":"YulFunctionCall","src":"832:12:29"},"nodeType":"YulExpressionStatement","src":"832:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"796:7:29"},{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"809:7:29"},{"kind":"number","nodeType":"YulLiteral","src":"818:8:29","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"805:3:29"},"nodeType":"YulFunctionCall","src":"805:22:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"793:2:29"},"nodeType":"YulFunctionCall","src":"793:35:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"786:6:29"},"nodeType":"YulFunctionCall","src":"786:43:29"},"nodeType":"YulIf","src":"783:2:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"866:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"874:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:29"},"nodeType":"YulFunctionCall","src":"862:15:29"},{"name":"value_3","nodeType":"YulIdentifier","src":"879:7:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:29"},"nodeType":"YulFunctionCall","src":"855:32:29"},"nodeType":"YulExpressionStatement","src":"855:32:29"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"907:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"915:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"903:3:29"},"nodeType":"YulFunctionCall","src":"903:16:29"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"946:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"957:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"942:3:29"},"nodeType":"YulFunctionCall","src":"942:19:29"}],"functionName":{"name":"abi_decode_t_uint160","nodeType":"YulIdentifier","src":"921:20:29"},"nodeType":"YulFunctionCall","src":"921:41:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"896:6:29"},"nodeType":"YulFunctionCall","src":"896:67:29"},"nodeType":"YulExpressionStatement","src":"896:67:29"}]},"name":"abi_decode_t_struct$_QuoteExactInputSingleParams","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"72:9:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"83:3:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"91:5:29","type":""}],"src":"14:955:29"},{"body":{"nodeType":"YulBlock","src":"1025:87:29","statements":[{"nodeType":"YulAssignment","src":"1035:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1057:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1044:12:29"},"nodeType":"YulFunctionCall","src":"1044:20:29"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1035:5:29"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1100:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1073:26:29"},"nodeType":"YulFunctionCall","src":"1073:33:29"},"nodeType":"YulExpressionStatement","src":"1073:33:29"}]},"name":"abi_decode_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1004:6:29","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1015:5:29","type":""}],"src":"974:138:29"},{"body":{"nodeType":"YulBlock","src":"1234:532:29","statements":[{"body":{"nodeType":"YulBlock","src":"1281:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1290:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"1298:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1283:6:29"},"nodeType":"YulFunctionCall","src":"1283:22:29"},"nodeType":"YulExpressionStatement","src":"1283:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1255:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1264:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1251:3:29"},"nodeType":"YulFunctionCall","src":"1251:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1276:3:29","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1247:3:29"},"nodeType":"YulFunctionCall","src":"1247:33:29"},"nodeType":"YulIf","src":"1244:2:29"},{"nodeType":"YulVariableDeclaration","src":"1316:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1329:12:29"},"nodeType":"YulFunctionCall","src":"1329:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1320:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1388:5:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1361:26:29"},"nodeType":"YulFunctionCall","src":"1361:33:29"},"nodeType":"YulExpressionStatement","src":"1361:33:29"},{"nodeType":"YulAssignment","src":"1403:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"1413:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1403:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"1427:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1459:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1470:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1455:3:29"},"nodeType":"YulFunctionCall","src":"1455:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1442:12:29"},"nodeType":"YulFunctionCall","src":"1442:32:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1431:7:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1531:26:29","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1540:6:29"},{"name":"value1","nodeType":"YulIdentifier","src":"1548:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1533:6:29"},"nodeType":"YulFunctionCall","src":"1533:22:29"},"nodeType":"YulExpressionStatement","src":"1533:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1496:7:29"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1519:7:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1512:6:29"},"nodeType":"YulFunctionCall","src":"1512:15:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1505:6:29"},"nodeType":"YulFunctionCall","src":"1505:23:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1493:2:29"},"nodeType":"YulFunctionCall","src":"1493:36:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1486:6:29"},"nodeType":"YulFunctionCall","src":"1486:44:29"},"nodeType":"YulIf","src":"1483:2:29"},{"nodeType":"YulAssignment","src":"1566:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1576:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1566:6:29"}]},{"nodeType":"YulAssignment","src":"1592:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1619:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1630:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1615:3:29"},"nodeType":"YulFunctionCall","src":"1615:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1602:12:29"},"nodeType":"YulFunctionCall","src":"1602:32:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1592:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"1643:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1675:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1686:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1671:3:29"},"nodeType":"YulFunctionCall","src":"1671:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1658:12:29"},"nodeType":"YulFunctionCall","src":"1658:32:29"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1647:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1726:7:29"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1699:26:29"},"nodeType":"YulFunctionCall","src":"1699:35:29"},"nodeType":"YulExpressionStatement","src":"1699:35:29"},{"nodeType":"YulAssignment","src":"1743:17:29","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1753:7:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1743:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_boolt_int256t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1176:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1187:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1199:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1207:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1215:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1223:6:29","type":""}],"src":"1117:649:29"},{"body":{"nodeType":"YulBlock","src":"1867:772:29","statements":[{"body":{"nodeType":"YulBlock","src":"1913:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1922:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"1930:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1915:6:29"},"nodeType":"YulFunctionCall","src":"1915:22:29"},"nodeType":"YulExpressionStatement","src":"1915:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1888:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1897:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1884:3:29"},"nodeType":"YulFunctionCall","src":"1884:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1909:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1880:3:29"},"nodeType":"YulFunctionCall","src":"1880:32:29"},"nodeType":"YulIf","src":"1877:2:29"},{"nodeType":"YulVariableDeclaration","src":"1948:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1975:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1962:12:29"},"nodeType":"YulFunctionCall","src":"1962:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1952:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1994:28:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2004:18:29","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1998:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2049:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2058:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"2066:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2051:6:29"},"nodeType":"YulFunctionCall","src":"2051:22:29"},"nodeType":"YulExpressionStatement","src":"2051:22:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2037:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2045:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2034:2:29"},"nodeType":"YulFunctionCall","src":"2034:14:29"},"nodeType":"YulIf","src":"2031:2:29"},{"nodeType":"YulVariableDeclaration","src":"2084:32:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2098:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2109:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2094:3:29"},"nodeType":"YulFunctionCall","src":"2094:22:29"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2088:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2164:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2173:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"2181:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2166:6:29"},"nodeType":"YulFunctionCall","src":"2166:22:29"},"nodeType":"YulExpressionStatement","src":"2166:22:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2143:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"2147:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2139:3:29"},"nodeType":"YulFunctionCall","src":"2139:13:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2154:7:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2135:3:29"},"nodeType":"YulFunctionCall","src":"2135:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2128:6:29"},"nodeType":"YulFunctionCall","src":"2128:35:29"},"nodeType":"YulIf","src":"2125:2:29"},{"nodeType":"YulVariableDeclaration","src":"2199:26:29","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2222:2:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2209:12:29"},"nodeType":"YulFunctionCall","src":"2209:16:29"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2203:2:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2234:14:29","value":{"kind":"number","nodeType":"YulLiteral","src":"2244:4:29","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2238:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2271:13:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"2273:7:29"},"nodeType":"YulFunctionCall","src":"2273:9:29"},"nodeType":"YulExpressionStatement","src":"2273:9:29"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2263:2:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2267:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2260:2:29"},"nodeType":"YulFunctionCall","src":"2260:10:29"},"nodeType":"YulIf","src":"2257:2:29"},{"nodeType":"YulVariableDeclaration","src":"2293:65:29","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2333:2:29"},{"kind":"number","nodeType":"YulLiteral","src":"2337:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2329:3:29"},"nodeType":"YulFunctionCall","src":"2329:13:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2348:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2344:3:29"},"nodeType":"YulFunctionCall","src":"2344:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2325:3:29"},"nodeType":"YulFunctionCall","src":"2325:27:29"},{"name":"_4","nodeType":"YulIdentifier","src":"2354:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2321:3:29"},"nodeType":"YulFunctionCall","src":"2321:36:29"}],"functionName":{"name":"allocateMemory","nodeType":"YulIdentifier","src":"2306:14:29"},"nodeType":"YulFunctionCall","src":"2306:52:29"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"2297:5:29","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2374:5:29"},{"name":"_3","nodeType":"YulIdentifier","src":"2381:2:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2367:6:29"},"nodeType":"YulFunctionCall","src":"2367:17:29"},"nodeType":"YulExpressionStatement","src":"2367:17:29"},{"body":{"nodeType":"YulBlock","src":"2430:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2439:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"2447:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2432:6:29"},"nodeType":"YulFunctionCall","src":"2432:22:29"},"nodeType":"YulExpressionStatement","src":"2432:22:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2407:2:29"},{"name":"_3","nodeType":"YulIdentifier","src":"2411:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2403:3:29"},"nodeType":"YulFunctionCall","src":"2403:11:29"},{"name":"_4","nodeType":"YulIdentifier","src":"2416:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2399:3:29"},"nodeType":"YulFunctionCall","src":"2399:20:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2421:7:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2396:2:29"},"nodeType":"YulFunctionCall","src":"2396:33:29"},"nodeType":"YulIf","src":"2393:2:29"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2482:5:29"},{"name":"_4","nodeType":"YulIdentifier","src":"2489:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2478:3:29"},"nodeType":"YulFunctionCall","src":"2478:14:29"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2498:2:29"},{"name":"_4","nodeType":"YulIdentifier","src":"2502:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2494:3:29"},"nodeType":"YulFunctionCall","src":"2494:11:29"},{"name":"_3","nodeType":"YulIdentifier","src":"2507:2:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2465:12:29"},"nodeType":"YulFunctionCall","src":"2465:45:29"},"nodeType":"YulExpressionStatement","src":"2465:45:29"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2534:5:29"},{"name":"_3","nodeType":"YulIdentifier","src":"2541:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:29"},"nodeType":"YulFunctionCall","src":"2530:14:29"},{"name":"_4","nodeType":"YulIdentifier","src":"2546:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2526:3:29"},"nodeType":"YulFunctionCall","src":"2526:23:29"},{"name":"value0","nodeType":"YulIdentifier","src":"2551:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2519:6:29"},"nodeType":"YulFunctionCall","src":"2519:39:29"},"nodeType":"YulExpressionStatement","src":"2519:39:29"},{"nodeType":"YulAssignment","src":"2567:15:29","value":{"name":"array","nodeType":"YulIdentifier","src":"2577:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2567:6:29"}]},{"nodeType":"YulAssignment","src":"2591:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2618:9:29"},{"name":"_4","nodeType":"YulIdentifier","src":"2629:2:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2614:3:29"},"nodeType":"YulFunctionCall","src":"2614:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2601:12:29"},"nodeType":"YulFunctionCall","src":"2601:32:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2591:6:29"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1825:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1836:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1848:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1856:6:29","type":""}],"src":"1771:868:29"},{"body":{"nodeType":"YulBlock","src":"2759:166:29","statements":[{"body":{"nodeType":"YulBlock","src":"2806:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2815:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"2823:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2808:6:29"},"nodeType":"YulFunctionCall","src":"2808:22:29"},"nodeType":"YulExpressionStatement","src":"2808:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2780:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2776:3:29"},"nodeType":"YulFunctionCall","src":"2776:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2801:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2772:3:29"},"nodeType":"YulFunctionCall","src":"2772:33:29"},"nodeType":"YulIf","src":"2769:2:29"},{"nodeType":"YulAssignment","src":"2841:78:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2900:9:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2911:7:29"}],"functionName":{"name":"abi_decode_t_struct$_QuoteExactInputSingleParams","nodeType":"YulIdentifier","src":"2851:48:29"},"nodeType":"YulFunctionCall","src":"2851:68:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2841:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2725:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2736:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2748:6:29","type":""}],"src":"2644:281:29"},{"body":{"nodeType":"YulBlock","src":"3046:166:29","statements":[{"body":{"nodeType":"YulBlock","src":"3093:26:29","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3102:6:29"},{"name":"value0","nodeType":"YulIdentifier","src":"3110:6:29"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3095:6:29"},"nodeType":"YulFunctionCall","src":"3095:22:29"},"nodeType":"YulExpressionStatement","src":"3095:22:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3067:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3076:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3063:3:29"},"nodeType":"YulFunctionCall","src":"3063:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3088:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3059:3:29"},"nodeType":"YulFunctionCall","src":"3059:33:29"},"nodeType":"YulIf","src":"3056:2:29"},{"nodeType":"YulAssignment","src":"3128:78:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3187:9:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3198:7:29"}],"functionName":{"name":"abi_decode_t_struct$_QuoteExactInputSingleParams","nodeType":"YulIdentifier","src":"3138:48:29"},"nodeType":"YulFunctionCall","src":"3138:68:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3128:6:29"}]}]},"name":"abi_decode_tuple_t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3012:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3023:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3035:6:29","type":""}],"src":"2930:282:29"},{"body":{"nodeType":"YulBlock","src":"3342:119:29","statements":[{"nodeType":"YulAssignment","src":"3352:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3364:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3375:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3360:3:29"},"nodeType":"YulFunctionCall","src":"3360:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3352:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3394:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"3405:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3387:6:29"},"nodeType":"YulFunctionCall","src":"3387:25:29"},"nodeType":"YulExpressionStatement","src":"3387:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3432:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3443:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:29"},"nodeType":"YulFunctionCall","src":"3428:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"3448:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3421:6:29"},"nodeType":"YulFunctionCall","src":"3421:34:29"},"nodeType":"YulExpressionStatement","src":"3421:34:29"}]},"name":"abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3303:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3314:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3322:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3333:4:29","type":""}],"src":"3217:244:29"},{"body":{"nodeType":"YulBlock","src":"3567:76:29","statements":[{"nodeType":"YulAssignment","src":"3577:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3589:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3600:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3585:3:29"},"nodeType":"YulFunctionCall","src":"3585:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3577:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3619:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"3630:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3612:6:29"},"nodeType":"YulFunctionCall","src":"3612:25:29"},"nodeType":"YulExpressionStatement","src":"3612:25:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3536:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3547:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3558:4:29","type":""}],"src":"3466:177:29"},{"body":{"nodeType":"YulBlock","src":"3692:198:29","statements":[{"nodeType":"YulAssignment","src":"3702:19:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3718:2:29","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3712:5:29"},"nodeType":"YulFunctionCall","src":"3712:9:29"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3702:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3730:35:29","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3752:6:29"},{"name":"size","nodeType":"YulIdentifier","src":"3760:4:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3748:3:29"},"nodeType":"YulFunctionCall","src":"3748:17:29"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3734:10:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3840:13:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"3842:7:29"},"nodeType":"YulFunctionCall","src":"3842:9:29"},"nodeType":"YulExpressionStatement","src":"3842:9:29"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3783:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"3795:18:29","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3780:2:29"},"nodeType":"YulFunctionCall","src":"3780:34:29"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3819:10:29"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3831:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3816:2:29"},"nodeType":"YulFunctionCall","src":"3816:22:29"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3777:2:29"},"nodeType":"YulFunctionCall","src":"3777:62:29"},"nodeType":"YulIf","src":"3774:2:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3869:2:29","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3873:10:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3862:6:29"},"nodeType":"YulFunctionCall","src":"3862:22:29"},"nodeType":"YulExpressionStatement","src":"3862:22:29"}]},"name":"allocateMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3672:4:29","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3681:6:29","type":""}],"src":"3648:242:29"},{"body":{"nodeType":"YulBlock","src":"3942:86:29","statements":[{"body":{"nodeType":"YulBlock","src":"4006:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4015:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4018:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4008:6:29"},"nodeType":"YulFunctionCall","src":"4008:12:29"},"nodeType":"YulExpressionStatement","src":"4008:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3965:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3976:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3991:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3996:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3987:3:29"},"nodeType":"YulFunctionCall","src":"3987:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"4000:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3983:3:29"},"nodeType":"YulFunctionCall","src":"3983:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3972:3:29"},"nodeType":"YulFunctionCall","src":"3972:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3962:2:29"},"nodeType":"YulFunctionCall","src":"3962:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3955:6:29"},"nodeType":"YulFunctionCall","src":"3955:50:29"},"nodeType":"YulIf","src":"3952:2:29"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3931:5:29","type":""}],"src":"3895:133:29"}]},"contents":"{\n    { }\n    function abi_decode_t_struct$_QuoteExactInputSingleParams(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0xa0) { revert(value, value) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xa0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        value := memPtr\n        let value_1 := calldataload(headStart)\n        validator_revert_t_address(value_1)\n        mstore(memPtr, value_1)\n        let value_2 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_2)\n        mstore(add(memPtr, 32), value_2)\n        mstore(add(memPtr, 64), calldataload(add(headStart, 64)))\n        let value_3 := calldataload(add(headStart, 96))\n        if iszero(eq(value_3, and(value_3, 0xffffff))) { revert(0, 0) }\n        mstore(add(memPtr, 96), value_3)\n        mstore(add(memPtr, 128), abi_decode_t_uint160(add(headStart, 128)))\n    }\n    function abi_decode_t_uint160(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_tuple_t_addresst_boolt_int256t_uint160(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(value1, value1) }\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_2)\n        value3 := value_2\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { invalid() }\n        let array := allocateMemory(add(and(add(_3, 0x1f), not(31)), _4))\n        mstore(array, _3)\n        if gt(add(add(_2, _3), _4), dataEnd) { revert(value0, value0) }\n        calldatacopy(add(array, _4), add(_2, _4), _3)\n        mstore(add(add(array, _3), _4), value0)\n        value0 := array\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_decode_tuple_t_struct$_QuoteExactInputSingleParams_$3905_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_QuoteExactInputSingleParams(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_QuoteExactOutputSingleParams_$3934_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_QuoteExactInputSingleParams(headStart, dataEnd)\n    }\n    function abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3039":[{"length":32,"start":3667}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100575760003560e01c80632f80bb1d1461005c57806390405d3614610085578063bd21704a146100a6578063c6a5026a146100b9578063cdca1753146100cc575b600080fd5b61006f61006a3660046121e6565b6100df565b60405161007c919061229d565b60405180910390f35b610098610093366004612190565b61017f565b60405161007c92919061228f565b61006f6100b4366004612274565b61043d565b61006f6100c7366004612274565b6104e8565b61006f6100da3660046121e6565b610565565b60005b60008060006100f0866105ef565b9250925092506101466040518060a00160405280846001600160a01b03168152602001856001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b031681525061043d565b945061015186610620565b156101665761015f86610628565b9550610171565b849350505050610179565b5050506100e2565b92915050565b600080836101d4576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806101e88a8a8a8a61063f565b9250925092505b8051158015906102155750866001600160a01b031681604001516001600160a01b031614155b156104065761022261206a565b60408201516001600160a01b031681526060820151610244908c90868d6106d2565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b60208401529083015161029291610281908d908c61072f565b6080850151855161ffff881661077c565b60c085015260a084015260808301526001600160a01b0316604083015284156102f4576102c88160c0015182608001510161096e565b825103825260a08101516102ea906102df9061096e565b602084015190610984565b602083015261032f565b6103018160a0015161096e565b825101825260c081015160808201516103299161031e910161096e565b60208401519061099a565b60208301525b80606001516001600160a01b031682604001516001600160a01b031614156103c55780604001511561039c57600061036b8c83602001516109b0565b5050505050509150508a1561037e576000035b61038c836080015182610a77565b6001600160801b03166080840152505b896103ab5780602001516103b4565b60018160200151035b600290810b900b6060830152610400565b80600001516001600160a01b031682604001516001600160a01b031614610400576103f38260400151610b2d565b600290810b900b60608301525b506101ef565b8315158915151461041f5760208101518151890361042c565b8060000151880381602001515b909b909a5098505050505050505050565b6020810151815160608301516000926001600160a01b03808216908416109284926104689290610e4c565b90506000806104cb838561047f896040015161096e565b60000389608001516001600160a01b03166000146104a1578960800151610093565b876104c05773fffd8963efd1fc6a506488495d951d5263988d25610093565b6401000276a461017f565b91509150836104da57806104dc565b815b9450505050505b919050565b6020810151815160608301516000926001600160a01b03808216908416109284926105139290610e4c565b9050600080610547838561052a896040015161096e565b60808a01516001600160a01b0316156104a1578960800151610093565b915091508361055957816000036104dc565b60000395945050505050565b60005b6000806000610576866105ef565b9250925092506105cc6040518060a00160405280856001600160a01b03168152602001846001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b03168152506104e8565b94506105d786610620565b15610166576105e586610628565b9550505050610568565b600080806105fd8482610e82565b925061060a846014610f32565b9050610617846017610e82565b91509193909250565b516042111590565b805160609061017990839060179060161901610fd9565b60008061064a6120a6565b60006106558861112a565b905061066687868360000151611233565b61066f88611304565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b81526020016106b98a611371565b6001600160801b03168152509150509450945094915050565b60008060006106e3878787876113ac565b9093509150620d89e719600284900b121561070457620d89e719925061071a565b620d89e8600284900b131561071a57620d89e892505b610723836113c8565b90509450945094915050565b60008361075057816001600160a01b0316836001600160a01b031611610766565b816001600160a01b0316836001600160a01b0316105b6107705782610772565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906108015760006107b58989620f42400362ffffff16620f42406116fa565b9050826107ce576107c98c8c8c60016117a9565b6107db565b6107db8b8d8c6001611824565b95508581106107ec578a96506107fb565b6107f88c8b83866118cf565b96505b5061084b565b81610818576108138b8b8b6000611824565b610825565b6108258a8c8b60006117a9565b93508388600003106108395789955061084b565b6108488b8a8a6000038561191b565b95505b6001600160a01b038a81169087161482156108ae5780801561086a5750815b6108805761087b878d8c6001611824565b610882565b855b955080801561088f575081155b6108a5576108a0878d8c60006117a9565b6108a7565b845b94506108f8565b8080156108b85750815b6108ce576108c98c888c60016117a9565b6108d0565b855b95508080156108dd575081155b6108f3576108ee8c888c6000611824565b6108f5565b845b94505b8115801561090857508860000385115b15610914578860000394505b81801561093357508a6001600160a01b0316876001600160a01b031614155b1561094257858903935061095f565b61095c868962ffffff168a620f42400362ffffff16611967565b93505b50505095509550955095915050565b6000600160ff1b821061098057600080fd5b5090565b8082038281131560008312151461017957600080fd5b8181018281121560008312151461017957600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d610100811015610a2f57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b1215610adc57826001600160801b03168260000384039150816001600160801b031610610ad7576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b610179565b826001600160801b03168284019150816001600160801b03161015610179576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610b69575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b610b9e576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110610c3257607f810383901c9150610c3c565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610e3d57886001600160a01b0316610e21826113c8565b6001600160a01b03161115610e365781610e38565b805b610e3f565b815b9998505050505050505050565b60006107727f0000000000000000000000000000000000000000000000000000000000000000610e7d8686866119a1565b6119f7565b600081826014011015610ed1576040805162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b604482015290519081900360640190fd5b8160140183511015610f22576040805162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015290519081900360640190fd5b500160200151600160601b900490565b600081826003011015610f80576040805162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015290519081900360640190fd5b8160030183511015610fd0576040805162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015290519081900360640190fd5b50016003015190565b60608182601f011015611024576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b82828401101561106c576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b818301845110156110b8576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b6060821580156110d75760405191506000825260208201604052611121565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156111105780518352602092830192016110f8565b5050858452601f01601f1916604052505b50949350505050565b6111326120d4565b816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d602081101561119557600080fd5b505161ffff166040808301919091528051633850c7bd60e01b815290516001600160a01b03841691633850c7bd9160048083019260e0929190829003018186803b1580156111e257600080fd5b505afa1580156111f6573d6000803e3d6000fd5b505050506040513d60e081101561120c57600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361127c57816001600160a01b0316836001600160a01b0316118015611277575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b6112aa565b816001600160a01b0316836001600160a01b03161080156112aa57506401000276a36001600160a01b038416115b9050806112fe576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133f57600080fd5b505afa158015611353573d6000803e3d6000fd5b505050506040513d602081101561136957600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561133f57600080fd5b6000806113bb86868686611adb565b9150915094509492505050565b60008060008360020b126113df578260020b6113e7565b8260020b6000035b9050620d89e8811115611425576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b60006001821661143957600160801b61144b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561147f576ffff97272373d413259a46990580e213a0260801c5b600482161561149e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156114bd576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156114dc576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156114fb576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561151a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611539576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611559576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611579576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611599576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156115b9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156115d9576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156115f9576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611619576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611639576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561165a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561167a576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611699576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156116b6576b048a170391f7dc42444e8fa20260801c5b60008460020b13156116d15780600019816116cd57fe5b0490505b6401000000008106156116e55760016116e8565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611730576000841161172557600080fd5b508290049050610775565b80841161173c57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b031611156117c9579293925b816117f6576117f1836001600160801b03168686036001600160a01b0316600160601b6116fa565b611819565b611819836001600160801b03168686036001600160a01b0316600160601b611967565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611844579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661186e57600080fd5b8361189e57866001600160a01b03166118918383896001600160a01b03166116fa565b8161189857fe5b046118c4565b6118c46118b58383896001600160a01b0316611967565b886001600160a01b0316611cd9565b979650505050505050565b600080856001600160a01b0316116118e657600080fd5b6000846001600160801b0316116118fc57600080fd5b8161190e576117f18585856001611ce4565b6118198585856001611dc5565b600080856001600160a01b03161161193257600080fd5b6000846001600160801b03161161194857600080fd5b8161195a576117f18585856000611dc5565b6118198585856000611ce4565b60006119748484846116fa565b90506000828061198057fe5b848609111561077557600019811061199757600080fd5b6001019392505050565b6119a96120d4565b826001600160a01b0316846001600160a01b031611156119c7579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610611a1f57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000808581600286810b9088900b81611af057fe5b05905060008760020b128015611b1757508560020b8760020b81611b1057fe5b0760020b15155b15611b2157600019015b8415611bf857600080611b3383611ea8565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d6020811015611bbe57600080fd5b5051168015159750905086611bda57898360ff16860302611bed565b89611be482611eba565b840360ff168603025b975050505050611cce565b600080611c0783600101611ea8565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b158015611c6557600080fd5b505afa158015611c79573d6000803e3d6000fd5b505050506040513d6020811015611c8f57600080fd5b5051168015159750905086611cb157898360ff0360ff16866001010102611cc7565b8983611cbc83611f5a565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b60008115611d575760006001600160a01b03841115611d1a57611d1584600160601b876001600160801b03166116fa565b611d32565b6001600160801b038516606085901b81611d3057fe5b045b9050611d4f611d4a6001600160a01b03881683612044565b612054565b91505061181c565b60006001600160a01b03841115611d8557611d8084600160601b876001600160801b0316611967565b611d9c565b611d9c606085901b6001600160801b038716611cd9565b905080866001600160a01b031611611db357600080fd5b6001600160a01b03861603905061181c565b600082611dd357508361181c565b600160601b600160e01b03606085901b168215611e61576001600160a01b03861684810290858281611e0157fe5b041415611e3257818101828110611e3057611e2683896001600160a01b031683611967565b935050505061181c565b505b611e5882611e53878a6001600160a01b03168681611e4c57fe5b0490612044565b611cd9565b9250505061181c565b6001600160a01b03861684810290858281611e7857fe5b04148015611e8557508082115b611e8e57600080fd5b808203611e26611d4a846001600160a01b038b1684611967565b60020b600881901d9161010090910790565b6000808211611ec857600080fd5b600160801b8210611edb57608091821c91015b680100000000000000008210611ef357604091821c91015b6401000000008210611f0757602091821c91015b620100008210611f1957601091821c91015b6101008210611f2a57600891821c91015b60108210611f3a57600491821c91015b60048210611f4a57600291821c91015b600282106104e357600101919050565b6000808211611f6857600080fd5b5060ff6001600160801b03821615611f8357607f1901611f8b565b608082901c91505b67ffffffffffffffff821615611fa457603f1901611fac565b604082901c91505b63ffffffff821615611fc157601f1901611fc9565b602082901c91505b61ffff821615611fdc57600f1901611fe4565b601082901c91505b60ff821615611ff65760071901611ffe565b600882901c91505b600f8216156120105760031901612018565b600482901c91505b600382161561202a5760011901612032565b600282901c91505b60018216156104e35760001901919050565b8082018281101561017957600080fd5b806001600160a01b03811681146104e357600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b600060a08284031215612105578081fd5b60405160a0810181811067ffffffffffffffff8211171561212257fe5b6040529050808235612133816122ca565b81526020830135612143816122ca565b602082015260408381013590820152606083013562ffffff8116811461216857600080fd5b606082015261217960808401612185565b60808201525092915050565b80356104e3816122ca565b600080600080608085870312156121a5578384fd5b84356121b0816122ca565b9350602085013580151581146121c4578384fd5b92506040850135915060608501356121db816122ca565b939692955090935050565b600080604083850312156121f8578182fd5b823567ffffffffffffffff8082111561220f578384fd5b818501915085601f830112612222578384fd5b813560208282111561223057fe5b612242601f8301601f191682016122a6565b92508183528781838601011115612257578586fd5b818185018285013790820181019490945295939092013593505050565b600060a08284031215612285578081fd5b61077583836120f4565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff811182821017156122c257fe5b604052919050565b6001600160a01b03811681146122df57600080fd5b5056fea264697066735822122010aaa50db12e71483513c54f67c1501ec940c77a2b1eae9eb52a456c0756beab64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0xBD21704A EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0xC6A5026A EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0xCC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x21E6 JUMP JUMPDEST PUSH2 0xDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x229D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x98 PUSH2 0x93 CALLDATASIZE PUSH1 0x4 PUSH2 0x2190 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP3 SWAP2 SWAP1 PUSH2 0x228F JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2274 JUMP JUMPDEST PUSH2 0x43D JUMP JUMPDEST PUSH2 0x6F PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2274 JUMP JUMPDEST PUSH2 0x4E8 JUMP JUMPDEST PUSH2 0x6F PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x21E6 JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF0 DUP7 PUSH2 0x5EF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x146 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x43D JUMP JUMPDEST SWAP5 POP PUSH2 0x151 DUP7 PUSH2 0x620 JUMP JUMPDEST ISZERO PUSH2 0x166 JUMPI PUSH2 0x15F DUP7 PUSH2 0x628 JUMP JUMPDEST SWAP6 POP PUSH2 0x171 JUMP JUMPDEST DUP5 SWAP4 POP POP POP POP PUSH2 0x179 JUMP JUMPDEST POP POP POP PUSH2 0xE2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x1D4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0x1E8 DUP11 DUP11 DUP11 DUP11 PUSH2 0x63F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x215 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x406 JUMPI PUSH2 0x222 PUSH2 0x206A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x244 SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x292 SWAP2 PUSH2 0x281 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x72F JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x77C JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x2F4 JUMPI PUSH2 0x2C8 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0x96E JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x2EA SWAP1 PUSH2 0x2DF SWAP1 PUSH2 0x96E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x984 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x32F JUMP JUMPDEST PUSH2 0x301 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0x96E JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x329 SWAP2 PUSH2 0x31E SWAP2 ADD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x99A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3C5 JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x39C JUMPI PUSH1 0x0 PUSH2 0x36B DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x9B0 JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x38C DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0xA77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x3AB JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x400 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x400 JUMPI PUSH2 0x3F3 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0xB2D JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0x1EF JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x41F JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x42C JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x468 SWAP3 SWAP1 PUSH2 0xE4C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x4CB DUP4 DUP6 PUSH2 0x47F DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x0 SUB DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 EQ PUSH2 0x4A1 JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x93 JUMP JUMPDEST DUP8 PUSH2 0x4C0 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x93 JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0x17F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x4DA JUMPI DUP1 PUSH2 0x4DC JUMP JUMPDEST DUP2 JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x513 SWAP3 SWAP1 PUSH2 0xE4C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x547 DUP4 DUP6 PUSH2 0x52A DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x4A1 JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x93 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x559 JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x0 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x576 DUP7 PUSH2 0x5EF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x5CC PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x4E8 JUMP JUMPDEST SWAP5 POP PUSH2 0x5D7 DUP7 PUSH2 0x620 JUMP JUMPDEST ISZERO PUSH2 0x166 JUMPI PUSH2 0x5E5 DUP7 PUSH2 0x628 JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x568 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x5FD DUP5 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP3 POP PUSH2 0x60A DUP5 PUSH1 0x14 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP PUSH2 0x617 DUP5 PUSH1 0x17 PUSH2 0xE82 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x179 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x64A PUSH2 0x20A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x655 DUP9 PUSH2 0x112A JUMP JUMPDEST SWAP1 POP PUSH2 0x666 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1233 JUMP JUMPDEST PUSH2 0x66F DUP9 PUSH2 0x1304 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6B9 DUP11 PUSH2 0x1371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6E3 DUP8 DUP8 DUP8 DUP8 PUSH2 0x13AC JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x704 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x71A JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x71A JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x723 DUP4 PUSH2 0x13C8 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x750 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x766 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x770 JUMPI DUP3 PUSH2 0x772 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x801 JUMPI PUSH1 0x0 PUSH2 0x7B5 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x16FA JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x7CE JUMPI PUSH2 0x7C9 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x7DB DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1824 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x7EC JUMPI DUP11 SWAP7 POP PUSH2 0x7FB JUMP JUMPDEST PUSH2 0x7F8 DUP13 DUP12 DUP4 DUP7 PUSH2 0x18CF JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x84B JUMP JUMPDEST DUP2 PUSH2 0x818 JUMPI PUSH2 0x813 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0x825 JUMP JUMPDEST PUSH2 0x825 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x839 JUMPI DUP10 SWAP6 POP PUSH2 0x84B JUMP JUMPDEST PUSH2 0x848 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x191B JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x8AE JUMPI DUP1 DUP1 ISZERO PUSH2 0x86A JUMPI POP DUP2 JUMPDEST PUSH2 0x880 JUMPI PUSH2 0x87B DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x88F JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x8A5 JUMPI PUSH2 0x8A0 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x8A7 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x8F8 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x8B8 JUMPI POP DUP2 JUMPDEST PUSH2 0x8CE JUMPI PUSH2 0x8C9 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x8D0 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x8DD JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x8F3 JUMPI PUSH2 0x8EE DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1824 JUMP JUMPDEST PUSH2 0x8F5 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x908 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x914 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x933 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x942 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x95F JUMP JUMPDEST PUSH2 0x95C DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x1967 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x980 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xA2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0xADC JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0xAD7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x179 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x179 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0xB69 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0xB9E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0xC32 JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0xC3C JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0xE3D JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE21 DUP3 PUSH2 0x13C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xE36 JUMPI DUP2 PUSH2 0xE38 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0xE3F JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x772 PUSH32 0x0 PUSH2 0xE7D DUP7 DUP7 DUP7 PUSH2 0x19A1 JUMP JUMPDEST PUSH2 0x19F7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0xED1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0xF22 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0xF80 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x1024 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x106C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x10B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x10D7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1121 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x1110 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x10F8 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1132 PUSH2 0x20D4 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x116B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x117F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xFFFF AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH4 0x3850C7BD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0x3850C7BD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0xE0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x120C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x127C JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1277 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x12AA JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x12AA JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x12FE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x133F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1353 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x133F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13BB DUP7 DUP7 DUP7 DUP7 PUSH2 0x1ADB JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x13DF JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x13E7 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1425 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1439 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x144B JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x147F JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x149E JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x14BD JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x14DC JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x14FB JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x151A JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1539 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1559 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1579 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1599 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x15B9 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x15D9 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x15F9 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1619 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1639 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x165A JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x167A JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1699 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x16B6 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x16D1 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x16CD JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x16E5 JUMPI PUSH1 0x1 PUSH2 0x16E8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1730 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x775 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x173C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x17C9 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x17F6 JUMPI PUSH2 0x17F1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x1819 JUMP JUMPDEST PUSH2 0x1819 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1967 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1844 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x186E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x189E JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1891 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16FA JUMP JUMPDEST DUP2 PUSH2 0x1898 JUMPI INVALID JUMPDEST DIV PUSH2 0x18C4 JUMP JUMPDEST PUSH2 0x18C4 PUSH2 0x18B5 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1967 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CD9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x18FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x190E JUMPI PUSH2 0x17F1 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1CE4 JUMP JUMPDEST PUSH2 0x1819 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1DC5 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1948 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x195A JUMPI PUSH2 0x17F1 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1DC5 JUMP JUMPDEST PUSH2 0x1819 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1CE4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP5 DUP5 DUP5 PUSH2 0x16FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x1980 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19A9 PUSH2 0x20D4 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x19C7 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x1A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x1AF0 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1B17 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1B10 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x1BF8 JUMPI PUSH1 0x0 DUP1 PUSH2 0x1B33 DUP4 PUSH2 0x1EA8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1BBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x1BDA JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x1BED JUMP JUMPDEST DUP10 PUSH2 0x1BE4 DUP3 PUSH2 0x1EBA JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x1CCE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C07 DUP4 PUSH1 0x1 ADD PUSH2 0x1EA8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x1CB1 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x1CC7 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x1CBC DUP4 PUSH2 0x1F5A JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x1D57 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x1D1A JUMPI PUSH2 0x1D15 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x16FA JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x1D30 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x1D4F PUSH2 0x1D4A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x2054 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x181C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x1D85 JUMPI PUSH2 0x1D80 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1967 JUMP JUMPDEST PUSH2 0x1D9C JUMP JUMPDEST PUSH2 0x1D9C PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x1CD9 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x181C JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1DD3 JUMPI POP DUP4 PUSH2 0x181C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x1E61 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x1E01 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x1E32 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x1E30 JUMPI PUSH2 0x1E26 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1967 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x181C JUMP JUMPDEST POP JUMPDEST PUSH2 0x1E58 DUP3 PUSH2 0x1E53 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x1E4C JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x1CD9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x181C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x1E78 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x1E85 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x1E8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x1E26 PUSH2 0x1D4A DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x1967 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1EC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x1EDB JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x1EF3 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x1F07 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x1F19 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x1F2A JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x1F3A JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x1F4A JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x4E3 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1F68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x1F83 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x1F8B JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x1FA4 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x1FAC JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x1FC1 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x1FC9 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x1FDC JUMPI PUSH1 0xF NOT ADD PUSH2 0x1FE4 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x1FF6 JUMPI PUSH1 0x7 NOT ADD PUSH2 0x1FFE JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x2010 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x2018 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x202A JUMPI PUSH1 0x1 NOT ADD PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2105 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2122 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP3 CALLDATALOAD PUSH2 0x2133 DUP2 PUSH2 0x22CA JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2143 DUP2 PUSH2 0x22CA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2179 PUSH1 0x80 DUP5 ADD PUSH2 0x2185 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x4E3 DUP2 PUSH2 0x22CA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x21A5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x21B0 DUP2 PUSH2 0x22CA JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x21C4 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x21DB DUP2 PUSH2 0x22CA JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21F8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x220F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2222 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x2230 JUMPI INVALID JUMPDEST PUSH2 0x2242 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH2 0x22A6 JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP8 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2257 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP2 DUP2 DUP6 ADD DUP3 DUP6 ADD CALLDATACOPY SWAP1 DUP3 ADD DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SWAP4 SWAP1 SWAP3 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2285 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x775 DUP4 DUP4 PUSH2 0x20F4 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x22C2 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x22DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT 0xAA 0xA5 0xD 0xB1 0x2E PUSH18 0x483513C54F67C1501EC940C77A2B1EAE9EB5 0x2A GASLIMIT PUSH13 0x756BEAB64736F6C6343000706 STOP CALLER ","sourceMap":"378:4117:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3610:883;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;702:3284:25;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2789:815:24:-;;;;;;:::i;:::-;;:::i;1081:817::-;;;;;;:::i;:::-;;:::i;1904:879::-;;;;;;:::i;:::-;;:::i;3610:883::-;3726:16;3754:733;3782:16;3800:15;3817:10;3831:39;:4;:37;:39::i;:::-;3781:89;;;;;;3976:291;4016:237;;;;;;;;4076:7;-1:-1:-1;;;;;4016:237:24;;;;;4115:8;-1:-1:-1;;;;;4016:237:24;;;;;4183:9;4016:237;;;;4150:3;4016:237;;;;;;4233:1;-1:-1:-1;;;;;4016:237:24;;;;3976:22;:291::i;:::-;3964:303;;4341:23;:4;:21;:23::i;:::-;4337:140;;;4391:16;:4;:14;:16::i;:::-;4384:23;;4337:140;;;4453:9;4446:16;;;;;;;4337:140;3754:733;;;;;;3610:883;;;;:::o;702:3284:25:-;873:14;;923:20;915:63;;;;;-1:-1:-1;;;915:63:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;988:15;1006:19;;;;988:15;;1093:131;1119:11;1144:10;1006:15;1197:17;1093:12;:131::i;:::-;1035:189;;;;;;1350:2396;1357:30;;:35;;;;:78;;;1418:17;-1:-1:-1;;;;;1396:39:25;:5;:18;;;-1:-1:-1;;;;;1396:39:25;;;1357:78;1350:2396;;;1451:28;;:::i;:::-;1518:18;;;;-1:-1:-1;;;;;1493:43:25;;;1684:10;;;;1610:155;;1655:11;;1712;1741:10;1610:27;:155::i;:::-;-1:-1:-1;;;;;1551:214:25;1585:21;;;1551:214;;;;;;1567:16;;;;1551:214;;;;;;;;;;;1552:13;;;1551:214;2010:18;;;;1968:269;;2046:75;;2068:10;;2103:17;2046:21;:75::i;:::-;2139:15;;;;2172:30;;1968:269;;;:24;:269::i;:::-;1950:14;;;1898:339;1934:14;;;1898:339;1919:13;;;1898:339;-1:-1:-1;;;;;1898:339:25;1899:18;;;1898:339;2251:434;;;;2319:43;2336:4;:14;;;2320:4;:13;;;:30;2319:41;:43::i;:::-;2285:77;;;;;2432:14;;;;2405:53;;2432:25;;:23;:25::i;:::-;2405:22;;;;;:26;:53::i;:::-;2380:22;;;:78;2251:434;;;2531:25;:4;:14;;;:23;:25::i;:::-;2497:59;;;;;2643:14;;;;2627:13;;;;2599:71;;2626:43;;2627:30;2626:41;:43::i;:::-;2599:22;;;;;:26;:71::i;:::-;2574:22;;;:96;2251:434;2779:4;:21;;;-1:-1:-1;;;;;2757:43:25;:5;:18;;;-1:-1:-1;;;;;2757:43:25;;2753:983;;;2895:4;:16;;;2891:485;;;2937:19;2966:36;2975:11;2988:4;:13;;;2966:8;:36::i;:::-;2935:67;;;;;;;;;3200:10;3196:68;;;3251:13;;3196:68;3304:53;3327:5;:15;;;3344:12;3304:22;:53::i;:::-;-1:-1:-1;;;;;3286:71:25;:15;;;:71;-1:-1:-1;2891:485:25;3406:10;:46;;3439:4;:13;;;3406:46;;;3435:1;3419:4;:13;;;:17;3406:46;3393:59;;;;;;:10;;;:59;2753:983;;;3499:4;:22;;;-1:-1:-1;;;;;3477:44:25;:5;:18;;;-1:-1:-1;;;;;3477:44:25;;3473:263;;3674:47;3702:5;:18;;;3674:27;:47::i;:::-;3661:60;;;;;;:10;;;:60;3473:263;1350:2396;;;;3791:10;3777:24;;:10;:24;;;:202;;3906:22;;;;3948:30;;3930:48;;3777:202;;;3835:5;:30;;;3817:15;:48;3867:5;:22;;;3777:202;3756:223;;;;-1:-1:-1;702:3284:25;-1:-1:-1;;;;;;;;;702:3284:25:o;2789:815:24:-;2972:15;;;;2955:14;;3097:10;;;;2909:16;;-1:-1:-1;;;;;2955:32:24;;;;;;;;2909:16;;3019:98;;2972:15;3019:7;:98::i;:::-;2997:120;;3129:14;3145;3163:368;3190:4;3209:10;3234:24;:6;:13;;;:22;:24::i;:::-;3233:25;;3272:6;:24;;;-1:-1:-1;;;;;3272:29:24;3300:1;3272:29;:249;;3497:6;:24;;;3272:249;;;3342:10;:118;;3433:27;3342:118;;;3379:27;3163:5;:368::i;:::-;3128:403;;;;3549:10;:48;;3589:7;3549:48;;;3570:7;3549:48;3542:55;;;;;;2789:815;;;;:::o;1081:817::-;1263:15;;;;1246:14;;1388:10;;;;1199:17;;-1:-1:-1;;;;;1246:32:24;;;;;;;;1199:17;;1310:98;;1263:15;1310:7;:98::i;:::-;1288:120;;1420:14;1436;1454:369;1481:4;1500:10;1524:26;:6;:15;;;:24;:26::i;:::-;1564:24;;;;-1:-1:-1;;;;;1564:29:24;;:249;;1789:6;:24;;;1564:249;;1454:369;1419:404;;;;1841:10;:50;;1883:7;1882:8;;1841:50;;;1862:8;;;1081:817;-1:-1:-1;;;;;1081:817:24:o;1904:879::-;2018:17;2047:730;2075:15;2092:16;2110:10;2124:39;:4;:37;:39::i;:::-;2074:89;;;;;;2268:290;2307:237;;;;;;;;2366:7;-1:-1:-1;;;;;2307:237:24;;;;;2405:8;-1:-1:-1;;;;;2307:237:24;;;;;2475:8;2307:237;;;;2440:3;2307:237;;;;;;2524:1;-1:-1:-1;;;;;2307:237:24;;;;2268:21;:290::i;:::-;2257:301;;2632:23;:4;:21;:23::i;:::-;2628:139;;;2682:16;:4;:14;:16::i;:::-;2675:23;;2047:730;;;;;1779:314:21;1883:14;;;1983:17;:4;1883:14;1983;:17::i;:::-;1974:26;-1:-1:-1;2016:24:21;:4;304:2;2016:13;:24::i;:::-;2010:30;-1:-1:-1;2059:27:21;:4;507:20;2059:14;:27::i;:::-;2050:36;;1779:314;;;;;:::o;992:138::-;1083:11;777:24;-1:-1:-1;1083:40:21;;992:138::o;2635:149::-;2751:11;;2696:12;;2727:50;;2751:4;;507:20;;-1:-1:-1;;2751:25:21;2727:10;:50::i;3992:692:25:-;4164:8;4174:10;4186:22;;:::i;:::-;4220:21;4244:31;4263:11;4244:18;:31::i;:::-;4220:55;;4285:78;4318:10;4330:17;4349:2;:13;;;4285:32;:78::i;:::-;4378:27;4393:11;4378:14;:27::i;:::-;4373:32;;4421:2;:6;;;4415:12;;4445:232;;;;;;;;4495:15;4445:232;;;;4633:1;4445:232;;;;4588:2;:13;;;-1:-1:-1;;;;;4445:232:25;;;;;4654:2;:12;;;4445:232;;;;;;4535:25;4548:11;4535:12;:25::i;:::-;-1:-1:-1;;;;;4445:232:25;;;;4437:240;;3992:692;;;;;;;;;:::o;5128:725::-;5290:14;5306:16;5324:24;5386:69;5419:4;5425;5431:11;5444:10;5386:32;:69::i;:::-;5360:95;;-1:-1:-1;5360:95:25;-1:-1:-1;;;5578:28:25;;;;;5574:163;;;-1:-1:-1;;5620:28:25;;5574:163;;;644:9:16;5667:28:25;;;;;5663:74;;;644:9:16;;-1:-1:-1;5663:74:25;5809:37;5837:8;5809:27;:37::i;:::-;5790:56;;5128:725;;;;;;;;:::o;5859:336::-;6013:7;6040:10;:84;;6107:17;-1:-1:-1;;;;;6090:34:25;:16;-1:-1:-1;;;;;6090:34:25;;6040:84;;;6070:17;-1:-1:-1;;;;;6053:34:25;:16;-1:-1:-1;;;;;6053:34:25;;6040:84;6039:149;;6172:16;6039:149;;;6140:17;6039:149;6032:156;;5859:336;;;;;;:::o;1391:3239:15:-;1638:24;;;;-1:-1:-1;;;;;1797:41:15;;;;;;;;1863:20;;;;;;1894:1354;;1921:30;1954:61;1978:15;2002:7;1996:3;:13;1954:61;;2011:3;1954:15;:61::i;:::-;1921:94;;2040:10;:222;;2175:87;2205:19;2226:18;2246:9;2257:4;2175:29;:87::i;:::-;2040:222;;;2069:87;2099:18;2119:19;2140:9;2151:4;2069:29;:87::i;:::-;2029:233;;2306:8;2280:22;:34;2276:336;;2335:18;2316:37;;2276:336;;;2407:205;2468:19;2509:9;2540:22;2584:10;2407:39;:205::i;:::-;2388:224;;2276:336;1894:1354;;;;2655:10;:224;;2791:88;2821:19;2842:18;2862:9;2873:5;2791:29;:88::i;:::-;2655:224;;;2684:88;2714:18;2734:19;2755:9;2766:5;2684:29;:88::i;:::-;2643:236;;2926:9;2906:15;2905:16;;2897:38;2893:344;;2956:18;2937:37;;2893:344;;;3028:209;3090:19;3131:9;3171:15;3170:16;;3209:10;3028:40;:209::i;:::-;3009:228;;2893:344;-1:-1:-1;;;;;3269:38:15;;;;;;;3358:732;;;;3399:3;:14;;;;;3406:7;3399:14;:145;;3459:85;3489:16;3507:19;3528:9;3539:4;3459:29;:85::i;:::-;3399:145;;;3432:8;3399:145;3388:156;;3570:3;:15;;;;;3578:7;3577:8;3570:15;:148;;3632:86;3662:16;3680:19;3701:9;3712:5;3632:29;:86::i;:::-;3570:148;;;3604:9;3570:148;3558:160;;3358:732;;;3760:3;:14;;;;;3767:7;3760:14;:145;;3820:85;3850:19;3871:16;3889:9;3900:4;3820:29;:85::i;:::-;3760:145;;;3793:8;3760:145;3749:156;;3931:3;:15;;;;;3939:7;3938:8;3931:15;:148;;3993:86;4023:19;4044:16;4062:9;4073:5;3993:29;:86::i;:::-;3931:148;;;3965:9;3931:148;3919:160;;3358:732;4180:7;4179:8;:49;;;;;4212:15;4211:16;;4191:9;:37;4179:49;4175:117;;;4265:15;4264:16;;4244:37;;4175:117;4306:7;:49;;;;;4337:18;-1:-1:-1;;;;;4317:38:15;:16;-1:-1:-1;;;;;4317:38:15;;;4306:49;4302:322;;;4503:8;4484:15;4476:35;4464:47;;4302:322;;;4554:59;4580:8;4590:7;4554:59;;4605:7;4599:3;:13;4554:59;;:25;:59::i;:::-;4542:71;;4302:322;1391:3239;;;;;;;;;;;;;:::o;924:121:13:-;976:8;-1:-1:-1;;;1004:1:13;:10;996:19;;;;;;-1:-1:-1;1036:1:13;924:121::o;1573:120:12:-;1662:5;;;1657:16;;;;1629:8;1678:6;;;1657:28;1649:37;;;;;1276:120;1365:5;;;1360:16;;;;1332:8;1381:6;;;1360:28;1352:37;;;;;1152:414:23;1237:22;1269:21;1300:28;1338;1376:25;1411:32;1453:24;1487:16;1542:4;-1:-1:-1;;;;;1527:26:23;;1554:4;1527:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1527:32:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1527:32:23;;-1:-1:-1;1527:32:23;;-1:-1:-1;1527:32:23;-1:-1:-1;1527:32:23;-1:-1:-1;1527:32:23;-1:-1:-1;1527:32:23;;-1:-1:-1;1527:32:23;-1:-1:-1;1152:414:23;;;;;;;;;;;:::o;383:236:11:-;445:9;474:1;470;:5;;;466:147;;;523:1;-1:-1:-1;;;;;499:25:11;517:1;516:2;;504:1;:15;500:19;;;-1:-1:-1;;;;;499:25:11;;491:40;;;;;-1:-1:-1;;;491:40:11;;;;;;;;;;;;-1:-1:-1;;;491:40:11;;;;;;;;;;;;;;;466:147;;;594:1;-1:-1:-1;;;;;570:25:11;587:1;575;:14;571:18;;;-1:-1:-1;;;;;570:25:11;;;562:40;;;;;-1:-1:-1;;;562:40:11;;;;;;;;;;;;-1:-1:-1;;;562:40:11;;;;;;;;;;;;;;4361:4281:16;4434:10;824;-1:-1:-1;;;;;4563:30:16;;;;;;:63;;-1:-1:-1;1004:49:16;-1:-1:-1;;;;;4597:29:16;;;4563:63;4555:77;;;;;-1:-1:-1;;;4555:77:16;;;;;;;;;;;;-1:-1:-1;;;4555:77:16;;;;;;;;;;;;;;;-1:-1:-1;;;;;4683:2:16;4658:27;;;;-1:-1:-1;;;;;4788:41:16;;4785:1;4781:49;4878:9;;;4951:18;4945:25;;4942:1;4938:33;5019:9;;;5092:10;5086:17;;5083:1;5079:25;5152:9;;;5225:6;5219:13;;5216:1;5212:21;5281:9;;;5354:4;5348:11;;5345:1;5341:19;;;5408:9;;;5481:3;5475:10;;5472:1;5468:18;5534:9;;;5601:10;;;5598:1;5594:18;;;5660:9;;;;5720:10;;;4991;;5124;;;5253;;;5380;5506;;;5632;5750;5791:3;5784:10;;5780:79;;5816:3;5810;:9;5800:5;:20;;5796:24;;5780:79;;;5855:3;5849;:9;5839:5;:20;;5835:24;;5780:79;5958:9;;;5953:3;5949:19;;;5990:11;;;;6062:9;;;;6127;;6118:19;;;6159:11;;;6231:9;6296;;6287:19;;;6328:11;;;6400:9;6465;;6456:19;;;6497:11;;;6569:9;6634;;6625:19;;;6666:11;;;6738:9;6803;;6794:19;;;6835:11;;;6907:9;6972;;6963:19;;;7004:11;;;7076:9;7141;;7132:19;;;7173:11;;;7245:9;7310;;7301:19;;;7342:11;;;7414:9;7479;;7470:19;;;7511:11;;;7583:9;7648;;7639:19;;;7680:11;;;7752:9;7817;;7808:19;;;7849:11;;;7921:9;7986;;7977:19;;;8018:11;;;;8090:9;;;;8155;;8146:19;;;;;5958:9;-1:-1:-1;;5886:17:16;;5908:2;5885:25;6033:10;;;;;;;6023:21;6202:10;;;;;;;6192:21;;;;6371:10;;;;;;;6361:21;;;;6540:10;;;;;;;6530:21;;;;6709:10;;;;;;;6699:21;;;;6878:10;;;;;;;6868:21;;;;7047:10;;;;;;;7037:21;7216:10;;;;;;;7206:21;7385:10;;;;;;;7375:21;7554:10;;;;;;;7544:21;7723:10;;;;;;;7713:21;7892:10;;;;;;;7882:21;8061:10;;;;;;;8051:21;8230:10;;;;;;;8220:21;8292:24;8284:32;;-1:-1:-1;;8368:53:16;;5900:3;8367:62;;;;8478:39;8462:55;;8461:64;;8544:17;;;;;;;;;:91;;8604:12;-1:-1:-1;;;;;8574:42:16;:26;8593:6;8574:18;:26::i;:::-;-1:-1:-1;;;;;8574:42:16;;;:61;;8628:7;8574:61;;;8619:6;8574:61;8544:91;;;8564:7;8544:91;8537:98;4361:4281;-1:-1:-1;;;;;;;;;4361:4281:16:o;726:349:24:-;839:14;916:138;964:7;993:43;1016:6;1024;1032:3;993:22;:43::i;:::-;916:26;:138::i;3412:416:20:-;3491:7;3533:6;3518;3527:2;3518:11;:21;;3510:52;;;;;-1:-1:-1;;;3510:52:20;;;;;;;;;;;;-1:-1:-1;;;3510:52:20;;;;;;;;;;;;;;;3597:6;3606:2;3597:11;3580:6;:13;:28;;3572:62;;;;;-1:-1:-1;;;3572:62:20;;;;;;;;;;;;-1:-1:-1;;;3572:62:20;;;;;;;;;;;;;;;-1:-1:-1;3722:30:20;3738:4;3722:30;3716:37;-1:-1:-1;;;3712:71:20;;;3412:416::o;3834:365::-;3912:6;3952;3938;3947:1;3938:10;:20;;3930:50;;;;;-1:-1:-1;;;3930:50:20;;;;;;;;;;;;-1:-1:-1;;;3930:50:20;;;;;;;;;;;;;;;4015:6;4024:1;4015:10;3998:6;:13;:27;;3990:60;;;;;-1:-1:-1;;;3990:60:20;;;;;;;;;;;;-1:-1:-1;;;3990:60:20;;;;;;;;;;;;;;;-1:-1:-1;4127:29:20;4143:3;4127:29;4121:36;;3834:365::o;399:3007::-;521:12;569:7;553;563:2;553:12;:23;;545:50;;;;;-1:-1:-1;;;545:50:20;;;;;;;;;;;;-1:-1:-1;;;545:50:20;;;;;;;;;;;;;;;633:6;622:7;613:6;:16;:26;;605:53;;;;;-1:-1:-1;;;605:53:20;;;;;;;;;;;;-1:-1:-1;;;605:53:20;;;;;;;;;;;;;;;702:7;693:6;:16;676:6;:13;:33;;668:63;;;;;-1:-1:-1;;;668:63:20;;;;;;;;;;;;-1:-1:-1;;;668:63:20;;;;;;;;;;;;;;;742:22;805:15;;837:2099;;;;3089:4;3083:11;3070:24;;3287:1;3276:9;3269:20;3339:4;3328:9;3324:20;3318:4;3311:34;798:2565;;837:2099;1031:4;1025:11;1012:24;;1726:2;1717:7;1713:16;2128:9;2121:17;2115:4;2111:28;2099:9;2088;2084:25;2080:60;2180:7;2176:2;2172:16;2448:6;2434:9;2427:17;2421:4;2417:28;2405:9;2397:6;2393:22;2389:57;2385:70;2210:461;2485:3;2481:2;2478:11;2210:461;;;2639:9;;2628:21;;2530:4;2522:13;;;;2566;2210:461;;;-1:-1:-1;;2693:26:20;;;2913:2;2896:11;-1:-1:-1;;2892:25:20;2886:4;2879:39;-1:-1:-1;798:2565:20;-1:-1:-1;3390:9:20;399:3007;-1:-1:-1;;;;399:3007:20:o;204:246:23:-;292:21;;:::i;:::-;356:4;-1:-1:-1;;;;;341:24:23;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;341:26:23;325:43;;:6;;;;:43;;;;415:28;;-1:-1:-1;;;415:28:23;;;;-1:-1:-1;;;;;415:26:23;;;;;:28;;;;;;;;;;;;;;:26;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;415:28:23;;;;;;;378:65;;;;;;394:12;;;378:65;;;;-1:-1:-1;;;;;378:65:23;;;379:2;204:246;-1:-1:-1;204:246:23:o;4690:432:25:-;4848:18;4869:10;:182;;4997:10;-1:-1:-1;;;;;4980:27:25;:14;-1:-1:-1;;;;;4980:27:25;;:71;;;;-1:-1:-1;1004:49:16;-1:-1:-1;;;;;5011:40:25;;;4980:71;4869:182;;;4911:10;-1:-1:-1;;;;;4894:27:25;:14;-1:-1:-1;;;;;4894:27:25;;:71;;;;-1:-1:-1;824:10:16;-1:-1:-1;;;;;4925:40:25;;;4894:71;4848:203;;5069:13;5061:54;;;;;-1:-1:-1;;;5061:54:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:432;;;;:::o;460:149:23:-;544:5;583:4;-1:-1:-1;;;;;568:32:23;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;568:34:23;;460:149;-1:-1:-1;;460:149:23:o;619:133::-;687:7;728:4;-1:-1:-1;;;;;713:30:23;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;762:380;943:10;955:16;990:145;1047:11;1072:4;1090:11;1115:10;990:43;:145::i;:::-;983:152;;;;762:380;;;;;;;:::o;1362:2580:16:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;-1:-1:-1;644:9:16;1550:28;;;1542:42;;;;;-1:-1:-1;;;1542:42:16;;;;;;;;;;;;-1:-1:-1;;;1542:42:16;;;;;;;;;;;;;;;1595:13;1621:3;1611:13;;:93;;-1:-1:-1;;;1611:93:16;;;1632:34;1611:93;1595:109;;;-1:-1:-1;1728:3:16;1718:13;;:18;1714:83;;1755:34;1747:42;1794:3;1746:51;1714:83;1821:3;1811:13;;:18;1807:83;;1848:34;1840:42;1887:3;1839:51;1807:83;1914:3;1904:13;;:18;1900:83;;1941:34;1933:42;1980:3;1932:51;1900:83;2007:4;1997:14;;:19;1993:84;;2035:34;2027:42;2074:3;2026:51;1993:84;2101:4;2091:14;;:19;2087:84;;2129:34;2121:42;2168:3;2120:51;2087:84;2195:4;2185:14;;:19;2181:84;;2223:34;2215:42;2262:3;2214:51;2181:84;2289:4;2279:14;;:19;2275:84;;2317:34;2309:42;2356:3;2308:51;2275:84;2383:5;2373:15;;:20;2369:85;;2412:34;2404:42;2451:3;2403:51;2369:85;2478:5;2468:15;;:20;2464:85;;2507:34;2499:42;2546:3;2498:51;2464:85;2573:5;2563:15;;:20;2559:85;;2602:34;2594:42;2641:3;2593:51;2559:85;2668:5;2658:15;;:20;2654:85;;2697:34;2689:42;2736:3;2688:51;2654:85;2763:6;2753:16;;:21;2749:86;;2793:34;2785:42;2832:3;2784:51;2749:86;2859:6;2849:16;;:21;2845:86;;2889:34;2881:42;2928:3;2880:51;2845:86;2955:6;2945:16;;:21;2941:86;;2985:34;2977:42;3024:3;2976:51;2941:86;3051:6;3041:16;;:21;3037:86;;3081:34;3073:42;3120:3;3072:51;3037:86;3147:7;3137:17;;:22;3133:86;;3178:33;3170:41;3216:3;3169:50;3133:86;3243:7;3233:17;;:22;3229:85;;3274:32;3266:40;3311:3;3265:49;3229:85;3338:7;3328:17;;:22;3324:83;;3369:30;3361:38;3404:3;3360:47;3324:83;3431:7;3421:17;;:22;3417:78;;3462:25;3454:33;3492:3;3453:42;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;-1:-1:-1;;3528:25:16;;;;;;3520:33;;3506:47;3912:7;3903:5;:17;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:10:-;861:14;;;-1:-1:-1;;1368:1:10;1365;1358:20;1400:9;;;;-1:-1:-1;1451:13:10;;;1435:14;;;;1431:34;;-1:-1:-1;1547:10:10;1543:179;;1595:1;1581:11;:15;1573:24;;;;;;-1:-1:-1;1648:23:10;;;;-1:-1:-1;1698:13:10;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2560:12;2575;;;:26;;2695:22;;;;;3498:1;3479;:15;;3478:21;;3725:17;;;3721:21;;3714:28;3783:17;;;3779:21;;3772:28;3842:17;;;3838:21;;3831:28;3901:17;;;3897:21;;3890:28;3960:17;;;3956:21;;3949:28;4020:17;;;4016:21;;;4009:28;3067:12;;;;3063:23;;;3088:1;3059:31;2337:20;;;2326:32;;;3118:12;;;;2380:21;;;;2823:16;;;;3109:21;;;;4484:11;;;;;-1:-1:-1;;749:3776:10;;;;;:::o;8727:532:14:-;8892:15;8939:13;-1:-1:-1;;;;;8923:29:14;:13;-1:-1:-1;;;;;8923:29:14;;8919:98;;;8988:13;;9003;8919:98;9047:7;:205;;9177:75;9193:9;-1:-1:-1;;;;;9177:75:14;9220:13;9204;:29;-1:-1:-1;;;;;9177:75:14;-1:-1:-1;;;9177:15:14;:75::i;:::-;9047:205;;;9073:85;9099:9;-1:-1:-1;;;;;9073:85:14;9126:13;9110;:29;-1:-1:-1;;;;;9073:85:14;-1:-1:-1;;;9073:25:14;:85::i;:::-;9028:224;;8727:532;;;;;;;:::o;7493:779::-;7658:15;7705:13;-1:-1:-1;;;;;7689:29:14;:13;-1:-1:-1;;;;;7689:29:14;;7685:98;;;7754:13;;7769;7685:98;-1:-1:-1;;;;;;;309:2:9;7815:45:14;;;;-1:-1:-1;;;;;7891:29:14;;;7870:50;;;7939:17;;7931:26;;;;;;7987:7;:278;;8252:13;-1:-1:-1;;;;;8195:70:14;:54;8211:10;8223;8235:13;-1:-1:-1;;;;;8195:54:14;:15;:54::i;:::-;:70;;;;;;7987:278;;;8013:163;8059:64;8085:10;8097;8109:13;-1:-1:-1;;;;;8059:64:14;:25;:64::i;:::-;8145:13;-1:-1:-1;;;;;8013:163:14;:24;:163::i;:::-;7968:297;7493:779;-1:-1:-1;;;;;;;7493:779:14:o;5299:550::-;5467:16;5514:1;5503:8;-1:-1:-1;;;;;5503:12:14;;5495:21;;;;;;5546:1;5534:9;-1:-1:-1;;;;;5534:13:14;;5526:22;;;;;;5644:10;:198;;5766:76;5806:8;5816:9;5827:8;5837:4;5766:39;:76::i;5644:198::-;5673:74;5711:8;5721:9;5732:8;5742:4;5673:37;:74::i;6395:550::-;6565:16;6612:1;6601:8;-1:-1:-1;;;;;6601:12:14;;6593:21;;;;;;6644:1;6632:9;-1:-1:-1;;;;;6632:13:14;;6624:22;;;;;;6736:10;:202;;6862:76;6900:8;6910:9;6921;6932:5;6862:37;:76::i;6736:202::-;6765:78;6805:8;6815:9;6826;6837:5;6765:39;:78::i;4807:315:10:-;4929:14;4964:25;4971:1;4974;4977:11;4964:6;:25::i;:::-;4955:34;;5031:1;5016:11;5003:25;;;;;5013:1;5010;5003:25;:29;4999:117;;;-1:-1:-1;;5056:6:10;:26;5048:35;;;;;;5097:8;;4807:315;;;;;:::o;784:274:22:-;901:14;;:::i;:::-;940:6;-1:-1:-1;;;;;931:15:22;:6;-1:-1:-1;;;;;931:15:22;;927:56;;;968:6;;976;927:56;-1:-1:-1;1000:51:22;;;;;;;;-1:-1:-1;;;;;1000:51:22;;;;;;;;;;;;;;;;;;;;;;;784:274::o;1305:512::-;1389:12;1434:3;:10;;;-1:-1:-1;;;;;1421:23:22;:3;:10;;;-1:-1:-1;;;;;1421:23:22;;1413:32;;;;;;-1:-1:-1;1668:10:22;;1680;;;;;1692:7;;;;;1657:43;;-1:-1:-1;;;;;1657:43:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1647:54;;;;;;-1:-1:-1;;;;;;1539:229:22;;;;;;;-1:-1:-1;;1539:229:22;;;;;;;;;;;;241:66;1539:229;;;;;;;;;;;;;;;;;;;;;;;;;1508:278;;;;;;1305:512::o;1716:1983:28:-;1881:10;;1958:11;1881:10;1999:18;;;;;;;;;;;;;;1980:37;;2038:1;2031:4;:8;;;:35;;;;;2050:11;2043:18;;:4;:18;;;;;;;;:23;;;;2031:35;2027:53;;;-1:-1:-1;;2068:12:28;2027:53;2130:3;2126:1567;;;2150:13;2165:12;2181:20;2190:10;2181:8;:20::i;:::-;2361:24;;;-1:-1:-1;;;2361:24:28;;2318:1;2361:24;;;;;;;;;2149:52;;-1:-1:-1;2149:52:28;;-1:-1:-1;2318:11:28;;;;2297:33;;-1:-1:-1;;2297:33:28;;2282:12;;2297:33;;-1:-1:-1;;;;;2361:15:28;;;;;:24;;;;;;;;;;;;;;:15;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2361:24:28;:31;2539:11;;;;-1:-1:-1;2361:31:28;-1:-1:-1;2539:11:28;2681:170;;2840:11;2829:6;2823:13;;2810:10;:26;2809:42;2681:170;;;2779:11;2740:34;2767:6;2740:26;:34::i;:::-;2731:6;:43;2725:50;;2712:10;:63;2711:79;2681:170;2674:177;;2126:1567;;;;;;;2980:13;2995:12;3011:24;3020:10;3033:1;3020:14;3011:8;:24::i;:::-;2979:56;;;;3107:12;3140:1;3130:6;3125:11;;:1;:11;;3124:17;3122:20;3107:35;;3156:14;3200:4;3173;-1:-1:-1;;;;;3173:15:28;;3189:7;3173:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3173:24:28;:31;3343:11;;;;-1:-1:-1;3173:31:28;-1:-1:-1;3343:11:28;3485:197;;3671:11;3660:6;3642:15;:24;3636:31;;3619:10;3632:1;3619:14;:48;3618:64;3485:197;;;3588:11;3577:6;3539:35;3567:6;3539:27;:35::i;:::-;:44;3533:51;;3516:10;3529:1;3516:14;:68;3515:84;3485:197;3478:204;;2126:1567;;;;;1716:1983;;;;;;;;;:::o;492:165:17:-;613:9;;;627;;624:16;;609:32;;590:61::o;3597:1153:14:-;3770:7;3947:3;3943:801;;;3966:16;-1:-1:-1;;;;;4023:27:14;;;:180;;4151:52;4167:6;-1:-1:-1;;;4193:9:14;-1:-1:-1;;;;;4151:52:14;:15;:52::i;:::-;4023:180;;;-1:-1:-1;;;;;4077:47:14;;309:2:9;4078:33:14;;;4077:47;;;;;;4023:180;3966:255;-1:-1:-1;4243:43:14;:31;-1:-1:-1;;;;;4243:17:14;;3966:255;4243:21;:31::i;:::-;:41;:43::i;:::-;4236:50;;;;;3943:801;4317:16;-1:-1:-1;;;;;4374:27:14;;;:213;;4525:62;4551:6;-1:-1:-1;;;4577:9:14;-1:-1:-1;;;;;4525:62:14;:25;:62::i;:::-;4374:213;;;4428:70;309:2:9;4453:33:14;;;-1:-1:-1;;;;;4428:70:14;;:24;:70::i;:::-;4317:288;;4639:8;4628;-1:-1:-1;;;;;4628:19:14;;4620:28;;;;;;-1:-1:-1;;;;;4713:19:14;;;;-1:-1:-1;4698:35:14;;1405:1366;1576:7;1711:11;1707:32;;-1:-1:-1;1731:8:14;1724:15;;1707:32;-1:-1:-1;;;;;;;309:2:9;1770:45:14;;;;1826:939;;;;-1:-1:-1;;;;;1882:50:14;;1893:17;;;;1914:6;1893:17;1914:6;1882:38;;;;;:50;1878:323;;;1974:20;;;2016:25;;;2012:174;;2125:60;2151:10;2163:8;-1:-1:-1;;;;;2125:60:14;2173:11;2125:25;:60::i;:::-;2110:76;;;;;;;2012:174;1878:323;;2230:73;2255:10;2267:35;2295:6;2281:8;-1:-1:-1;;;;;2268:21:14;:10;:21;;;;;;;2267:27;:35::i;:::-;2230:24;:73::i;:::-;2215:89;;;;;;1826:939;-1:-1:-1;;;;;2530:50:14;;2541:17;;;;2562:6;2541:17;2562:6;2530:38;;;;;:50;:74;;;;;2597:7;2584:10;:20;2530:74;2522:83;;;;;;2641:20;;;2682:72;:60;2641:10;-1:-1:-1;;;;;2682:60:14;;2641:20;2682:25;:60::i;795:160:28:-;902:9;;910:1;902:9;;;;944:3;937:10;;;;795:160::o;671:731:7:-;733:7;764:1;760;:5;752:14;;;;;;-1:-1:-1;;;781:1:7;:40;777:102;;843:3;837:9;;;;860:8;777:102;897:19;892:1;:24;888:84;;938:2;932:8;;;;954:7;888:84;990:11;985:1;:16;981:76;;1023:2;1017:8;;;;1039:7;981:76;1075:7;1070:1;:12;1066:72;;1104:2;1098:8;;;;1120:7;1066:72;1156:5;1151:1;:10;1147:68;;1183:1;1177:7;;;;1198:6;1147:68;1233:4;1228:1;:9;1224:67;;1259:1;1253:7;;;;1274:6;1224:67;1309:3;1304:1;:8;1300:66;;1334:1;1328:7;;;;1349:6;1300:66;1384:3;1379:1;:8;1375:20;;1394:1;1389:6;671:731;;;:::o;1893:894::-;1956:7;1987:1;1983;:5;1975:14;;;;;;-1:-1:-1;2004:3:7;-1:-1:-1;;;;;2021:21:7;;:25;2017:104;;-1:-1:-1;;2062:8:7;2017:104;;;2107:3;2101:9;;;;;2017:104;2138:16;2134:20;;:24;2130:101;;-1:-1:-1;;2174:7:7;2130:101;;;2218:2;2212:8;;;;;2130:101;2248:16;2244:20;;:24;2240:101;;-1:-1:-1;;2284:7:7;2240:101;;;2328:2;2322:8;;;;;2240:101;2358:16;2354:20;;:24;2350:101;;-1:-1:-1;;2394:7:7;2350:101;;;2438:2;2432:8;;;;;2350:101;2468:15;2464:19;;:23;2460:98;;-1:-1:-1;;2503:6:7;2460:98;;;2546:1;2540:7;;;;;2460:98;2575:3;2571:7;;:11;2567:86;;-1:-1:-1;;2598:6:7;2567:86;;;2641:1;2635:7;;;;;2567:86;2670:3;2666:7;;:11;2662:86;;-1:-1:-1;;2693:6:7;2662:86;;;2736:1;2730:7;;;;;2662:86;2765:3;2761:7;;:11;2757:23;;-1:-1:-1;;2774:6:7;1893:894;;;:::o;435:111:12:-;527:5;;;522:16;;;;514:25;;;;;357:111:13;459:1;-1:-1:-1;;;;;439:21:13;;;;431:30;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:955:29:-;;139:4;127:9;122:3;118:19;114:30;111:2;;;161:5;154;147:20;111:2;198;192:9;240:4;232:6;228:17;311:6;299:10;296:22;275:18;263:10;260:34;257:62;254:2;;;322:9;254:2;349;342:22;382:6;-1:-1:-1;382:6:29;412:23;;444:35;412:23;444:35;:::i;:::-;488:23;;563:2;548:18;;535:32;576:35;535:32;576:35;:::i;:::-;639:2;627:15;;620:32;713:2;698:18;;;685:32;668:15;;;661:57;770:2;755:18;;742:32;818:8;805:22;;793:35;;783:2;;842:1;839;832:12;783:2;874;862:15;;855:32;921:41;957:3;942:19;;921:41;:::i;:::-;915:3;907:6;903:16;896:67;;101:868;;;;:::o;974:138::-;1044:20;;1073:33;1044:20;1073:33;:::i;1117:649::-;;;;;1276:3;1264:9;1255:7;1251:23;1247:33;1244:2;;;1298:6;1290;1283:22;1244:2;1342:9;1329:23;1361:33;1388:5;1361:33;:::i;:::-;1413:5;-1:-1:-1;1470:2:29;1455:18;;1442:32;1512:15;;1505:23;1493:36;;1483:2;;1548:6;1540;1533:22;1483:2;1576:7;-1:-1:-1;1630:2:29;1615:18;;1602:32;;-1:-1:-1;1686:2:29;1671:18;;1658:32;1699:35;1658:32;1699:35;:::i;:::-;1234:532;;;;-1:-1:-1;1234:532:29;;-1:-1:-1;;1234:532:29:o;1771:868::-;;;1909:2;1897:9;1888:7;1884:23;1880:32;1877:2;;;1930:6;1922;1915:22;1877:2;1975:9;1962:23;2004:18;2045:2;2037:6;2034:14;2031:2;;;2066:6;2058;2051:22;2031:2;2109:6;2098:9;2094:22;2084:32;;2154:7;2147:4;2143:2;2139:13;2135:27;2125:2;;2181:6;2173;2166:22;2125:2;2222;2209:16;2244:4;2267:2;2263;2260:10;2257:2;;;2273:9;2257:2;2306:52;2348:2;2329:13;;-1:-1:-1;;2325:27:29;2321:36;;2306:52;:::i;:::-;2293:65;;2381:2;2374:5;2367:17;2421:7;2416:2;2411;2407;2403:11;2399:20;2396:33;2393:2;;;2447:6;2439;2432:22;2393:2;2507;2502;2498;2494:11;2489:2;2482:5;2478:14;2465:45;2530:14;;;2526:23;;2519:39;;;;2534:5;2614:18;;;;2601:32;;-1:-1:-1;;;1867:772:29:o;2644:281::-;;2801:3;2789:9;2780:7;2776:23;2772:33;2769:2;;;2823:6;2815;2808:22;2769:2;2851:68;2911:7;2900:9;2851:68;:::i;3217:244::-;3387:25;;;3443:2;3428:18;;3421:34;3375:2;3360:18;;3342:119::o;3466:177::-;3612:25;;;3600:2;3585:18;;3567:76::o;3648:242::-;3718:2;3712:9;3748:17;;;3795:18;3780:34;;3816:22;;;3777:62;3774:2;;;3842:9;3774:2;3869;3862:22;3692:198;;-1:-1:-1;3692:198:29:o;3895:133::-;-1:-1:-1;;;;;3972:31:29;;3962:42;;3952:2;;4018:1;4015;4008:12;3952:2;3942:86;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1796800","executionCost":"infinite","totalCost":"infinite"},"external":{"quote(address,bool,int256,uint160)":"infinite","quoteExactInput(bytes,uint256)":"infinite","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"infinite","quoteExactOutput(bytes,uint256)":"infinite","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"infinite"},"internal":{"getPool(address,address,uint24)":"infinite"}},"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36","quoteExactInput(bytes,uint256)":"cdca1753","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"c6a5026a","quoteExactOutput(bytes,uint256)":"2f80bb1d","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"bd21704a"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token that would be received\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountIn\":\"The amount of the first token to swap\"}},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountIn\":\"The amount of `tokenIn` that would be needed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in needed for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount in needed for a given exact output but for a swap of a single pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3StaticQuoter.sol\":\"UniswapV3StaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '../interfaces/IPeripheryImmutableState.sol';\\n\\n/// @title Immutable state\\n/// @notice Immutable state used by periphery contracts\\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override factory;\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override WETH9;\\n\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n}\\n\",\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV3QuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport './base/UniV3likeQuoterCore.sol';\\nimport './libraries/TickBitmap.sol';\\n\\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\\n\\n    function getPoolGlobalState(\\n        address pool\\n    ) internal override view returns (GlobalState memory gs) {\\n        gs.fee = uint16(IUniswapV3Pool(pool).fee());\\n        (gs.startPrice, gs.startTick,,,,,) = IUniswapV3Pool(pool).slot0();\\n    }\\n    \\n    function getTickSpacing(\\n        address pool\\n    ) internal override view returns (int24) {\\n        return IUniswapV3Pool(pool).tickSpacing();\\n    }\\n    \\n    function getLiquidity(address pool) internal override view returns (uint128) {\\n        return IUniswapV3Pool(pool).liquidity();\\n    }\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal override view returns (int24 next, bool initialized) {\\n        return TickBitmap.nextInitializedTickWithinOneWord(\\n            poolAddress,\\n            tick,\\n            tickSpacing,\\n            zeroForOne\\n        );\\n    }\\n    \\n    function getTicks(address pool, int24 tick) internal override view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    ) {\\n        return IUniswapV3Pool(pool).ticks(tick);\\n    }\\n\\n}\",\"keccak256\":\"0x3a23b5f9b4d46bd04909b5e5a2562f4600ee2b9bc315e0f16d82a01832ea03d0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/Path.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV3StaticQuoter.sol\\\";\\nimport \\\"./UniV3QuoterCore.sol\\\";\\n\\ncontract UniswapV3StaticQuoter is IUniswapV3StaticQuoter, UniV3QuoterCore {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Path for bytes;\\n\\n    address immutable factory;\\n\\n    constructor(address _factory) {\\n        factory = _factory;\\n    }\\n\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) private view returns (IUniswapV3Pool) {\\n        return\\n            IUniswapV3Pool(\\n                PoolAddress.computeAddress(\\n                    factory,\\n                    PoolAddress.getPoolKey(tokenA, tokenB, fee)\\n                )\\n            );\\n    }\\n\\n    function quoteExactInputSingle(\\n        QuoteExactInputSingleParams memory params\\n    ) public view override returns (uint256 amountOut) {\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        IUniswapV3Pool pool = getPool(\\n            params.tokenIn,\\n            params.tokenOut,\\n            params.fee\\n        );\\n\\n        (int256 amount0, int256 amount1) = quote(\\n            address(pool),\\n            zeroForOne,\\n            params.amountIn.toInt256(),\\n            params.sqrtPriceLimitX96 == 0\\n                ? (\\n                    zeroForOne\\n                        ? TickMath.MIN_SQRT_RATIO + 1\\n                        : TickMath.MAX_SQRT_RATIO - 1\\n                )\\n                : params.sqrtPriceLimitX96\\n        );\\n\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) public view override returns (uint256 amountOut) {\\n        while (true) {\\n            (address tokenIn, address tokenOut, uint24 fee) = path\\n                .decodeFirstPool();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            amountIn = quoteExactInputSingle(\\n                QuoteExactInputSingleParams({\\n                    tokenIn: tokenIn,\\n                    tokenOut: tokenOut,\\n                    fee: fee,\\n                    amountIn: amountIn,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return amountIn;\\n            }\\n        }\\n    }\\n\\n    function quoteExactOutputSingle(\\n        QuoteExactOutputSingleParams memory params\\n    ) public view override returns (uint256 amountIn) {\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        IUniswapV3Pool pool = getPool(\\n            params.tokenIn,\\n            params.tokenOut,\\n            params.fee\\n        );\\n\\n        (int256 amount0, int256 amount1) = quote(\\n            address(pool),\\n            zeroForOne,\\n            -params.amount.toInt256(),\\n            params.sqrtPriceLimitX96 == 0\\n                ? (\\n                    zeroForOne\\n                        ? TickMath.MIN_SQRT_RATIO + 1\\n                        : TickMath.MAX_SQRT_RATIO - 1\\n                )\\n                : params.sqrtPriceLimitX96\\n        );\\n\\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\\n    }\\n\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) public view override returns (uint256 amountIn) {\\n        while (true) {\\n            (address tokenOut, address tokenIn, uint24 fee) = path\\n                .decodeFirstPool();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            amountOut = quoteExactOutputSingle(\\n                QuoteExactOutputSingleParams({\\n                    tokenIn: tokenIn,\\n                    tokenOut: tokenOut,\\n                    fee: fee,\\n                    amount: amountOut,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return amountOut;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x841e347b40136d63a355b293cefbf222e8a0d5cb663cb26d65f107da6be5d4d3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface IUniswapV3StaticQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        QuoteExactInputSingleParams memory params\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in needed for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountOut The amount of the last token that would be received\\n    /// @return amountIn The amount of the first token to swap\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in needed for a given exact output but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount of `tokenIn` that would be needed\\n    function quoteExactOutputSingle(\\n        QuoteExactOutputSingleParams memory params\\n    ) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x230bd4e6249f5a0da0a4996a5d31210af13265c5a158d0885b96a0afa7022e31\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4f72b68d321274361c94ce518806f8fbcbde61e88481a8b1cbeb439e5d9364de\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"quoteExactInput(bytes,uint256)":{"notice":"Returns the amount out received for a given exact input swap without executing the swap"},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount out received for a given exact input but for a swap of a single pool"},"quoteExactOutput(bytes,uint256)":{"notice":"Returns the amount in needed for a given exact output swap without executing the swap"},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount in needed for a given exact output but for a swap of a single pool"}},"version":1}}},"contracts/base/UniV3likeQuoterCore.sol":{"UniV3likeQuoterCore":{"abi":[{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/UniV3likeQuoterCore.sol\":\"UniV3likeQuoterCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IUniV3likeQuoterCore.sol":{"IUniV3likeQuoterCore":{"abi":[{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniV3likeQuoterCore.sol\":\"IUniV3likeQuoterCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IUniswapV3StaticQuoter.sol":{"IUniswapV3StaticQuoter":{"abi":[{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"quoteExactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"quoteExactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"quoteExactInput(bytes,uint256)":{"params":{"amountIn":"The amount of the first token to swap","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountOut":"The amount of the last token that would be received"}},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountOut":"The amount of `tokenOut` that would be received"}},"quoteExactOutput(bytes,uint256)":{"params":{"amountOut":"The amount of the last token that would be received","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountIn":"The amount of the first token to swap"}},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountIn":"The amount of `tokenIn` that would be needed"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quoteExactInput(bytes,uint256)":"cdca1753","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"c6a5026a","quoteExactOutput(bytes,uint256)":"2f80bb1d","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"bd21704a"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token that would be received\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountIn\":\"The amount of the first token to swap\"}},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountIn\":\"The amount of `tokenIn` that would be needed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in needed for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount in needed for a given exact output but for a swap of a single pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniswapV3StaticQuoter.sol\":\"IUniswapV3StaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IUniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface IUniswapV3StaticQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        QuoteExactInputSingleParams memory params\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in needed for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountOut The amount of the last token that would be received\\n    /// @return amountIn The amount of the first token to swap\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in needed for a given exact output but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount of `tokenIn` that would be needed\\n    function quoteExactOutputSingle(\\n        QuoteExactOutputSingleParams memory params\\n    ) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x230bd4e6249f5a0da0a4996a5d31210af13265c5a158d0885b96a0afa7022e31\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"quoteExactInput(bytes,uint256)":{"notice":"Returns the amount out received for a given exact input swap without executing the swap"},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount out received for a given exact input but for a swap of a single pool"},"quoteExactOutput(bytes,uint256)":{"notice":"Returns the amount in needed for a given exact output swap without executing the swap"},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount in needed for a given exact output but for a swap of a single pool"}},"version":1}}},"contracts/libraries/TickBitmap.sol":{"TickBitmap":{"abi":[],"devdoc":{"details":"The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.","kind":"dev","methods":{},"title":"Packed tick initialized state library","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a1e5ad76c600b86a76b1d414df7840b9bb7837ca0d04262603788c84b8fe4c564736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x1E5AD76C600B86A76B1D41 0x4D 0xF7 DUP5 SIGNEXTEND SWAP12 0xB7 DUP4 PUSH29 0xA0D04262603788C84B8FE4C564736F6C63430007060033000000000000 ","sourceMap":"440:3261:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a1e5ad76c600b86a76b1d414df7840b9bb7837ca0d04262603788c84b8fe4c564736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x1E5AD76C600B86A76B1D41 0x4D 0xF7 DUP5 SIGNEXTEND SWAP12 0xB7 DUP4 PUSH29 0xA0D04262603788C84B8FE4C564736F6C63430007060033000000000000 ","sourceMap":"440:3261:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"nextInitializedTickWithinOneWord(address,int24,int24,bool)":"infinite","position(int24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Packed tick initialized state library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Stores a packed mapping of tick index to its initialized state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TickBitmap.sol\":\"TickBitmap\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4f72b68d321274361c94ce518806f8fbcbde61e88481a8b1cbeb439e5d9364de\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Stores a packed mapping of tick index to its initialized state","version":1}}}}}}