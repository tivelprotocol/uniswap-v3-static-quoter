{"id":"77cb21de6811612a38c60a4bc874e150","_format":"hh-sol-build-info-1","solcVersion":"0.7.6","solcLongVersion":"0.7.6+commit.7338295f","input":{"language":"Solidity","sources":{"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"},"@uniswap/v3-core/contracts/libraries/BitMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        r = 255;\n        if (x & type(uint128).max > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & type(uint64).max > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & type(uint32).max > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & type(uint16).max > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & type(uint8).max > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"},"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, 'LS');\n        } else {\n            require((z = x + uint128(y)) >= x, 'LA');\n        }\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './FullMath.sol';\nimport './UnsafeMath.sol';\nimport './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1)\n                    // always fits in 160 bits\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n            }\n\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n            uint256 denominator = numerator1 - product;\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            return uint256(sqrtPX96).add(quotient).toUint160();\n        } else {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return\n            roundUp\n                ? UnsafeMath.divRoundingUp(\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                    sqrtRatioAX96\n                )\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            roundUp\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        return\n            liquidity < 0\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        return\n            liquidity < 0\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/SwapMath.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n        bool exactIn = amountRemaining >= 0;\n\n        if (exactIn) {\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n            amountIn = zeroForOne\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    amountRemainingLessFee,\n                    zeroForOne\n                );\n        } else {\n            amountOut = zeroForOne\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    uint256(-amountRemaining),\n                    zeroForOne\n                );\n        }\n\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n        // get the input/output amounts\n        if (zeroForOne) {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n        } else {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n        }\n\n        // cap the output amount to not exceed the remaining output amount\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\n            amountOut = uint256(-amountRemaining);\n        }\n\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n            // we didn't reach the target, so take the remainder of the maximum input as fee\n            feeAmount = uint256(amountRemaining) - amountIn;\n        } else {\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n        }\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"},"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '../interfaces/IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"},"contracts/base/UniV3likeQuoterCore.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\nimport '../interfaces/IUniV3likeQuoterCore.sol';\n\n\nabstract contract UniV3likeQuoterCore {\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    function quote(\n        address poolAddress,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) public virtual view returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\n        bool exactInput = amountSpecified > 0;\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\n            poolAddress,\n            zeroForOne,\n            amountSpecified,\n            sqrtPriceLimitX96\n        );\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\n                poolAddress,\n                state.tick,\n                tickSpacing,\n                zeroForOne\n            );\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                fee\n            );\n            if (exactInput) {\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\n            } else {\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\n            }\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, run the tick transition\n                if (step.initialized) {\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    if (zeroForOne)\n                        liquidityNet = -liquidityNet;\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n                }\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n    }\n\n    function getInitState(\n        address poolAddress,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\n        ts = getTickSpacing(poolAddress);\n        fee = gs.fee;\n        state = SwapState({\n            amountSpecifiedRemaining: amountSpecified,\n            liquidity: getLiquidity(poolAddress),\n            sqrtPriceX96: gs.startPrice,\n            amountCalculated: 0,\n            tick: gs.startTick\n        });\n    }\n\n    function checkSqrtPriceLimitWithinAllowed(\n        bool zeroForOne,\n        uint160 sqrtPriceLimit, \n        uint160 startPrice\n    ) internal pure {\n        bool withinAllowed = zeroForOne\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\n    }\n\n    function nextInitializedTickAndPrice(\n        address pool, \n        int24 tick, \n        int24 tickSpacing,\n        bool zeroForOne\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n        if (tickNext < TickMath.MIN_TICK)\n            tickNext = TickMath.MIN_TICK;\n        else if (tickNext > TickMath.MAX_TICK)\n            tickNext = TickMath.MAX_TICK;\n        // get the price for the next tick\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\n    }\n\n    function getSqrtRatioTargetX96(\n        bool zeroForOne,\n        uint160 sqrtPriceNextX96,\n        uint160 sqrtPriceLimitX96\n    ) internal pure returns (uint160) {\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\n            ? sqrtPriceLimitX96\n            : sqrtPriceNextX96;\n    }\n\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\n    \n    function getLiquidity(address pool) internal virtual view returns (uint128);\n\n    function getTickSpacing(address pool) internal virtual view returns (int24);\n    \n    function nextInitializedTickWithinOneWord(\n        address poolAddress,\n        int24 tick,\n        int24 tickSpacing,\n        bool zeroForOne\n    ) internal virtual view returns (int24 next, bool initialized);\n    \n    function getTicks(address pool, int24 tick) internal virtual view returns (\n        uint128 liquidityTotal,\n        int128 liquidityDelta,\n        uint256 outerFeeGrowth0Token,\n        uint256 outerFeeGrowth1Token,\n        int56 outerTickCumulative,\n        uint160 outerSecondsPerLiquidity,\n        uint32 outerSecondsSpent,\n        bool initialized\n    );\n\n}"},"contracts/interfaces/IUniswapV3likePool.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n\ninterface IUniswapV3likePool is IUniswapV3Pool {\n    // Ramses Exchange use this one instead of fee()\n    function currentFee() external view returns (uint24);\n}\n"},"contracts/interfaces/IUniswapV3StaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ninterface IUniswapV3StaticQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(\n        bytes memory path,\n        uint256 amountIn\n    ) external view returns (uint256 amountOut);\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        QuoteExactInputSingleParams memory params\n    ) external view returns (uint256 amountOut);\n\n    /// @notice Returns the amount in needed for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountOut The amount of the last token that would be received\n    /// @return amountIn The amount of the first token to swap\n    function quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut\n    ) external view returns (uint256 amountIn);\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in needed for a given exact output but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount of `tokenIn` that would be needed\n    function quoteExactOutputSingle(\n        QuoteExactOutputSingleParams memory params\n    ) external view returns (uint256 amountIn);\n}\n"},"contracts/interfaces/IUniV3likeQuoterCore.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nstruct GlobalState {\n    uint160 startPrice;\n    int24 startTick;\n    uint16 fee;\n}\n\n// the top level state of the swap, the results of which are recorded in storage at the end\nstruct SwapState {\n    // the amount remaining to be swapped in/out of the input/output asset\n    int256 amountSpecifiedRemaining;\n    // the amount already swapped out/in of the output/input asset\n    int256 amountCalculated;\n    // current sqrt(price)\n    uint160 sqrtPriceX96;\n    // the tick associated with the current price\n    int24 tick;\n    // the current liquidity in range\n    uint128 liquidity;\n}\n\nstruct StepComputations {\n    // the price at the beginning of the step\n    uint160 sqrtPriceStartX96;\n    // the next tick to swap to from the current tick in the swap direction\n    int24 tickNext;\n    // whether tickNext is initialized or not\n    bool initialized;\n    // sqrt(price) for the next tick (1/0)\n    uint160 sqrtPriceNextX96;\n    // how much is being swapped in in this step\n    uint256 amountIn;\n    // how much is being swapped out\n    uint256 amountOut;\n    // how much fee is being paid in\n    uint256 feeAmount;\n}\n\ninterface IUniV3likeQuoterCore {\n\n    function quote(\n        address poolAddress,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) external view returns (int256 amount0, int256 amount1);\n\n}"},"contracts/libraries/CustomizedPoolAddress.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary CustomizedPoolAddress {\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(\n        address factory,\n        bytes32 initCodeHash,\n        PoolKey memory key\n    ) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(\n                                abi.encode(key.token0, key.token1, key.fee)\n                            ),\n                            initCodeHash\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"},"contracts/libraries/TickBitmap.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\nimport '../interfaces/IUniswapV3likePool.sol';\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(tick % 256);\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        address poolAddress,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        IUniswapV3likePool pool = IUniswapV3likePool(poolAddress);\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\n                : (compressed - int24(bitPos)) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\n        }\n    }\n}"},"contracts/StaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\nimport \"./UniV3QuoterCore.sol\";\n\ncontract StaticQuoter is UniV3QuoterCore {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    function decodePath(\n        bytes memory path\n    ) external pure returns (Route[] memory) {\n        return abi.decode(path, (Route[]));\n    }\n\n    function _getAmountOutV2(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint8 feePercent,\n        uint8 maxPercent\n    ) internal pure returns (uint256 amountOut) {\n        // INSUFFICIENT_INPUT_AMOUNT\n        if (amountIn == 0) return 0;\n        // INSUFFICIENT_LIQUIDITY\n        if (reserveIn == 0 || reserveOut == 0) return 0;\n        uint256 amountInWithFee = amountIn.mul(feePercent);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(maxPercent).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _getAmountInV2(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint8 feePercent,\n        uint8 maxPercent\n    ) internal pure returns (uint256 amountIn) {\n        // INSUFFICIENT_OUTPUT_AMOUNT\n        if (amountOut == 0) return 0;\n        // INSUFFICIENT_LIQUIDITY\n        if (reserveIn == 0 || reserveOut == 0) return 0;\n        uint256 numerator = reserveIn.mul(amountOut).mul(maxPercent);\n        uint256 denominator = reserveOut.sub(amountOut).mul(feePercent);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    function getAmountOutV2(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint8 feePercent,\n        uint8 maxPercent,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\n            return 0;\n        }\n\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        amountOut = _getAmountOutV2(\n            amountIn,\n            reserveIn,\n            reserveOut,\n            feePercent,\n            maxPercent\n        );\n    }\n\n    function getAmountInV2(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint8 feePercent,\n        uint8 maxPercent,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\n            return 0;\n        }\n\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        amountIn = _getAmountInV2(\n            amountOut,\n            reserveIn,\n            reserveOut,\n            feePercent,\n            maxPercent\n        );\n    }\n\n    function getAmountOutV3(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\n            return 0;\n        }\n\n        bool zeroForOne = tokenIn < tokenOut;\n        (int256 amount0, int256 amount1) = quote(\n            pool,\n            zeroForOne,\n            amountIn.toInt256(),\n            zeroForOne\n                ? TickMath.MIN_SQRT_RATIO + 1\n                : TickMath.MAX_SQRT_RATIO - 1\n        );\n\n        amountOut = zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getAmountInV3(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\n            return 0;\n        }\n\n        bool zeroForOne = tokenIn < tokenOut;\n        (int256 amount0, int256 amount1) = quote(\n            pool,\n            zeroForOne,\n            -amountOut.toInt256(),\n            zeroForOne\n                ? TickMath.MIN_SQRT_RATIO + 1\n                : TickMath.MAX_SQRT_RATIO - 1\n        );\n\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\n    }\n\n    struct Route {\n        address tokenIn;\n        address tokenOut;\n        address pool;\n        uint8 poolType; // 0: v2, 1: v3\n        uint8 feePercent;\n        uint8 maxPercent;\n    }\n\n    function getAmountOut(\n        bytes memory path,\n        uint256 amount\n    ) public view returns (uint256[] memory) {\n        Route[] memory routes = abi.decode(path, (Route[]));\n        uint256[] memory amountOuts = new uint256[](routes.length);\n        for (uint256 i = 0; i < routes.length; i++) {\n            if (routes[i].poolType == 0) {\n                // v2\n                amount = getAmountOutV2(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    routes[i].feePercent,\n                    routes[i].maxPercent,\n                    amount\n                );\n            } else {\n                // v3\n                amount = getAmountOutV3(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    amount\n                );\n            }\n\n            amountOuts[i] = amount;\n        }\n\n        return amountOuts;\n    }\n\n    function getAmountIn(\n        bytes memory path,\n        uint256 amount\n    ) public view returns (uint256[] memory) {\n        Route[] memory routes = abi.decode(path, (Route[]));\n        uint256[] memory amountIns = new uint256[](routes.length);\n        for (uint256 i = routes.length - 1; i >= 0; i--) {\n            if (routes[i].poolType == 0) {\n                // v2\n                amount = getAmountInV2(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    routes[i].feePercent,\n                    routes[i].maxPercent,\n                    amount\n                );\n            } else {\n                // v3\n                amount = getAmountInV3(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    amount\n                );\n            }\n\n            amountIns[i] = amount;\n        }\n\n        return amountIns;\n    }\n}\n"},"contracts/UniswapStaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\nimport \"./UniV3QuoterCore.sol\";\n\ncontract UniswapStaticQuoter is UniV3QuoterCore {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    function decodePath(\n        bytes memory path\n    ) external pure returns (Route[] memory) {\n        return abi.decode(path, (Route[]));\n    }\n\n    function _getAmountOutV2(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint8 feePercent,\n        uint8 maxPercent\n    ) internal pure returns (uint256 amountOut) {\n        // INSUFFICIENT_INPUT_AMOUNT\n        if (amountIn == 0) return 0;\n        // INSUFFICIENT_LIQUIDITY\n        if (reserveIn == 0 || reserveOut == 0) return 0;\n        uint256 amountInWithFee = amountIn.mul(feePercent);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(maxPercent).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _getAmountInV2(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint8 feePercent,\n        uint8 maxPercent\n    ) internal pure returns (uint256 amountIn) {\n        // INSUFFICIENT_OUTPUT_AMOUNT\n        if (amountOut == 0) return 0;\n        // INSUFFICIENT_LIQUIDITY\n        if (reserveIn == 0 || reserveOut == 0) return 0;\n        uint256 numerator = reserveIn.mul(amountOut).mul(maxPercent);\n        uint256 denominator = reserveOut.sub(amountOut).mul(feePercent);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    function getAmountOutV2(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint8 feePercent,\n        uint8 maxPercent,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\n            return 0;\n        }\n\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        amountOut = _getAmountOutV2(\n            amountIn,\n            reserveIn,\n            reserveOut,\n            feePercent,\n            maxPercent\n        );\n    }\n\n    function getAmountInV2(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint8 feePercent,\n        uint8 maxPercent,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\n            return 0;\n        }\n\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        amountIn = _getAmountInV2(\n            amountOut,\n            reserveIn,\n            reserveOut,\n            feePercent,\n            maxPercent\n        );\n    }\n\n    function getAmountOutV3(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\n            return 0;\n        }\n\n        bool zeroForOne = tokenIn < tokenOut;\n        (int256 amount0, int256 amount1) = quote(\n            pool,\n            zeroForOne,\n            amountIn.toInt256(),\n            zeroForOne\n                ? TickMath.MIN_SQRT_RATIO + 1\n                : TickMath.MAX_SQRT_RATIO - 1\n        );\n\n        amountOut = zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getAmountInV3(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\n        (address token0, address token1) = tokenIn < tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\n            return 0;\n        }\n\n        bool zeroForOne = tokenIn < tokenOut;\n        (int256 amount0, int256 amount1) = quote(\n            pool,\n            zeroForOne,\n            -amountOut.toInt256(),\n            zeroForOne\n                ? TickMath.MIN_SQRT_RATIO + 1\n                : TickMath.MAX_SQRT_RATIO - 1\n        );\n\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\n    }\n\n    struct Route {\n        address tokenIn;\n        address tokenOut;\n        address pool;\n        uint8 poolType; // 0: v2, 1: v3\n        uint8 feePercent;\n        uint8 maxPercent;\n    }\n\n    function getAmountOut(\n        bytes memory path,\n        uint256 amount\n    ) public view returns (uint256[] memory) {\n        Route[] memory routes = abi.decode(path, (Route[]));\n        uint256[] memory amountOuts = new uint256[](routes.length);\n        for (uint256 i = 0; i < routes.length; i++) {\n            if (routes[i].poolType == 0) {\n                // v2\n                amount = getAmountOutV2(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    routes[i].feePercent,\n                    routes[i].maxPercent,\n                    amount\n                );\n            } else {\n                // v3\n                amount = getAmountOutV3(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    amount\n                );\n            }\n\n            amountOuts[i] = amount;\n        }\n\n        return amountOuts;\n    }\n\n    function getAmountIn(\n        bytes memory path,\n        uint256 amount\n    ) public view returns (uint256[] memory) {\n        Route[] memory routes = abi.decode(path, (Route[]));\n        uint256[] memory amountIns = new uint256[](routes.length);\n        for (uint256 i = routes.length - 1; i >= 0; i--) {\n            if (routes[i].poolType == 0) {\n                // v2\n                amount = getAmountInV2(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    routes[i].feePercent,\n                    routes[i].maxPercent,\n                    amount\n                );\n            } else {\n                // v3\n                amount = getAmountInV3(\n                    routes[i].tokenIn,\n                    routes[i].tokenOut,\n                    routes[i].pool,\n                    amount\n                );\n            }\n\n            amountIns[i] = amount;\n        }\n\n        return amountIns;\n    }\n}\n"},"contracts/UniswapV2StaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\";\n\ncontract UniswapV2StaticQuoter {\n    using LowGasSafeMath for uint256;\n\n    address immutable factory;\n\n    constructor(address _factory) {\n        factory = _factory;\n    }\n\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        // INSUFFICIENT_INPUT_AMOUNT\n        if (amountIn == 0) return 0;\n        // INSUFFICIENT_LIQUIDITY\n        if (reserveIn == 0 || reserveOut == 0) return 0;\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        // INSUFFICIENT_OUTPUT_AMOUNT\n        if (amountOut == 0) return 0;\n        // INSUFFICIENT_LIQUIDITY\n        if (reserveIn == 0 || reserveOut == 0) return 0;\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\n        (address token0, address token1) = tokenIn > tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\n            return 0;\n        }\n\n        (uint256 reserve0, uint256 reserve1,) = v2pair.getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn > tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        amountOut = _getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\n        (address token0, address token1) = tokenIn > tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\n            return 0;\n        }\n\n        (uint256 reserve0, uint256 reserve1,) = v2pair.getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn > tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        amountIn = _getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n}\n"},"contracts/UniswapV3StaticQuoter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/Path.sol\";\n\nimport \"./libraries/CustomizedPoolAddress.sol\";\nimport \"./interfaces/IUniswapV3StaticQuoter.sol\";\nimport \"./UniV3QuoterCore.sol\";\n\ncontract UniswapV3StaticQuoter is IUniswapV3StaticQuoter, UniV3QuoterCore {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Path for bytes;\n\n    address immutable factory;\n    bytes32 immutable initCodeHash;\n\n    constructor(address _factory, bytes32 _initCodeHash) {\n        factory = _factory;\n        initCodeHash = _initCodeHash;\n    }\n\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3likePool) {\n        return\n            IUniswapV3likePool(\n                CustomizedPoolAddress.computeAddress(\n                    factory,\n                    initCodeHash,\n                    CustomizedPoolAddress.getPoolKey(tokenA, tokenB, fee)\n                )\n            );\n    }\n\n    function quoteExactInputSingle(\n        QuoteExactInputSingleParams memory params\n    ) public view override returns (uint256 amountOut) {\n        bool zeroForOne = params.tokenIn < params.tokenOut;\n        IUniswapV3likePool pool = getPool(\n            params.tokenIn,\n            params.tokenOut,\n            params.fee\n        );\n\n        (int256 amount0, int256 amount1) = quote(\n            address(pool),\n            zeroForOne,\n            params.amountIn.toInt256(),\n            params.sqrtPriceLimitX96 == 0\n                ? (\n                    zeroForOne\n                        ? TickMath.MIN_SQRT_RATIO + 1\n                        : TickMath.MAX_SQRT_RATIO - 1\n                )\n                : params.sqrtPriceLimitX96\n        );\n\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function quoteExactInput(\n        bytes memory path,\n        uint256 amountIn\n    ) public view override returns (uint256 amountOut) {\n        while (true) {\n            (address tokenIn, address tokenOut, uint24 fee) = path\n                .decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            amountIn = quoteExactInputSingle(\n                QuoteExactInputSingleParams({\n                    tokenIn: tokenIn,\n                    tokenOut: tokenOut,\n                    fee: fee,\n                    amountIn: amountIn,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (path.hasMultiplePools()) {\n                path = path.skipToken();\n            } else {\n                return amountIn;\n            }\n        }\n    }\n\n    function quoteExactOutputSingle(\n        QuoteExactOutputSingleParams memory params\n    ) public view override returns (uint256 amountIn) {\n        bool zeroForOne = params.tokenIn < params.tokenOut;\n        IUniswapV3likePool pool = getPool(\n            params.tokenIn,\n            params.tokenOut,\n            params.fee\n        );\n\n        (int256 amount0, int256 amount1) = quote(\n            address(pool),\n            zeroForOne,\n            -params.amount.toInt256(),\n            params.sqrtPriceLimitX96 == 0\n                ? (\n                    zeroForOne\n                        ? TickMath.MIN_SQRT_RATIO + 1\n                        : TickMath.MAX_SQRT_RATIO - 1\n                )\n                : params.sqrtPriceLimitX96\n        );\n\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\n    }\n\n    function quoteExactOutput(\n        bytes memory path,\n        uint256 amountOut\n    ) public view override returns (uint256 amountIn) {\n        while (true) {\n            (address tokenOut, address tokenIn, uint24 fee) = path\n                .decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            amountOut = quoteExactOutputSingle(\n                QuoteExactOutputSingleParams({\n                    tokenIn: tokenIn,\n                    tokenOut: tokenOut,\n                    fee: fee,\n                    amount: amountOut,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (path.hasMultiplePools()) {\n                path = path.skipToken();\n            } else {\n                return amountOut;\n            }\n        }\n    }\n\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountIn\n    ) public view returns (uint256 amountOut) {\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\n        (address token0, address token1) = tokenIn > tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\n            return 0;\n        }\n\n        amountOut = quoteExactInputSingle(\n            QuoteExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                amountIn: amountIn,\n                fee: v3pool.fee(),\n                sqrtPriceLimitX96: 0\n            })\n        );\n    }\n\n    function getAmountIn(\n        address tokenIn,\n        address tokenOut,\n        address pool,\n        uint256 amountOut\n    ) public view returns (uint256 amountIn) {\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\n        (address token0, address token1) = tokenIn > tokenOut\n            ? (tokenIn, tokenOut)\n            : (tokenOut, tokenIn);\n\n        // wrong pool\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\n            return 0;\n        }\n\n        amountIn = quoteExactOutputSingle(\n            QuoteExactOutputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                amount: amountOut,\n                fee: v3pool.fee(),\n                sqrtPriceLimitX96: 0\n            })\n        );\n    }\n}\n"},"contracts/UniV3QuoterCore.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport \"./base/UniV3likeQuoterCore.sol\";\nimport \"./libraries/TickBitmap.sol\";\n\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\n    function _tryGetPoolCurrentFee(\n        address pool\n    ) internal view returns (uint16) {\n        try IUniswapV3likePool(pool).currentFee() returns (uint24 result) {\n            return uint16(result);\n        } catch {\n            return uint16(IUniswapV3likePool(pool).fee());\n        }\n    }\n\n    function getPoolGlobalState(\n        address pool\n    ) internal view override returns (GlobalState memory gs) {\n        gs.fee = _tryGetPoolCurrentFee(pool);\n        (gs.startPrice, gs.startTick, , , , , ) = IUniswapV3likePool(pool)\n            .slot0();\n    }\n\n    function getTickSpacing(\n        address pool\n    ) internal view override returns (int24) {\n        return IUniswapV3likePool(pool).tickSpacing();\n    }\n\n    function getLiquidity(\n        address pool\n    ) internal view override returns (uint128) {\n        return IUniswapV3likePool(pool).liquidity();\n    }\n\n    function nextInitializedTickWithinOneWord(\n        address poolAddress,\n        int24 tick,\n        int24 tickSpacing,\n        bool zeroForOne\n    ) internal view override returns (int24 next, bool initialized) {\n        return\n            TickBitmap.nextInitializedTickWithinOneWord(\n                poolAddress,\n                tick,\n                tickSpacing,\n                zeroForOne\n            );\n    }\n\n    function getTicks(\n        address pool,\n        int24 tick\n    )\n        internal\n        view\n        override\n        returns (\n            uint128 liquidityTotal,\n            int128 liquidityDelta,\n            uint256 outerFeeGrowth0Token,\n            uint256 outerFeeGrowth1Token,\n            int56 outerTickCumulative,\n            uint160 outerSecondsPerLiquidity,\n            uint32 outerSecondsSpent,\n            bool initialized\n        )\n    {\n        return IUniswapV3likePool(pool).ticks(tick);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","start":-1},"type":"Warning"}],"sources":{"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"ast":{"absolutePath":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","exportedSymbols":{"IUniswapV2Pair":[241]},"id":242,"nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"0:24:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":241,"linearizedBaseContracts":[241],"name":"IUniswapV2Pair","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":9,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":9,"src":"72:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2,"name":"address","nodeType":"ElementaryTypeName","src":"72:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":9,"src":"95:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"95:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":9,"src":"120:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6,"name":"uint","nodeType":"ElementaryTypeName","src":"120:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"71:60:0"},"src":"57:75:0"},{"anonymous":false,"id":17,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":17,"src":"152:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"152:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":13,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":17,"src":"174:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"174:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":15,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":17,"src":"194:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":14,"name":"uint","nodeType":"ElementaryTypeName","src":"194:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"151:54:0"},"src":"137:69:0"},{"functionSelector":"06fdde03","id":22,"implemented":false,"kind":"function","modifiers":[],"name":"name","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"225:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":22,"src":"251:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19,"name":"string","nodeType":"ElementaryTypeName","src":"251:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"250:15:0"},"scope":241,"src":"212:54:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":27,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[],"src":"286:2:0"},"returnParameters":{"id":26,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":27,"src":"312:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":24,"name":"string","nodeType":"ElementaryTypeName","src":"312:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"311:15:0"},"scope":241,"src":"271:56:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":32,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"349:2:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":32,"src":"375:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":29,"name":"uint8","nodeType":"ElementaryTypeName","src":"375:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"374:7:0"},"scope":241,"src":"332:50:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":37,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"407:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":37,"src":"433:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":34,"name":"uint","nodeType":"ElementaryTypeName","src":"433:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:6:0"},"scope":241,"src":"387:52:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":44,"src":"463:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"463:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"462:15:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":44,"src":"501:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint","nodeType":"ElementaryTypeName","src":"501:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"500:6:0"},"scope":241,"src":"444:63:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":53,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":53,"src":"531:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"531:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":48,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":53,"src":"546:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":47,"name":"address","nodeType":"ElementaryTypeName","src":"546:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"530:32:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":53,"src":"586:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":50,"name":"uint","nodeType":"ElementaryTypeName","src":"586:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"585:6:0"},"scope":241,"src":"512:80:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":62,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","parameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":62,"src":"615:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":54,"name":"address","nodeType":"ElementaryTypeName","src":"615:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":62,"src":"632:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56,"name":"uint","nodeType":"ElementaryTypeName","src":"632:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"614:29:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":62,"src":"662:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"662:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"661:6:0"},"scope":241,"src":"598:70:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":71,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":71,"src":"691:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"691:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":66,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":71,"src":"703:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65,"name":"uint","nodeType":"ElementaryTypeName","src":"703:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"690:24:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":71,"src":"733:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":68,"name":"bool","nodeType":"ElementaryTypeName","src":"733:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"732:6:0"},"scope":241,"src":"673:66:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":82,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","parameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":82,"src":"766:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":72,"name":"address","nodeType":"ElementaryTypeName","src":"766:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":82,"src":"780:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":74,"name":"address","nodeType":"ElementaryTypeName","src":"780:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":82,"src":"792:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":76,"name":"uint","nodeType":"ElementaryTypeName","src":"792:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"765:38:0"},"returnParameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":82,"src":"822:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":79,"name":"bool","nodeType":"ElementaryTypeName","src":"822:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"821:6:0"},"scope":241,"src":"744:84:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"3644e515","id":87,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"859:2:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":87,"src":"885:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":84,"name":"bytes32","nodeType":"ElementaryTypeName","src":"885:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"884:9:0"},"scope":241,"src":"834:60:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"30adf81f","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"PERMIT_TYPEHASH","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":92,"src":"949:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":89,"name":"bytes32","nodeType":"ElementaryTypeName","src":"949:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"948:9:0"},"scope":241,"src":"899:59:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"7ecebe00","id":99,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":99,"src":"979:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"979:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"978:15:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":99,"src":"1017:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint","nodeType":"ElementaryTypeName","src":"1017:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1016:6:0"},"scope":241,"src":"963:60:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d505accf","id":116,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":116,"src":"1045:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"1045:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":116,"src":"1060:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"1060:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":116,"src":"1077:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":104,"name":"uint","nodeType":"ElementaryTypeName","src":"1077:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":107,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":116,"src":"1089:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint","nodeType":"ElementaryTypeName","src":"1089:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":109,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","scope":116,"src":"1104:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":108,"name":"uint8","nodeType":"ElementaryTypeName","src":"1104:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":111,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":116,"src":"1113:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1113:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":113,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","scope":116,"src":"1124:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1124:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1044:90:0"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"1143:0:0"},"scope":241,"src":"1029:115:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"id":124,"name":"Mint","nodeType":"EventDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":124,"src":"1161:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"1161:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":120,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":124,"src":"1185:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint","nodeType":"ElementaryTypeName","src":"1185:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":122,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":124,"src":"1199:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint","nodeType":"ElementaryTypeName","src":"1199:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1160:52:0"},"src":"1150:63:0"},{"anonymous":false,"id":134,"name":"Burn","nodeType":"EventDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":134,"src":"1229:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":134,"src":"1253:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":127,"name":"uint","nodeType":"ElementaryTypeName","src":"1253:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":130,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":134,"src":"1267:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":129,"name":"uint","nodeType":"ElementaryTypeName","src":"1267:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":132,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":134,"src":"1281:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"1281:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1228:72:0"},"src":"1218:83:0"},{"anonymous":false,"id":148,"name":"Swap","nodeType":"EventDefinition","parameters":{"id":147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":148,"src":"1326:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":135,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":138,"indexed":false,"mutability":"mutable","name":"amount0In","nodeType":"VariableDeclaration","scope":148,"src":"1358:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":137,"name":"uint","nodeType":"ElementaryTypeName","src":"1358:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":140,"indexed":false,"mutability":"mutable","name":"amount1In","nodeType":"VariableDeclaration","scope":148,"src":"1382:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint","nodeType":"ElementaryTypeName","src":"1382:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":142,"indexed":false,"mutability":"mutable","name":"amount0Out","nodeType":"VariableDeclaration","scope":148,"src":"1406:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":141,"name":"uint","nodeType":"ElementaryTypeName","src":"1406:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"amount1Out","nodeType":"VariableDeclaration","scope":148,"src":"1431:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":143,"name":"uint","nodeType":"ElementaryTypeName","src":"1431:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":146,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":148,"src":"1456:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1456:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1316:164:0"},"src":"1306:175:0"},{"anonymous":false,"id":154,"name":"Sync","nodeType":"EventDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"indexed":false,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":154,"src":"1497:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":149,"name":"uint112","nodeType":"ElementaryTypeName","src":"1497:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":152,"indexed":false,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":154,"src":"1515:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":151,"name":"uint112","nodeType":"ElementaryTypeName","src":"1515:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"1496:36:0"},"src":"1486:47:0"},{"functionSelector":"ba9a7a56","id":159,"implemented":false,"kind":"function","modifiers":[],"name":"MINIMUM_LIQUIDITY","nodeType":"FunctionDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"1565:2:0"},"returnParameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":159,"src":"1591:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint","nodeType":"ElementaryTypeName","src":"1591:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1590:6:0"},"scope":241,"src":"1539:58:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"c45a0155","id":164,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"1618:2:0"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":164,"src":"1644:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"1644:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1643:9:0"},"scope":241,"src":"1602:51:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0dfe1681","id":169,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nodeType":"FunctionDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"1673:2:0"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":169,"src":"1699:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1699:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1698:9:0"},"scope":241,"src":"1658:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d21220a7","id":174,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nodeType":"FunctionDefinition","parameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"1728:2:0"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":174,"src":"1754:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":171,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1753:9:0"},"scope":241,"src":"1713:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0902f1ac","id":183,"implemented":false,"kind":"function","modifiers":[],"name":"getReserves","nodeType":"FunctionDefinition","parameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"1788:2:0"},"returnParameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":183,"src":"1814:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":176,"name":"uint112","nodeType":"ElementaryTypeName","src":"1814:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":179,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":183,"src":"1832:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":178,"name":"uint112","nodeType":"ElementaryTypeName","src":"1832:7:0","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":181,"mutability":"mutable","name":"blockTimestampLast","nodeType":"VariableDeclaration","scope":183,"src":"1850:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":180,"name":"uint32","nodeType":"ElementaryTypeName","src":"1850:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1813:63:0"},"scope":241,"src":"1768:109:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5909c0d5","id":188,"implemented":false,"kind":"function","modifiers":[],"name":"price0CumulativeLast","nodeType":"FunctionDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[],"src":"1911:2:0"},"returnParameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":188,"src":"1937:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":185,"name":"uint","nodeType":"ElementaryTypeName","src":"1937:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1936:6:0"},"scope":241,"src":"1882:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5a3d5493","id":193,"implemented":false,"kind":"function","modifiers":[],"name":"price1CumulativeLast","nodeType":"FunctionDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"1977:2:0"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":193,"src":"2003:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint","nodeType":"ElementaryTypeName","src":"2003:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2002:6:0"},"scope":241,"src":"1948:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7464fc3d","id":198,"implemented":false,"kind":"function","modifiers":[],"name":"kLast","nodeType":"FunctionDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"2028:2:0"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":198,"src":"2054:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":195,"name":"uint","nodeType":"ElementaryTypeName","src":"2054:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2053:6:0"},"scope":241,"src":"2014:46:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6a627842","id":205,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":205,"src":"2080:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"2080:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2079:12:0"},"returnParameters":{"id":204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":203,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":205,"src":"2110:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint","nodeType":"ElementaryTypeName","src":"2110:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2109:16:0"},"scope":241,"src":"2066:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"89afcb44","id":214,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":214,"src":"2145:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"2145:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2144:12:0"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":214,"src":"2175:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":209,"name":"uint","nodeType":"ElementaryTypeName","src":"2175:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":214,"src":"2189:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint","nodeType":"ElementaryTypeName","src":"2189:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2174:28:0"},"scope":241,"src":"2131:72:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"022c0d9f","id":225,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"amount0Out","nodeType":"VariableDeclaration","scope":225,"src":"2222:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint","nodeType":"ElementaryTypeName","src":"2222:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"amount1Out","nodeType":"VariableDeclaration","scope":225,"src":"2239:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint","nodeType":"ElementaryTypeName","src":"2239:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":225,"src":"2256:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"2256:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":225,"src":"2268:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":221,"name":"bytes","nodeType":"ElementaryTypeName","src":"2268:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2221:67:0"},"returnParameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"2297:0:0"},"scope":241,"src":"2208:90:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bc25cf77","id":230,"implemented":false,"kind":"function","modifiers":[],"name":"skim","nodeType":"FunctionDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":230,"src":"2317:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"2317:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2316:12:0"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"2337:0:0"},"scope":241,"src":"2303:35:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fff6cae9","id":233,"implemented":false,"kind":"function","modifiers":[],"name":"sync","nodeType":"FunctionDefinition","parameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"2356:2:0"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[],"src":"2367:0:0"},"scope":241,"src":"2343:25:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"485cc955","id":240,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":240,"src":"2394:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"2394:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":240,"src":"2403:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":236,"name":"address","nodeType":"ElementaryTypeName","src":"2403:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2393:18:0"},"returnParameters":{"id":239,"nodeType":"ParameterList","parameters":[],"src":"2420:0:0"},"scope":241,"src":"2374:47:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":242,"src":"26:2397:0"}],"src":"0:2424:0"},"id":0},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","exportedSymbols":{"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683]},"id":264,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":243,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:1"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","file":"./pool/IUniswapV3PoolImmutables.sol","id":244,"nodeType":"ImportDirective","scope":264,"sourceUnit":550,"src":"71:45:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","file":"./pool/IUniswapV3PoolState.sol","id":245,"nodeType":"ImportDirective","scope":264,"sourceUnit":684,"src":"117:40:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","file":"./pool/IUniswapV3PoolDerivedState.sol","id":246,"nodeType":"ImportDirective","scope":264,"sourceUnit":391,"src":"158:47:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","file":"./pool/IUniswapV3PoolActions.sol","id":247,"nodeType":"ImportDirective","scope":264,"sourceUnit":360,"src":"206:42:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","file":"./pool/IUniswapV3PoolOwnerActions.sol","id":248,"nodeType":"ImportDirective","scope":264,"sourceUnit":576,"src":"249:47:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","file":"./pool/IUniswapV3PoolEvents.sol","id":249,"nodeType":"ImportDirective","scope":264,"sourceUnit":510,"src":"297:41:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":251,"name":"IUniswapV3PoolImmutables","nodeType":"UserDefinedTypeName","referencedDeclaration":549,"src":"637:24:1","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolImmutables_$549","typeString":"contract IUniswapV3PoolImmutables"}},"id":252,"nodeType":"InheritanceSpecifier","src":"637:24:1"},{"baseName":{"id":253,"name":"IUniswapV3PoolState","nodeType":"UserDefinedTypeName","referencedDeclaration":683,"src":"667:19:1","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolState_$683","typeString":"contract IUniswapV3PoolState"}},"id":254,"nodeType":"InheritanceSpecifier","src":"667:19:1"},{"baseName":{"id":255,"name":"IUniswapV3PoolDerivedState","nodeType":"UserDefinedTypeName","referencedDeclaration":390,"src":"692:26:1","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolDerivedState_$390","typeString":"contract IUniswapV3PoolDerivedState"}},"id":256,"nodeType":"InheritanceSpecifier","src":"692:26:1"},{"baseName":{"id":257,"name":"IUniswapV3PoolActions","nodeType":"UserDefinedTypeName","referencedDeclaration":359,"src":"724:21:1","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolActions_$359","typeString":"contract IUniswapV3PoolActions"}},"id":258,"nodeType":"InheritanceSpecifier","src":"724:21:1"},{"baseName":{"id":259,"name":"IUniswapV3PoolOwnerActions","nodeType":"UserDefinedTypeName","referencedDeclaration":575,"src":"751:26:1","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolOwnerActions_$575","typeString":"contract IUniswapV3PoolOwnerActions"}},"id":260,"nodeType":"InheritanceSpecifier","src":"751:26:1"},{"baseName":{"id":261,"name":"IUniswapV3PoolEvents","nodeType":"UserDefinedTypeName","referencedDeclaration":509,"src":"783:20:1","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3PoolEvents_$509","typeString":"contract IUniswapV3PoolEvents"}},"id":262,"nodeType":"InheritanceSpecifier","src":"783:20:1"}],"contractDependencies":[359,390,509,549,575,683],"contractKind":"interface","documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"340:265:1","text":"@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"},"fullyImplemented":false,"id":263,"linearizedBaseContracts":[263,509,575,359,390,683,549],"name":"IUniswapV3Pool","nodeType":"ContractDefinition","nodes":[],"scope":264,"src":"605:203:1"}],"src":"45:764:1"},"id":1},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","exportedSymbols":{"IUniswapV3PoolActions":[359]},"id":360,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":265,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":266,"nodeType":"StructuredDocumentation","src":"71:102:2","text":"@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"},"fullyImplemented":false,"id":359,"linearizedBaseContracts":[359],"name":"IUniswapV3PoolActions","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"211:206:2","text":"@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"},"functionSelector":"f637731d","id":272,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":272,"src":"442:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":268,"name":"uint160","nodeType":"ElementaryTypeName","src":"442:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"441:22:2"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[],"src":"472:0:2"},"scope":359,"src":"422:51:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":273,"nodeType":"StructuredDocumentation","src":"479:1029:2","text":"@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"},"functionSelector":"3c8a7d8d","id":290,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":290,"src":"1536:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":274,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":277,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":290,"src":"1563:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":276,"name":"int24","nodeType":"ElementaryTypeName","src":"1563:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":279,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":290,"src":"1588:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":278,"name":"int24","nodeType":"ElementaryTypeName","src":"1588:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":290,"src":"1613:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":280,"name":"uint128","nodeType":"ElementaryTypeName","src":"1613:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":290,"src":"1637:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":282,"name":"bytes","nodeType":"ElementaryTypeName","src":"1637:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1526:136:2"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":290,"src":"1681:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":290,"src":"1698:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":287,"name":"uint256","nodeType":"ElementaryTypeName","src":"1698:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:34:2"},"scope":359,"src":"1513:202:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"1721:1053:2","text":"@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"},"functionSelector":"4f1eb3d8","id":308,"implemented":false,"kind":"function","modifiers":[],"name":"collect","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":308,"src":"2805:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":308,"src":"2832:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":294,"name":"int24","nodeType":"ElementaryTypeName","src":"2832:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":308,"src":"2857:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":296,"name":"int24","nodeType":"ElementaryTypeName","src":"2857:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"amount0Requested","nodeType":"VariableDeclaration","scope":308,"src":"2882:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":298,"name":"uint128","nodeType":"ElementaryTypeName","src":"2882:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":301,"mutability":"mutable","name":"amount1Requested","nodeType":"VariableDeclaration","scope":308,"src":"2916:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":300,"name":"uint128","nodeType":"ElementaryTypeName","src":"2916:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2795:151:2"},"returnParameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":308,"src":"2965:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":303,"name":"uint128","nodeType":"ElementaryTypeName","src":"2965:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":308,"src":"2982:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":305,"name":"uint128","nodeType":"ElementaryTypeName","src":"2982:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2964:34:2"},"scope":359,"src":"2779:220:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"3005:631:2","text":"@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"},"functionSelector":"a34123a7","id":322,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nodeType":"FunctionDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":322,"src":"3664:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":310,"name":"int24","nodeType":"ElementaryTypeName","src":"3664:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":322,"src":"3689:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":312,"name":"int24","nodeType":"ElementaryTypeName","src":"3689:5:2","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":315,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":322,"src":"3714:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":314,"name":"uint128","nodeType":"ElementaryTypeName","src":"3714:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"3654:80:2"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":322,"src":"3753:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":317,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":322,"src":"3770:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:34:2"},"scope":359,"src":"3641:146:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":323,"nodeType":"StructuredDocumentation","src":"3793:1015:2","text":"@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"},"functionSelector":"128acb08","id":340,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nodeType":"FunctionDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":340,"src":"4836:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":324,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":327,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":340,"src":"4863:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":326,"name":"bool","nodeType":"ElementaryTypeName","src":"4863:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":340,"src":"4888:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":328,"name":"int256","nodeType":"ElementaryTypeName","src":"4888:6:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":331,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":340,"src":"4920:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":330,"name":"uint160","nodeType":"ElementaryTypeName","src":"4920:7:2","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":340,"src":"4955:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":332,"name":"bytes","nodeType":"ElementaryTypeName","src":"4955:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4826:154:2"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":340,"src":"4999:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":335,"name":"int256","nodeType":"ElementaryTypeName","src":"4999:6:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":340,"src":"5015:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":337,"name":"int256","nodeType":"ElementaryTypeName","src":"5015:6:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4998:32:2"},"scope":359,"src":"4813:218:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"5037:657:2","text":"@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"},"functionSelector":"490e6cbc","id":352,"implemented":false,"kind":"function","modifiers":[],"name":"flash","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":352,"src":"5723:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"5723:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":352,"src":"5750:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"5750:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":352,"src":"5775:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"5775:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":352,"src":"5800:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":348,"name":"bytes","nodeType":"ElementaryTypeName","src":"5800:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5713:112:2"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"5834:0:2"},"scope":359,"src":"5699:136:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":353,"nodeType":"StructuredDocumentation","src":"5841:367:2","text":"@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"},"functionSelector":"32148f67","id":358,"implemented":false,"kind":"function","modifiers":[],"name":"increaseObservationCardinalityNext","nodeType":"FunctionDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":355,"mutability":"mutable","name":"observationCardinalityNext","nodeType":"VariableDeclaration","scope":358,"src":"6257:33:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":354,"name":"uint16","nodeType":"ElementaryTypeName","src":"6257:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6256:35:2"},"returnParameters":{"id":357,"nodeType":"ParameterList","parameters":[],"src":"6300:0:2"},"scope":359,"src":"6213:88:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":360,"src":"173:6130:2"}],"src":"45:6259:2"},"id":2},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","exportedSymbols":{"IUniswapV3PoolDerivedState":[390]},"id":391,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":361,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"71:222:3","text":"@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."},"fullyImplemented":false,"id":390,"linearizedBaseContracts":[390],"name":"IUniswapV3PoolDerivedState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":363,"nodeType":"StructuredDocumentation","src":"336:1045:3","text":"@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"},"functionSelector":"883bdbfd","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"observe","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"secondsAgos","nodeType":"VariableDeclaration","scope":375,"src":"1403:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_calldata_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":364,"name":"uint32","nodeType":"ElementaryTypeName","src":"1403:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":365,"nodeType":"ArrayTypeName","src":"1403:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"src":"1402:31:3"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"tickCumulatives","nodeType":"VariableDeclaration","scope":375,"src":"1481:30:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[]"},"typeName":{"baseType":{"id":368,"name":"int56","nodeType":"ElementaryTypeName","src":"1481:5:3","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":369,"nodeType":"ArrayTypeName","src":"1481:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_storage_ptr","typeString":"int56[]"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128s","nodeType":"VariableDeclaration","scope":375,"src":"1513:51:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":371,"name":"uint160","nodeType":"ElementaryTypeName","src":"1513:7:3","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":372,"nodeType":"ArrayTypeName","src":"1513:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"}],"src":"1480:85:3"},"scope":390,"src":"1386:180:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1572:771:3","text":"@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"},"functionSelector":"a38807f2","id":389,"implemented":false,"kind":"function","modifiers":[],"name":"snapshotCumulativesInside","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":389,"src":"2383:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":377,"name":"int24","nodeType":"ElementaryTypeName","src":"2383:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":389,"src":"2400:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":379,"name":"int24","nodeType":"ElementaryTypeName","src":"2400:5:3","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"2382:34:3"},"returnParameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"tickCumulativeInside","nodeType":"VariableDeclaration","scope":389,"src":"2477:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":382,"name":"int56","nodeType":"ElementaryTypeName","src":"2477:5:3","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"secondsPerLiquidityInsideX128","nodeType":"VariableDeclaration","scope":389,"src":"2517:37:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":384,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:3","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"secondsInside","nodeType":"VariableDeclaration","scope":389,"src":"2568:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":386,"name":"uint32","nodeType":"ElementaryTypeName","src":"2568:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2463:135:3"},"scope":390,"src":"2348:251:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":391,"src":"293:2308:3"}],"src":"45:2557:3"},"id":3},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","exportedSymbols":{"IUniswapV3PoolEvents":[509]},"id":510,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":392,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":393,"nodeType":"StructuredDocumentation","src":"71:88:4","text":"@title Events emitted by a pool\n @notice Contains all events emitted by the pool"},"fullyImplemented":true,"id":509,"linearizedBaseContracts":[509],"name":"IUniswapV3PoolEvents","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"196:344:4","text":"@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"},"id":400,"name":"Initialize","nodeType":"EventDefinition","parameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":400,"src":"562:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":395,"name":"uint160","nodeType":"ElementaryTypeName","src":"562:7:4","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":398,"indexed":false,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":400,"src":"584:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":397,"name":"int24","nodeType":"ElementaryTypeName","src":"584:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"561:34:4"},"src":"545:51:4"},{"anonymous":false,"documentation":{"id":401,"nodeType":"StructuredDocumentation","src":"602:551:4","text":"@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"},"id":417,"name":"Mint","nodeType":"EventDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"indexed":false,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":417,"src":"1178:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":402,"name":"address","nodeType":"ElementaryTypeName","src":"1178:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":405,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":417,"src":"1202:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":404,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":407,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":417,"src":"1233:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":406,"name":"int24","nodeType":"ElementaryTypeName","src":"1233:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":409,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":417,"src":"1266:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":408,"name":"int24","nodeType":"ElementaryTypeName","src":"1266:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":411,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":417,"src":"1299:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":410,"name":"uint128","nodeType":"ElementaryTypeName","src":"1299:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":413,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":417,"src":"1323:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":415,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":417,"src":"1348:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1168:201:4"},"src":"1158:212:4"},{"anonymous":false,"documentation":{"id":418,"nodeType":"StructuredDocumentation","src":"1376:493:4","text":"@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"},"id":432,"name":"Collect","nodeType":"EventDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":432,"src":"1897:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"1897:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":422,"indexed":false,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":432,"src":"1928:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"1928:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":424,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":432,"src":"1955:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":423,"name":"int24","nodeType":"ElementaryTypeName","src":"1955:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":426,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":432,"src":"1988:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":425,"name":"int24","nodeType":"ElementaryTypeName","src":"1988:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":428,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":432,"src":"2021:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":427,"name":"uint128","nodeType":"ElementaryTypeName","src":"2021:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":430,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":432,"src":"2046:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":429,"name":"uint128","nodeType":"ElementaryTypeName","src":"2046:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1887:180:4"},"src":"1874:194:4"},{"anonymous":false,"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"2074:523:4","text":"@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"},"id":447,"name":"Burn","nodeType":"EventDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":447,"src":"2622:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"2622:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":437,"indexed":true,"mutability":"mutable","name":"tickLower","nodeType":"VariableDeclaration","scope":447,"src":"2653:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":436,"name":"int24","nodeType":"ElementaryTypeName","src":"2653:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":439,"indexed":true,"mutability":"mutable","name":"tickUpper","nodeType":"VariableDeclaration","scope":447,"src":"2686:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":438,"name":"int24","nodeType":"ElementaryTypeName","src":"2686:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":441,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":447,"src":"2719:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":440,"name":"uint128","nodeType":"ElementaryTypeName","src":"2719:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":443,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":447,"src":"2743:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":445,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":447,"src":"2768:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":444,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:177:4"},"src":"2602:188:4"},{"anonymous":false,"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"2796:600:4","text":"@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"},"id":464,"name":"Swap","nodeType":"EventDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":450,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":464,"src":"3421:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":449,"name":"address","nodeType":"ElementaryTypeName","src":"3421:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":452,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":464,"src":"3453:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"3453:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":464,"src":"3488:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":453,"name":"int256","nodeType":"ElementaryTypeName","src":"3488:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":456,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":464,"src":"3512:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":455,"name":"int256","nodeType":"ElementaryTypeName","src":"3512:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":458,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":464,"src":"3536:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":457,"name":"uint160","nodeType":"ElementaryTypeName","src":"3536:7:4","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":460,"indexed":false,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":464,"src":"3566:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":459,"name":"uint128","nodeType":"ElementaryTypeName","src":"3566:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":462,"indexed":false,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":464,"src":"3593:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":461,"name":"int24","nodeType":"ElementaryTypeName","src":"3593:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3411:198:4"},"src":"3401:209:4"},{"anonymous":false,"documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"3616:562:4","text":"@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"},"id":479,"name":"Flash","nodeType":"EventDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":479,"src":"4204:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":466,"name":"address","nodeType":"ElementaryTypeName","src":"4204:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":469,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":479,"src":"4236:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":468,"name":"address","nodeType":"ElementaryTypeName","src":"4236:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":471,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":479,"src":"4271:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":473,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":479,"src":"4296:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":472,"name":"uint256","nodeType":"ElementaryTypeName","src":"4296:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":475,"indexed":false,"mutability":"mutable","name":"paid0","nodeType":"VariableDeclaration","scope":479,"src":"4321:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"4321:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"indexed":false,"mutability":"mutable","name":"paid1","nodeType":"VariableDeclaration","scope":479,"src":"4344:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"4344:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4194:169:4"},"src":"4183:181:4"},{"anonymous":false,"documentation":{"id":480,"nodeType":"StructuredDocumentation","src":"4370:451:4","text":"@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"},"id":486,"name":"IncreaseObservationCardinalityNext","nodeType":"EventDefinition","parameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextOld","nodeType":"VariableDeclaration","scope":486,"src":"4876:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":481,"name":"uint16","nodeType":"ElementaryTypeName","src":"4876:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":484,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextNew","nodeType":"VariableDeclaration","scope":486,"src":"4922:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":483,"name":"uint16","nodeType":"ElementaryTypeName","src":"4922:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4866:98:4"},"src":"4826:139:4"},{"anonymous":false,"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"4971:370:4","text":"@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"},"id":497,"name":"SetFeeProtocol","nodeType":"EventDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"indexed":false,"mutability":"mutable","name":"feeProtocol0Old","nodeType":"VariableDeclaration","scope":497,"src":"5367:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":488,"name":"uint8","nodeType":"ElementaryTypeName","src":"5367:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":491,"indexed":false,"mutability":"mutable","name":"feeProtocol1Old","nodeType":"VariableDeclaration","scope":497,"src":"5390:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":490,"name":"uint8","nodeType":"ElementaryTypeName","src":"5390:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":493,"indexed":false,"mutability":"mutable","name":"feeProtocol0New","nodeType":"VariableDeclaration","scope":497,"src":"5413:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":492,"name":"uint8","nodeType":"ElementaryTypeName","src":"5413:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":495,"indexed":false,"mutability":"mutable","name":"feeProtocol1New","nodeType":"VariableDeclaration","scope":497,"src":"5436:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":494,"name":"uint8","nodeType":"ElementaryTypeName","src":"5436:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5366:92:4"},"src":"5346:113:4"},{"anonymous":false,"documentation":{"id":498,"nodeType":"StructuredDocumentation","src":"5465:384:4","text":"@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"},"id":508,"name":"CollectProtocol","nodeType":"EventDefinition","parameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":508,"src":"5876:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":499,"name":"address","nodeType":"ElementaryTypeName","src":"5876:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":502,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":508,"src":"5900:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":501,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":504,"indexed":false,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":508,"src":"5927:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":503,"name":"uint128","nodeType":"ElementaryTypeName","src":"5927:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":506,"indexed":false,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":508,"src":"5944:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":505,"name":"uint128","nodeType":"ElementaryTypeName","src":"5944:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5875:85:4"},"src":"5854:107:4"}],"scope":510,"src":"159:5804:4"}],"src":"45:5919:4"},"id":4},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","exportedSymbols":{"IUniswapV3PoolImmutables":[549]},"id":550,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":511,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":512,"nodeType":"StructuredDocumentation","src":"71:153:5","text":"@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"},"fullyImplemented":false,"id":549,"linearizedBaseContracts":[549],"name":"IUniswapV3PoolImmutables","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"265:138:5","text":"@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"},"functionSelector":"c45a0155","id":518,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[],"src":"424:2:5"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":518,"src":"450:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":515,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"449:9:5"},"scope":549,"src":"408:51:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"465:113:5","text":"@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"0dfe1681","id":524,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"598:2:5"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":524,"src":"624:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"623:9:5"},"scope":549,"src":"583:50:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"639:114:5","text":"@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"d21220a7","id":530,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[],"src":"773:2:5"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":530,"src":"799:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"799:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"798:9:5"},"scope":549,"src":"758:50:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"814:84:5","text":"@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"},"functionSelector":"ddca3f43","id":536,"implemented":false,"kind":"function","modifiers":[],"name":"fee","nodeType":"FunctionDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"915:2:5"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":536,"src":"941:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":533,"name":"uint24","nodeType":"ElementaryTypeName","src":"941:6:5","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"940:8:5"},"scope":549,"src":"903:46:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":537,"nodeType":"StructuredDocumentation","src":"955:358:5","text":"@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"},"functionSelector":"d0c93a7c","id":542,"implemented":false,"kind":"function","modifiers":[],"name":"tickSpacing","nodeType":"FunctionDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[],"src":"1338:2:5"},"returnParameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":542,"src":"1364:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":539,"name":"int24","nodeType":"ElementaryTypeName","src":"1364:5:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1363:7:5"},"scope":549,"src":"1318:53:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"1377:363:5","text":"@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"},"functionSelector":"70cf754a","id":548,"implemented":false,"kind":"function","modifiers":[],"name":"maxLiquidityPerTick","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[],"src":"1773:2:5"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":548,"src":"1799:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":545,"name":"uint128","nodeType":"ElementaryTypeName","src":"1799:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1798:9:5"},"scope":549,"src":"1745:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":550,"src":"224:1586:5"}],"src":"45:1766:5"},"id":5},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","exportedSymbols":{"IUniswapV3PoolOwnerActions":[575]},"id":576,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":551,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"71:116:6","text":"@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"},"fullyImplemented":false,"id":575,"linearizedBaseContracts":[575],"name":"IUniswapV3PoolOwnerActions","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":553,"nodeType":"StructuredDocumentation","src":"230:205:6","text":"@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"},"functionSelector":"8206a4d1","id":560,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeProtocol","nodeType":"FunctionDefinition","parameters":{"id":558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"feeProtocol0","nodeType":"VariableDeclaration","scope":560,"src":"464:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":554,"name":"uint8","nodeType":"ElementaryTypeName","src":"464:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":557,"mutability":"mutable","name":"feeProtocol1","nodeType":"VariableDeclaration","scope":560,"src":"484:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":556,"name":"uint8","nodeType":"ElementaryTypeName","src":"484:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"463:40:6"},"returnParameters":{"id":559,"nodeType":"ParameterList","parameters":[],"src":"512:0:6"},"scope":575,"src":"440:73:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"519:483:6","text":"@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"},"functionSelector":"85b66729","id":574,"implemented":false,"kind":"function","modifiers":[],"name":"collectProtocol","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":574,"src":"1041:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":562,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"amount0Requested","nodeType":"VariableDeclaration","scope":574,"src":"1068:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":564,"name":"uint128","nodeType":"ElementaryTypeName","src":"1068:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"amount1Requested","nodeType":"VariableDeclaration","scope":574,"src":"1102:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":566,"name":"uint128","nodeType":"ElementaryTypeName","src":"1102:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1031:101:6"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":574,"src":"1151:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":569,"name":"uint128","nodeType":"ElementaryTypeName","src":"1151:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":574,"src":"1168:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":571,"name":"uint128","nodeType":"ElementaryTypeName","src":"1168:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1150:34:6"},"scope":575,"src":"1007:178:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":576,"src":"187:1000:6"}],"src":"45:1143:6"},"id":6},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","exportedSymbols":{"IUniswapV3PoolState":[683]},"id":684,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":577,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:7"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"71:169:7","text":"@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"},"fullyImplemented":false,"id":683,"linearizedBaseContracts":[683],"name":"IUniswapV3PoolState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":579,"nodeType":"StructuredDocumentation","src":"276:1140:7","text":"@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"},"functionSelector":"3850c7bd","id":596,"implemented":false,"kind":"function","modifiers":[],"name":"slot0","nodeType":"FunctionDefinition","parameters":{"id":580,"nodeType":"ParameterList","parameters":[],"src":"1435:2:7"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":582,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":596,"src":"1498:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":581,"name":"uint160","nodeType":"ElementaryTypeName","src":"1498:7:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":596,"src":"1532:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":583,"name":"int24","nodeType":"ElementaryTypeName","src":"1532:5:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"observationIndex","nodeType":"VariableDeclaration","scope":596,"src":"1556:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":585,"name":"uint16","nodeType":"ElementaryTypeName","src":"1556:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":588,"mutability":"mutable","name":"observationCardinality","nodeType":"VariableDeclaration","scope":596,"src":"1593:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":587,"name":"uint16","nodeType":"ElementaryTypeName","src":"1593:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"observationCardinalityNext","nodeType":"VariableDeclaration","scope":596,"src":"1636:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":589,"name":"uint16","nodeType":"ElementaryTypeName","src":"1636:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"feeProtocol","nodeType":"VariableDeclaration","scope":596,"src":"1683:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":591,"name":"uint8","nodeType":"ElementaryTypeName","src":"1683:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"unlocked","nodeType":"VariableDeclaration","scope":596,"src":"1714:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":593,"name":"bool","nodeType":"ElementaryTypeName","src":"1714:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1484:253:7"},"scope":683,"src":"1421:317:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":597,"nodeType":"StructuredDocumentation","src":"1744:168:7","text":"@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"f3058399","id":602,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal0X128","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[],"src":"1946:2:7"},"returnParameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":602,"src":"1972:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":599,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1971:9:7"},"scope":683,"src":"1917:64:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"1987:168:7","text":"@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"46141319","id":608,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal1X128","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"2189:2:7"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":608,"src":"2215:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":605,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2214:9:7"},"scope":683,"src":"2160:64:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"2230:147:7","text":"@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"},"functionSelector":"1ad8b03b","id":616,"implemented":false,"kind":"function","modifiers":[],"name":"protocolFees","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"2403:2:7"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":616,"src":"2429:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":611,"name":"uint128","nodeType":"ElementaryTypeName","src":"2429:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":616,"src":"2445:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":613,"name":"uint128","nodeType":"ElementaryTypeName","src":"2445:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2428:32:7"},"scope":683,"src":"2382:79:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"2467:150:7","text":"@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"},"functionSelector":"1a686502","id":622,"implemented":false,"kind":"function","modifiers":[],"name":"liquidity","nodeType":"FunctionDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[],"src":"2640:2:7"},"returnParameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":622,"src":"2666:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":619,"name":"uint128","nodeType":"ElementaryTypeName","src":"2666:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2665:9:7"},"scope":683,"src":"2622:53:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"2681:1244:7","text":"@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."},"functionSelector":"f30dba93","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"ticks","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":644,"src":"3945:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":624,"name":"int24","nodeType":"ElementaryTypeName","src":"3945:5:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3944:12:7"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"liquidityGross","nodeType":"VariableDeclaration","scope":644,"src":"4017:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":627,"name":"uint128","nodeType":"ElementaryTypeName","src":"4017:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"liquidityNet","nodeType":"VariableDeclaration","scope":644,"src":"4053:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":629,"name":"int128","nodeType":"ElementaryTypeName","src":"4053:6:7","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"feeGrowthOutside0X128","nodeType":"VariableDeclaration","scope":644,"src":"4086:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":631,"name":"uint256","nodeType":"ElementaryTypeName","src":"4086:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":634,"mutability":"mutable","name":"feeGrowthOutside1X128","nodeType":"VariableDeclaration","scope":644,"src":"4129:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":633,"name":"uint256","nodeType":"ElementaryTypeName","src":"4129:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"tickCumulativeOutside","nodeType":"VariableDeclaration","scope":644,"src":"4172:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":635,"name":"int56","nodeType":"ElementaryTypeName","src":"4172:5:7","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"secondsPerLiquidityOutsideX128","nodeType":"VariableDeclaration","scope":644,"src":"4213:38:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":637,"name":"uint160","nodeType":"ElementaryTypeName","src":"4213:7:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"secondsOutside","nodeType":"VariableDeclaration","scope":644,"src":"4265:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":639,"name":"uint32","nodeType":"ElementaryTypeName","src":"4265:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":644,"src":"4300:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":641,"name":"bool","nodeType":"ElementaryTypeName","src":"4300:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4003:323:7"},"scope":683,"src":"3930:397:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"4333:99:7","text":"@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"functionSelector":"5339c296","id":652,"implemented":false,"kind":"function","modifiers":[],"name":"tickBitmap","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"wordPosition","nodeType":"VariableDeclaration","scope":652,"src":"4457:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":646,"name":"int16","nodeType":"ElementaryTypeName","src":"4457:5:7","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"4456:20:7"},"returnParameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":652,"src":"4500:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":649,"name":"uint256","nodeType":"ElementaryTypeName","src":"4500:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:9:7"},"scope":683,"src":"4437:72:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"4515:700:7","text":"@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"},"functionSelector":"514ea4bf","id":668,"implemented":false,"kind":"function","modifiers":[],"name":"positions","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"key","nodeType":"VariableDeclaration","scope":668,"src":"5239:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":654,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5239:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5238:13:7"},"returnParameters":{"id":667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"_liquidity","nodeType":"VariableDeclaration","scope":668,"src":"5312:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":657,"name":"uint128","nodeType":"ElementaryTypeName","src":"5312:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"feeGrowthInside0LastX128","nodeType":"VariableDeclaration","scope":668,"src":"5344:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":659,"name":"uint256","nodeType":"ElementaryTypeName","src":"5344:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":662,"mutability":"mutable","name":"feeGrowthInside1LastX128","nodeType":"VariableDeclaration","scope":668,"src":"5390:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"5390:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":664,"mutability":"mutable","name":"tokensOwed0","nodeType":"VariableDeclaration","scope":668,"src":"5436:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":663,"name":"uint128","nodeType":"ElementaryTypeName","src":"5436:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":666,"mutability":"mutable","name":"tokensOwed1","nodeType":"VariableDeclaration","scope":668,"src":"5469:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":665,"name":"uint128","nodeType":"ElementaryTypeName","src":"5469:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5298:200:7"},"scope":683,"src":"5220:279:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"5505:749:7","text":"@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"},"functionSelector":"252c09d7","id":682,"implemented":false,"kind":"function","modifiers":[],"name":"observations","nodeType":"FunctionDefinition","parameters":{"id":672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"mutability":"mutable","name":"index","nodeType":"VariableDeclaration","scope":682,"src":"6281:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":670,"name":"uint256","nodeType":"ElementaryTypeName","src":"6281:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6280:15:7"},"returnParameters":{"id":681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"blockTimestamp","nodeType":"VariableDeclaration","scope":682,"src":"6356:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":673,"name":"uint32","nodeType":"ElementaryTypeName","src":"6356:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":676,"mutability":"mutable","name":"tickCumulative","nodeType":"VariableDeclaration","scope":682,"src":"6391:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":675,"name":"int56","nodeType":"ElementaryTypeName","src":"6391:5:7","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":678,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128","nodeType":"VariableDeclaration","scope":682,"src":"6425:41:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":677,"name":"uint160","nodeType":"ElementaryTypeName","src":"6425:7:7","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":682,"src":"6480:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":679,"name":"bool","nodeType":"ElementaryTypeName","src":"6480:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6342:164:7"},"scope":683,"src":"6259:248:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":684,"src":"240:6269:7"}],"src":"45:6465:7"},"id":7},"@uniswap/v3-core/contracts/libraries/BitMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/BitMath.sol","exportedSymbols":{"BitMath":[962]},"id":963,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":685,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"71:116:8","text":"@title BitMath\n @dev This library provides functionality for computing bit properties of an unsigned integer"},"fullyImplemented":true,"id":962,"linearizedBaseContracts":[962],"name":"BitMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":799,"nodeType":"Block","src":"742:660:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"760:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"764:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"760:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"752:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"752:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"ExpressionStatement","src":"752:14:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":700,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"781:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"786:35:8","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"src":"781:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":712,"nodeType":"IfStatement","src":"777:102:8","trueBody":{"id":711,"nodeType":"Block","src":"823:56:8","statements":[{"expression":{"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":703,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"837:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"843:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"837:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":706,"nodeType":"ExpressionStatement","src":"837:9:8"},{"expression":{"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":707,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"860:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"865:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"860:8:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":710,"nodeType":"ExpressionStatement","src":"860:8:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":713,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"892:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783130303030303030303030303030303030","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"897:19:8","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"value":"0x10000000000000000"},"src":"892:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":725,"nodeType":"IfStatement","src":"888:84:8","trueBody":{"id":724,"nodeType":"Block","src":"918:54:8","statements":[{"expression":{"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":716,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"932:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"938:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"932:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":719,"nodeType":"ExpressionStatement","src":"932:8:8"},{"expression":{"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":720,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"954:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"959:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"954:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":723,"nodeType":"ExpressionStatement","src":"954:7:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":726,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"985:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3078313030303030303030","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:11:8","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"value":"0x100000000"},"src":"985:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":738,"nodeType":"IfStatement","src":"981:76:8","trueBody":{"id":737,"nodeType":"Block","src":"1003:54:8","statements":[{"expression":{"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":729,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1017:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1023:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1017:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":732,"nodeType":"ExpressionStatement","src":"1017:8:8"},{"expression":{"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":733,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1039:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1039:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":736,"nodeType":"ExpressionStatement","src":"1039:7:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":739,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1070:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783130303030","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1075:7:8","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"0x10000"},"src":"1070:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":751,"nodeType":"IfStatement","src":"1066:72:8","trueBody":{"id":750,"nodeType":"Block","src":"1084:54:8","statements":[{"expression":{"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":742,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1098:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1104:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"1098:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":745,"nodeType":"ExpressionStatement","src":"1098:8:8"},{"expression":{"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":746,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1120:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1125:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"1120:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":749,"nodeType":"ExpressionStatement","src":"1120:7:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1151:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3078313030","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1156:5:8","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"0x100"},"src":"1151:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":764,"nodeType":"IfStatement","src":"1147:68:8","trueBody":{"id":763,"nodeType":"Block","src":"1163:52:8","statements":[{"expression":{"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":755,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1177:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1183:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1177:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":758,"nodeType":"ExpressionStatement","src":"1177:7:8"},{"expression":{"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":759,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1198:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1203:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1198:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":762,"nodeType":"ExpressionStatement","src":"1198:6:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":765,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1228:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783130","id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:4:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"0x10"},"src":"1228:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":777,"nodeType":"IfStatement","src":"1224:67:8","trueBody":{"id":776,"nodeType":"Block","src":"1239:52:8","statements":[{"expression":{"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":768,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1253:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1253:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":771,"nodeType":"ExpressionStatement","src":"1253:7:8"},{"expression":{"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":772,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1274:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1279:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1274:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":775,"nodeType":"ExpressionStatement","src":"1274:6:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":778,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1304:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"307834","id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1309:3:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"src":"1304:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":790,"nodeType":"IfStatement","src":"1300:66:8","trueBody":{"id":789,"nodeType":"Block","src":"1314:52:8","statements":[{"expression":{"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":781,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1328:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1328:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":784,"nodeType":"ExpressionStatement","src":"1328:7:8"},{"expression":{"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":785,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1349:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1349:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":788,"nodeType":"ExpressionStatement","src":"1349:6:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":791,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"1379:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"307832","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1384:3:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"0x2"},"src":"1379:8:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":798,"nodeType":"IfStatement","src":"1375:20:8","trueBody":{"expression":{"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":794,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1389:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1394:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1389:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":797,"nodeType":"ExpressionStatement","src":"1389:6:8"}}]},"documentation":{"id":687,"nodeType":"StructuredDocumentation","src":"209:457:8","text":"@notice Returns the index of the most significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n @param x the value for which to compute the most significant bit, must be greater than 0\n @return r the index of the most significant bit"},"id":800,"implemented":true,"kind":"function","modifiers":[],"name":"mostSignificantBit","nodeType":"FunctionDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":689,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":800,"src":"699:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:11:8"},"returnParameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":692,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":800,"src":"733:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":691,"name":"uint8","nodeType":"ElementaryTypeName","src":"733:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"732:9:8"},"scope":962,"src":"671:731:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":960,"nodeType":"Block","src":"1965:822:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":809,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"1983:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1987:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1983:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1975:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1975:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"1975:14:8"},{"expression":{"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":814,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2000:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"323535","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2004:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2000:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":817,"nodeType":"ExpressionStatement","src":"2000:7:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2021:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2030:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":820,"name":"uint128","nodeType":"ElementaryTypeName","src":"2030:7:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":819,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2025:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2025:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2025:17:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2021:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2021:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":836,"nodeType":"Block","src":"2087:34:8","statements":[{"expression":{"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":832,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2101:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2107:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2101:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":835,"nodeType":"ExpressionStatement","src":"2101:9:8"}]},"id":837,"nodeType":"IfStatement","src":"2017:104:8","trueBody":{"id":831,"nodeType":"Block","src":"2048:33:8","statements":[{"expression":{"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":827,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2062:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"313238","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2067:3:8","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2062:8:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":830,"nodeType":"ExpressionStatement","src":"2062:8:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":838,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2134:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2143:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":840,"name":"uint64","nodeType":"ElementaryTypeName","src":"2143:6:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":839,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2138:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2138:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2138:16:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2134:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2134:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":856,"nodeType":"Block","src":"2198:33:8","statements":[{"expression":{"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":852,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2212:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2218:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"2212:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":855,"nodeType":"ExpressionStatement","src":"2212:8:8"}]},"id":857,"nodeType":"IfStatement","src":"2130:101:8","trueBody":{"id":851,"nodeType":"Block","src":"2160:32:8","statements":[{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":847,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2174:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3634","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"2174:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":850,"nodeType":"ExpressionStatement","src":"2174:7:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":858,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2244:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2253:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":860,"name":"uint32","nodeType":"ElementaryTypeName","src":"2253:6:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":859,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2248:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2248:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2248:16:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2244:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2267:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2244:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":876,"nodeType":"Block","src":"2308:33:8","statements":[{"expression":{"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":872,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2322:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2328:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2322:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":875,"nodeType":"ExpressionStatement","src":"2322:8:8"}]},"id":877,"nodeType":"IfStatement","src":"2240:101:8","trueBody":{"id":871,"nodeType":"Block","src":"2270:32:8","statements":[{"expression":{"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":867,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2284:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2289:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2284:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":870,"nodeType":"ExpressionStatement","src":"2284:7:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":878,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2354:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2363:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":880,"name":"uint16","nodeType":"ElementaryTypeName","src":"2363:6:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":879,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2358:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2358:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2358:16:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2354:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2377:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2354:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":896,"nodeType":"Block","src":"2418:33:8","statements":[{"expression":{"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":892,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2432:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2438:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"2432:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":895,"nodeType":"ExpressionStatement","src":"2432:8:8"}]},"id":897,"nodeType":"IfStatement","src":"2350:101:8","trueBody":{"id":891,"nodeType":"Block","src":"2380:32:8","statements":[{"expression":{"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":887,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2394:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3136","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2399:2:8","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"2394:7:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":890,"nodeType":"ExpressionStatement","src":"2394:7:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":898,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2464:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"expression":{"arguments":[{"id":901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2473:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":900,"name":"uint8","nodeType":"ElementaryTypeName","src":"2473:5:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":899,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2468:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2468:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2468:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2464:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2486:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2464:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":916,"nodeType":"Block","src":"2526:32:8","statements":[{"expression":{"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":912,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2540:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2546:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"2540:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":915,"nodeType":"ExpressionStatement","src":"2540:7:8"}]},"id":917,"nodeType":"IfStatement","src":"2460:98:8","trueBody":{"id":911,"nodeType":"Block","src":"2489:31:8","statements":[{"expression":{"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":907,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2503:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"38","id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2508:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"2503:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":910,"nodeType":"ExpressionStatement","src":"2503:6:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":918,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2571:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2575:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2571:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2581:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2571:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":932,"nodeType":"Block","src":"2621:32:8","statements":[{"expression":{"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":928,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2635:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2641:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2635:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":931,"nodeType":"ExpressionStatement","src":"2635:7:8"}]},"id":933,"nodeType":"IfStatement","src":"2567:86:8","trueBody":{"id":927,"nodeType":"Block","src":"2584:31:8","statements":[{"expression":{"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":923,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2598:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"34","id":924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2603:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2598:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":926,"nodeType":"ExpressionStatement","src":"2598:6:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":934,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2666:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307833","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2670:3:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"0x3"},"src":"2666:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2676:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2666:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":948,"nodeType":"Block","src":"2716:32:8","statements":[{"expression":{"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":944,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2730:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2736:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2730:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":947,"nodeType":"ExpressionStatement","src":"2730:7:8"}]},"id":949,"nodeType":"IfStatement","src":"2662:86:8","trueBody":{"id":943,"nodeType":"Block","src":"2679:31:8","statements":[{"expression":{"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":939,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2693:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"32","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2698:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2693:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":942,"nodeType":"ExpressionStatement","src":"2693:6:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":950,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"2761:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2765:3:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"},"src":"2761:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2771:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2761:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":959,"nodeType":"IfStatement","src":"2757:23:8","trueBody":{"expression":{"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":955,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"2774:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2779:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2774:6:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":958,"nodeType":"ExpressionStatement","src":"2774:6:8"}}]},"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"1408:480:8","text":"@notice Returns the index of the least significant bit of the number,\n     where the least significant bit is at index 0 and the most significant bit is at index 255\n @dev The function satisfies the property:\n     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n @param x the value for which to compute the least significant bit, must be greater than 0\n @return r the index of the least significant bit"},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"leastSignificantBit","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":961,"src":"1922:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1922:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1921:11:8"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":961,"src":"1956:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":805,"name":"uint8","nodeType":"ElementaryTypeName","src":"1956:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1955:9:8"},"scope":962,"src":"1893:894:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":963,"src":"187:2602:8"}],"src":"45:2745:8"},"id":8},"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol","exportedSymbols":{"FixedPoint128":[969]},"id":970,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":964,"literals":["solidity",">=","0.4",".0"],"nodeType":"PragmaDirective","src":"45:24:9"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"71:140:9","text":"@title FixedPoint128\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)"},"fullyImplemented":true,"id":969,"linearizedBaseContracts":[969],"name":"FixedPoint128","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":968,"mutability":"constant","name":"Q128","nodeType":"VariableDeclaration","scope":969,"src":"239:68:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"239:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"272:35:9","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"visibility":"internal"}],"scope":970,"src":"211:99:9"}],"src":"45:266:9"},"id":9},"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol","exportedSymbols":{"FixedPoint96":[979]},"id":980,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":971,"literals":["solidity",">=","0.4",".0"],"nodeType":"PragmaDirective","src":"45:24:10"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":972,"nodeType":"StructuredDocumentation","src":"71:174:10","text":"@title FixedPoint96\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n @dev Used in SqrtPriceMath.sol"},"fullyImplemented":true,"id":979,"linearizedBaseContracts":[979],"name":"FixedPoint96","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":975,"mutability":"constant","name":"RESOLUTION","nodeType":"VariableDeclaration","scope":979,"src":"272:39:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":973,"name":"uint8","nodeType":"ElementaryTypeName","src":"272:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3936","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"309:2:10","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"visibility":"internal"},{"constant":true,"id":978,"mutability":"constant","name":"Q96","nodeType":"VariableDeclaration","scope":979,"src":"317:59:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307831303030303030303030303030303030303030303030303030","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"349:27:10","typeDescriptions":{"typeIdentifier":"t_rational_79228162514264337593543950336_by_1","typeString":"int_const 79228162514264337593543950336"},"value":"0x1000000000000000000000000"},"visibility":"internal"}],"scope":980,"src":"245:134:10"}],"src":"45:335:10"},"id":10},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","exportedSymbols":{"FullMath":[1152]},"id":1153,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":981,"literals":["solidity",">=","0.4",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"32:31:11"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":982,"nodeType":"StructuredDocumentation","src":"65:297:11","text":"@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"},"fullyImplemented":true,"id":1152,"linearizedBaseContracts":[1152],"name":"FullMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":1107,"nodeType":"Block","src":"877:3648:11","statements":[{"assignments":[995],"declarations":[{"constant":false,"id":995,"mutability":"mutable","name":"prod0","nodeType":"VariableDeclaration","scope":1107,"src":"1190:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":994,"name":"uint256","nodeType":"ElementaryTypeName","src":"1190:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":996,"nodeType":"VariableDeclarationStatement","src":"1190:13:11"},{"assignments":[998],"declarations":[{"constant":false,"id":998,"mutability":"mutable","name":"prod1","nodeType":"VariableDeclaration","scope":1107,"src":"1258:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1258:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":999,"nodeType":"VariableDeclarationStatement","src":"1258:13:11"},{"AST":{"nodeType":"YulBlock","src":"1334:141:11","statements":[{"nodeType":"YulVariableDeclaration","src":"1348:30:11","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"1365:1:11"},{"name":"b","nodeType":"YulIdentifier","src":"1368:1:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1375:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1371:3:11"},"nodeType":"YulFunctionCall","src":"1371:6:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"1358:6:11"},"nodeType":"YulFunctionCall","src":"1358:20:11"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"1352:2:11","type":""}]},{"nodeType":"YulAssignment","src":"1391:18:11","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"1404:1:11"},{"name":"b","nodeType":"YulIdentifier","src":"1407:1:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1400:3:11"},"nodeType":"YulFunctionCall","src":"1400:9:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"1391:5:11"}]},{"nodeType":"YulAssignment","src":"1422:43:11","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"1439:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"1443:5:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:11"},"nodeType":"YulFunctionCall","src":"1435:14:11"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"1454:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"1458:5:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1451:2:11"},"nodeType":"YulFunctionCall","src":"1451:13:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1431:3:11"},"nodeType":"YulFunctionCall","src":"1431:34:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"1422:5:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":985,"isOffset":false,"isSlot":false,"src":"1365:1:11","valueSize":1},{"declaration":985,"isOffset":false,"isSlot":false,"src":"1404:1:11","valueSize":1},{"declaration":987,"isOffset":false,"isSlot":false,"src":"1368:1:11","valueSize":1},{"declaration":987,"isOffset":false,"isSlot":false,"src":"1407:1:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"1391:5:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"1443:5:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"1458:5:11","valueSize":1},{"declaration":998,"isOffset":false,"isSlot":false,"src":"1422:5:11","valueSize":1}],"id":1000,"nodeType":"InlineAssembly","src":"1325:150:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1001,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"1547:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1547:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1014,"nodeType":"IfStatement","src":"1543:179:11","trueBody":{"id":1013,"nodeType":"Block","src":"1559:163:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1005,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"1581:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1595:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1581:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1004,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1573:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1573:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1009,"nodeType":"ExpressionStatement","src":"1573:24:11"},{"AST":{"nodeType":"YulBlock","src":"1620:65:11","statements":[{"nodeType":"YulAssignment","src":"1638:33:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"1652:5:11"},{"name":"denominator","nodeType":"YulIdentifier","src":"1659:11:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1648:3:11"},"nodeType":"YulFunctionCall","src":"1648:23:11"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1638:6:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":989,"isOffset":false,"isSlot":false,"src":"1659:11:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"1652:5:11","valueSize":1},{"declaration":992,"isOffset":false,"isSlot":false,"src":"1638:6:11","valueSize":1}],"id":1010,"nodeType":"InlineAssembly","src":"1611:74:11"},{"expression":{"id":1011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"1705:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":993,"id":1012,"nodeType":"Return","src":"1698:13:11"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1016,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"1835:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1017,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"1849:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1835:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1015,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1827:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1020,"nodeType":"ExpressionStatement","src":"1827:28:11"},{"assignments":[1022],"declarations":[{"constant":false,"id":1022,"mutability":"mutable","name":"remainder","nodeType":"VariableDeclaration","scope":1107,"src":"2132:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1021,"name":"uint256","nodeType":"ElementaryTypeName","src":"2132:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1023,"nodeType":"VariableDeclarationStatement","src":"2132:17:11"},{"AST":{"nodeType":"YulBlock","src":"2168:62:11","statements":[{"nodeType":"YulAssignment","src":"2182:38:11","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"2202:1:11"},{"name":"b","nodeType":"YulIdentifier","src":"2205:1:11"},{"name":"denominator","nodeType":"YulIdentifier","src":"2208:11:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2195:6:11"},"nodeType":"YulFunctionCall","src":"2195:25:11"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"2182:9:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":985,"isOffset":false,"isSlot":false,"src":"2202:1:11","valueSize":1},{"declaration":987,"isOffset":false,"isSlot":false,"src":"2205:1:11","valueSize":1},{"declaration":989,"isOffset":false,"isSlot":false,"src":"2208:11:11","valueSize":1},{"declaration":1022,"isOffset":false,"isSlot":false,"src":"2182:9:11","valueSize":1}],"id":1024,"nodeType":"InlineAssembly","src":"2159:71:11"},{"AST":{"nodeType":"YulBlock","src":"2303:108:11","statements":[{"nodeType":"YulAssignment","src":"2317:41:11","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"2330:5:11"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"2340:9:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"2351:5:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2337:2:11"},"nodeType":"YulFunctionCall","src":"2337:20:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2326:3:11"},"nodeType":"YulFunctionCall","src":"2326:32:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2317:5:11"}]},{"nodeType":"YulAssignment","src":"2371:30:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:11"},{"name":"remainder","nodeType":"YulIdentifier","src":"2391:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2380:3:11"},"nodeType":"YulFunctionCall","src":"2380:21:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2371:5:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":995,"isOffset":false,"isSlot":false,"src":"2351:5:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"2371:5:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"2384:5:11","valueSize":1},{"declaration":998,"isOffset":false,"isSlot":false,"src":"2317:5:11","valueSize":1},{"declaration":998,"isOffset":false,"isSlot":false,"src":"2330:5:11","valueSize":1},{"declaration":1022,"isOffset":false,"isSlot":false,"src":"2340:9:11","valueSize":1},{"declaration":1022,"isOffset":false,"isSlot":false,"src":"2391:9:11","valueSize":1}],"id":1025,"nodeType":"InlineAssembly","src":"2294:117:11"},{"assignments":[1027],"declarations":[{"constant":false,"id":1027,"mutability":"mutable","name":"twos","nodeType":"VariableDeclaration","scope":1107,"src":"2560:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1026,"name":"uint256","nodeType":"ElementaryTypeName","src":"2560:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1032,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2575:12:11","subExpression":{"id":1028,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"2576:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1030,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"2590:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2575:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2560:41:11"},{"AST":{"nodeType":"YulBlock","src":"2666:61:11","statements":[{"nodeType":"YulAssignment","src":"2680:37:11","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"2699:11:11"},{"name":"twos","nodeType":"YulIdentifier","src":"2712:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2695:3:11"},"nodeType":"YulFunctionCall","src":"2695:22:11"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"2680:11:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":989,"isOffset":false,"isSlot":false,"src":"2680:11:11","valueSize":1},{"declaration":989,"isOffset":false,"isSlot":false,"src":"2699:11:11","valueSize":1},{"declaration":1027,"isOffset":false,"isSlot":false,"src":"2712:4:11","valueSize":1}],"id":1033,"nodeType":"InlineAssembly","src":"2657:70:11"},{"AST":{"nodeType":"YulBlock","src":"2800:49:11","statements":[{"nodeType":"YulAssignment","src":"2814:25:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"2827:5:11"},{"name":"twos","nodeType":"YulIdentifier","src":"2834:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2823:3:11"},"nodeType":"YulFunctionCall","src":"2823:16:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2814:5:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":995,"isOffset":false,"isSlot":false,"src":"2814:5:11","valueSize":1},{"declaration":995,"isOffset":false,"isSlot":false,"src":"2827:5:11","valueSize":1},{"declaration":1027,"isOffset":false,"isSlot":false,"src":"2834:4:11","valueSize":1}],"id":1034,"nodeType":"InlineAssembly","src":"2791:58:11"},{"AST":{"nodeType":"YulBlock","src":"3037:63:11","statements":[{"nodeType":"YulAssignment","src":"3051:39:11","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3071:1:11","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"3074:4:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3067:3:11"},"nodeType":"YulFunctionCall","src":"3067:12:11"},{"name":"twos","nodeType":"YulIdentifier","src":"3081:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3063:3:11"},"nodeType":"YulFunctionCall","src":"3063:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"3088:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:11"},"nodeType":"YulFunctionCall","src":"3059:31:11"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3051:4:11"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1027,"isOffset":false,"isSlot":false,"src":"3051:4:11","valueSize":1},{"declaration":1027,"isOffset":false,"isSlot":false,"src":"3074:4:11","valueSize":1},{"declaration":1027,"isOffset":false,"isSlot":false,"src":"3081:4:11","valueSize":1}],"id":1035,"nodeType":"InlineAssembly","src":"3028:72:11"},{"expression":{"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1036,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"3109:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1037,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"3118:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1038,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"3126:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3118:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3109:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1041,"nodeType":"ExpressionStatement","src":"3109:21:11"},{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"inv","nodeType":"VariableDeclaration","scope":1107,"src":"3464:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"3464:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1050,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3479:1:11","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1045,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3483:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3479:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1047,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3478:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3498:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3478:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3464:35:11"},{"expression":{"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1051,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3714:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3721:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1053,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3725:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1054,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3739:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3725:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3721:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3714:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1058,"nodeType":"ExpressionStatement","src":"3714:28:11"},{"expression":{"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1059,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3772:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3779:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3783:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1062,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3797:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3783:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3779:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3772:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1066,"nodeType":"ExpressionStatement","src":"3772:28:11"},{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1067,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3831:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3838:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1069,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3842:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1070,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3856:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3842:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3838:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3831:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1074,"nodeType":"ExpressionStatement","src":"3831:28:11"},{"expression":{"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1075,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3890:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3897:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1077,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3901:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1078,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3915:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3901:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3897:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3890:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ExpressionStatement","src":"3890:28:11"},{"expression":{"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1083,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3949:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3956:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1085,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"3960:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1086,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3974:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3960:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3956:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3949:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1090,"nodeType":"ExpressionStatement","src":"3949:28:11"},{"expression":{"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1091,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"4009:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4016:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1093,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4020:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1094,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"4034:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4020:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4016:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4009:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1098,"nodeType":"ExpressionStatement","src":"4009:28:11"},{"expression":{"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"4475:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1100,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"4484:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1101,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"4492:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4484:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4475:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1104,"nodeType":"ExpressionStatement","src":"4475:20:11"},{"expression":{"id":1105,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"4512:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":993,"id":1106,"nodeType":"Return","src":"4505:13:11"}]},"documentation":{"id":983,"nodeType":"StructuredDocumentation","src":"385:359:11","text":"@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"},"id":1108,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nodeType":"FunctionDefinition","parameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":1108,"src":"774:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"774:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":1108,"src":"793:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"793:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":989,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":1108,"src":"812:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"812:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"764:73:11"},"returnParameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":1108,"src":"861:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"861:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"860:16:11"},"scope":1152,"src":"749:3776:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1150,"nodeType":"Block","src":"4945:177:11","statements":[{"expression":{"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1120,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"4955:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1122,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"4971:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1123,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"4974:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1124,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"4977:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1121,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"4964:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4964:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4955:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1127,"nodeType":"ExpressionStatement","src":"4955:34:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1129,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"5010:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1130,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"5013:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1131,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"5016:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1128,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5003:6:11","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5003:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5031:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5003:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1149,"nodeType":"IfStatement","src":"4999:117:11","trueBody":{"id":1148,"nodeType":"Block","src":"5034:82:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"5056:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":1139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5070:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1138,"name":"uint256","nodeType":"ElementaryTypeName","src":"5070:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1137,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5065:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5065:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"5065:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5056:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1135,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5048:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5048:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1144,"nodeType":"ExpressionStatement","src":"5048:35:11"},{"expression":{"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5097:8:11","subExpression":{"id":1145,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"5097:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1147,"nodeType":"ExpressionStatement","src":"5097:8:11"}]}}]},"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"4531:271:11","text":"@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"},"id":1151,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivRoundingUp","nodeType":"FunctionDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":1151,"src":"4842:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"4842:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":1151,"src":"4861:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"4861:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1115,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":1151,"src":"4880:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1114,"name":"uint256","nodeType":"ElementaryTypeName","src":"4880:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4832:73:11"},"returnParameters":{"id":1119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1118,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":1151,"src":"4929:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"4929:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4928:16:11"},"scope":1152,"src":"4807:315:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1153,"src":"362:4762:11"}],"src":"32:5093:11"},"id":11},"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol","exportedSymbols":{"LiquidityMath":[1204]},"id":1205,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1154,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:12"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"71:38:12","text":"@title Math library for liquidity"},"fullyImplemented":true,"id":1204,"linearizedBaseContracts":[1204],"name":"LiquidityMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":1202,"nodeType":"Block","src":"456:163:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int128","typeString":"int128"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"470:1:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"474:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"470:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1200,"nodeType":"Block","src":"548:65:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1186,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"571:1:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"575:1:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"id":1190,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"587:1:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"579:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1188,"name":"uint128","nodeType":"ElementaryTypeName","src":"579:7:12","typeDescriptions":{}}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"579:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"575:14:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"571:18:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":1194,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"570:20:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1195,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"594:1:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"570:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c41","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"597:4:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383","typeString":"literal_string \"LA\""},"value":"LA"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383","typeString":"literal_string \"LA\""}],"id":1185,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"562:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"562:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1199,"nodeType":"ExpressionStatement","src":"562:40:12"}]},"id":1201,"nodeType":"IfStatement","src":"466:147:12","trueBody":{"id":1184,"nodeType":"Block","src":"477:65:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1169,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"500:1:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1170,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"504:1:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"516:2:12","subExpression":{"id":1173,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"517:1:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"508:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1171,"name":"uint128","nodeType":"ElementaryTypeName","src":"508:7:12","typeDescriptions":{}}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"508:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"504:15:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"500:19:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":1178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"499:21:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1179,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"523:1:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"499:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c53","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"526:4:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985","typeString":"literal_string \"LS\""},"value":"LS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985","typeString":"literal_string \"LS\""}],"id":1168,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"491:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"491:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"ExpressionStatement","src":"491:40:12"}]}}]},"documentation":{"id":1156,"nodeType":"StructuredDocumentation","src":"137:241:12","text":"@notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n @param x The liquidity before change\n @param y The delta by which liquidity should be changed\n @return z The liquidity delta"},"id":1203,"implemented":true,"kind":"function","modifiers":[],"name":"addDelta","nodeType":"FunctionDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1203,"src":"401:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1157,"name":"uint128","nodeType":"ElementaryTypeName","src":"401:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1160,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1203,"src":"412:8:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1159,"name":"int128","nodeType":"ElementaryTypeName","src":"412:6:12","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"400:21:12"},"returnParameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1203,"src":"445:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1162,"name":"uint128","nodeType":"ElementaryTypeName","src":"445:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"444:11:12"},"scope":1204,"src":"383:236:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1205,"src":"109:512:12"}],"src":"45:577:12"},"id":12},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","exportedSymbols":{"LowGasSafeMath":[1334]},"id":1335,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1206,"literals":["solidity",">=","0.7",".0"],"nodeType":"PragmaDirective","src":"45:24:13"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"71:178:13","text":"@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"},"fullyImplemented":true,"id":1334,"linearizedBaseContracts":[1334],"name":"LowGasSafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":1228,"nodeType":"Block","src":"504:42:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1218,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"523:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1219,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"527:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1220,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"531:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"527:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"523:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1223,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"522:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1224,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"537:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"522:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1217,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"514:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"514:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1227,"nodeType":"ExpressionStatement","src":"514:25:13"}]},"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"278:152:13","text":"@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"},"id":1229,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1229,"src":"448:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1209,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1212,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1229,"src":"459:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"459:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"447:22:13"},"returnParameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1229,"src":"493:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1214,"name":"uint256","nodeType":"ElementaryTypeName","src":"493:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"492:11:13"},"scope":1334,"src":"435:111:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1250,"nodeType":"Block","src":"779:42:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1240,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"798:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1241,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"802:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1242,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"806:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"802:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"798:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1245,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"797:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1246,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"812:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"797:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"789:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"789:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1249,"nodeType":"ExpressionStatement","src":"789:25:13"}]},"documentation":{"id":1230,"nodeType":"StructuredDocumentation","src":"552:153:13","text":"@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"},"id":1251,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1232,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1251,"src":"723:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"723:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1251,"src":"734:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1233,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"722:22:13"},"returnParameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1251,"src":"768:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1236,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"767:11:13"},"scope":1334,"src":"710:111:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1278,"nodeType":"Block","src":"1055:56:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1262,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"1073:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1073:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1265,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"1084:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"1088:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1267,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"1092:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1088:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1084:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1083:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1271,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"1097:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1273,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"1102:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1073:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1261,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1065:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1065:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"ExpressionStatement","src":"1065:39:13"}]},"documentation":{"id":1252,"nodeType":"StructuredDocumentation","src":"827:154:13","text":"@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"},"id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","parameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1254,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1279,"src":"999:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1253,"name":"uint256","nodeType":"ElementaryTypeName","src":"999:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1279,"src":"1010:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1010:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"998:22:13"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1279,"src":"1044:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"1044:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:11:13"},"scope":1334,"src":"986:125:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1305,"nodeType":"Block","src":"1342:54:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1290,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"1361:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1291,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"1365:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1292,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"1369:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1365:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1361:9:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1295,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1360:11:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1296,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"1375:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1360:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1298,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"1381:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1386:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1381:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1380:8:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1360:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1289,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1352:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1352:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1304,"nodeType":"ExpressionStatement","src":"1352:37:13"}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"1117:154:13","text":"@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"},"id":1306,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","parameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1306,"src":"1289:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1281,"name":"int256","nodeType":"ElementaryTypeName","src":"1289:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1306,"src":"1299:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1283,"name":"int256","nodeType":"ElementaryTypeName","src":"1299:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1288:20:13"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1306,"src":"1332:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1286,"name":"int256","nodeType":"ElementaryTypeName","src":"1332:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1331:10:13"},"scope":1334,"src":"1276:120:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1332,"nodeType":"Block","src":"1639:54:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1317,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"1658:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1318,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"1662:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1319,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"1666:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1662:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1658:9:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1657:11:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1323,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"1672:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1657:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1325,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"1678:1:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1683:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1678:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1328,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1677:8:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1657:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1316,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1649:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1649:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1331,"nodeType":"ExpressionStatement","src":"1649:37:13"}]},"documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"1402:166:13","text":"@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"},"id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":1333,"src":"1586:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1308,"name":"int256","nodeType":"ElementaryTypeName","src":"1586:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1333,"src":"1596:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1310,"name":"int256","nodeType":"ElementaryTypeName","src":"1596:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1585:20:13"},"returnParameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1333,"src":"1629:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1313,"name":"int256","nodeType":"ElementaryTypeName","src":"1629:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1628:10:13"},"scope":1334,"src":"1573:120:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1335,"src":"249:1446:13"}],"src":"45:1651:13"},"id":13},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","exportedSymbols":{"SafeCast":[1404]},"id":1405,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1336,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:14"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"71:94:14","text":"@title Safe casting methods\n @notice Contains methods for safely casting between types"},"fullyImplemented":true,"id":1404,"linearizedBaseContracts":[1404],"name":"SafeCast","nodeType":"ContractDefinition","nodes":[{"body":{"id":1357,"nodeType":"Block","src":"421:47:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1346,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"440:1:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1349,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"452:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"444:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1347,"name":"uint160","nodeType":"ElementaryTypeName","src":"444:7:14","typeDescriptions":{}}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"444:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"440:14:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"439:16:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1353,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"459:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"439:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1345,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"431:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"431:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1356,"nodeType":"ExpressionStatement","src":"431:30:14"}]},"documentation":{"id":1338,"nodeType":"StructuredDocumentation","src":"188:164:14","text":"@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"},"id":1358,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nodeType":"FunctionDefinition","parameters":{"id":1341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1340,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1358,"src":"376:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1339,"name":"uint256","nodeType":"ElementaryTypeName","src":"376:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"375:11:14"},"returnParameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1358,"src":"410:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1342,"name":"uint160","nodeType":"ElementaryTypeName","src":"410:7:14","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"409:11:14"},"scope":1404,"src":"357:111:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1378,"nodeType":"Block","src":"713:46:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1367,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"732:1:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1370,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"743:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"736:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":1368,"name":"int128","nodeType":"ElementaryTypeName","src":"736:6:14","typeDescriptions":{}}},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"736:9:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"732:13:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"id":1373,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"731:15:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1374,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"750:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"731:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1366,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"723:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"723:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1377,"nodeType":"ExpressionStatement","src":"723:29:14"}]},"documentation":{"id":1359,"nodeType":"StructuredDocumentation","src":"474:173:14","text":"@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"},"id":1379,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nodeType":"FunctionDefinition","parameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1379,"src":"670:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1360,"name":"int256","nodeType":"ElementaryTypeName","src":"670:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"669:10:14"},"returnParameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1379,"src":"703:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1363,"name":"int128","nodeType":"ElementaryTypeName","src":"703:6:14","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"702:10:14"},"scope":1404,"src":"652:107:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1402,"nodeType":"Block","src":"986:59:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1388,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"1004:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":1391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1008:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323535","id":1390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1011:3:14","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1008:6:14","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"src":"1004:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1387,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"996:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"996:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1394,"nodeType":"ExpressionStatement","src":"996:19:14"},{"expression":{"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1395,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"1025:1:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1398,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"1036:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1029:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1396,"name":"int256","nodeType":"ElementaryTypeName","src":"1029:6:14","typeDescriptions":{}}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1029:9:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1025:13:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1401,"nodeType":"ExpressionStatement","src":"1025:13:14"}]},"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"765:154:14","text":"@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"},"id":1403,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":1403,"src":"942:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1381,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"941:11:14"},"returnParameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":1403,"src":"976:8:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1384,"name":"int256","nodeType":"ElementaryTypeName","src":"976:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"975:10:14"},"scope":1404,"src":"924:121:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1405,"src":"165:882:14"}],"src":"45:1003:14"},"id":14},"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol","exportedSymbols":{"FixedPoint96":[979],"FullMath":[1152],"LowGasSafeMath":[1334],"SafeCast":[1404],"SqrtPriceMath":[1920],"UnsafeMath":[2732]},"id":1921,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":1406,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"37:24:15"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","file":"./LowGasSafeMath.sol","id":1407,"nodeType":"ImportDirective","scope":1921,"sourceUnit":1335,"src":"63:30:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","file":"./SafeCast.sol","id":1408,"nodeType":"ImportDirective","scope":1921,"sourceUnit":1405,"src":"94:24:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","file":"./FullMath.sol","id":1409,"nodeType":"ImportDirective","scope":1921,"sourceUnit":1153,"src":"120:24:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol","file":"./UnsafeMath.sol","id":1410,"nodeType":"ImportDirective","scope":1921,"sourceUnit":2733,"src":"145:26:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol","file":"./FixedPoint96.sol","id":1411,"nodeType":"ImportDirective","scope":1921,"sourceUnit":980,"src":"172:28:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1412,"nodeType":"StructuredDocumentation","src":"202:167:15","text":"@title Functions based on Q64.96 sqrt price and liquidity\n @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas"},"fullyImplemented":true,"id":1920,"linearizedBaseContracts":[1920],"name":"SqrtPriceMath","nodeType":"ContractDefinition","nodes":[{"id":1415,"libraryName":{"id":1413,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"403:14:15","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"397:33:15","typeName":{"id":1414,"name":"uint256","nodeType":"ElementaryTypeName","src":"422:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":1418,"libraryName":{"id":1416,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"441:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"435:27:15","typeName":{"id":1417,"name":"uint256","nodeType":"ElementaryTypeName","src":"454:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"body":{"id":1537,"nodeType":"Block","src":"1585:1186:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1432,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"1711:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1711:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1437,"nodeType":"IfStatement","src":"1707:32:15","trueBody":{"expression":{"id":1435,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"1731:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1431,"id":1436,"nodeType":"Return","src":"1724:15:15"}},{"assignments":[1439],"declarations":[{"constant":false,"id":1439,"mutability":"mutable","name":"numerator1","nodeType":"VariableDeclaration","scope":1537,"src":"1749:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1447,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1442,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"1778:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1770:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"1770:7:15","typeDescriptions":{}}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1770:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1444,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"1792:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":975,"src":"1792:23:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1770:45:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1749:66:15"},{"condition":{"id":1448,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"1830:3:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1535,"nodeType":"Block","src":"2321:444:15","statements":[{"assignments":[1501],"declarations":[{"constant":false,"id":1501,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":1535,"src":"2335:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"2335:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1502,"nodeType":"VariableDeclarationStatement","src":"2335:15:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1504,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2531:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1505,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"2541:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1506,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"2550:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2541:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2531:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1509,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2530:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1510,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"2562:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2530:38:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1512,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"2572:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2530:50:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1514,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2584:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1515,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2597:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2584:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2530:74:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2522:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2522:83:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1519,"nodeType":"ExpressionStatement","src":"2522:83:15"},{"assignments":[1521],"declarations":[{"constant":false,"id":1521,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":1535,"src":"2619:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1520,"name":"uint256","nodeType":"ElementaryTypeName","src":"2619:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1525,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1522,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2641:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1523,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2654:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2619:42:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1528,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2708:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1529,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"2720:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1530,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"2730:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1526,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2682:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"2682:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2682:60:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toUint160","nodeType":"MemberAccess","referencedDeclaration":1358,"src":"2682:70:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint160)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2682:72:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1431,"id":1534,"nodeType":"Return","src":"2675:79:15"}]},"id":1536,"nodeType":"IfStatement","src":"1826:939:15","trueBody":{"id":1499,"nodeType":"Block","src":"1835:480:15","statements":[{"assignments":[1450],"declarations":[{"constant":false,"id":1450,"mutability":"mutable","name":"product","nodeType":"VariableDeclaration","scope":1499,"src":"1849:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1451,"nodeType":"VariableDeclarationStatement","src":"1849:15:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1452,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"1883:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1453,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"1893:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1454,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"1902:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1893:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1883:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1882:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1458,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"1914:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1882:38:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1460,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"1924:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1882:50:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1483,"nodeType":"IfStatement","src":"1878:323:15","trueBody":{"id":1482,"nodeType":"Block","src":"1934:267:15","statements":[{"assignments":[1463],"declarations":[{"constant":false,"id":1463,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":1482,"src":"1952:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1462,"name":"uint256","nodeType":"ElementaryTypeName","src":"1952:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1467,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1464,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"1974:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1465,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"1987:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1974:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1952:42:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1468,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"2016:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1469,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2031:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1481,"nodeType":"IfStatement","src":"2012:174:15","trueBody":{"expression":{"arguments":[{"arguments":[{"id":1475,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2151:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1476,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"2163:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1477,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"2173:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1473,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"2125:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"2125:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2125:60:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2117:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1471,"name":"uint160","nodeType":"ElementaryTypeName","src":"2117:7:15","typeDescriptions":{}}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2117:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1431,"id":1480,"nodeType":"Return","src":"2110:76:15"}}]}},{"expression":{"arguments":[{"arguments":[{"id":1488,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2255:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1494,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"2295:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2268:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1490,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"2281:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2268:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1492,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2267:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"2267:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2267:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1486,"name":"UnsafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"2230:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UnsafeMath_$2732_$","typeString":"type(library UnsafeMath)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"divRoundingUp","nodeType":"MemberAccess","referencedDeclaration":2731,"src":"2230:24:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2230:73:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2222:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1484,"name":"uint160","nodeType":"ElementaryTypeName","src":"2222:7:15","typeDescriptions":{}}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2222:82:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1431,"id":1498,"nodeType":"Return","src":"2215:89:15"}]}}]},"documentation":{"id":1419,"nodeType":"StructuredDocumentation","src":"468:932:15","text":"@notice Gets the next sqrt price given a delta of token0\n @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n price less in order to not send too much output.\n The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token0 to add or remove from virtual reserves\n @param add Whether to add or remove the amount of token0\n @return The price after adding or removing amount, depending on add"},"id":1538,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromAmount0RoundingUp","nodeType":"FunctionDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1538,"src":"1461:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1420,"name":"uint160","nodeType":"ElementaryTypeName","src":"1461:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1423,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1538,"src":"1487:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1422,"name":"uint128","nodeType":"ElementaryTypeName","src":"1487:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1425,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1538,"src":"1514:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"1514:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"add","nodeType":"VariableDeclaration","scope":1538,"src":"1538:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1426,"name":"bool","nodeType":"ElementaryTypeName","src":"1538:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1451:101:15"},"returnParameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1538,"src":"1576:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1429,"name":"uint160","nodeType":"ElementaryTypeName","src":"1576:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1575:9:15"},"scope":1920,"src":"1405:1366:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1632,"nodeType":"Block","src":"3779:971:15","statements":[{"condition":{"id":1552,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"3947:3:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1630,"nodeType":"Block","src":"4303:441:15","statements":[{"assignments":[1591],"declarations":[{"constant":false,"id":1591,"mutability":"mutable","name":"quotient","nodeType":"VariableDeclaration","scope":1630,"src":"4317:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"4317:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1616,"initialValue":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1592,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"4374:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1594,"name":"uint160","nodeType":"ElementaryTypeName","src":"4389:7:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1593,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4384:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4384:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4384:17:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4374:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1609,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"4551:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1610,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4559:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":978,"src":"4559:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1612,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4577:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1607,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"4525:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"4525:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4525:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4374:213:15","trueExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1601,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"4453:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1602,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4463:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":975,"src":"4463:23:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4453:33:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1605,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4488:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1599,"name":"UnsafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"4428:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UnsafeMath_$2732_$","typeString":"type(library UnsafeMath)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"divRoundingUp","nodeType":"MemberAccess","referencedDeclaration":2731,"src":"4428:24:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4428:70:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4352:253:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4317:288:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1618,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"4628:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1619,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"4639:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4628:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1617,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4620:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4620:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1622,"nodeType":"ExpressionStatement","src":"4620:28:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1625,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"4713:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1626,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"4724:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4713:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4705:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1623,"name":"uint160","nodeType":"ElementaryTypeName","src":"4705:7:15","typeDescriptions":{}}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4705:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1551,"id":1629,"nodeType":"Return","src":"4698:35:15"}]},"id":1631,"nodeType":"IfStatement","src":"3943:801:15","trueBody":{"id":1589,"nodeType":"Block","src":"3952:345:15","statements":[{"assignments":[1554],"declarations":[{"constant":false,"id":1554,"mutability":"mutable","name":"quotient","nodeType":"VariableDeclaration","scope":1589,"src":"3966:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"3966:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1578,"initialValue":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"4023:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4038:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1557,"name":"uint160","nodeType":"ElementaryTypeName","src":"4038:7:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1556,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4033:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4033:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4033:17:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4023:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1571,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"4167:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1572,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4175:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":978,"src":"4175:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1574,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4193:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1569,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"4151:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1108,"src":"4151:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4151:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4023:180:15","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1562,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"4078:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1563,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4088:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":975,"src":"4088:23:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4078:33:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4077:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1567,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4115:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"4077:47:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1577,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4001:220:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3966:255:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1584,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"4265:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1581,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"4251:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1579,"name":"uint256","nodeType":"ElementaryTypeName","src":"4243:7:15","typeDescriptions":{}}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4243:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"4243:21:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4243:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toUint160","nodeType":"MemberAccess","referencedDeclaration":1358,"src":"4243:41:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint160_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint160)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4243:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1551,"id":1588,"nodeType":"Return","src":"4236:50:15"}]}}]},"documentation":{"id":1539,"nodeType":"StructuredDocumentation","src":"2777:815:15","text":"@notice Gets the next sqrt price given a delta of token1\n @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n price less in order to not send too much output.\n The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n @param liquidity The amount of usable liquidity\n @param amount How much of token1 to add, or remove, from virtual reserves\n @param add Whether to add, or remove, the amount of token1\n @return The price after adding or removing `amount`"},"id":1633,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromAmount1RoundingDown","nodeType":"FunctionDefinition","parameters":{"id":1548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1633,"src":"3655:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1540,"name":"uint160","nodeType":"ElementaryTypeName","src":"3655:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1633,"src":"3681:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1542,"name":"uint128","nodeType":"ElementaryTypeName","src":"3681:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1545,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1633,"src":"3708:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1544,"name":"uint256","nodeType":"ElementaryTypeName","src":"3708:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1547,"mutability":"mutable","name":"add","nodeType":"VariableDeclaration","scope":1633,"src":"3732:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1546,"name":"bool","nodeType":"ElementaryTypeName","src":"3732:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3645:101:15"},"returnParameters":{"id":1551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1550,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1633,"src":"3770:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1549,"name":"uint160","nodeType":"ElementaryTypeName","src":"3770:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"3769:9:15"},"scope":1920,"src":"3597:1153:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1674,"nodeType":"Block","src":"5485:364:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1648,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"5503:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5514:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5503:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1647,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5495:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5495:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1652,"nodeType":"ExpressionStatement","src":"5495:21:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1654,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"5534:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5546:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5534:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1653,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5526:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5526:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1658,"nodeType":"ExpressionStatement","src":"5526:22:15"},{"expression":{"condition":{"id":1659,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"5644:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1667,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"5806:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1668,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"5816:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1669,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"5827:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5837:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1666,"name":"getNextSqrtPriceFromAmount1RoundingDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"5766:39:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5766:76:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5644:198:15","trueExpression":{"arguments":[{"id":1661,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"5711:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1662,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"5721:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1663,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"5732:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5742:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1660,"name":"getNextSqrtPriceFromAmount0RoundingUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"5673:37:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5673:74:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1646,"id":1673,"nodeType":"Return","src":"5625:217:15"}]},"documentation":{"id":1634,"nodeType":"StructuredDocumentation","src":"4756:538:15","text":"@notice Gets the next sqrt price given an input amount of token0 or token1\n @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n @param liquidity The amount of usable liquidity\n @param amountIn How much of token0, or token1, is being swapped in\n @param zeroForOne Whether the amount in is token0 or token1\n @return sqrtQX96 The price after adding the input amount to token0 or token1"},"id":1675,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromInput","nodeType":"FunctionDefinition","parameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1675,"src":"5343:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1635,"name":"uint160","nodeType":"ElementaryTypeName","src":"5343:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1675,"src":"5369:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1637,"name":"uint128","nodeType":"ElementaryTypeName","src":"5369:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1640,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":1675,"src":"5396:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1639,"name":"uint256","nodeType":"ElementaryTypeName","src":"5396:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":1675,"src":"5422:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1641,"name":"bool","nodeType":"ElementaryTypeName","src":"5422:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5333:110:15"},"returnParameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"sqrtQX96","nodeType":"VariableDeclaration","scope":1675,"src":"5467:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1644,"name":"uint160","nodeType":"ElementaryTypeName","src":"5467:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"5466:18:15"},"scope":1920,"src":"5299:550:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1716,"nodeType":"Block","src":"6583:362:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1690,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"6601:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6612:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1689,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6593:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6593:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"6593:21:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1696,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"6632:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6644:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6632:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1695,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6624:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6624:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1700,"nodeType":"ExpressionStatement","src":"6624:22:15"},{"expression":{"condition":{"id":1701,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"6736:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1709,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"6900:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1710,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"6910:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1711,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6921:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6932:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1708,"name":"getNextSqrtPriceFromAmount0RoundingUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"6862:37:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6862:76:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6736:202:15","trueExpression":{"arguments":[{"id":1703,"name":"sqrtPX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"6805:8:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1704,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"6815:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1705,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6826:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6837:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1702,"name":"getNextSqrtPriceFromAmount1RoundingDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"6765:39:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6765:78:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1688,"id":1715,"nodeType":"Return","src":"6717:221:15"}]},"documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"5855:535:15","text":"@notice Gets the next sqrt price given an output amount of token0 or token1\n @dev Throws if price or liquidity are 0 or the next price is out of bounds\n @param sqrtPX96 The starting price before accounting for the output amount\n @param liquidity The amount of usable liquidity\n @param amountOut How much of token0, or token1, is being swapped out\n @param zeroForOne Whether the amount out is token0 or token1\n @return sqrtQX96 The price after removing the output amount of token0 or token1"},"id":1717,"implemented":true,"kind":"function","modifiers":[],"name":"getNextSqrtPriceFromOutput","nodeType":"FunctionDefinition","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"sqrtPX96","nodeType":"VariableDeclaration","scope":1717,"src":"6440:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1677,"name":"uint160","nodeType":"ElementaryTypeName","src":"6440:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1680,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1717,"src":"6466:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1679,"name":"uint128","nodeType":"ElementaryTypeName","src":"6466:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":1717,"src":"6493:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"6493:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":1717,"src":"6520:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1683,"name":"bool","nodeType":"ElementaryTypeName","src":"6520:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6430:111:15"},"returnParameters":{"id":1688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"sqrtQX96","nodeType":"VariableDeclaration","scope":1717,"src":"6565:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1686,"name":"uint160","nodeType":"ElementaryTypeName","src":"6565:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"6564:18:15"},"scope":1920,"src":"6395:550:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1786,"nodeType":"Block","src":"7675:597:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7689:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1732,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"7705:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7689:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1742,"nodeType":"IfStatement","src":"7685:98:15","trueBody":{"expression":{"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1734,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7721:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1735,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"7736:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1736,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"7720:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1737,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"7754:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1738,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7769:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1739,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7753:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"src":"7720:63:15","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1741,"nodeType":"ExpressionStatement","src":"7720:63:15"}},{"assignments":[1744],"declarations":[{"constant":false,"id":1744,"mutability":"mutable","name":"numerator1","nodeType":"VariableDeclaration","scope":1786,"src":"7794:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"7794:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1752,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1747,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"7823:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7815:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"7815:7:15","typeDescriptions":{}}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7815:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"expression":{"id":1749,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"7837:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"RESOLUTION","nodeType":"MemberAccess","referencedDeclaration":975,"src":"7837:23:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7815:45:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7794:66:15"},{"assignments":[1754],"declarations":[{"constant":false,"id":1754,"mutability":"mutable","name":"numerator2","nodeType":"VariableDeclaration","scope":1786,"src":"7870:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1753,"name":"uint256","nodeType":"ElementaryTypeName","src":"7870:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1758,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1755,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"7891:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1756,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7907:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7891:29:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"7870:50:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1760,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"7939:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7955:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7939:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1759,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7931:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7931:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1764,"nodeType":"ExpressionStatement","src":"7931:26:15"},{"expression":{"condition":{"id":1765,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"7987:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1778,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"8211:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1779,"name":"numerator2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8223:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1780,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"8235:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":1776,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"8195:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1108,"src":"8195:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8195:54:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1782,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"8252:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8195:70:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"7987:278:15","trueExpression":{"arguments":[{"arguments":[{"id":1770,"name":"numerator1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"8085:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1771,"name":"numerator2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"8097:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1772,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"8109:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":1768,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"8059:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"8059:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8059:64:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1774,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"8145:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":1766,"name":"UnsafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"8013:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UnsafeMath_$2732_$","typeString":"type(library UnsafeMath)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"divRoundingUp","nodeType":"MemberAccess","referencedDeclaration":2731,"src":"8013:24:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8013:163:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1730,"id":1785,"nodeType":"Return","src":"7968:297:15"}]},"documentation":{"id":1718,"nodeType":"StructuredDocumentation","src":"6951:537:15","text":"@notice Gets the amount0 delta between two prices\n @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up or down\n @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices"},"id":1787,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount0Delta","nodeType":"FunctionDefinition","parameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1787,"src":"7527:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1719,"name":"uint160","nodeType":"ElementaryTypeName","src":"7527:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1787,"src":"7558:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1721,"name":"uint160","nodeType":"ElementaryTypeName","src":"7558:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1787,"src":"7589:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1723,"name":"uint128","nodeType":"ElementaryTypeName","src":"7589:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1726,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","scope":1787,"src":"7616:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1725,"name":"bool","nodeType":"ElementaryTypeName","src":"7616:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7517:117:15"},"returnParameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1787,"src":"7658:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1728,"name":"uint256","nodeType":"ElementaryTypeName","src":"7658:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7657:17:15"},"scope":1920,"src":"7493:779:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1834,"nodeType":"Block","src":"8909:350:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1801,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"8923:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1802,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"8939:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8923:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1812,"nodeType":"IfStatement","src":"8919:98:15","trueBody":{"expression":{"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1804,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"8955:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1805,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"8970:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1806,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"8954:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1807,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"8988:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1808,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"9003:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":1809,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8987:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"src":"8954:63:15","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1811,"nodeType":"ExpressionStatement","src":"8954:63:15"}},{"expression":{"condition":{"id":1813,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"9047:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1825,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"9193:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1826,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"9204:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1827,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"9220:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"9204:29:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":1829,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"9235:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":978,"src":"9235:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1823,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9177:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1108,"src":"9177:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9177:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9047:205:15","trueExpression":{"arguments":[{"id":1816,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"9099:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1817,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"9110:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1818,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"9126:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"9110:29:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":1820,"name":"FixedPoint96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"9141:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FixedPoint96_$979_$","typeString":"type(library FixedPoint96)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Q96","nodeType":"MemberAccess","referencedDeclaration":978,"src":"9141:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1814,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9073:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"9073:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9073:85:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1800,"id":1833,"nodeType":"Return","src":"9028:224:15"}]},"documentation":{"id":1788,"nodeType":"StructuredDocumentation","src":"8278:444:15","text":"@notice Gets the amount1 delta between two prices\n @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The amount of usable liquidity\n @param roundUp Whether to round the amount up, or down\n @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices"},"id":1835,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount1Delta","nodeType":"FunctionDefinition","parameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1835,"src":"8761:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1789,"name":"uint160","nodeType":"ElementaryTypeName","src":"8761:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1792,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1835,"src":"8792:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1791,"name":"uint160","nodeType":"ElementaryTypeName","src":"8792:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1794,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1835,"src":"8823:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1793,"name":"uint128","nodeType":"ElementaryTypeName","src":"8823:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","scope":1835,"src":"8850:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1795,"name":"bool","nodeType":"ElementaryTypeName","src":"8850:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8751:117:15"},"returnParameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1835,"src":"8892:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1798,"name":"uint256","nodeType":"ElementaryTypeName","src":"8892:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8891:17:15"},"scope":1920,"src":"8727:532:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1876,"nodeType":"Block","src":"9761:254:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int128","typeString":"int128"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1847,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"9790:9:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9802:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9790:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1864,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"9942:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1865,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"9957:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1868,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"9980:9:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9972:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1866,"name":"uint128","nodeType":"ElementaryTypeName","src":"9972:7:15","typeDescriptions":{}}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9972:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9992:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1863,"name":"getAmount0Delta","nodeType":"Identifier","overloadedDeclarations":[1787,1877],"referencedDeclaration":1787,"src":"9926:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9926:71:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"9926:80:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9926:82:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9790:218:15","trueExpression":{"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9822:85:15","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1851,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"9839:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1852,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"9854:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9877:10:15","subExpression":{"id":1855,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"9878:9:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9869:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1853,"name":"uint128","nodeType":"ElementaryTypeName","src":"9869:7:15","typeDescriptions":{}}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9869:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9890:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1850,"name":"getAmount0Delta","nodeType":"Identifier","overloadedDeclarations":[1787,1877],"referencedDeclaration":1787,"src":"9823:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9823:73:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"9823:82:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9823:84:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1846,"id":1875,"nodeType":"Return","src":"9771:237:15"}]},"documentation":{"id":1836,"nodeType":"StructuredDocumentation","src":"9265:333:15","text":"@notice Helper that gets signed token0 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount0 delta\n @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices"},"id":1877,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount0Delta","nodeType":"FunctionDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1877,"src":"9637:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1837,"name":"uint160","nodeType":"ElementaryTypeName","src":"9637:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1840,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1877,"src":"9668:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1839,"name":"uint160","nodeType":"ElementaryTypeName","src":"9668:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1842,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1877,"src":"9699:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1841,"name":"int128","nodeType":"ElementaryTypeName","src":"9699:6:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"9627:94:15"},"returnParameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":1877,"src":"9745:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1844,"name":"int256","nodeType":"ElementaryTypeName","src":"9745:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9744:16:15"},"scope":1920,"src":"9603:412:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1918,"nodeType":"Block","src":"10517:254:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int128","typeString":"int128"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1889,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"10546:9:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10558:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10546:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1906,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"10698:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1907,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"10713:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1910,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"10736:9:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10728:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1908,"name":"uint128","nodeType":"ElementaryTypeName","src":"10728:7:15","typeDescriptions":{}}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10728:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10748:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1905,"name":"getAmount1Delta","nodeType":"Identifier","overloadedDeclarations":[1835,1919],"referencedDeclaration":1835,"src":"10682:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10682:71:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"10682:80:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10682:82:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10546:218:15","trueExpression":{"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"10578:85:15","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1893,"name":"sqrtRatioAX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"10595:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1894,"name":"sqrtRatioBX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"10610:13:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"10633:10:15","subExpression":{"id":1897,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"10634:9:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int128","typeString":"int128"}],"id":1896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10625:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1895,"name":"uint128","nodeType":"ElementaryTypeName","src":"10625:7:15","typeDescriptions":{}}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10625:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10646:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1892,"name":"getAmount1Delta","nodeType":"Identifier","overloadedDeclarations":[1835,1919],"referencedDeclaration":1835,"src":"10579:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10579:73:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"10579:82:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10579:84:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1888,"id":1917,"nodeType":"Return","src":"10527:237:15"}]},"documentation":{"id":1878,"nodeType":"StructuredDocumentation","src":"10021:333:15","text":"@notice Helper that gets signed token1 delta\n @param sqrtRatioAX96 A sqrt price\n @param sqrtRatioBX96 Another sqrt price\n @param liquidity The change in liquidity for which to compute the amount1 delta\n @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices"},"id":1919,"implemented":true,"kind":"function","modifiers":[],"name":"getAmount1Delta","nodeType":"FunctionDefinition","parameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"sqrtRatioAX96","nodeType":"VariableDeclaration","scope":1919,"src":"10393:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1879,"name":"uint160","nodeType":"ElementaryTypeName","src":"10393:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"sqrtRatioBX96","nodeType":"VariableDeclaration","scope":1919,"src":"10424:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1881,"name":"uint160","nodeType":"ElementaryTypeName","src":"10424:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":1919,"src":"10455:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":1883,"name":"int128","nodeType":"ElementaryTypeName","src":"10455:6:15","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"10383:94:15"},"returnParameters":{"id":1888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":1919,"src":"10501:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1886,"name":"int256","nodeType":"ElementaryTypeName","src":"10501:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"10500:16:15"},"scope":1920,"src":"10359:412:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1921,"src":"369:10404:15"}],"src":"37:10737:15"},"id":15},"@uniswap/v3-core/contracts/libraries/SwapMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/SwapMath.sol","exportedSymbols":{"FixedPoint96":[979],"FullMath":[1152],"LowGasSafeMath":[1334],"SafeCast":[1404],"SqrtPriceMath":[1920],"SwapMath":[2181],"UnsafeMath":[2732]},"id":2182,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":1922,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"37:24:16"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","file":"./FullMath.sol","id":1923,"nodeType":"ImportDirective","scope":2182,"sourceUnit":1153,"src":"63:24:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol","file":"./SqrtPriceMath.sol","id":1924,"nodeType":"ImportDirective","scope":2182,"sourceUnit":1921,"src":"88:29:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"119:173:16","text":"@title Computes the result of a swap within ticks\n @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick."},"fullyImplemented":true,"id":2181,"linearizedBaseContracts":[2181],"name":"SwapMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":2179,"nodeType":"Block","src":"1769:2861:16","statements":[{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":2179,"src":"1779:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1947,"name":"bool","nodeType":"ElementaryTypeName","src":"1779:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1952,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1797:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1950,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1820:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1797:41:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1779:59:16"},{"assignments":[1954],"declarations":[{"constant":false,"id":1954,"mutability":"mutable","name":"exactIn","nodeType":"VariableDeclaration","scope":2179,"src":"1848:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1953,"name":"bool","nodeType":"ElementaryTypeName","src":"1848:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1958,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"1863:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1882:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1863:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1848:35:16"},{"condition":{"id":1959,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"1898:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2057,"nodeType":"Block","src":"2629:619:16","statements":[{"expression":{"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2012,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"2643:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":2013,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2655:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2023,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"2821:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2024,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2842:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2025,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"2862:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2873:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2021,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2791:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1787,"src":"2791:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2791:88:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2655:224:16","trueExpression":{"arguments":[{"id":2016,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2714:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2017,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"2734:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2018,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"2755:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2766:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2014,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2684:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1835,"src":"2684:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2684:88:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2643:236:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2030,"nodeType":"ExpressionStatement","src":"2643:236:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2905:16:16","subExpression":{"id":2033,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"2906:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2897:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"2897:7:16","typeDescriptions":{}}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2897:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2036,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"2926:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2897:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2042,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3009:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2045,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"3090:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2046,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"3131:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"arguments":[{"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3170:16:16","subExpression":{"id":2049,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"3171:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3162:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2047,"name":"uint256","nodeType":"ElementaryTypeName","src":"3162:7:16","typeDescriptions":{}}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3162:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2052,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"3209:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2043,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3028:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getNextSqrtPriceFromOutput","nodeType":"MemberAccess","referencedDeclaration":1717,"src":"3028:40:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3028:209:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3009:228:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2055,"nodeType":"ExpressionStatement","src":"3009:228:16"},"id":2056,"nodeType":"IfStatement","src":"2893:344:16","trueBody":{"expression":{"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2038,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2937:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2039,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2956:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2937:37:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2041,"nodeType":"ExpressionStatement","src":"2937:37:16"}}]},"id":2058,"nodeType":"IfStatement","src":"1894:1354:16","trueBody":{"id":2011,"nodeType":"Block","src":"1907:716:16","statements":[{"assignments":[1961],"declarations":[{"constant":false,"id":1961,"mutability":"mutable","name":"amountRemainingLessFee","nodeType":"VariableDeclaration","scope":2011,"src":"1921:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"1921:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1973,"initialValue":{"arguments":[{"arguments":[{"id":1966,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"1978:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1970:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"1970:7:16","typeDescriptions":{}}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1970:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"316536","id":1968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1996:3:16","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1969,"name":"feePips","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"2002:7:16","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"1996:13:16","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"hexValue":"316536","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2011:3:16","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"}],"expression":{"id":1962,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"1954:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1108,"src":"1954:15:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1954:61:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1921:94:16"},{"expression":{"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1974,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"2029:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":1975,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2040:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1985,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"2205:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1986,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2226:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1987,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"2246:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2257:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1983,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2175:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1835,"src":"2175:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2175:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2040:222:16","trueExpression":{"arguments":[{"id":1978,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2099:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1979,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"2119:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1980,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"2140:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2151:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1976,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2069:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1787,"src":"2069:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2069:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2029:233:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1992,"nodeType":"ExpressionStatement","src":"2029:233:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1993,"name":"amountRemainingLessFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2280:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1994,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"2306:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2280:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2000,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2388:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2003,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"2468:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2004,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"2509:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2005,"name":"amountRemainingLessFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"2540:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2006,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2584:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2001,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2407:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getNextSqrtPriceFromInput","nodeType":"MemberAccess","referencedDeclaration":1675,"src":"2407:39:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint128_$_t_uint256_$_t_bool_$returns$_t_uint160_$","typeString":"function (uint160,uint128,uint256,bool) pure returns (uint160)"}},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2407:205:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2388:224:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2009,"nodeType":"ExpressionStatement","src":"2388:224:16"},"id":2010,"nodeType":"IfStatement","src":"2276:336:16","trueBody":{"expression":{"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1996,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2316:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1997,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"2335:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2316:37:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1999,"nodeType":"ExpressionStatement","src":"2316:37:16"}}]}},{"assignments":[2060],"declarations":[{"constant":false,"id":2060,"mutability":"mutable","name":"max","nodeType":"VariableDeclaration","scope":2179,"src":"3258:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2059,"name":"bool","nodeType":"ElementaryTypeName","src":"3258:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2064,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"3269:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2062,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3291:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3269:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3258:49:16"},{"condition":{"id":2065,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"3362:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2129,"nodeType":"Block","src":"3735:355:16","statements":[{"expression":{"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2098,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"3749:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2099,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3760:3:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2100,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"3767:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3760:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2105,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"3850:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2106,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3871:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2107,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"3889:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3900:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2103,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3820:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1835,"src":"3820:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3820:85:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3760:145:16","trueExpression":{"id":2102,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"3793:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3749:156:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2112,"nodeType":"ExpressionStatement","src":"3749:156:16"},{"expression":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2113,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"3919:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2114,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3931:3:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3938:8:16","subExpression":{"id":2115,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"3939:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3931:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2121,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"4023:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2122,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"4044:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2123,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"4062:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4073:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2119,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3993:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1787,"src":"3993:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3993:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3931:148:16","trueExpression":{"id":2118,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"3965:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3919:160:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2128,"nodeType":"ExpressionStatement","src":"3919:160:16"}]},"id":2130,"nodeType":"IfStatement","src":"3358:732:16","trueBody":{"id":2097,"nodeType":"Block","src":"3374:355:16","statements":[{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2066,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"3388:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2067,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3399:3:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2068,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"3406:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3399:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2073,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3489:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2074,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"3507:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2075,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"3528:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"74727565","id":2076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3539:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2071,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3459:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount0Delta","nodeType":"MemberAccess","referencedDeclaration":1787,"src":"3459:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3459:85:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3399:145:16","trueExpression":{"id":2070,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"3432:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3388:156:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2080,"nodeType":"ExpressionStatement","src":"3388:156:16"},{"expression":{"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2081,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"3558:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3570:3:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3577:8:16","subExpression":{"id":2083,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"3578:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3570:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2089,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3662:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2090,"name":"sqrtRatioCurrentX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"3680:19:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":2091,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"3701:9:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"hexValue":"66616c7365","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3712:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2087,"name":"SqrtPriceMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3632:13:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SqrtPriceMath_$1920_$","typeString":"type(library SqrtPriceMath)"}},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmount1Delta","nodeType":"MemberAccess","referencedDeclaration":1835,"src":"3632:29:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint160,uint160,uint128,bool) pure returns (uint256)"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3632:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3570:148:16","trueExpression":{"id":2086,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"3604:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3558:160:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2096,"nodeType":"ExpressionStatement","src":"3558:160:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4179:8:16","subExpression":{"id":2131,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"4180:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2133,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"4191:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4211:16:16","subExpression":{"id":2136,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"4212:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4203:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"4203:7:16","typeDescriptions":{}}},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4203:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4191:37:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4179:49:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2150,"nodeType":"IfStatement","src":"4175:117:16","trueBody":{"id":2149,"nodeType":"Block","src":"4230:62:16","statements":[{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2141,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"4244:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4264:16:16","subExpression":{"id":2144,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"4265:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4256:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4256:7:16","typeDescriptions":{}}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4256:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4244:37:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"4244:37:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"name":"exactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"4306:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"sqrtRatioNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"4317:16:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2153,"name":"sqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"4337:18:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4317:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4306:49:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2177,"nodeType":"Block","src":"4528:96:16","statements":[{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2166,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"4542:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2169,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"4580:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2170,"name":"feePips","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"4590:7:16","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"commonType":{"typeIdentifier":"t_uint24","typeString":"uint24"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"316536","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4599:3:16","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2172,"name":"feePips","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"4605:7:16","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"4599:13:16","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":2167,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"4554:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1152_$","typeString":"type(library FullMath)"}},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDivRoundingUp","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"4554:25:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4554:59:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4542:71:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"4542:71:16"}]},"id":2178,"nodeType":"IfStatement","src":"4302:322:16","trueBody":{"id":2165,"nodeType":"Block","src":"4357:165:16","statements":[{"expression":{"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2156,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"4464:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2159,"name":"amountRemaining","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"4484:15:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4476:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"4476:7:16","typeDescriptions":{}}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4476:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2161,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"4503:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4476:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4464:47:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2164,"nodeType":"ExpressionStatement","src":"4464:47:16"}]}}]},"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"315:1071:16","text":"@notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n @param sqrtRatioCurrentX96 The current sqrt price of the pool\n @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n @param liquidity The usable liquidity\n @param amountRemaining How much input or output amount is remaining to be swapped in/out\n @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n @return feeAmount The amount of input that will be taken as a fee"},"id":2180,"implemented":true,"kind":"function","modifiers":[],"name":"computeSwapStep","nodeType":"FunctionDefinition","parameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"sqrtRatioCurrentX96","nodeType":"VariableDeclaration","scope":2180,"src":"1425:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1927,"name":"uint160","nodeType":"ElementaryTypeName","src":"1425:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1930,"mutability":"mutable","name":"sqrtRatioTargetX96","nodeType":"VariableDeclaration","scope":2180,"src":"1462:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1929,"name":"uint160","nodeType":"ElementaryTypeName","src":"1462:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1932,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":2180,"src":"1498:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1931,"name":"uint128","nodeType":"ElementaryTypeName","src":"1498:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1934,"mutability":"mutable","name":"amountRemaining","nodeType":"VariableDeclaration","scope":2180,"src":"1525:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1933,"name":"int256","nodeType":"ElementaryTypeName","src":"1525:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"feePips","nodeType":"VariableDeclaration","scope":2180,"src":"1557:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1935,"name":"uint24","nodeType":"ElementaryTypeName","src":"1557:6:16","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"1415:162:16"},"returnParameters":{"id":1946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"sqrtRatioNextX96","nodeType":"VariableDeclaration","scope":2180,"src":"1638:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1938,"name":"uint160","nodeType":"ElementaryTypeName","src":"1638:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":2180,"src":"1676:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1940,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":2180,"src":"1706:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1706:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1945,"mutability":"mutable","name":"feeAmount","nodeType":"VariableDeclaration","scope":2180,"src":"1737:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"1737:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1624:140:16"},"scope":2181,"src":"1391:3239:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2182,"src":"292:4340:16"}],"src":"37:4596:16"},"id":16},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/TickMath.sol","exportedSymbols":{"TickMath":[2716]},"id":2717,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2183,"literals":["solidity",">=","0.5",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"45:31:17"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2184,"nodeType":"StructuredDocumentation","src":"78:235:17","text":"@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"},"fullyImplemented":true,"id":2716,"linearizedBaseContracts":[2716],"name":"TickMath","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":2185,"nodeType":"StructuredDocumentation","src":"336:108:17","text":"@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"},"id":2189,"mutability":"constant","name":"MIN_TICK","nodeType":"VariableDeclaration","scope":2716,"src":"449:42:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2186,"name":"int24","nodeType":"ElementaryTypeName","src":"449:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":2188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"484:7:17","subExpression":{"hexValue":"383837323732","id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"485:6:17","typeDescriptions":{"typeIdentifier":"t_rational_887272_by_1","typeString":"int_const 887272"},"value":"887272"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_887272_by_1","typeString":"int_const -887272"}},"visibility":"internal"},{"constant":true,"documentation":{"id":2190,"nodeType":"StructuredDocumentation","src":"497:107:17","text":"@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"id":2194,"mutability":"constant","name":"MAX_TICK","nodeType":"VariableDeclaration","scope":2716,"src":"609:44:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2191,"name":"int24","nodeType":"ElementaryTypeName","src":"609:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":2193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"644:9:17","subExpression":{"id":2192,"name":"MIN_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"645:8:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":true,"documentation":{"id":2195,"nodeType":"StructuredDocumentation","src":"660:116:17","text":"@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"id":2198,"mutability":"constant","name":"MIN_SQRT_RATIO","nodeType":"VariableDeclaration","scope":2716,"src":"781:53:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2196,"name":"uint160","nodeType":"ElementaryTypeName","src":"781:7:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"34323935313238373339","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"824:10:17","typeDescriptions":{"typeIdentifier":"t_rational_4295128739_by_1","typeString":"int_const 4295128739"},"value":"4295128739"},"visibility":"internal"},{"constant":true,"documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"840:116:17","text":"@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"id":2202,"mutability":"constant","name":"MAX_SQRT_RATIO","nodeType":"VariableDeclaration","scope":2716,"src":"961:92:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2200,"name":"uint160","nodeType":"ElementaryTypeName","src":"961:7:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:49:17","typeDescriptions":{"typeIdentifier":"t_rational_1461446703485210103287273052203988822378723970342_by_1","typeString":"int_const 1461...(41 digits omitted)...0342"},"value":"1461446703485210103287273052203988822378723970342"},"visibility":"internal"},{"body":{"id":2575,"nodeType":"Block","src":"1447:2495:17","statements":[{"assignments":[2211],"declarations":[{"constant":false,"id":2211,"mutability":"mutable","name":"absTick","nodeType":"VariableDeclaration","scope":2575,"src":"1457:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2231,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2212,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"1475:4:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1482:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1475:8:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":2227,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"1526:4:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1519:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2225,"name":"int256","nodeType":"ElementaryTypeName","src":"1519:6:17","typeDescriptions":{}}},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1519:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1511:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1511:7:17","typeDescriptions":{}}},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1511:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1475:57:17","trueExpression":{"arguments":[{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1494:13:17","subExpression":{"arguments":[{"id":2219,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"1502:4:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1495:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2217,"name":"int256","nodeType":"ElementaryTypeName","src":"1495:6:17","typeDescriptions":{}}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1495:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1486:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1486:7:17","typeDescriptions":{}}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1486:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1457:75:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2233,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1550:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":2236,"name":"MAX_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"1569:8:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1561:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2234,"name":"uint256","nodeType":"ElementaryTypeName","src":"1561:7:17","typeDescriptions":{}}},"id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1561:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1550:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1580:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""},"value":"T"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""}],"id":2232,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1542:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1542:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2241,"nodeType":"ExpressionStatement","src":"1542:42:17"},{"assignments":[2243],"declarations":[{"constant":false,"id":2243,"mutability":"mutable","name":"ratio","nodeType":"VariableDeclaration","scope":2575,"src":"1595:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2252,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2244,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1611:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1621:3:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"},"src":"1611:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1628:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1611:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1669:35:17","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1611:93:17","trueExpression":{"hexValue":"30786666666362393333626436666164333761613264313632643161353934303031","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:34:17","typeDescriptions":{"typeIdentifier":"t_rational_340265354078544963557816517032075149313_by_1","typeString":"int_const 3402...(31 digits omitted)...9313"},"value":"0xfffcb933bd6fad37aa2d162d1a594001"},"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"nodeType":"VariableDeclarationStatement","src":"1595:109:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2253,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1718:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1728:3:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"0x2"},"src":"1718:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1718:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2267,"nodeType":"IfStatement","src":"1714:83:17","trueBody":{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2258,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1738:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2259,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1747:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663937323732333733643431333235396134363939303538306532313361","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:34:17","typeDescriptions":{"typeIdentifier":"t_rational_340248342086729790484326174814286782778_by_1","typeString":"int_const 3402...(31 digits omitted)...2778"},"value":"0xfff97272373d413259a46990580e213a"},"src":"1747:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1746:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1746:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1738:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"1738:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1811:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1821:3:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"src":"1811:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1828:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1811:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2282,"nodeType":"IfStatement","src":"1807:83:17","trueBody":{"expression":{"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2273,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1831:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2274,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1840:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663265353066356636353639333265663132333537636633633766646363","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1848:34:17","typeDescriptions":{"typeIdentifier":"t_rational_340214320654664324051920982716015181260_by_1","typeString":"int_const 3402...(31 digits omitted)...1260"},"value":"0xfff2e50f5f656932ef12357cf3c7fdcc"},"src":"1840:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2277,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1839:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1839:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1831:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2281,"nodeType":"ExpressionStatement","src":"1831:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1904:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1914:3:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x8"},"src":"1904:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1921:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1904:18:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2297,"nodeType":"IfStatement","src":"1900:83:17","trueBody":{"expression":{"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2288,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1924:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2289,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1933:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666653563616361376531306534653631633336323465616130393431636430","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1941:34:17","typeDescriptions":{"typeIdentifier":"t_rational_340146287995602323631171512101879684304_by_1","typeString":"int_const 3401...(31 digits omitted)...4304"},"value":"0xffe5caca7e10e4e61c3624eaa0941cd0"},"src":"1933:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1932:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1980:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1932:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1924:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2296,"nodeType":"ExpressionStatement","src":"1924:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2298,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1997:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:4:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"0x10"},"src":"1997:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2015:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1997:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2312,"nodeType":"IfStatement","src":"1993:84:17","trueBody":{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2303,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2018:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2304,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2027:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666636239383433643630663631353963396462353838333563393236363434","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2035:34:17","typeDescriptions":{"typeIdentifier":"t_rational_340010263488231146823593991679159461444_by_1","typeString":"int_const 3400...(31 digits omitted)...1444"},"value":"0xffcb9843d60f6159c9db58835c926644"},"src":"2027:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2026:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2074:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2026:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2018:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"2018:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2091:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2101:4:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"2091:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2109:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2091:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2327,"nodeType":"IfStatement","src":"2087:84:17","trueBody":{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2318,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2112:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2319,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2121:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666393733623431666139386330383134373265363839366466623235346330","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2129:34:17","typeDescriptions":{"typeIdentifier":"t_rational_339738377640345403697157401104375502016_by_1","typeString":"int_const 3397...(31 digits omitted)...2016"},"value":"0xff973b41fa98c081472e6896dfb254c0"},"src":"2121:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2120:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2168:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2120:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2112:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2326,"nodeType":"ExpressionStatement","src":"2112:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2328,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2185:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2195:4:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"src":"2185:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2203:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2185:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2342,"nodeType":"IfStatement","src":"2181:84:17","trueBody":{"expression":{"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2333,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2206:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2215:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666326561313634363663393661333834336563373862333236623532383631","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2223:34:17","typeDescriptions":{"typeIdentifier":"t_rational_339195258003219555707034227454543997025_by_1","typeString":"int_const 3391...(31 digits omitted)...7025"},"value":"0xff2ea16466c96a3843ec78b326b52861"},"src":"2215:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2337,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2214:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2262:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2214:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2206:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2341,"nodeType":"ExpressionStatement","src":"2206:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2279:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2289:4:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"src":"2279:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2279:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2357,"nodeType":"IfStatement","src":"2275:84:17","trueBody":{"expression":{"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2348,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2300:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2309:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786665356465653034366139396132613831316334363166313936396333303533","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:34:17","typeDescriptions":{"typeIdentifier":"t_rational_338111622100601834656805679988414885971_by_1","typeString":"int_const 3381...(31 digits omitted)...5971"},"value":"0xfe5dee046a99a2a811c461f1969c3053"},"src":"2309:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2308:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2356:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2308:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2300:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2356,"nodeType":"ExpressionStatement","src":"2300:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2373:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078313030","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2383:5:17","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"0x100"},"src":"2373:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2392:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2373:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2372,"nodeType":"IfStatement","src":"2369:85:17","trueBody":{"expression":{"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2363,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2395:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2364,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2404:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786663626538366337393030613838616564636666633833623437396161336134","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2412:34:17","typeDescriptions":{"typeIdentifier":"t_rational_335954724994790223023589805789778977700_by_1","typeString":"int_const 3359...(31 digits omitted)...7700"},"value":"0xfcbe86c7900a88aedcffc83b479aa3a4"},"src":"2404:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2367,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2403:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2451:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2403:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2395:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2371,"nodeType":"ExpressionStatement","src":"2395:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2468:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078323030","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2478:5:17","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"value":"0x200"},"src":"2468:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2487:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2468:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2387,"nodeType":"IfStatement","src":"2464:85:17","trueBody":{"expression":{"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2378,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2490:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2379,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2499:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786639383761373235336163343133313736663262303734636637383135653534","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2507:34:17","typeDescriptions":{"typeIdentifier":"t_rational_331682121138379247127172139078559817300_by_1","typeString":"int_const 3316...(31 digits omitted)...7300"},"value":"0xf987a7253ac413176f2b074cf7815e54"},"src":"2499:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2382,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2498:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2546:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2498:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2490:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2386,"nodeType":"ExpressionStatement","src":"2490:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2563:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078343030","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2573:5:17","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"value":"0x400"},"src":"2563:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2582:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2563:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2402,"nodeType":"IfStatement","src":"2559:85:17","trueBody":{"expression":{"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2393,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2585:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2594:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786633333932623038323262373030303539343063376133393865346237306633","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2602:34:17","typeDescriptions":{"typeIdentifier":"t_rational_323299236684853023288211250268160618739_by_1","typeString":"int_const 3232...(31 digits omitted)...8739"},"value":"0xf3392b0822b70005940c7a398e4b70f3"},"src":"2594:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2397,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2593:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2641:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2593:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2585:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2401,"nodeType":"ExpressionStatement","src":"2585:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2658:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078383030","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2668:5:17","typeDescriptions":{"typeIdentifier":"t_rational_2048_by_1","typeString":"int_const 2048"},"value":"0x800"},"src":"2658:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2677:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2658:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2417,"nodeType":"IfStatement","src":"2654:85:17","trueBody":{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2408,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2680:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2409,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2689:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786537313539343735613263323962373434336232396337666136653838396439","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2697:34:17","typeDescriptions":{"typeIdentifier":"t_rational_307163716377032989948697243942600083929_by_1","typeString":"int_const 3071...(31 digits omitted)...3929"},"value":"0xe7159475a2c29b7443b29c7fa6e889d9"},"src":"2689:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2412,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2688:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2736:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2688:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2680:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2416,"nodeType":"ExpressionStatement","src":"2680:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2418,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2753:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831303030","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2763:6:17","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"},"value":"0x1000"},"src":"2753:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2773:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2753:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2432,"nodeType":"IfStatement","src":"2749:86:17","trueBody":{"expression":{"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2423,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2776:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2424,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2785:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786430393766336264666432303232623838343561643866373932616135383235","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2793:34:17","typeDescriptions":{"typeIdentifier":"t_rational_277268403626896220162999269216087595045_by_1","typeString":"int_const 2772...(31 digits omitted)...5045"},"value":"0xd097f3bdfd2022b8845ad8f792aa5825"},"src":"2785:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2427,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2784:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2832:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2784:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2776:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2431,"nodeType":"ExpressionStatement","src":"2776:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2433,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2849:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832303030","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2859:6:17","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"value":"0x2000"},"src":"2849:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2869:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2849:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2447,"nodeType":"IfStatement","src":"2845:86:17","trueBody":{"expression":{"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2438,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2872:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2881:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786139663734363436326438373066646638613635646331663930653036316535","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2889:34:17","typeDescriptions":{"typeIdentifier":"t_rational_225923453940442621947126027127485391333_by_1","typeString":"int_const 2259...(31 digits omitted)...1333"},"value":"0xa9f746462d870fdf8a65dc1f90e061e5"},"src":"2881:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2880:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2928:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2880:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2872:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2446,"nodeType":"ExpressionStatement","src":"2872:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2448,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"2945:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834303030","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2955:6:17","typeDescriptions":{"typeIdentifier":"t_rational_16384_by_1","typeString":"int_const 16384"},"value":"0x4000"},"src":"2945:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2965:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2945:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2462,"nodeType":"IfStatement","src":"2941:86:17","trueBody":{"expression":{"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2453,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2968:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2454,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"2977:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783730643836396131353664326131623839306262336466363262616633326637","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2985:34:17","typeDescriptions":{"typeIdentifier":"t_rational_149997214084966997727330242082538205943_by_1","typeString":"int_const 1499...(31 digits omitted)...5943"},"value":"0x70d869a156d2a1b890bb3df62baf32f7"},"src":"2977:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2976:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3024:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2976:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2968:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2461,"nodeType":"ExpressionStatement","src":"2968:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2463,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3041:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838303030","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3051:6:17","typeDescriptions":{"typeIdentifier":"t_rational_32768_by_1","typeString":"int_const 32768"},"value":"0x8000"},"src":"3041:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3061:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3041:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2477,"nodeType":"IfStatement","src":"3037:86:17","trueBody":{"expression":{"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2468,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3064:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2469,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3073:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783331626531333566393764303866643938313233313530353534326663666136","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3081:34:17","typeDescriptions":{"typeIdentifier":"t_rational_66119101136024775622716233608466517926_by_1","typeString":"int_const 6611...(30 digits omitted)...7926"},"value":"0x31be135f97d08fd981231505542fcfa6"},"src":"3073:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2472,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3072:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3120:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3072:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3064:59:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2476,"nodeType":"ExpressionStatement","src":"3064:59:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3137:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130303030","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:7:17","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"0x10000"},"src":"3137:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3158:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3137:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2492,"nodeType":"IfStatement","src":"3133:86:17","trueBody":{"expression":{"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2483,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3161:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2484,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3170:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307839616135303862356237613834653163363737646535346633653939626339","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3178:33:17","typeDescriptions":{"typeIdentifier":"t_rational_12847376061809297530290974190478138313_by_1","typeString":"int_const 1284...(30 digits omitted)...8313"},"value":"0x9aa508b5b7a84e1c677de54f3e99bc9"},"src":"3170:41:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2487,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3169:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3216:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3169:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3161:58:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2491,"nodeType":"ExpressionStatement","src":"3161:58:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2493,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3233:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230303030","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3243:7:17","typeDescriptions":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"},"value":"0x20000"},"src":"3233:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3254:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2507,"nodeType":"IfStatement","src":"3229:85:17","trueBody":{"expression":{"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2498,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3257:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2499,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3266:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3078356436616638646564623831313936363939633332393232356565363034","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3274:32:17","typeDescriptions":{"typeIdentifier":"t_rational_485053260817066172746253684029974020_by_1","typeString":"int_const 4850...(28 digits omitted)...4020"},"value":"0x5d6af8dedb81196699c329225ee604"},"src":"3266:40:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2502,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3265:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3311:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3265:49:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:57:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2506,"nodeType":"ExpressionStatement","src":"3257:57:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2508,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3328:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430303030","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3338:7:17","typeDescriptions":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"},"value":"0x40000"},"src":"3328:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3349:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3328:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2522,"nodeType":"IfStatement","src":"3324:83:17","trueBody":{"expression":{"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2513,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3352:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2514,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3361:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307832323136653538346635666131656139323630343162656466653938","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:30:17","typeDescriptions":{"typeIdentifier":"t_rational_691415978906521570653435304214168_by_1","typeString":"int_const 6914...(25 digits omitted)...4168"},"value":"0x2216e584f5fa1ea926041bedfe98"},"src":"3361:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3360:40:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3404:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3360:47:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3352:55:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2521,"nodeType":"ExpressionStatement","src":"3352:55:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2523,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3421:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830303030","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3431:7:17","typeDescriptions":{"typeIdentifier":"t_rational_524288_by_1","typeString":"int_const 524288"},"value":"0x80000"},"src":"3421:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3442:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3421:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2537,"nodeType":"IfStatement","src":"3417:78:17","trueBody":{"expression":{"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2528,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3445:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3454:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783438613137303339316637646334323434346538666132","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:25:17","typeDescriptions":{"typeIdentifier":"t_rational_1404880482679654955896180642_by_1","typeString":"int_const 1404880482679654955896180642"},"value":"0x48a170391f7dc42444e8fa2"},"src":"3454:33:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2532,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3453:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3492:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3453:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3445:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2536,"nodeType":"ExpressionStatement","src":"3445:50:17"}},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"3510:4:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3517:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3510:8:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2551,"nodeType":"IfStatement","src":"3506:47:17","trueBody":{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2541,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3520:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3533:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"3533:7:17","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2542,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3528:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3528:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3528:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2547,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3548:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3528:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3520:33:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"3520:33:17"}},{"expression":{"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2552,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"3863:12:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2555,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3887:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3896:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3887:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2558,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3886:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2559,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"3903:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3912:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3917:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3912:7:17","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2563,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3911:9:17","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"3903:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3924:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3903:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"31","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3932:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3903:30:17","trueExpression":{"hexValue":"30","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3928:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2570,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3902:32:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3886:48:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3878:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2553,"name":"uint160","nodeType":"ElementaryTypeName","src":"3878:7:17","typeDescriptions":{}}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3878:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3863:72:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2574,"nodeType":"ExpressionStatement","src":"3863:72:17"}]},"documentation":{"id":2203,"nodeType":"StructuredDocumentation","src":"1060:297:17","text":"@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"},"id":2576,"implemented":true,"kind":"function","modifiers":[],"name":"getSqrtRatioAtTick","nodeType":"FunctionDefinition","parameters":{"id":2206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2205,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2576,"src":"1390:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2204,"name":"int24","nodeType":"ElementaryTypeName","src":"1390:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1389:12:17"},"returnParameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2576,"src":"1425:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2207,"name":"uint160","nodeType":"ElementaryTypeName","src":"1425:7:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1424:22:17"},"scope":2716,"src":"1362:2580:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2714,"nodeType":"Block","src":"4446:4196:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2585,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"4563:12:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2586,"name":"MIN_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"4579:14:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4563:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"4597:12:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2589,"name":"MAX_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"4612:14:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4597:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4563:63:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4628:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""},"value":"R"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""}],"id":2584,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4555:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4555:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2594,"nodeType":"ExpressionStatement","src":"4555:77:17"},{"assignments":[2596],"declarations":[{"constant":false,"id":2596,"mutability":"mutable","name":"ratio","nodeType":"VariableDeclaration","scope":2714,"src":"4642:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"4642:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2603,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2599,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"4666:12:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4658:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:17","typeDescriptions":{}}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4658:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4683:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4658:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4642:43:17"},{"assignments":[2605],"declarations":[{"constant":false,"id":2605,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","scope":2714,"src":"4696:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2604,"name":"uint256","nodeType":"ElementaryTypeName","src":"4696:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2607,"initialValue":{"id":2606,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"4708:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4696:17:17"},{"assignments":[2609],"declarations":[{"constant":false,"id":2609,"mutability":"mutable","name":"msb","nodeType":"VariableDeclaration","scope":2714,"src":"4723:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"4723:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2611,"initialValue":{"hexValue":"30","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4723:15:17"},{"AST":{"nodeType":"YulBlock","src":"4758:139:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4772:58:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4785:1:17","type":"","value":"7"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4791:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"4794:34:17","type":"","value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4788:2:17"},"nodeType":"YulFunctionCall","src":"4788:41:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4781:3:17"},"nodeType":"YulFunctionCall","src":"4781:49:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"4776:1:17","type":""}]},{"nodeType":"YulAssignment","src":"4843:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"4853:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"4858:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4850:2:17"},"nodeType":"YulFunctionCall","src":"4850:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"4843:3:17"}]},{"nodeType":"YulAssignment","src":"4873:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"4882:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"4885:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4878:3:17"},"nodeType":"YulFunctionCall","src":"4878:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4873:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"4843:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"4853:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"4791:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"4873:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"4885:1:17","valueSize":1}],"id":2612,"nodeType":"InlineAssembly","src":"4749:148:17"},{"AST":{"nodeType":"YulBlock","src":"4915:123:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4929:42:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4942:1:17","type":"","value":"6"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"4948:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"4951:18:17","type":"","value":"0xFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4945:2:17"},"nodeType":"YulFunctionCall","src":"4945:25:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4938:3:17"},"nodeType":"YulFunctionCall","src":"4938:33:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"4933:1:17","type":""}]},{"nodeType":"YulAssignment","src":"4984:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"4994:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"4999:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4991:2:17"},"nodeType":"YulFunctionCall","src":"4991:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"4984:3:17"}]},{"nodeType":"YulAssignment","src":"5014:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5023:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5026:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5019:3:17"},"nodeType":"YulFunctionCall","src":"5019:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5014:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"4984:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"4994:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"4948:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5014:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5026:1:17","valueSize":1}],"id":2613,"nodeType":"InlineAssembly","src":"4906:132:17"},{"AST":{"nodeType":"YulBlock","src":"5056:115:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5070:34:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5083:1:17","type":"","value":"5"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5089:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"5092:10:17","type":"","value":"0xFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5086:2:17"},"nodeType":"YulFunctionCall","src":"5086:17:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5079:3:17"},"nodeType":"YulFunctionCall","src":"5079:25:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5074:1:17","type":""}]},{"nodeType":"YulAssignment","src":"5117:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5127:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"5132:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5124:2:17"},"nodeType":"YulFunctionCall","src":"5124:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5117:3:17"}]},{"nodeType":"YulAssignment","src":"5147:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5156:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5159:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5152:3:17"},"nodeType":"YulFunctionCall","src":"5152:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5147:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5117:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5127:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5089:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5147:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5159:1:17","valueSize":1}],"id":2614,"nodeType":"InlineAssembly","src":"5047:124:17"},{"AST":{"nodeType":"YulBlock","src":"5189:111:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5203:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5216:1:17","type":"","value":"4"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5222:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"5225:6:17","type":"","value":"0xFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5219:2:17"},"nodeType":"YulFunctionCall","src":"5219:13:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5212:3:17"},"nodeType":"YulFunctionCall","src":"5212:21:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5207:1:17","type":""}]},{"nodeType":"YulAssignment","src":"5246:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5256:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"5261:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5253:2:17"},"nodeType":"YulFunctionCall","src":"5253:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5246:3:17"}]},{"nodeType":"YulAssignment","src":"5276:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5285:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5288:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5281:3:17"},"nodeType":"YulFunctionCall","src":"5281:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5276:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5246:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5256:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5222:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5276:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5288:1:17","valueSize":1}],"id":2615,"nodeType":"InlineAssembly","src":"5180:120:17"},{"AST":{"nodeType":"YulBlock","src":"5318:109:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5332:28:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5345:1:17","type":"","value":"3"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5351:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"5354:4:17","type":"","value":"0xFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5348:2:17"},"nodeType":"YulFunctionCall","src":"5348:11:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5341:3:17"},"nodeType":"YulFunctionCall","src":"5341:19:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5336:1:17","type":""}]},{"nodeType":"YulAssignment","src":"5373:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5383:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"5388:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5380:2:17"},"nodeType":"YulFunctionCall","src":"5380:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5373:3:17"}]},{"nodeType":"YulAssignment","src":"5403:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5412:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5415:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5408:3:17"},"nodeType":"YulFunctionCall","src":"5408:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5403:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5373:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5383:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5351:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5403:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5415:1:17","valueSize":1}],"id":2616,"nodeType":"InlineAssembly","src":"5309:118:17"},{"AST":{"nodeType":"YulBlock","src":"5445:108:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5459:27:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5472:1:17","type":"","value":"2"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5478:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"5481:3:17","type":"","value":"0xF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5475:2:17"},"nodeType":"YulFunctionCall","src":"5475:10:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5468:3:17"},"nodeType":"YulFunctionCall","src":"5468:18:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5463:1:17","type":""}]},{"nodeType":"YulAssignment","src":"5499:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5509:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"5514:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5506:2:17"},"nodeType":"YulFunctionCall","src":"5506:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5499:3:17"}]},{"nodeType":"YulAssignment","src":"5529:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5538:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5541:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5534:3:17"},"nodeType":"YulFunctionCall","src":"5534:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5529:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5499:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5509:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5478:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5529:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5541:1:17","valueSize":1}],"id":2617,"nodeType":"InlineAssembly","src":"5436:117:17"},{"AST":{"nodeType":"YulBlock","src":"5571:108:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5585:27:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5598:1:17","type":"","value":"1"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5604:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"5607:3:17","type":"","value":"0x3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5601:2:17"},"nodeType":"YulFunctionCall","src":"5601:10:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5594:3:17"},"nodeType":"YulFunctionCall","src":"5594:18:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5589:1:17","type":""}]},{"nodeType":"YulAssignment","src":"5625:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5635:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"5640:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5632:2:17"},"nodeType":"YulFunctionCall","src":"5632:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5625:3:17"}]},{"nodeType":"YulAssignment","src":"5655:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5664:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5667:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5660:3:17"},"nodeType":"YulFunctionCall","src":"5660:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5655:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5625:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5635:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5604:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5655:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5667:1:17","valueSize":1}],"id":2618,"nodeType":"InlineAssembly","src":"5562:117:17"},{"AST":{"nodeType":"YulBlock","src":"5697:73:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5711:19:17","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5723:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"5726:3:17","type":"","value":"0x1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5720:2:17"},"nodeType":"YulFunctionCall","src":"5720:10:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5715:1:17","type":""}]},{"nodeType":"YulAssignment","src":"5743:17:17","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5753:3:17"},{"name":"f","nodeType":"YulIdentifier","src":"5758:1:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5750:2:17"},"nodeType":"YulFunctionCall","src":"5750:10:17"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5743:3:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5743:3:17","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"5753:3:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5723:1:17","valueSize":1}],"id":2619,"nodeType":"InlineAssembly","src":"5688:82:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"5784:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313238","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5791:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5784:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2632,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"5835:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2633,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"5839:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313237","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5849:3:17","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2635,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"5855:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5849:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2637,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5848:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5839:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5835:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2640,"nodeType":"ExpressionStatement","src":"5835:24:17"},"id":2641,"nodeType":"IfStatement","src":"5780:79:17","trueBody":{"expression":{"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2623,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"5796:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2624,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"5800:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2625,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"5810:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313237","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5816:3:17","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"src":"5810:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5809:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5800:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5796:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2631,"nodeType":"ExpressionStatement","src":"5796:24:17"}},{"assignments":[2643],"declarations":[{"constant":false,"id":2643,"mutability":"mutable","name":"log_2","nodeType":"VariableDeclaration","scope":2714,"src":"5870:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2642,"name":"int256","nodeType":"ElementaryTypeName","src":"5870:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2653,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2646,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"5893:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5886:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2644,"name":"int256","nodeType":"ElementaryTypeName","src":"5886:6:17","typeDescriptions":{}}},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5886:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5900:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"5886:17:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5885:19:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5908:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5885:25:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5870:40:17"},{"AST":{"nodeType":"YulBlock","src":"5930:151:17","statements":[{"nodeType":"YulAssignment","src":"5944:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5953:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5962:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"5965:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5958:3:17"},"nodeType":"YulFunctionCall","src":"5958:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5949:3:17"},"nodeType":"YulFunctionCall","src":"5949:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5944:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"5981:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5994:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"5999:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5990:3:17"},"nodeType":"YulFunctionCall","src":"5990:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5985:1:17","type":""}]},{"nodeType":"YulAssignment","src":"6014:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6026:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6037:2:17","type":"","value":"63"},{"name":"f","nodeType":"YulIdentifier","src":"6041:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6033:3:17"},"nodeType":"YulFunctionCall","src":"6033:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6023:2:17"},"nodeType":"YulFunctionCall","src":"6023:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6014:5:17"}]},{"nodeType":"YulAssignment","src":"6057:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6066:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6069:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6062:3:17"},"nodeType":"YulFunctionCall","src":"6062:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6057:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6014:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6026:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5944:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5962:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5965:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"5999:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6057:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6069:1:17","valueSize":1}],"id":2654,"nodeType":"InlineAssembly","src":"5921:160:17"},{"AST":{"nodeType":"YulBlock","src":"6099:151:17","statements":[{"nodeType":"YulAssignment","src":"6113:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6122:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6131:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6134:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6127:3:17"},"nodeType":"YulFunctionCall","src":"6127:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6118:3:17"},"nodeType":"YulFunctionCall","src":"6118:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6113:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"6150:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6163:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6168:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6159:3:17"},"nodeType":"YulFunctionCall","src":"6159:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6154:1:17","type":""}]},{"nodeType":"YulAssignment","src":"6183:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6195:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6206:2:17","type":"","value":"62"},{"name":"f","nodeType":"YulIdentifier","src":"6210:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6202:3:17"},"nodeType":"YulFunctionCall","src":"6202:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6192:2:17"},"nodeType":"YulFunctionCall","src":"6192:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6183:5:17"}]},{"nodeType":"YulAssignment","src":"6226:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6235:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6238:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6231:3:17"},"nodeType":"YulFunctionCall","src":"6231:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6226:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6183:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6195:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6113:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6131:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6134:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6168:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6226:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6238:1:17","valueSize":1}],"id":2655,"nodeType":"InlineAssembly","src":"6090:160:17"},{"AST":{"nodeType":"YulBlock","src":"6268:151:17","statements":[{"nodeType":"YulAssignment","src":"6282:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6291:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6300:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6303:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6296:3:17"},"nodeType":"YulFunctionCall","src":"6296:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6287:3:17"},"nodeType":"YulFunctionCall","src":"6287:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6282:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"6319:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6332:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6337:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6328:3:17"},"nodeType":"YulFunctionCall","src":"6328:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6323:1:17","type":""}]},{"nodeType":"YulAssignment","src":"6352:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6364:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6375:2:17","type":"","value":"61"},{"name":"f","nodeType":"YulIdentifier","src":"6379:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6371:3:17"},"nodeType":"YulFunctionCall","src":"6371:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6361:2:17"},"nodeType":"YulFunctionCall","src":"6361:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6352:5:17"}]},{"nodeType":"YulAssignment","src":"6395:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6404:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6407:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6400:3:17"},"nodeType":"YulFunctionCall","src":"6400:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6395:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6352:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6364:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6282:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6300:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6303:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6337:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6395:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6407:1:17","valueSize":1}],"id":2656,"nodeType":"InlineAssembly","src":"6259:160:17"},{"AST":{"nodeType":"YulBlock","src":"6437:151:17","statements":[{"nodeType":"YulAssignment","src":"6451:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6460:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6469:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6472:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6465:3:17"},"nodeType":"YulFunctionCall","src":"6465:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6456:3:17"},"nodeType":"YulFunctionCall","src":"6456:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6451:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"6488:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6501:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6506:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6497:3:17"},"nodeType":"YulFunctionCall","src":"6497:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6492:1:17","type":""}]},{"nodeType":"YulAssignment","src":"6521:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6533:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6544:2:17","type":"","value":"60"},{"name":"f","nodeType":"YulIdentifier","src":"6548:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6540:3:17"},"nodeType":"YulFunctionCall","src":"6540:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6530:2:17"},"nodeType":"YulFunctionCall","src":"6530:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6521:5:17"}]},{"nodeType":"YulAssignment","src":"6564:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6573:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6576:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6569:3:17"},"nodeType":"YulFunctionCall","src":"6569:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6564:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6521:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6533:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6451:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6469:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6472:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6506:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6564:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6576:1:17","valueSize":1}],"id":2657,"nodeType":"InlineAssembly","src":"6428:160:17"},{"AST":{"nodeType":"YulBlock","src":"6606:151:17","statements":[{"nodeType":"YulAssignment","src":"6620:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6629:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6638:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6641:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6634:3:17"},"nodeType":"YulFunctionCall","src":"6634:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6625:3:17"},"nodeType":"YulFunctionCall","src":"6625:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6620:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"6657:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6670:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6675:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6666:3:17"},"nodeType":"YulFunctionCall","src":"6666:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6661:1:17","type":""}]},{"nodeType":"YulAssignment","src":"6690:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6702:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6713:2:17","type":"","value":"59"},{"name":"f","nodeType":"YulIdentifier","src":"6717:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6709:3:17"},"nodeType":"YulFunctionCall","src":"6709:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6699:2:17"},"nodeType":"YulFunctionCall","src":"6699:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6690:5:17"}]},{"nodeType":"YulAssignment","src":"6733:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6742:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6745:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6738:3:17"},"nodeType":"YulFunctionCall","src":"6738:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6733:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6690:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6702:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6620:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6638:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6641:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6675:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6733:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6745:1:17","valueSize":1}],"id":2658,"nodeType":"InlineAssembly","src":"6597:160:17"},{"AST":{"nodeType":"YulBlock","src":"6775:151:17","statements":[{"nodeType":"YulAssignment","src":"6789:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6798:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6807:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6810:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6803:3:17"},"nodeType":"YulFunctionCall","src":"6803:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6794:3:17"},"nodeType":"YulFunctionCall","src":"6794:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6789:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"6826:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6839:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6844:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6835:3:17"},"nodeType":"YulFunctionCall","src":"6835:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6830:1:17","type":""}]},{"nodeType":"YulAssignment","src":"6859:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6871:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6882:2:17","type":"","value":"58"},{"name":"f","nodeType":"YulIdentifier","src":"6886:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6878:3:17"},"nodeType":"YulFunctionCall","src":"6878:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6868:2:17"},"nodeType":"YulFunctionCall","src":"6868:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6859:5:17"}]},{"nodeType":"YulAssignment","src":"6902:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6911:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6914:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6907:3:17"},"nodeType":"YulFunctionCall","src":"6907:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6902:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6859:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"6871:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6789:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6807:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6810:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6844:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6902:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6914:1:17","valueSize":1}],"id":2659,"nodeType":"InlineAssembly","src":"6766:160:17"},{"AST":{"nodeType":"YulBlock","src":"6944:151:17","statements":[{"nodeType":"YulAssignment","src":"6958:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6967:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6976:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"6979:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6972:3:17"},"nodeType":"YulFunctionCall","src":"6972:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6963:3:17"},"nodeType":"YulFunctionCall","src":"6963:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6958:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"6995:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7008:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7013:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7004:3:17"},"nodeType":"YulFunctionCall","src":"7004:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6999:1:17","type":""}]},{"nodeType":"YulAssignment","src":"7028:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7040:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7051:2:17","type":"","value":"57"},{"name":"f","nodeType":"YulIdentifier","src":"7055:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7047:3:17"},"nodeType":"YulFunctionCall","src":"7047:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7037:2:17"},"nodeType":"YulFunctionCall","src":"7037:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7028:5:17"}]},{"nodeType":"YulAssignment","src":"7071:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7080:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7083:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7076:3:17"},"nodeType":"YulFunctionCall","src":"7076:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7071:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7028:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7040:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6958:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6976:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"6979:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7013:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7071:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7083:1:17","valueSize":1}],"id":2660,"nodeType":"InlineAssembly","src":"6935:160:17"},{"AST":{"nodeType":"YulBlock","src":"7113:151:17","statements":[{"nodeType":"YulAssignment","src":"7127:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7136:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7145:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7148:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7141:3:17"},"nodeType":"YulFunctionCall","src":"7141:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7132:3:17"},"nodeType":"YulFunctionCall","src":"7132:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7127:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"7164:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7177:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7182:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7173:3:17"},"nodeType":"YulFunctionCall","src":"7173:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7168:1:17","type":""}]},{"nodeType":"YulAssignment","src":"7197:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7209:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7220:2:17","type":"","value":"56"},{"name":"f","nodeType":"YulIdentifier","src":"7224:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7216:3:17"},"nodeType":"YulFunctionCall","src":"7216:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7206:2:17"},"nodeType":"YulFunctionCall","src":"7206:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7197:5:17"}]},{"nodeType":"YulAssignment","src":"7240:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7249:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7252:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7245:3:17"},"nodeType":"YulFunctionCall","src":"7245:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7240:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7197:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7209:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7127:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7145:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7148:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7182:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7240:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7252:1:17","valueSize":1}],"id":2661,"nodeType":"InlineAssembly","src":"7104:160:17"},{"AST":{"nodeType":"YulBlock","src":"7282:151:17","statements":[{"nodeType":"YulAssignment","src":"7296:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7305:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7314:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7317:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7310:3:17"},"nodeType":"YulFunctionCall","src":"7310:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7301:3:17"},"nodeType":"YulFunctionCall","src":"7301:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7296:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"7333:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7346:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7351:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7342:3:17"},"nodeType":"YulFunctionCall","src":"7342:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7337:1:17","type":""}]},{"nodeType":"YulAssignment","src":"7366:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7378:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7389:2:17","type":"","value":"55"},{"name":"f","nodeType":"YulIdentifier","src":"7393:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7385:3:17"},"nodeType":"YulFunctionCall","src":"7385:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7375:2:17"},"nodeType":"YulFunctionCall","src":"7375:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7366:5:17"}]},{"nodeType":"YulAssignment","src":"7409:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7418:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7421:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7414:3:17"},"nodeType":"YulFunctionCall","src":"7414:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7409:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7366:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7378:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7296:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7314:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7317:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7351:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7409:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7421:1:17","valueSize":1}],"id":2662,"nodeType":"InlineAssembly","src":"7273:160:17"},{"AST":{"nodeType":"YulBlock","src":"7451:151:17","statements":[{"nodeType":"YulAssignment","src":"7465:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7474:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7483:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7486:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7479:3:17"},"nodeType":"YulFunctionCall","src":"7479:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7470:3:17"},"nodeType":"YulFunctionCall","src":"7470:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7465:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"7502:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7515:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7520:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7511:3:17"},"nodeType":"YulFunctionCall","src":"7511:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7506:1:17","type":""}]},{"nodeType":"YulAssignment","src":"7535:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7547:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7558:2:17","type":"","value":"54"},{"name":"f","nodeType":"YulIdentifier","src":"7562:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7554:3:17"},"nodeType":"YulFunctionCall","src":"7554:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7544:2:17"},"nodeType":"YulFunctionCall","src":"7544:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7535:5:17"}]},{"nodeType":"YulAssignment","src":"7578:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7587:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7590:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7583:3:17"},"nodeType":"YulFunctionCall","src":"7583:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7578:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7535:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7547:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7465:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7483:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7486:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7520:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7578:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7590:1:17","valueSize":1}],"id":2663,"nodeType":"InlineAssembly","src":"7442:160:17"},{"AST":{"nodeType":"YulBlock","src":"7620:151:17","statements":[{"nodeType":"YulAssignment","src":"7634:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7643:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7652:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7655:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7648:3:17"},"nodeType":"YulFunctionCall","src":"7648:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7639:3:17"},"nodeType":"YulFunctionCall","src":"7639:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7634:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"7671:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7684:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7689:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7680:3:17"},"nodeType":"YulFunctionCall","src":"7680:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7675:1:17","type":""}]},{"nodeType":"YulAssignment","src":"7704:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7716:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7727:2:17","type":"","value":"53"},{"name":"f","nodeType":"YulIdentifier","src":"7731:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7723:3:17"},"nodeType":"YulFunctionCall","src":"7723:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7713:2:17"},"nodeType":"YulFunctionCall","src":"7713:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7704:5:17"}]},{"nodeType":"YulAssignment","src":"7747:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7756:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7759:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7752:3:17"},"nodeType":"YulFunctionCall","src":"7752:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7747:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7704:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7716:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7634:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7652:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7655:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7689:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7747:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7759:1:17","valueSize":1}],"id":2664,"nodeType":"InlineAssembly","src":"7611:160:17"},{"AST":{"nodeType":"YulBlock","src":"7789:151:17","statements":[{"nodeType":"YulAssignment","src":"7803:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7812:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7821:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7824:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7817:3:17"},"nodeType":"YulFunctionCall","src":"7817:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7808:3:17"},"nodeType":"YulFunctionCall","src":"7808:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7803:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"7840:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7853:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7858:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7849:3:17"},"nodeType":"YulFunctionCall","src":"7849:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7844:1:17","type":""}]},{"nodeType":"YulAssignment","src":"7873:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7885:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7896:2:17","type":"","value":"52"},{"name":"f","nodeType":"YulIdentifier","src":"7900:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7892:3:17"},"nodeType":"YulFunctionCall","src":"7892:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7882:2:17"},"nodeType":"YulFunctionCall","src":"7882:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7873:5:17"}]},{"nodeType":"YulAssignment","src":"7916:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7925:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7928:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7921:3:17"},"nodeType":"YulFunctionCall","src":"7921:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7916:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7873:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"7885:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7803:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7821:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7824:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7858:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7916:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7928:1:17","valueSize":1}],"id":2665,"nodeType":"InlineAssembly","src":"7780:160:17"},{"AST":{"nodeType":"YulBlock","src":"7958:151:17","statements":[{"nodeType":"YulAssignment","src":"7972:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7981:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7990:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"7993:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7986:3:17"},"nodeType":"YulFunctionCall","src":"7986:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7977:3:17"},"nodeType":"YulFunctionCall","src":"7977:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7972:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"8009:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8022:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8027:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8018:3:17"},"nodeType":"YulFunctionCall","src":"8018:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8013:1:17","type":""}]},{"nodeType":"YulAssignment","src":"8042:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8054:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8065:2:17","type":"","value":"51"},{"name":"f","nodeType":"YulIdentifier","src":"8069:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8061:3:17"},"nodeType":"YulFunctionCall","src":"8061:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8051:2:17"},"nodeType":"YulFunctionCall","src":"8051:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8042:5:17"}]},{"nodeType":"YulAssignment","src":"8085:14:17","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"8094:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"8097:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8090:3:17"},"nodeType":"YulFunctionCall","src":"8090:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8085:1:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"8042:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"8054:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7972:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7990:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"7993:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8027:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8085:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8097:1:17","valueSize":1}],"id":2666,"nodeType":"InlineAssembly","src":"7949:160:17"},{"AST":{"nodeType":"YulBlock","src":"8127:124:17","statements":[{"nodeType":"YulAssignment","src":"8141:24:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8150:3:17","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8159:1:17"},{"name":"r","nodeType":"YulIdentifier","src":"8162:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8155:3:17"},"nodeType":"YulFunctionCall","src":"8155:9:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8146:3:17"},"nodeType":"YulFunctionCall","src":"8146:19:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8141:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"8178:20:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8191:3:17","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8196:1:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8187:3:17"},"nodeType":"YulFunctionCall","src":"8187:11:17"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8182:1:17","type":""}]},{"nodeType":"YulAssignment","src":"8211:30:17","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8223:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8234:2:17","type":"","value":"50"},{"name":"f","nodeType":"YulIdentifier","src":"8238:1:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8230:3:17"},"nodeType":"YulFunctionCall","src":"8230:10:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8220:2:17"},"nodeType":"YulFunctionCall","src":"8220:21:17"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8211:5:17"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2643,"isOffset":false,"isSlot":false,"src":"8211:5:17","valueSize":1},{"declaration":2643,"isOffset":false,"isSlot":false,"src":"8223:5:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8141:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8159:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8162:1:17","valueSize":1},{"declaration":2605,"isOffset":false,"isSlot":false,"src":"8196:1:17","valueSize":1}],"id":2667,"nodeType":"InlineAssembly","src":"8118:133:17"},{"assignments":[2669],"declarations":[{"constant":false,"id":2669,"mutability":"mutable","name":"log_sqrt10001","nodeType":"VariableDeclaration","scope":2714,"src":"8261:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2668,"name":"int256","nodeType":"ElementaryTypeName","src":"8261:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2673,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2670,"name":"log_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"8284:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"323535373338393538393939363033383236333437313431","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8292:24:17","typeDescriptions":{"typeIdentifier":"t_rational_255738958999603826347141_by_1","typeString":"int_const 255738958999603826347141"},"value":"255738958999603826347141"},"src":"8284:32:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"8261:55:17"},{"assignments":[2675],"declarations":[{"constant":false,"id":2675,"mutability":"mutable","name":"tickLow","nodeType":"VariableDeclaration","scope":2714,"src":"8345:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2674,"name":"int24","nodeType":"ElementaryTypeName","src":"8345:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2685,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"8368:13:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"33343032393932393536383039313332343138353936313430313030363630323437323130","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8384:37:17","typeDescriptions":{"typeIdentifier":"t_rational_3402992956809132418596140100660247210_by_1","typeString":"int_const 3402...(29 digits omitted)...7210"},"value":"3402992956809132418596140100660247210"},"src":"8368:53:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8367:55:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8426:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8367:62:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8361:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2676,"name":"int24","nodeType":"ElementaryTypeName","src":"8361:5:17","typeDescriptions":{}}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8361:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8345:85:17"},{"assignments":[2687],"declarations":[{"constant":false,"id":2687,"mutability":"mutable","name":"tickHi","nodeType":"VariableDeclaration","scope":2714,"src":"8440:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2686,"name":"int24","nodeType":"ElementaryTypeName","src":"8440:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2697,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"8462:13:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"323931333339343634373731393839363232393037303237363231313533333938303838343935","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8478:39:17","typeDescriptions":{"typeIdentifier":"t_rational_291339464771989622907027621153398088495_by_1","typeString":"int_const 2913...(31 digits omitted)...8495"},"value":"291339464771989622907027621153398088495"},"src":"8462:55:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2693,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8461:57:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8522:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8461:64:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8455:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2688,"name":"int24","nodeType":"ElementaryTypeName","src":"8455:5:17","typeDescriptions":{}}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8455:71:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8440:86:17"},{"expression":{"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2698,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"8537:4:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2699,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"8544:7:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2700,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8555:6:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8544:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2704,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8593:6:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2703,"name":"getSqrtRatioAtTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"8574:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8574:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2706,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"8604:12:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"8574:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2709,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"8628:7:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8574:61:17","trueExpression":{"id":2708,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8619:6:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8544:91:17","trueExpression":{"id":2702,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"8564:7:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8537:98:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2713,"nodeType":"ExpressionStatement","src":"8537:98:17"}]},"documentation":{"id":2577,"nodeType":"StructuredDocumentation","src":"3948:408:17","text":"@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"},"id":2715,"implemented":true,"kind":"function","modifiers":[],"name":"getTickAtSqrtRatio","nodeType":"FunctionDefinition","parameters":{"id":2580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":2715,"src":"4389:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2578,"name":"uint160","nodeType":"ElementaryTypeName","src":"4389:7:17","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4388:22:17"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":2715,"src":"4434:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2581,"name":"int24","nodeType":"ElementaryTypeName","src":"4434:5:17","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"4433:12:17"},"scope":2716,"src":"4361:4281:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2717,"src":"313:8331:17"}],"src":"45:8600:17"},"id":17},"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol","exportedSymbols":{"UnsafeMath":[2732]},"id":2733,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2718,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:18"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2719,"nodeType":"StructuredDocumentation","src":"71:173:18","text":"@title Math functions that do not check inputs or outputs\n @notice Contains methods that perform common math functions but do not do any overflow or underflow checks"},"fullyImplemented":true,"id":2732,"linearizedBaseContracts":[2732],"name":"UnsafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":2730,"nodeType":"Block","src":"571:86:18","statements":[{"AST":{"nodeType":"YulBlock","src":"590:61:18","statements":[{"nodeType":"YulAssignment","src":"604:37:18","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"617:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"620:1:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"613:3:18"},"nodeType":"YulFunctionCall","src":"613:9:18"},{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"631:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"634:1:18"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"627:3:18"},"nodeType":"YulFunctionCall","src":"627:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"638:1:18","type":"","value":"0"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"624:2:18"},"nodeType":"YulFunctionCall","src":"624:16:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"609:3:18"},"nodeType":"YulFunctionCall","src":"609:32:18"},"variableNames":[{"name":"z","nodeType":"YulIdentifier","src":"604:1:18"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2722,"isOffset":false,"isSlot":false,"src":"617:1:18","valueSize":1},{"declaration":2722,"isOffset":false,"isSlot":false,"src":"631:1:18","valueSize":1},{"declaration":2724,"isOffset":false,"isSlot":false,"src":"620:1:18","valueSize":1},{"declaration":2724,"isOffset":false,"isSlot":false,"src":"634:1:18","valueSize":1},{"declaration":2727,"isOffset":false,"isSlot":false,"src":"604:1:18","valueSize":1}],"id":2729,"nodeType":"InlineAssembly","src":"581:70:18"}]},"documentation":{"id":2720,"nodeType":"StructuredDocumentation","src":"269:218:18","text":"@notice Returns ceil(x / y)\n @dev division by 0 has unspecified behavior, and must be checked externally\n @param x The dividend\n @param y The divisor\n @return z The quotient, ceil(x / y)"},"id":2731,"implemented":true,"kind":"function","modifiers":[],"name":"divRoundingUp","nodeType":"FunctionDefinition","parameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"x","nodeType":"VariableDeclaration","scope":2731,"src":"515:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2721,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2724,"mutability":"mutable","name":"y","nodeType":"VariableDeclaration","scope":2731,"src":"526:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2723,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"514:22:18"},"returnParameters":{"id":2728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"z","nodeType":"VariableDeclaration","scope":2731,"src":"560:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"559:11:18"},"scope":2732,"src":"492:165:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2733,"src":"244:415:18"}],"src":"45:615:18"},"id":18},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol","exportedSymbols":{"IPeripheryImmutableState":[2779],"PeripheryImmutableState":[2763]},"id":2764,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2734,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:19"},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol","file":"../interfaces/IPeripheryImmutableState.sol","id":2735,"nodeType":"ImportDirective","scope":2764,"sourceUnit":2780,"src":"70:52:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2737,"name":"IPeripheryImmutableState","nodeType":"UserDefinedTypeName","referencedDeclaration":2779,"src":"252:24:19","typeDescriptions":{"typeIdentifier":"t_contract$_IPeripheryImmutableState_$2779","typeString":"contract IPeripheryImmutableState"}},"id":2738,"nodeType":"InheritanceSpecifier","src":"252:24:19"}],"contractDependencies":[2779],"contractKind":"contract","documentation":{"id":2736,"nodeType":"StructuredDocumentation","src":"124:83:19","text":"@title Immutable state\n @notice Immutable state used by periphery contracts"},"fullyImplemented":true,"id":2763,"linearizedBaseContracts":[2763,2779],"name":"PeripheryImmutableState","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2772],"constant":false,"documentation":{"id":2739,"nodeType":"StructuredDocumentation","src":"283:40:19","text":"@inheritdoc IPeripheryImmutableState"},"functionSelector":"c45a0155","id":2742,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","overrides":{"id":2741,"nodeType":"OverrideSpecifier","overrides":[],"src":"353:8:19"},"scope":2763,"src":"328:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2740,"name":"address","nodeType":"ElementaryTypeName","src":"328:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"baseFunctions":[2778],"constant":false,"documentation":{"id":2743,"nodeType":"StructuredDocumentation","src":"375:40:19","text":"@inheritdoc IPeripheryImmutableState"},"functionSelector":"4aa4a4fc","id":2746,"mutability":"immutable","name":"WETH9","nodeType":"VariableDeclaration","overrides":{"id":2745,"nodeType":"OverrideSpecifier","overrides":[],"src":"445:8:19"},"scope":2763,"src":"420:39:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2744,"name":"address","nodeType":"ElementaryTypeName","src":"420:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":2761,"nodeType":"Block","src":"512:59:19","statements":[{"expression":{"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2753,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"522:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2754,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"532:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"522:18:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2756,"nodeType":"ExpressionStatement","src":"522:18:19"},{"expression":{"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2757,"name":"WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"550:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2758,"name":"_WETH9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"558:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"550:14:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2760,"nodeType":"ExpressionStatement","src":"550:14:19"}]},"id":2762,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":2762,"src":"478:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2747,"name":"address","nodeType":"ElementaryTypeName","src":"478:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2750,"mutability":"mutable","name":"_WETH9","nodeType":"VariableDeclaration","scope":2762,"src":"496:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2749,"name":"address","nodeType":"ElementaryTypeName","src":"496:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"477:34:19"},"returnParameters":{"id":2752,"nodeType":"ParameterList","parameters":[],"src":"512:0:19"},"scope":2763,"src":"466:105:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2764,"src":"207:366:19"}],"src":"45:529:19"},"id":19},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol","exportedSymbols":{"IPeripheryImmutableState":[2779]},"id":2780,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2765,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:20"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2766,"nodeType":"StructuredDocumentation","src":"71:91:20","text":"@title Immutable state\n @notice Functions that return immutable state of the router"},"fullyImplemented":false,"id":2779,"linearizedBaseContracts":[2779],"name":"IPeripheryImmutableState","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"203:57:20","text":"@return Returns the address of the Uniswap V3 factory"},"functionSelector":"c45a0155","id":2772,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nodeType":"FunctionDefinition","parameters":{"id":2768,"nodeType":"ParameterList","parameters":[],"src":"281:2:20"},"returnParameters":{"id":2771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2770,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2772,"src":"307:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2769,"name":"address","nodeType":"ElementaryTypeName","src":"307:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"306:9:20"},"scope":2779,"src":"265:51:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2773,"nodeType":"StructuredDocumentation","src":"322:40:20","text":"@return Returns the address of WETH9"},"functionSelector":"4aa4a4fc","id":2778,"implemented":false,"kind":"function","modifiers":[],"name":"WETH9","nodeType":"FunctionDefinition","parameters":{"id":2774,"nodeType":"ParameterList","parameters":[],"src":"381:2:20"},"returnParameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2778,"src":"407:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2775,"name":"address","nodeType":"ElementaryTypeName","src":"407:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"406:9:20"},"scope":2779,"src":"367:49:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2780,"src":"162:256:20"}],"src":"45:374:20"},"id":20},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol","exportedSymbols":{"BytesLib":[2898]},"id":2899,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2781,"literals":["solidity",">=","0.5",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"343:31:21"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2898,"linearizedBaseContracts":[2898],"name":"BytesLib","nodeType":"ContractDefinition","nodes":[{"body":{"id":2826,"nodeType":"Block","src":"535:2871:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2793,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"553:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"563:2:21","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"553:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2796,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"569:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"553:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"578:16:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":2792,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"545:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"545:50:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2800,"nodeType":"ExpressionStatement","src":"545:50:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2802,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"613:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2803,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"622:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"613:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2805,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"633:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"613:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"641:16:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":2801,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"605:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"605:53:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2809,"nodeType":"ExpressionStatement","src":"605:53:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2811,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"676:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"676:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2813,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"693:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2814,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"702:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"693:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"676:33:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f75744f66426f756e6473","id":2817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"711:19:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""},"value":"slice_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""}],"id":2810,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"668:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"668:63:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2819,"nodeType":"ExpressionStatement","src":"668:63:21"},{"assignments":[2821],"declarations":[{"constant":false,"id":2821,"mutability":"mutable","name":"tempBytes","nodeType":"VariableDeclaration","scope":2826,"src":"742:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2820,"name":"bytes","nodeType":"ElementaryTypeName","src":"742:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2822,"nodeType":"VariableDeclarationStatement","src":"742:22:21"},{"AST":{"nodeType":"YulBlock","src":"784:2589:21","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"844:2092:21","statements":[{"nodeType":"YulAssignment","src":"1012:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1031:4:21","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1025:5:21"},"nodeType":"YulFunctionCall","src":"1025:11:21"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1012:9:21"}]},{"nodeType":"YulVariableDeclaration","src":"1696:33:21","value":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"1717:7:21"},{"kind":"number","nodeType":"YulLiteral","src":"1726:2:21","type":"","value":"31"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1713:3:21"},"nodeType":"YulFunctionCall","src":"1713:16:21"},"variables":[{"name":"lengthmod","nodeType":"YulTypedName","src":"1700:9:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2070:70:21","value":{"arguments":[{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2088:9:21"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"2099:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2084:3:21"},"nodeType":"YulFunctionCall","src":"2084:25:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2115:4:21","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"2128:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2121:6:21"},"nodeType":"YulFunctionCall","src":"2121:17:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2111:3:21"},"nodeType":"YulFunctionCall","src":"2111:28:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2080:3:21"},"nodeType":"YulFunctionCall","src":"2080:60:21"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"2074:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2161:27:21","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2176:2:21"},{"name":"_length","nodeType":"YulIdentifier","src":"2180:7:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2172:3:21"},"nodeType":"YulFunctionCall","src":"2172:16:21"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"2165:3:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2602:69:21","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2635:2:21"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2645:2:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2639:5:21"},"nodeType":"YulFunctionCall","src":"2639:9:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2628:6:21"},"nodeType":"YulFunctionCall","src":"2628:21:21"},"nodeType":"YulExpressionStatement","src":"2628:21:21"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2481:2:21"},{"name":"end","nodeType":"YulIdentifier","src":"2485:3:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2478:2:21"},"nodeType":"YulFunctionCall","src":"2478:11:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2490:111:21","statements":[{"nodeType":"YulAssignment","src":"2516:19:21","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2526:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2530:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2522:3:21"},"nodeType":"YulFunctionCall","src":"2522:13:21"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2516:2:21"}]},{"nodeType":"YulAssignment","src":"2560:19:21","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2570:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2574:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2566:3:21"},"nodeType":"YulFunctionCall","src":"2566:13:21"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"2560:2:21"}]}]},"pre":{"nodeType":"YulBlock","src":"2214:263:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2375:80:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"2397:6:21"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"2405:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2393:3:21"},"nodeType":"YulFunctionCall","src":"2393:22:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2421:4:21","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"2434:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2427:6:21"},"nodeType":"YulFunctionCall","src":"2427:17:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2417:3:21"},"nodeType":"YulFunctionCall","src":"2417:28:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2389:3:21"},"nodeType":"YulFunctionCall","src":"2389:57:21"},{"name":"_start","nodeType":"YulIdentifier","src":"2448:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2385:3:21"},"nodeType":"YulFunctionCall","src":"2385:70:21"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"2379:2:21","type":""}]}]},"src":"2210:461:21"},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2700:9:21"},{"name":"_length","nodeType":"YulIdentifier","src":"2711:7:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2693:6:21"},"nodeType":"YulFunctionCall","src":"2693:26:21"},"nodeType":"YulExpressionStatement","src":"2693:26:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2886:4:21","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2900:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2904:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2896:3:21"},"nodeType":"YulFunctionCall","src":"2896:11:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2913:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2909:3:21"},"nodeType":"YulFunctionCall","src":"2909:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2892:3:21"},"nodeType":"YulFunctionCall","src":"2892:25:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2879:6:21"},"nodeType":"YulFunctionCall","src":"2879:39:21"},"nodeType":"YulExpressionStatement","src":"2879:39:21"}]},"nodeType":"YulCase","src":"837:2099:21","value":{"kind":"number","nodeType":"YulLiteral","src":"842:1:21","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"3048:315:21","statements":[{"nodeType":"YulAssignment","src":"3070:24:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3089:4:21","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3083:5:21"},"nodeType":"YulFunctionCall","src":"3083:11:21"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3070:9:21"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3276:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3287:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3269:6:21"},"nodeType":"YulFunctionCall","src":"3269:20:21"},"nodeType":"YulExpressionStatement","src":"3269:20:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3318:4:21","type":"","value":"0x40"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"3328:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3339:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3324:3:21"},"nodeType":"YulFunctionCall","src":"3324:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3311:6:21"},"nodeType":"YulFunctionCall","src":"3311:34:21"},"nodeType":"YulExpressionStatement","src":"3311:34:21"}]},"nodeType":"YulCase","src":"3040:323:21","value":"default"}],"expression":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"812:7:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"805:6:21"},"nodeType":"YulFunctionCall","src":"805:15:21"},"nodeType":"YulSwitch","src":"798:2565:21"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2783,"isOffset":false,"isSlot":false,"src":"2397:6:21","valueSize":1},{"declaration":2787,"isOffset":false,"isSlot":false,"src":"1717:7:21","valueSize":1},{"declaration":2787,"isOffset":false,"isSlot":false,"src":"2180:7:21","valueSize":1},{"declaration":2787,"isOffset":false,"isSlot":false,"src":"2711:7:21","valueSize":1},{"declaration":2787,"isOffset":false,"isSlot":false,"src":"812:7:21","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"2448:6:21","valueSize":1},{"declaration":2821,"isOffset":false,"isSlot":false,"src":"1012:9:21","valueSize":1},{"declaration":2821,"isOffset":false,"isSlot":false,"src":"2088:9:21","valueSize":1},{"declaration":2821,"isOffset":false,"isSlot":false,"src":"2700:9:21","valueSize":1},{"declaration":2821,"isOffset":false,"isSlot":false,"src":"3070:9:21","valueSize":1},{"declaration":2821,"isOffset":false,"isSlot":false,"src":"3276:9:21","valueSize":1},{"declaration":2821,"isOffset":false,"isSlot":false,"src":"3328:9:21","valueSize":1}],"id":2823,"nodeType":"InlineAssembly","src":"775:2598:21"},{"expression":{"id":2824,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3390:9:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2791,"id":2825,"nodeType":"Return","src":"3383:16:21"}]},"id":2827,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nodeType":"FunctionDefinition","parameters":{"id":2788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2783,"mutability":"mutable","name":"_bytes","nodeType":"VariableDeclaration","scope":2827,"src":"423:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2782,"name":"bytes","nodeType":"ElementaryTypeName","src":"423:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2785,"mutability":"mutable","name":"_start","nodeType":"VariableDeclaration","scope":2827,"src":"452:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"452:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"_length","nodeType":"VariableDeclaration","scope":2827,"src":"476:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2786,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:84:21"},"returnParameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2827,"src":"521:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2789,"name":"bytes","nodeType":"ElementaryTypeName","src":"521:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"520:14:21"},"scope":2898,"src":"399:3007:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2861,"nodeType":"Block","src":"3500:328:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2837,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"3518:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":2838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3527:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"3518:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2840,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"3533:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3518:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f766572666c6f77","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3541:20:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95","typeString":"literal_string \"toAddress_overflow\""},"value":"toAddress_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95","typeString":"literal_string \"toAddress_overflow\""}],"id":2836,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3510:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3510:52:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2844,"nodeType":"ExpressionStatement","src":"3510:52:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2846,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"3580:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3580:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2848,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"3597:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3606:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"3597:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3580:28:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f75744f66426f756e6473","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3610:23:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""},"value":"toAddress_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""}],"id":2845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3572:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:62:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2854,"nodeType":"ExpressionStatement","src":"3572:62:21"},{"assignments":[2856],"declarations":[{"constant":false,"id":2856,"mutability":"mutable","name":"tempAddress","nodeType":"VariableDeclaration","scope":2861,"src":"3644:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2855,"name":"address","nodeType":"ElementaryTypeName","src":"3644:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2857,"nodeType":"VariableDeclarationStatement","src":"3644:19:21"},{"AST":{"nodeType":"YulBlock","src":"3683:110:21","statements":[{"nodeType":"YulAssignment","src":"3697:86:21","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"3730:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3738:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3726:3:21"},"nodeType":"YulFunctionCall","src":"3726:17:21"},{"name":"_start","nodeType":"YulIdentifier","src":"3745:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3722:3:21"},"nodeType":"YulFunctionCall","src":"3722:30:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3716:5:21"},"nodeType":"YulFunctionCall","src":"3716:37:21"},{"kind":"number","nodeType":"YulLiteral","src":"3755:27:21","type":"","value":"0x1000000000000000000000000"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3712:3:21"},"nodeType":"YulFunctionCall","src":"3712:71:21"},"variableNames":[{"name":"tempAddress","nodeType":"YulIdentifier","src":"3697:11:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2829,"isOffset":false,"isSlot":false,"src":"3730:6:21","valueSize":1},{"declaration":2831,"isOffset":false,"isSlot":false,"src":"3745:6:21","valueSize":1},{"declaration":2856,"isOffset":false,"isSlot":false,"src":"3697:11:21","valueSize":1}],"id":2858,"nodeType":"InlineAssembly","src":"3674:119:21"},{"expression":{"id":2859,"name":"tempAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"3810:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2835,"id":2860,"nodeType":"Return","src":"3803:18:21"}]},"id":2862,"implemented":true,"kind":"function","modifiers":[],"name":"toAddress","nodeType":"FunctionDefinition","parameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2829,"mutability":"mutable","name":"_bytes","nodeType":"VariableDeclaration","scope":2862,"src":"3431:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2828,"name":"bytes","nodeType":"ElementaryTypeName","src":"3431:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2831,"mutability":"mutable","name":"_start","nodeType":"VariableDeclaration","scope":2862,"src":"3452:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"3452:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3430:37:21"},"returnParameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2834,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2862,"src":"3491:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2833,"name":"address","nodeType":"ElementaryTypeName","src":"3491:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3490:9:21"},"scope":2898,"src":"3412:416:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2896,"nodeType":"Block","src":"3920:279:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2872,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"3938:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3947:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"3938:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2875,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"3952:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3938:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7432345f6f766572666c6f77","id":2877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3960:19:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5","typeString":"literal_string \"toUint24_overflow\""},"value":"toUint24_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5","typeString":"literal_string \"toUint24_overflow\""}],"id":2871,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3930:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3930:50:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2879,"nodeType":"ExpressionStatement","src":"3930:50:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2881,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"3998:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3998:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2883,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"4015:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"33","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4024:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"4015:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3998:27:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7432345f6f75744f66426f756e6473","id":2887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4027:22:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc","typeString":"literal_string \"toUint24_outOfBounds\""},"value":"toUint24_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc","typeString":"literal_string \"toUint24_outOfBounds\""}],"id":2880,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3990:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3990:60:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2889,"nodeType":"ExpressionStatement","src":"3990:60:21"},{"assignments":[2891],"declarations":[{"constant":false,"id":2891,"mutability":"mutable","name":"tempUint","nodeType":"VariableDeclaration","scope":2896,"src":"4060:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2890,"name":"uint24","nodeType":"ElementaryTypeName","src":"4060:6:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":2892,"nodeType":"VariableDeclarationStatement","src":"4060:15:21"},{"AST":{"nodeType":"YulBlock","src":"4095:72:21","statements":[{"nodeType":"YulAssignment","src":"4109:48:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"4135:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4143:3:21","type":"","value":"0x3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4131:3:21"},"nodeType":"YulFunctionCall","src":"4131:16:21"},{"name":"_start","nodeType":"YulIdentifier","src":"4149:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4127:3:21"},"nodeType":"YulFunctionCall","src":"4127:29:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4121:5:21"},"nodeType":"YulFunctionCall","src":"4121:36:21"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"4109:8:21"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2864,"isOffset":false,"isSlot":false,"src":"4135:6:21","valueSize":1},{"declaration":2866,"isOffset":false,"isSlot":false,"src":"4149:6:21","valueSize":1},{"declaration":2891,"isOffset":false,"isSlot":false,"src":"4109:8:21","valueSize":1}],"id":2893,"nodeType":"InlineAssembly","src":"4086:81:21"},{"expression":{"id":2894,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"4184:8:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":2870,"id":2895,"nodeType":"Return","src":"4177:15:21"}]},"id":2897,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2864,"mutability":"mutable","name":"_bytes","nodeType":"VariableDeclaration","scope":2897,"src":"3852:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2863,"name":"bytes","nodeType":"ElementaryTypeName","src":"3852:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"_start","nodeType":"VariableDeclaration","scope":2897,"src":"3873:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2865,"name":"uint256","nodeType":"ElementaryTypeName","src":"3873:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3851:37:21"},"returnParameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2897,"src":"3912:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2868,"name":"uint24","nodeType":"ElementaryTypeName","src":"3912:6:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"3911:8:21"},"scope":2898,"src":"3834:365:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2899,"src":"376:3825:21"}],"src":"343:3859:21"},"id":21},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/Path.sol","exportedSymbols":{"BytesLib":[2898],"Path":[3031]},"id":3032,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2900,"literals":["solidity",">=","0.6",".0"],"nodeType":"PragmaDirective","src":"45:24:22"},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol","file":"./BytesLib.sol","id":2901,"nodeType":"ImportDirective","scope":3032,"sourceUnit":2899,"src":"71:24:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2902,"nodeType":"StructuredDocumentation","src":"97:67:22","text":"@title Functions for manipulating path data for multihop swaps"},"fullyImplemented":true,"id":3031,"linearizedBaseContracts":[3031],"name":"Path","nodeType":"ContractDefinition","nodes":[{"id":2905,"libraryName":{"id":2903,"name":"BytesLib","nodeType":"UserDefinedTypeName","referencedDeclaration":2898,"src":"189:8:22","typeDescriptions":{"typeIdentifier":"t_contract$_BytesLib_$2898","typeString":"library BytesLib"}},"nodeType":"UsingForDirective","src":"183:25:22","typeName":{"id":2904,"name":"bytes","nodeType":"ElementaryTypeName","src":"202:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"documentation":{"id":2906,"nodeType":"StructuredDocumentation","src":"214:48:22","text":"@dev The length of the bytes encoded address"},"id":2909,"mutability":"constant","name":"ADDR_SIZE","nodeType":"VariableDeclaration","scope":3031,"src":"267:39:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2907,"name":"uint256","nodeType":"ElementaryTypeName","src":"267:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3230","id":2908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"304:2:22","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"documentation":{"id":2910,"nodeType":"StructuredDocumentation","src":"312:44:22","text":"@dev The length of the bytes encoded fee"},"id":2913,"mutability":"constant","name":"FEE_SIZE","nodeType":"VariableDeclaration","scope":3031,"src":"361:37:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"361:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"397:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"documentation":{"id":2914,"nodeType":"StructuredDocumentation","src":"405:58:22","text":"@dev The offset of a single token address and pool fee"},"id":2919,"mutability":"constant","name":"NEXT_OFFSET","nodeType":"VariableDeclaration","scope":3031,"src":"468:59:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2916,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"507:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2917,"name":"FEE_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"519:8:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"507:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"documentation":{"id":2920,"nodeType":"StructuredDocumentation","src":"533:42:22","text":"@dev The offset of an encoded pool key"},"id":2925,"mutability":"constant","name":"POP_OFFSET","nodeType":"VariableDeclaration","scope":3031,"src":"580:61:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2921,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2922,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"618:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2923,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"632:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"618:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"documentation":{"id":2926,"nodeType":"StructuredDocumentation","src":"647:72:22","text":"@dev The minimum length of an encoding that contains 2 or more pools"},"id":2931,"mutability":"constant","name":"MULTIPLE_POOLS_MIN_LENGTH","nodeType":"VariableDeclaration","scope":3031,"src":"724:77:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"724:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2928,"name":"POP_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"777:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2929,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"790:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"777:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":2944,"nodeType":"Block","src":"1066:64:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2939,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"1083:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1083:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2941,"name":"MULTIPLE_POOLS_MIN_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2931,"src":"1098:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1083:40:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2938,"id":2943,"nodeType":"Return","src":"1076:47:22"}]},"documentation":{"id":2932,"nodeType":"StructuredDocumentation","src":"808:179:22","text":"@notice Returns true iff the path contains two or more pools\n @param path The encoded swap path\n @return True if path contains two or more pools, otherwise false"},"id":2945,"implemented":true,"kind":"function","modifiers":[],"name":"hasMultiplePools","nodeType":"FunctionDefinition","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2945,"src":"1018:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2933,"name":"bytes","nodeType":"ElementaryTypeName","src":"1018:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1017:19:22"},"returnParameters":{"id":2938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2945,"src":"1060:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2936,"name":"bool","nodeType":"ElementaryTypeName","src":"1060:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1059:6:22"},"scope":3031,"src":"992:138:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2962,"nodeType":"Block","src":"1351:166:22","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2953,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"1471:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1471:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2955,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"1485:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1471:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2957,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1470:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2958,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"1498:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1470:39:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1469:41:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2952,"id":2961,"nodeType":"Return","src":"1462:48:22"}]},"documentation":{"id":2946,"nodeType":"StructuredDocumentation","src":"1136:141:22","text":"@notice Returns the number of pools in the path\n @param path The encoded swap path\n @return The number of pools in the path"},"id":2963,"implemented":true,"kind":"function","modifiers":[],"name":"numPools","nodeType":"FunctionDefinition","parameters":{"id":2949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2963,"src":"1300:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2947,"name":"bytes","nodeType":"ElementaryTypeName","src":"1300:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1299:19:22"},"returnParameters":{"id":2952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2951,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":2963,"src":"1342:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2950,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1341:9:22"},"scope":3031,"src":"1282:235:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2996,"nodeType":"Block","src":"1964:129:22","statements":[{"expression":{"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2975,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"1974:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1998:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2976,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"1983:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toAddress","nodeType":"MemberAccess","referencedDeclaration":2862,"src":"1983:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (address)"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1983:17:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1974:26:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2981,"nodeType":"ExpressionStatement","src":"1974:26:22"},{"expression":{"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2982,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"2010:3:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2985,"name":"ADDR_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"2030:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2983,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2016:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toUint24","nodeType":"MemberAccess","referencedDeclaration":2897,"src":"2016:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint24_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint24)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2016:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"2010:30:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":2988,"nodeType":"ExpressionStatement","src":"2010:30:22"},{"expression":{"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2989,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"2050:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2992,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"2074:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2990,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2059:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toAddress","nodeType":"MemberAccess","referencedDeclaration":2862,"src":"2059:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (address)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2059:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2050:36:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2995,"nodeType":"ExpressionStatement","src":"2050:36:22"}]},"documentation":{"id":2964,"nodeType":"StructuredDocumentation","src":"1523:251:22","text":"@notice Decodes the first pool in path\n @param path The bytes encoded swap path\n @return tokenA The first token of the given pool\n @return tokenB The second token of the given pool\n @return fee The fee level of the pool"},"id":2997,"implemented":true,"kind":"function","modifiers":[],"name":"decodeFirstPool","nodeType":"FunctionDefinition","parameters":{"id":2967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2966,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":2997,"src":"1804:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2965,"name":"bytes","nodeType":"ElementaryTypeName","src":"1804:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1803:19:22"},"returnParameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":2997,"src":"1883:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2968,"name":"address","nodeType":"ElementaryTypeName","src":"1883:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2971,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":2997,"src":"1911:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"1911:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2973,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":2997,"src":"1939:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2972,"name":"uint24","nodeType":"ElementaryTypeName","src":"1939:6:22","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"1869:90:22"},"scope":3031,"src":"1779:314:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3011,"nodeType":"Block","src":"2397:49:22","statements":[{"expression":{"arguments":[{"hexValue":"30","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2425:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3008,"name":"POP_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"2428:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3005,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3000,"src":"2414:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"2414:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2414:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3004,"id":3010,"nodeType":"Return","src":"2407:32:22"}]},"documentation":{"id":2998,"nodeType":"StructuredDocumentation","src":"2099:215:22","text":"@notice Gets the segment corresponding to the first pool in the path\n @param path The bytes encoded swap path\n @return The segment containing all data necessary to target the first pool in the path"},"id":3012,"implemented":true,"kind":"function","modifiers":[],"name":"getFirstPool","nodeType":"FunctionDefinition","parameters":{"id":3001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3000,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3012,"src":"2341:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2999,"name":"bytes","nodeType":"ElementaryTypeName","src":"2341:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2340:19:22"},"returnParameters":{"id":3004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3003,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3012,"src":"2383:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3002,"name":"bytes","nodeType":"ElementaryTypeName","src":"2383:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2382:14:22"},"scope":3031,"src":"2319:127:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3029,"nodeType":"Block","src":"2710:74:22","statements":[{"expression":{"arguments":[{"id":3022,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"2738:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3023,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2751:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2751:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3025,"name":"NEXT_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"2765:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2751:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3020,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2727:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"2727:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2727:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3019,"id":3028,"nodeType":"Return","src":"2720:57:22"}]},"documentation":{"id":3013,"nodeType":"StructuredDocumentation","src":"2452:178:22","text":"@notice Skips a token + fee element from the buffer and returns the remainder\n @param path The swap path\n @return The remaining token + fee elements in the path"},"id":3030,"implemented":true,"kind":"function","modifiers":[],"name":"skipToken","nodeType":"FunctionDefinition","parameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3030,"src":"2654:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3014,"name":"bytes","nodeType":"ElementaryTypeName","src":"2654:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2653:19:22"},"returnParameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3030,"src":"2696:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3017,"name":"bytes","nodeType":"ElementaryTypeName","src":"2696:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2695:14:22"},"scope":3031,"src":"2635:149:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3032,"src":"164:2622:22"}],"src":"45:2742:22"},"id":22},"contracts/StaticQuoter.sol":{"ast":{"absolutePath":"contracts/StaticQuoter.sol","exportedSymbols":{"BitMath":[962],"FixedPoint128":[969],"FixedPoint96":[979],"FullMath":[1152],"GlobalState":[5957],"IUniV3likeQuoterCore":[5999],"IUniswapV2Pair":[241],"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683],"IUniswapV3likePool":[6072],"LiquidityMath":[1204],"LowGasSafeMath":[1334],"SafeCast":[1404],"SqrtPriceMath":[1920],"StaticQuoter":[3782],"StepComputations":[5983],"SwapMath":[2181],"SwapState":[5968],"TickBitmap":[6386],"TickMath":[2716],"UniV3QuoterCore":[3941],"UniV3likeQuoterCore":[5948],"UnsafeMath":[2732]},"id":3783,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3033,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:23"},{"id":3034,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"69:19:23"},{"absolutePath":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","file":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","id":3035,"nodeType":"ImportDirective","scope":3783,"sourceUnit":242,"src":"90:66:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/UniV3QuoterCore.sol","file":"./UniV3QuoterCore.sol","id":3036,"nodeType":"ImportDirective","scope":3783,"sourceUnit":3942,"src":"158:31:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3037,"name":"UniV3QuoterCore","nodeType":"UserDefinedTypeName","referencedDeclaration":3941,"src":"216:15:23","typeDescriptions":{"typeIdentifier":"t_contract$_UniV3QuoterCore_$3941","typeString":"contract UniV3QuoterCore"}},"id":3038,"nodeType":"InheritanceSpecifier","src":"216:15:23"}],"contractDependencies":[3941,5948],"contractKind":"contract","fullyImplemented":true,"id":3782,"linearizedBaseContracts":[3782,3941,5948],"name":"StaticQuoter","nodeType":"ContractDefinition","nodes":[{"id":3041,"libraryName":{"id":3039,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"244:14:23","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"238:33:23","typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"263:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3044,"libraryName":{"id":3042,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"282:14:23","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"276:32:23","typeName":{"id":3043,"name":"int256","nodeType":"ElementaryTypeName","src":"301:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":3047,"libraryName":{"id":3045,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"319:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"313:27:23","typeName":{"id":3046,"name":"uint256","nodeType":"ElementaryTypeName","src":"332:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3050,"libraryName":{"id":3048,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"351:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"345:26:23","typeName":{"id":3049,"name":"int256","nodeType":"ElementaryTypeName","src":"364:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"body":{"id":3066,"nodeType":"Block","src":"469:51:23","statements":[{"expression":{"arguments":[{"id":3060,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"497:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":3061,"name":"Route","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"504:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Route_$3561_storage_ptr_$","typeString":"type(struct StaticQuoter.Route storage pointer)"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"504:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}}],"id":3063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"503:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}],"expression":{"id":3058,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"486:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"486:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"486:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"functionReturnParameters":3057,"id":3065,"nodeType":"Return","src":"479:34:23"}]},"functionSelector":"c25ddce0","id":3067,"implemented":true,"kind":"function","modifiers":[],"name":"decodePath","nodeType":"FunctionDefinition","parameters":{"id":3053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3067,"src":"406:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3051,"name":"bytes","nodeType":"ElementaryTypeName","src":"406:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"396:33:23"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3067,"src":"453:14:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route[]"},"typeName":{"baseType":{"id":3054,"name":"Route","nodeType":"UserDefinedTypeName","referencedDeclaration":3561,"src":"453:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_storage_ptr","typeString":"struct StaticQuoter.Route"}},"id":3055,"nodeType":"ArrayTypeName","src":"453:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_storage_$dyn_storage_ptr","typeString":"struct StaticQuoter.Route[]"}},"visibility":"internal"}],"src":"452:16:23"},"scope":3782,"src":"377:143:23","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":3128,"nodeType":"Block","src":"732:416:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3082,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"783:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"795:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"783:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3087,"nodeType":"IfStatement","src":"779:27:23","trueBody":{"expression":{"hexValue":"30","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3081,"id":3086,"nodeType":"Return","src":"798:8:23"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3088,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"854:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"867:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"854:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3091,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"872:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"886:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"872:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"854:33:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3097,"nodeType":"IfStatement","src":"850:47:23","trueBody":{"expression":{"hexValue":"30","id":3095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"896:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3081,"id":3096,"nodeType":"Return","src":"889:8:23"}},{"assignments":[3099],"declarations":[{"constant":false,"id":3099,"mutability":"mutable","name":"amountInWithFee","nodeType":"VariableDeclaration","scope":3128,"src":"907:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3098,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3104,"initialValue":{"arguments":[{"id":3102,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"946:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":3100,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"933:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"933:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"933:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"907:50:23"},{"assignments":[3106],"declarations":[{"constant":false,"id":3106,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":3128,"src":"967:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3105,"name":"uint256","nodeType":"ElementaryTypeName","src":"967:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3111,"initialValue":{"arguments":[{"id":3109,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"1007:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3107,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"987:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"987:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"987:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"967:51:23"},{"assignments":[3113],"declarations":[{"constant":false,"id":3113,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":3128,"src":"1028:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3121,"initialValue":{"arguments":[{"id":3119,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"1080:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3116,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"1064:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":3114,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"1050:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1050:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1050:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"1050:29:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1050:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1028:68:23"},{"expression":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3122,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"1106:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3123,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"1118:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3124,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"1130:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1118:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1106:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3127,"nodeType":"ExpressionStatement","src":"1106:35:23"}]},"id":3129,"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountOutV2","nodeType":"FunctionDefinition","parameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3069,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3129,"src":"560:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3071,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":3129,"src":"586:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3070,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3073,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":3129,"src":"613:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3072,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3075,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":3129,"src":"641:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3074,"name":"uint8","nodeType":"ElementaryTypeName","src":"641:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3077,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":3129,"src":"667:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3076,"name":"uint8","nodeType":"ElementaryTypeName","src":"667:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"550:139:23"},"returnParameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3129,"src":"713:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"713:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"712:19:23"},"scope":3782,"src":"526:622:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3190,"nodeType":"Block","src":"1359:370:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3144,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"1411:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1424:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1411:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3149,"nodeType":"IfStatement","src":"1407:28:23","trueBody":{"expression":{"hexValue":"30","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1434:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3143,"id":3148,"nodeType":"Return","src":"1427:8:23"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"1483:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1496:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1483:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3153,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"1501:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1515:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1501:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1483:33:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3159,"nodeType":"IfStatement","src":"1479:47:23","trueBody":{"expression":{"hexValue":"30","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1525:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3143,"id":3158,"nodeType":"Return","src":"1518:8:23"}},{"assignments":[3161],"declarations":[{"constant":false,"id":3161,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":3190,"src":"1536:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1536:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3169,"initialValue":{"arguments":[{"id":3167,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"1585:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[{"id":3164,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"1570:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3162,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"1556:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1556:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1556:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1556:28:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1556:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1536:60:23"},{"assignments":[3171],"declarations":[{"constant":false,"id":3171,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":3190,"src":"1606:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3179,"initialValue":{"arguments":[{"id":3177,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"1658:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[{"id":3174,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"1643:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3172,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"1628:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1251,"src":"1628:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1628:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1628:29:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1628:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1606:63:23"},{"expression":{"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3180,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"1679:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":3186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1720:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3181,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"1691:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3182,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3171,"src":"1703:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1691:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3184,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1690:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"1690:29:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1690:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1679:43:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3189,"nodeType":"ExpressionStatement","src":"1679:43:23"}]},"id":3191,"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountInV2","nodeType":"FunctionDefinition","parameters":{"id":3140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3131,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3191,"src":"1187:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3130,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3133,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":3191,"src":"1214:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3132,"name":"uint256","nodeType":"ElementaryTypeName","src":"1214:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":3191,"src":"1241:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3134,"name":"uint256","nodeType":"ElementaryTypeName","src":"1241:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3137,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":3191,"src":"1269:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3136,"name":"uint8","nodeType":"ElementaryTypeName","src":"1269:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3139,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":3191,"src":"1295:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3138,"name":"uint8","nodeType":"ElementaryTypeName","src":"1295:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1177:140:23"},"returnParameters":{"id":3143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3142,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3191,"src":"1341:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1340:18:23"},"scope":3782,"src":"1154:575:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3277,"nodeType":"Block","src":"1956:694:23","statements":[{"assignments":[3209],"declarations":[{"constant":false,"id":3209,"mutability":"mutable","name":"v2pair","nodeType":"VariableDeclaration","scope":3277,"src":"1966:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"},"typeName":{"id":3208,"name":"IUniswapV2Pair","nodeType":"UserDefinedTypeName","referencedDeclaration":241,"src":"1966:14:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"visibility":"internal"}],"id":3213,"initialValue":{"arguments":[{"id":3211,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"2005:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3210,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"1990:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$241_$","typeString":"type(contract IUniswapV2Pair)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1990:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"nodeType":"VariableDeclarationStatement","src":"1966:44:23"},{"assignments":[3215,3217],"declarations":[{"constant":false,"id":3215,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":3277,"src":"2021:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3214,"name":"address","nodeType":"ElementaryTypeName","src":"2021:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3217,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":3277,"src":"2037:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3216,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3228,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3218,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"2055:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3219,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"2065:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2055:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3224,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"2123:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3225,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"2133:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3226,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2122:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2055:86:23","trueExpression":{"components":[{"id":3221,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"2089:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3222,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"2098:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3223,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2088:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"2020:121:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3229,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"2178:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":169,"src":"2178:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2178:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3232,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"2197:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2178:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3234,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"2207:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":174,"src":"2207:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2207:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3237,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"2226:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2207:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2178:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3243,"nodeType":"IfStatement","src":"2174:93:23","trueBody":{"id":3242,"nodeType":"Block","src":"2234:33:23","statements":[{"expression":{"hexValue":"30","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2255:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3207,"id":3241,"nodeType":"Return","src":"2248:8:23"}]}},{"assignments":[3245,3247,null],"declarations":[{"constant":false,"id":3245,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":3277,"src":"2278:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3244,"name":"uint256","nodeType":"ElementaryTypeName","src":"2278:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3247,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":3277,"src":"2296:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3246,"name":"uint256","nodeType":"ElementaryTypeName","src":"2296:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":3251,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3248,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"2318:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":183,"src":"2318:18:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2318:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"2277:61:23"},{"assignments":[3253,3255],"declarations":[{"constant":false,"id":3253,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":3277,"src":"2349:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2349:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":3277,"src":"2368:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3254,"name":"uint256","nodeType":"ElementaryTypeName","src":"2368:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3266,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3256,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"2390:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3257,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"2400:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2390:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3262,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"2459:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3263,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"2469:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3264,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2458:20:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2390:88:23","trueExpression":{"components":[{"id":3259,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"2424:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3260,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3247,"src":"2434:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3261,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2423:20:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2348:130:23"},{"expression":{"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3267,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"2489:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3269,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2530:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3270,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2552:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3271,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"2575:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3272,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"2599:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3273,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2623:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3268,"name":"_getAmountOutV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3129,"src":"2501:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint8,uint8) pure returns (uint256)"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:142:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2489:154:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3276,"nodeType":"ExpressionStatement","src":"2489:154:23"}]},"functionSelector":"97de0a84","id":3278,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOutV2","nodeType":"FunctionDefinition","parameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3278,"src":"1768:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3192,"name":"address","nodeType":"ElementaryTypeName","src":"1768:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3195,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3278,"src":"1793:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3194,"name":"address","nodeType":"ElementaryTypeName","src":"1793:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3197,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3278,"src":"1819:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3196,"name":"address","nodeType":"ElementaryTypeName","src":"1819:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3199,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":3278,"src":"1841:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3198,"name":"uint8","nodeType":"ElementaryTypeName","src":"1841:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3201,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":3278,"src":"1867:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3200,"name":"uint8","nodeType":"ElementaryTypeName","src":"1867:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3203,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3278,"src":"1893:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1893:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1758:157:23"},"returnParameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3278,"src":"1937:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3205,"name":"uint256","nodeType":"ElementaryTypeName","src":"1937:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1936:19:23"},"scope":3782,"src":"1735:915:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3364,"nodeType":"Block","src":"2876:693:23","statements":[{"assignments":[3296],"declarations":[{"constant":false,"id":3296,"mutability":"mutable","name":"v2pair","nodeType":"VariableDeclaration","scope":3364,"src":"2886:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"},"typeName":{"id":3295,"name":"IUniswapV2Pair","nodeType":"UserDefinedTypeName","referencedDeclaration":241,"src":"2886:14:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"visibility":"internal"}],"id":3300,"initialValue":{"arguments":[{"id":3298,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2925:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3297,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"2910:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$241_$","typeString":"type(contract IUniswapV2Pair)"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2910:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"nodeType":"VariableDeclarationStatement","src":"2886:44:23"},{"assignments":[3302,3304],"declarations":[{"constant":false,"id":3302,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":3364,"src":"2941:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3301,"name":"address","nodeType":"ElementaryTypeName","src":"2941:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3304,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":3364,"src":"2957:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3303,"name":"address","nodeType":"ElementaryTypeName","src":"2957:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3315,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3305,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"2975:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3306,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"2985:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2975:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3311,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"3043:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3312,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3053:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3042:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2975:86:23","trueExpression":{"components":[{"id":3308,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3009:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3309,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"3018:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3310,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3008:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"2940:121:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3316,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"3098:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":169,"src":"3098:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3098:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3319,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3302,"src":"3117:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3098:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3321,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"3127:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":174,"src":"3127:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3127:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3324,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"3146:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3127:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3098:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3330,"nodeType":"IfStatement","src":"3094:93:23","trueBody":{"id":3329,"nodeType":"Block","src":"3154:33:23","statements":[{"expression":{"hexValue":"30","id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3175:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3294,"id":3328,"nodeType":"Return","src":"3168:8:23"}]}},{"assignments":[3332,3334,null],"declarations":[{"constant":false,"id":3332,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":3364,"src":"3198:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"3198:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3334,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":3364,"src":"3216:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3333,"name":"uint256","nodeType":"ElementaryTypeName","src":"3216:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":3338,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3335,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"3238:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":183,"src":"3238:18:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3238:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"3197:61:23"},{"assignments":[3340,3342],"declarations":[{"constant":false,"id":3340,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":3364,"src":"3269:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"3269:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3342,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":3364,"src":"3288:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3341,"name":"uint256","nodeType":"ElementaryTypeName","src":"3288:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3353,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3343,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3310:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3344,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"3320:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3310:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3349,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"3379:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3350,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"3389:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3378:20:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3310:88:23","trueExpression":{"components":[{"id":3346,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"3344:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3347,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"3354:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3348,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3343:20:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3268:130:23"},{"expression":{"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3354,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"3409:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3356,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3290,"src":"3448:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3357,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"3471:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3358,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"3494:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3359,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"3518:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3360,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"3542:10:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3355,"name":"_getAmountInV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"3420:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint8,uint8) pure returns (uint256)"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3420:142:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3409:153:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3363,"nodeType":"ExpressionStatement","src":"3409:153:23"}]},"functionSelector":"53201a4c","id":3365,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountInV2","nodeType":"FunctionDefinition","parameters":{"id":3291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3365,"src":"2688:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3279,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3282,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3365,"src":"2713:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3281,"name":"address","nodeType":"ElementaryTypeName","src":"2713:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3284,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3365,"src":"2739:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3283,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3286,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":3365,"src":"2761:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3285,"name":"uint8","nodeType":"ElementaryTypeName","src":"2761:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3288,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":3365,"src":"2787:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3287,"name":"uint8","nodeType":"ElementaryTypeName","src":"2787:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3290,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3365,"src":"2813:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3289,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:158:23"},"returnParameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3293,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3365,"src":"2858:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3292,"name":"uint256","nodeType":"ElementaryTypeName","src":"2858:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2857:18:23"},"scope":3782,"src":"2656:913:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3457,"nodeType":"Block","src":"3744:696:23","statements":[{"assignments":[3379],"declarations":[{"constant":false,"id":3379,"mutability":"mutable","name":"v3pool","nodeType":"VariableDeclaration","scope":3457,"src":"3754:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":3378,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"3754:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":3383,"initialValue":{"arguments":[{"id":3381,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"3801:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3380,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"3782:18:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3782:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"3754:52:23"},{"assignments":[3385,3387],"declarations":[{"constant":false,"id":3385,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":3457,"src":"3817:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3384,"name":"address","nodeType":"ElementaryTypeName","src":"3817:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3387,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":3457,"src":"3833:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3386,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3398,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3388,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"3851:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3389,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"3861:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3851:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3394,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"3919:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3395,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"3929:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3918:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3851:86:23","trueExpression":{"components":[{"id":3391,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"3885:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3392,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"3894:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3884:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"3816:121:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3399,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"3974:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":524,"src":"3974:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3974:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3402,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"3993:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3974:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3404,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"4003:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":530,"src":"4003:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4003:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3407,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"4022:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4003:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3974:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3413,"nodeType":"IfStatement","src":"3970:93:23","trueBody":{"id":3412,"nodeType":"Block","src":"4030:33:23","statements":[{"expression":{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4051:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3377,"id":3411,"nodeType":"Return","src":"4044:8:23"}]}},{"assignments":[3415],"declarations":[{"constant":false,"id":3415,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3457,"src":"4073:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3414,"name":"bool","nodeType":"ElementaryTypeName","src":"4073:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3419,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3416,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"4091:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3417,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"4101:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4091:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4073:36:23"},{"assignments":[3421,3423],"declarations":[{"constant":false,"id":3421,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3457,"src":"4120:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3420,"name":"int256","nodeType":"ElementaryTypeName","src":"4120:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3423,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3457,"src":"4136:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3422,"name":"int256","nodeType":"ElementaryTypeName","src":"4136:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3441,"initialValue":{"arguments":[{"id":3425,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"4173:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3426,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"4191:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3427,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"4215:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"4215:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4215:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"id":3430,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"4248:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3435,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4323:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"4323:23:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4349:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4323:27:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4248:102:23","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3431,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4277:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"4277:23:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4303:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4277:27:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3424,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"4154:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4154:206:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"4119:241:23"},{"expression":{"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3442,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"4371:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":3443,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"4383:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4424:8:23","subExpression":{"id":3451,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"4425:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4416:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3449,"name":"uint256","nodeType":"ElementaryTypeName","src":"4416:7:23","typeDescriptions":{}}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4416:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4383:50:23","trueExpression":{"arguments":[{"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4404:8:23","subExpression":{"id":3446,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"4405:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3444,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:23","typeDescriptions":{}}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4396:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4371:62:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3456,"nodeType":"ExpressionStatement","src":"4371:62:23"}]},"functionSelector":"2d0f9a30","id":3458,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOutV3","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3367,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3458,"src":"3608:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3366,"name":"address","nodeType":"ElementaryTypeName","src":"3608:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3458,"src":"3633:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3368,"name":"address","nodeType":"ElementaryTypeName","src":"3633:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3458,"src":"3659:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"3659:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3373,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3458,"src":"3681:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"3681:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3598:105:23"},"returnParameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3458,"src":"3725:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3375,"name":"uint256","nodeType":"ElementaryTypeName","src":"3725:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3724:19:23"},"scope":3782,"src":"3575:865:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3547,"nodeType":"Block","src":"4614:691:23","statements":[{"assignments":[3472],"declarations":[{"constant":false,"id":3472,"mutability":"mutable","name":"v3pool","nodeType":"VariableDeclaration","scope":3547,"src":"4624:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":3471,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"4624:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":3476,"initialValue":{"arguments":[{"id":3474,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"4671:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3473,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"4652:18:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4652:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"4624:52:23"},{"assignments":[3478,3480],"declarations":[{"constant":false,"id":3478,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":3547,"src":"4687:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3477,"name":"address","nodeType":"ElementaryTypeName","src":"4687:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3480,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":3547,"src":"4703:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3479,"name":"address","nodeType":"ElementaryTypeName","src":"4703:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3491,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3481,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"4721:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3482,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"4731:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4721:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3487,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"4789:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3488,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"4799:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4788:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4721:86:23","trueExpression":{"components":[{"id":3484,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"4755:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3485,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"4764:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:19:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"4686:121:23"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3492,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"4844:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":524,"src":"4844:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4844:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3495,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"4863:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4844:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3497,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"4873:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":530,"src":"4873:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4873:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3500,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"4892:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4873:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4844:54:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3506,"nodeType":"IfStatement","src":"4840:93:23","trueBody":{"id":3505,"nodeType":"Block","src":"4900:33:23","statements":[{"expression":{"hexValue":"30","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4921:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3470,"id":3504,"nodeType":"Return","src":"4914:8:23"}]}},{"assignments":[3508],"declarations":[{"constant":false,"id":3508,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3547,"src":"4943:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3507,"name":"bool","nodeType":"ElementaryTypeName","src":"4943:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3512,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3509,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"4961:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3510,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"4971:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4961:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4943:36:23"},{"assignments":[3514,3516],"declarations":[{"constant":false,"id":3514,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":3547,"src":"4990:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3513,"name":"int256","nodeType":"ElementaryTypeName","src":"4990:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3516,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":3547,"src":"5006:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3515,"name":"int256","nodeType":"ElementaryTypeName","src":"5006:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3535,"initialValue":{"arguments":[{"id":3518,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"5043:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3519,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3508,"src":"5061:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"5085:21:23","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3520,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"5086:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"5086:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5086:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"id":3524,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3508,"src":"5120:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3529,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5195:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"5195:23:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5221:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5195:27:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5120:102:23","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3525,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5149:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"5149:23:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5175:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5149:27:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3517,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"5024:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5024:208:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"4989:243:23"},{"expression":{"condition":{"id":3536,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3508,"src":"5250:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":3543,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"5290:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5282:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3541,"name":"uint256","nodeType":"ElementaryTypeName","src":"5282:7:23","typeDescriptions":{}}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5250:48:23","trueExpression":{"arguments":[{"id":3539,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"5271:7:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5263:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3537,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:23","typeDescriptions":{}}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5263:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3470,"id":3546,"nodeType":"Return","src":"5243:55:23"}]},"functionSelector":"6e95d3d8","id":3548,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountInV3","nodeType":"FunctionDefinition","parameters":{"id":3467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3548,"src":"4478:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3459,"name":"address","nodeType":"ElementaryTypeName","src":"4478:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3462,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3548,"src":"4503:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3461,"name":"address","nodeType":"ElementaryTypeName","src":"4503:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3464,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3548,"src":"4529:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3463,"name":"address","nodeType":"ElementaryTypeName","src":"4529:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3466,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":3548,"src":"4551:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3465,"name":"uint256","nodeType":"ElementaryTypeName","src":"4551:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4468:106:23"},"returnParameters":{"id":3470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3469,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":3548,"src":"4596:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3468,"name":"uint256","nodeType":"ElementaryTypeName","src":"4596:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4595:18:23"},"scope":3782,"src":"4446:859:23","stateMutability":"view","virtual":false,"visibility":"public"},{"canonicalName":"StaticQuoter.Route","id":3561,"members":[{"constant":false,"id":3550,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":3561,"src":"5334:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3549,"name":"address","nodeType":"ElementaryTypeName","src":"5334:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3552,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":3561,"src":"5359:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3551,"name":"address","nodeType":"ElementaryTypeName","src":"5359:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3554,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3561,"src":"5385:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"5385:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3556,"mutability":"mutable","name":"poolType","nodeType":"VariableDeclaration","scope":3561,"src":"5407:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3555,"name":"uint8","nodeType":"ElementaryTypeName","src":"5407:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3558,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":3561,"src":"5447:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3557,"name":"uint8","nodeType":"ElementaryTypeName","src":"5447:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3560,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":3561,"src":"5473:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3559,"name":"uint8","nodeType":"ElementaryTypeName","src":"5473:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"Route","nodeType":"StructDefinition","scope":3782,"src":"5311:185:23","visibility":"public"},{"body":{"id":3669,"nodeType":"Block","src":"5620:875:23","statements":[{"assignments":[3574],"declarations":[{"constant":false,"id":3574,"mutability":"mutable","name":"routes","nodeType":"VariableDeclaration","scope":3669,"src":"5630:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route[]"},"typeName":{"baseType":{"id":3572,"name":"Route","nodeType":"UserDefinedTypeName","referencedDeclaration":3561,"src":"5630:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_storage_ptr","typeString":"struct StaticQuoter.Route"}},"id":3573,"nodeType":"ArrayTypeName","src":"5630:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_storage_$dyn_storage_ptr","typeString":"struct StaticQuoter.Route[]"}},"visibility":"internal"}],"id":3582,"initialValue":{"arguments":[{"id":3577,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"5665:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":3578,"name":"Route","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"5672:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Route_$3561_storage_ptr_$","typeString":"type(struct StaticQuoter.Route storage pointer)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"5672:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}}],"id":3580,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5671:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}],"expression":{"id":3575,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5654:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5654:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5654:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5630:51:23"},{"assignments":[3587],"declarations":[{"constant":false,"id":3587,"mutability":"mutable","name":"amountOuts","nodeType":"VariableDeclaration","scope":3669,"src":"5691:27:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3585,"name":"uint256","nodeType":"ElementaryTypeName","src":"5691:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3586,"nodeType":"ArrayTypeName","src":"5691:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3594,"initialValue":{"arguments":[{"expression":{"id":3591,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"5735:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5735:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5721:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3589,"nodeType":"ArrayTypeName","src":"5725:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5721:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5691:58:23"},{"body":{"id":3665,"nodeType":"Block","src":"5803:658:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3606,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"5821:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3608,"indexExpression":{"id":3607,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"5828:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5821:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"poolType","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"5821:18:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5843:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5821:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3657,"nodeType":"Block","src":"6175:239:23","statements":[{"expression":{"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3639,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6215:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3641,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6260:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3643,"indexExpression":{"id":3642,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6267:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6260:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"6260:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3645,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6299:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3647,"indexExpression":{"id":3646,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6306:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6299:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"6299:18:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3649,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6339:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3651,"indexExpression":{"id":3650,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6346:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6339:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3652,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"6339:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3653,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6375:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3640,"name":"getAmountOutV3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"6224:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) view returns (uint256)"}},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6224:175:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6215:184:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3656,"nodeType":"ExpressionStatement","src":"6215:184:23"}]},"id":3658,"nodeType":"IfStatement","src":"5817:597:23","trueBody":{"id":3638,"nodeType":"Block","src":"5846:323:23","statements":[{"expression":{"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3612,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"5886:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3614,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"5931:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3616,"indexExpression":{"id":3615,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"5938:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5931:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3617,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"5931:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3618,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"5970:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3620,"indexExpression":{"id":3619,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"5977:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5970:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3621,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"5970:18:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3622,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6010:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3624,"indexExpression":{"id":3623,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6017:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6010:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"6010:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3626,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6046:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3628,"indexExpression":{"id":3627,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6053:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6046:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feePercent","nodeType":"MemberAccess","referencedDeclaration":3558,"src":"6046:20:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"baseExpression":{"id":3630,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6088:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3632,"indexExpression":{"id":3631,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6095:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6088:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3633,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"maxPercent","nodeType":"MemberAccess","referencedDeclaration":3560,"src":"6088:20:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3634,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6130:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3613,"name":"getAmountOutV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"5895:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint8,uint8,uint256) view returns (uint256)"}},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5895:259:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5886:268:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3637,"nodeType":"ExpressionStatement","src":"5886:268:23"}]}},{"expression":{"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3659,"name":"amountOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"6428:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3661,"indexExpression":{"id":3660,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"6439:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6428:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3662,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6444:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6428:22:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3664,"nodeType":"ExpressionStatement","src":"6428:22:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3599,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"5779:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3600,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"5783:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5783:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5779:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3666,"initializationExpression":{"assignments":[3596],"declarations":[{"constant":false,"id":3596,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":3666,"src":"5764:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3595,"name":"uint256","nodeType":"ElementaryTypeName","src":"5764:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3598,"initialValue":{"hexValue":"30","id":3597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5776:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5764:13:23"},"loopExpression":{"expression":{"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5798:3:23","subExpression":{"id":3603,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"5798:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3605,"nodeType":"ExpressionStatement","src":"5798:3:23"},"nodeType":"ForStatement","src":"5759:702:23"},{"expression":{"id":3667,"name":"amountOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"6478:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3570,"id":3668,"nodeType":"Return","src":"6471:17:23"}]},"functionSelector":"77cd49e4","id":3670,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3563,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3670,"src":"5533:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3562,"name":"bytes","nodeType":"ElementaryTypeName","src":"5533:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3565,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3670,"src":"5560:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"5560:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5523:57:23"},"returnParameters":{"id":3570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3670,"src":"5602:16:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"5602:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3568,"nodeType":"ArrayTypeName","src":"5602:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5601:18:23"},"scope":3782,"src":"5502:993:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3780,"nodeType":"Block","src":"6618:875:23","statements":[{"assignments":[3683],"declarations":[{"constant":false,"id":3683,"mutability":"mutable","name":"routes","nodeType":"VariableDeclaration","scope":3780,"src":"6628:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route[]"},"typeName":{"baseType":{"id":3681,"name":"Route","nodeType":"UserDefinedTypeName","referencedDeclaration":3561,"src":"6628:5:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_storage_ptr","typeString":"struct StaticQuoter.Route"}},"id":3682,"nodeType":"ArrayTypeName","src":"6628:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_storage_$dyn_storage_ptr","typeString":"struct StaticQuoter.Route[]"}},"visibility":"internal"}],"id":3691,"initialValue":{"arguments":[{"id":3686,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3672,"src":"6663:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":3687,"name":"Route","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"6670:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Route_$3561_storage_ptr_$","typeString":"type(struct StaticQuoter.Route storage pointer)"}},"id":3688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"6670:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}}],"id":3689,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6669:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct StaticQuoter.Route memory[] memory)"}],"expression":{"id":3684,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6652:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"6652:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6652:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6628:51:23"},{"assignments":[3696],"declarations":[{"constant":false,"id":3696,"mutability":"mutable","name":"amountIns","nodeType":"VariableDeclaration","scope":3780,"src":"6689:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3694,"name":"uint256","nodeType":"ElementaryTypeName","src":"6689:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3695,"nodeType":"ArrayTypeName","src":"6689:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3703,"initialValue":{"arguments":[{"expression":{"id":3700,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6732:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6732:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6718:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":3697,"name":"uint256","nodeType":"ElementaryTypeName","src":"6722:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3698,"nodeType":"ArrayTypeName","src":"6722:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6718:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6689:57:23"},{"body":{"id":3776,"nodeType":"Block","src":"6805:655:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3717,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6823:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3719,"indexExpression":{"id":3718,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"6830:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6823:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3720,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"poolType","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"6823:18:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6823:23:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3768,"nodeType":"Block","src":"7176:238:23","statements":[{"expression":{"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3750,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"7216:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3752,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"7260:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3754,"indexExpression":{"id":3753,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7267:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7260:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3755,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"7260:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3756,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"7299:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3758,"indexExpression":{"id":3757,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7306:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7299:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"7299:18:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3760,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"7339:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3762,"indexExpression":{"id":3761,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7346:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7339:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"7339:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3764,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"7375:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3751,"name":"getAmountInV3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"7225:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) view returns (uint256)"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7225:174:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7216:183:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3767,"nodeType":"ExpressionStatement","src":"7216:183:23"}]},"id":3769,"nodeType":"IfStatement","src":"6819:595:23","trueBody":{"id":3749,"nodeType":"Block","src":"6848:322:23","statements":[{"expression":{"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3723,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"6888:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3725,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6932:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3727,"indexExpression":{"id":3726,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"6939:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6932:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":3550,"src":"6932:17:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3729,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6971:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3731,"indexExpression":{"id":3730,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"6978:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6971:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":3552,"src":"6971:18:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3733,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"7011:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3735,"indexExpression":{"id":3734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7018:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7011:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3736,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":3554,"src":"7011:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3737,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"7047:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3739,"indexExpression":{"id":3738,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7054:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7047:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feePercent","nodeType":"MemberAccess","referencedDeclaration":3558,"src":"7047:20:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"baseExpression":{"id":3741,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"7089:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3743,"indexExpression":{"id":3742,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7096:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7089:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$3561_memory_ptr","typeString":"struct StaticQuoter.Route memory"}},"id":3744,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"maxPercent","nodeType":"MemberAccess","referencedDeclaration":3560,"src":"7089:20:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3745,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"7131:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3724,"name":"getAmountInV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"6897:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint8,uint8,uint256) view returns (uint256)"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6897:258:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6888:267:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3748,"nodeType":"ExpressionStatement","src":"6888:267:23"}]}},{"expression":{"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3770,"name":"amountIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"7428:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3772,"indexExpression":{"id":3771,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"7438:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7428:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3773,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"7443:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7428:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3775,"nodeType":"ExpressionStatement","src":"7428:21:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3711,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"6792:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6797:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6792:6:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3777,"initializationExpression":{"assignments":[3705],"declarations":[{"constant":false,"id":3705,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":3777,"src":"6761:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3704,"name":"uint256","nodeType":"ElementaryTypeName","src":"6761:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3710,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3706,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6773:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr","typeString":"struct StaticQuoter.Route memory[] memory"}},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6773:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6789:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6773:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6761:29:23"},"loopExpression":{"expression":{"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"6800:3:23","subExpression":{"id":3714,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"6800:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3716,"nodeType":"ExpressionStatement","src":"6800:3:23"},"nodeType":"ForStatement","src":"6756:704:23"},{"expression":{"id":3778,"name":"amountIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"7477:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3679,"id":3779,"nodeType":"Return","src":"7470:16:23"}]},"functionSelector":"00614b2e","id":3781,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountIn","nodeType":"FunctionDefinition","parameters":{"id":3675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3781,"src":"6531:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3671,"name":"bytes","nodeType":"ElementaryTypeName","src":"6531:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3674,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":3781,"src":"6558:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3673,"name":"uint256","nodeType":"ElementaryTypeName","src":"6558:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6521:57:23"},"returnParameters":{"id":3679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3678,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3781,"src":"6600:16:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3676,"name":"uint256","nodeType":"ElementaryTypeName","src":"6600:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3677,"nodeType":"ArrayTypeName","src":"6600:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6599:18:23"},"scope":3782,"src":"6501:992:23","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3783,"src":"191:7304:23"}],"src":"45:7451:23"},"id":23},"contracts/UniV3QuoterCore.sol":{"ast":{"absolutePath":"contracts/UniV3QuoterCore.sol","exportedSymbols":{"BitMath":[962],"FixedPoint128":[969],"FixedPoint96":[979],"FullMath":[1152],"GlobalState":[5957],"IUniV3likeQuoterCore":[5999],"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683],"IUniswapV3likePool":[6072],"LiquidityMath":[1204],"LowGasSafeMath":[1334],"SafeCast":[1404],"SqrtPriceMath":[1920],"StepComputations":[5983],"SwapMath":[2181],"SwapState":[5968],"TickBitmap":[6386],"TickMath":[2716],"UniV3QuoterCore":[3941],"UniV3likeQuoterCore":[5948],"UnsafeMath":[2732]},"id":3942,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3784,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:24"},{"absolutePath":"contracts/base/UniV3likeQuoterCore.sol","file":"./base/UniV3likeQuoterCore.sol","id":3785,"nodeType":"ImportDirective","scope":3942,"sourceUnit":5949,"src":"70:40:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/TickBitmap.sol","file":"./libraries/TickBitmap.sol","id":3786,"nodeType":"ImportDirective","scope":3942,"sourceUnit":6387,"src":"111:36:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3787,"name":"UniV3likeQuoterCore","nodeType":"UserDefinedTypeName","referencedDeclaration":5948,"src":"177:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_UniV3likeQuoterCore_$5948","typeString":"contract UniV3likeQuoterCore"}},"id":3788,"nodeType":"InheritanceSpecifier","src":"177:19:24"}],"contractDependencies":[5948],"contractKind":"contract","fullyImplemented":true,"id":3941,"linearizedBaseContracts":[3941,5948],"name":"UniV3QuoterCore","nodeType":"ContractDefinition","nodes":[{"body":{"id":3822,"nodeType":"Block","src":"293:205:24","statements":[{"clauses":[{"block":{"id":3808,"nodeType":"Block","src":"369:46:24","statements":[{"expression":{"arguments":[{"id":3805,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3801,"src":"397:6:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":3804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"390:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3803,"name":"uint16","nodeType":"ElementaryTypeName","src":"390:6:24","typeDescriptions":{}}},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"390:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":3794,"id":3807,"nodeType":"Return","src":"383:21:24"}]},"errorName":"","id":3809,"nodeType":"TryCatchClause","parameters":{"id":3802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3801,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","scope":3809,"src":"354:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3800,"name":"uint24","nodeType":"ElementaryTypeName","src":"354:6:24","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"353:15:24"},"src":"345:70:24"},{"block":{"id":3819,"nodeType":"Block","src":"422:70:24","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3813,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"469:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3812,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"450:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"450:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":536,"src":"450:28:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint24_$","typeString":"function () view external returns (uint24)"}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"450:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":3811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"443:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3810,"name":"uint16","nodeType":"ElementaryTypeName","src":"443:6:24","typeDescriptions":{}}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"443:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":3794,"id":3818,"nodeType":"Return","src":"436:45:24"}]},"errorName":"","id":3820,"nodeType":"TryCatchClause","src":"416:76:24"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3796,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"326:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3795,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"307:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"307:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"currentFee","nodeType":"MemberAccess","referencedDeclaration":6071,"src":"307:35:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint24_$","typeString":"function () view external returns (uint24)"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"307:37:24","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":3821,"nodeType":"TryStatement","src":"303:189:24"}]},"id":3823,"implemented":true,"kind":"function","modifiers":[],"name":"_tryGetPoolCurrentFee","nodeType":"FunctionDefinition","parameters":{"id":3791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3790,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3823,"src":"243:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3789,"name":"address","nodeType":"ElementaryTypeName","src":"243:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"233:28:24"},"returnParameters":{"id":3794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3793,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3823,"src":"285:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3792,"name":"uint16","nodeType":"ElementaryTypeName","src":"285:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"284:8:24"},"scope":3941,"src":"203:295:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5895],"body":{"id":3852,"nodeType":"Block","src":"615:150:24","statements":[{"expression":{"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3831,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"625:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":3833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":5956,"src":"625:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3835,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"656:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3834,"name":"_tryGetPoolCurrentFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"634:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint16_$","typeString":"function (address) view returns (uint16)"}},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"634:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"625:36:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":3838,"nodeType":"ExpressionStatement","src":"625:36:24"},{"expression":{"id":3850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":3839,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"672:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":3841,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startPrice","nodeType":"MemberAccess","referencedDeclaration":5952,"src":"672:13:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":3842,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"687:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":3843,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startTick","nodeType":"MemberAccess","referencedDeclaration":5954,"src":"687:12:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},null,null,null,null,null],"id":3844,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"671:39:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$__$__$__$__$__$","typeString":"tuple(uint160,int24,,,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3846,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"732:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3845,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"713:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"713:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":596,"src":"713:43:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"713:45:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"src":"671:87:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3851,"nodeType":"ExpressionStatement","src":"671:87:24"}]},"id":3853,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolGlobalState","nodeType":"FunctionDefinition","overrides":{"id":3827,"nodeType":"OverrideSpecifier","overrides":[],"src":"574:8:24"},"parameters":{"id":3826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3825,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3853,"src":"541:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3824,"name":"address","nodeType":"ElementaryTypeName","src":"541:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"531:28:24"},"returnParameters":{"id":3830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3829,"mutability":"mutable","name":"gs","nodeType":"VariableDeclaration","scope":3853,"src":"592:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState"},"typeName":{"id":3828,"name":"GlobalState","nodeType":"UserDefinedTypeName","referencedDeclaration":5957,"src":"592:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_storage_ptr","typeString":"struct GlobalState"}},"visibility":"internal"}],"src":"591:23:24"},"scope":3941,"src":"504:261:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5909],"body":{"id":3867,"nodeType":"Block","src":"862:62:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3862,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"898:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3861,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"879:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"879:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickSpacing","nodeType":"MemberAccess","referencedDeclaration":542,"src":"879:36:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_int24_$","typeString":"function () view external returns (int24)"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"879:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"functionReturnParameters":3860,"id":3866,"nodeType":"Return","src":"872:45:24"}]},"id":3868,"implemented":true,"kind":"function","modifiers":[],"name":"getTickSpacing","nodeType":"FunctionDefinition","overrides":{"id":3857,"nodeType":"OverrideSpecifier","overrides":[],"src":"837:8:24"},"parameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3868,"src":"804:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3854,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"794:28:24"},"returnParameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3868,"src":"855:5:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3858,"name":"int24","nodeType":"ElementaryTypeName","src":"855:5:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"854:7:24"},"scope":3941,"src":"771:153:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5902],"body":{"id":3882,"nodeType":"Block","src":"1021:60:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3877,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"1057:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3876,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"1038:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1038:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":622,"src":"1038:34:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint128_$","typeString":"function () view external returns (uint128)"}},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1038:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":3875,"id":3881,"nodeType":"Return","src":"1031:43:24"}]},"id":3883,"implemented":true,"kind":"function","modifiers":[],"name":"getLiquidity","nodeType":"FunctionDefinition","overrides":{"id":3872,"nodeType":"OverrideSpecifier","overrides":[],"src":"994:8:24"},"parameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3870,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3883,"src":"961:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3869,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"951:28:24"},"returnParameters":{"id":3875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3874,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3883,"src":"1012:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3873,"name":"uint128","nodeType":"ElementaryTypeName","src":"1012:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1011:9:24"},"scope":3941,"src":"930:151:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5924],"body":{"id":3907,"nodeType":"Block","src":"1298:201:24","statements":[{"expression":{"arguments":[{"id":3901,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"1388:11:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3902,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"1417:4:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3903,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"1439:11:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":3904,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"1468:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3899,"name":"TickBitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6386,"src":"1327:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickBitmap_$6386_$","typeString":"type(library TickBitmap)"}},"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nextInitializedTickWithinOneWord","nodeType":"MemberAccess","referencedDeclaration":6385,"src":"1327:43:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$_t_int24_$_t_bool_$returns$_t_int24_$_t_bool_$","typeString":"function (address,int24,int24,bool) view returns (int24,bool)"}},"id":3905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1327:165:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$","typeString":"tuple(int24,bool)"}},"functionReturnParameters":3898,"id":3906,"nodeType":"Return","src":"1308:184:24"}]},"id":3908,"implemented":true,"kind":"function","modifiers":[],"name":"nextInitializedTickWithinOneWord","nodeType":"FunctionDefinition","overrides":{"id":3893,"nodeType":"OverrideSpecifier","overrides":[],"src":"1250:8:24"},"parameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3885,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":3908,"src":"1138:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3884,"name":"address","nodeType":"ElementaryTypeName","src":"1138:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3887,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3908,"src":"1167:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3886,"name":"int24","nodeType":"ElementaryTypeName","src":"1167:5:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3889,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":3908,"src":"1187:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3888,"name":"int24","nodeType":"ElementaryTypeName","src":"1187:5:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3891,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":3908,"src":"1214:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3890,"name":"bool","nodeType":"ElementaryTypeName","src":"1214:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:107:24"},"returnParameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3895,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":3908,"src":"1268:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3894,"name":"int24","nodeType":"ElementaryTypeName","src":"1268:5:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":3897,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3908,"src":"1280:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3896,"name":"bool","nodeType":"ElementaryTypeName","src":"1280:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:30:24"},"scope":3941,"src":"1087:412:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[5947],"body":{"id":3939,"nodeType":"Block","src":"1957:60:24","statements":[{"expression":{"arguments":[{"id":3936,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"2005:4:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"expression":{"arguments":[{"id":3933,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"1993:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3932,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"1974:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1974:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ticks","nodeType":"MemberAccess","referencedDeclaration":644,"src":"1974:30:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_int24_$returns$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"function (int24) view external returns (uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1974:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"tuple(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"functionReturnParameters":3931,"id":3938,"nodeType":"Return","src":"1967:43:24"}]},"id":3940,"implemented":true,"kind":"function","modifiers":[],"name":"getTicks","nodeType":"FunctionDefinition","overrides":{"id":3914,"nodeType":"OverrideSpecifier","overrides":[],"src":"1609:8:24"},"parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3910,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":3940,"src":"1532:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3909,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3912,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":3940,"src":"1554:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":3911,"name":"int24","nodeType":"ElementaryTypeName","src":"1554:5:24","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1522:48:24"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"liquidityTotal","nodeType":"VariableDeclaration","scope":3940,"src":"1648:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3915,"name":"uint128","nodeType":"ElementaryTypeName","src":"1648:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3918,"mutability":"mutable","name":"liquidityDelta","nodeType":"VariableDeclaration","scope":3940,"src":"1684:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":3917,"name":"int128","nodeType":"ElementaryTypeName","src":"1684:6:24","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":3920,"mutability":"mutable","name":"outerFeeGrowth0Token","nodeType":"VariableDeclaration","scope":3940,"src":"1719:28:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3919,"name":"uint256","nodeType":"ElementaryTypeName","src":"1719:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3922,"mutability":"mutable","name":"outerFeeGrowth1Token","nodeType":"VariableDeclaration","scope":3940,"src":"1761:28:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3921,"name":"uint256","nodeType":"ElementaryTypeName","src":"1761:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3924,"mutability":"mutable","name":"outerTickCumulative","nodeType":"VariableDeclaration","scope":3940,"src":"1803:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":3923,"name":"int56","nodeType":"ElementaryTypeName","src":"1803:5:24","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":3926,"mutability":"mutable","name":"outerSecondsPerLiquidity","nodeType":"VariableDeclaration","scope":3940,"src":"1842:32:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3925,"name":"uint160","nodeType":"ElementaryTypeName","src":"1842:7:24","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"outerSecondsSpent","nodeType":"VariableDeclaration","scope":3940,"src":"1888:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3927,"name":"uint32","nodeType":"ElementaryTypeName","src":"1888:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3930,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":3940,"src":"1926:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3929,"name":"bool","nodeType":"ElementaryTypeName","src":"1926:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1634:318:24"},"scope":3941,"src":"1505:512:24","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3942,"src":"149:1870:24"}],"src":"45:1975:24"},"id":24},"contracts/UniswapStaticQuoter.sol":{"ast":{"absolutePath":"contracts/UniswapStaticQuoter.sol","exportedSymbols":{"BitMath":[962],"FixedPoint128":[969],"FixedPoint96":[979],"FullMath":[1152],"GlobalState":[5957],"IUniV3likeQuoterCore":[5999],"IUniswapV2Pair":[241],"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683],"IUniswapV3likePool":[6072],"LiquidityMath":[1204],"LowGasSafeMath":[1334],"SafeCast":[1404],"SqrtPriceMath":[1920],"StepComputations":[5983],"SwapMath":[2181],"SwapState":[5968],"TickBitmap":[6386],"TickMath":[2716],"UniV3QuoterCore":[3941],"UniV3likeQuoterCore":[5948],"UniswapStaticQuoter":[4692],"UnsafeMath":[2732]},"id":4693,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3943,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:25"},{"id":3944,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"69:19:25"},{"absolutePath":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","file":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","id":3945,"nodeType":"ImportDirective","scope":4693,"sourceUnit":242,"src":"90:66:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/UniV3QuoterCore.sol","file":"./UniV3QuoterCore.sol","id":3946,"nodeType":"ImportDirective","scope":4693,"sourceUnit":3942,"src":"158:31:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3947,"name":"UniV3QuoterCore","nodeType":"UserDefinedTypeName","referencedDeclaration":3941,"src":"223:15:25","typeDescriptions":{"typeIdentifier":"t_contract$_UniV3QuoterCore_$3941","typeString":"contract UniV3QuoterCore"}},"id":3948,"nodeType":"InheritanceSpecifier","src":"223:15:25"}],"contractDependencies":[3941,5948],"contractKind":"contract","fullyImplemented":true,"id":4692,"linearizedBaseContracts":[4692,3941,5948],"name":"UniswapStaticQuoter","nodeType":"ContractDefinition","nodes":[{"id":3951,"libraryName":{"id":3949,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"251:14:25","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"245:33:25","typeName":{"id":3950,"name":"uint256","nodeType":"ElementaryTypeName","src":"270:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3954,"libraryName":{"id":3952,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"289:14:25","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"283:32:25","typeName":{"id":3953,"name":"int256","nodeType":"ElementaryTypeName","src":"308:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":3957,"libraryName":{"id":3955,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"326:8:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"320:27:25","typeName":{"id":3956,"name":"uint256","nodeType":"ElementaryTypeName","src":"339:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":3960,"libraryName":{"id":3958,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"358:8:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"352:26:25","typeName":{"id":3959,"name":"int256","nodeType":"ElementaryTypeName","src":"371:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"body":{"id":3976,"nodeType":"Block","src":"476:51:25","statements":[{"expression":{"arguments":[{"id":3970,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3962,"src":"504:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":3971,"name":"Route","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"511:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Route_$4471_storage_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route storage pointer)"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"511:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}}],"id":3973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"510:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}],"expression":{"id":3968,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"493:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"493:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"493:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"functionReturnParameters":3967,"id":3975,"nodeType":"Return","src":"486:34:25"}]},"functionSelector":"c25ddce0","id":3977,"implemented":true,"kind":"function","modifiers":[],"name":"decodePath","nodeType":"FunctionDefinition","parameters":{"id":3963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3962,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":3977,"src":"413:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3961,"name":"bytes","nodeType":"ElementaryTypeName","src":"413:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"403:33:25"},"returnParameters":{"id":3967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3966,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":3977,"src":"460:14:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route[]"},"typeName":{"baseType":{"id":3964,"name":"Route","nodeType":"UserDefinedTypeName","referencedDeclaration":4471,"src":"460:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_storage_ptr","typeString":"struct UniswapStaticQuoter.Route"}},"id":3965,"nodeType":"ArrayTypeName","src":"460:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_storage_$dyn_storage_ptr","typeString":"struct UniswapStaticQuoter.Route[]"}},"visibility":"internal"}],"src":"459:16:25"},"scope":4692,"src":"384:143:25","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":4038,"nodeType":"Block","src":"739:416:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3992,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"790:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"802:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"790:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3997,"nodeType":"IfStatement","src":"786:27:25","trueBody":{"expression":{"hexValue":"30","id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"812:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3991,"id":3996,"nodeType":"Return","src":"805:8:25"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3998,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"861:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"874:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"861:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4001,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"879:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"893:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"879:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"861:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4007,"nodeType":"IfStatement","src":"857:47:25","trueBody":{"expression":{"hexValue":"30","id":4005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"903:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3991,"id":4006,"nodeType":"Return","src":"896:8:25"}},{"assignments":[4009],"declarations":[{"constant":false,"id":4009,"mutability":"mutable","name":"amountInWithFee","nodeType":"VariableDeclaration","scope":4038,"src":"914:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4008,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4014,"initialValue":{"arguments":[{"id":4012,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"953:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":4010,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"940:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"940:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"940:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"914:50:25"},{"assignments":[4016],"declarations":[{"constant":false,"id":4016,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":4038,"src":"974:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4015,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4021,"initialValue":{"arguments":[{"id":4019,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"1014:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4017,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"994:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"994:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"994:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"974:51:25"},{"assignments":[4023],"declarations":[{"constant":false,"id":4023,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":4038,"src":"1035:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4022,"name":"uint256","nodeType":"ElementaryTypeName","src":"1035:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4031,"initialValue":{"arguments":[{"id":4029,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"1087:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4026,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1071:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":4024,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"1057:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1057:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1057:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"1057:29:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1057:46:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1035:68:25"},{"expression":{"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4032,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"1113:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4033,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"1125:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4034,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4023,"src":"1137:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1125:23:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1113:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4037,"nodeType":"ExpressionStatement","src":"1113:35:25"}]},"id":4039,"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountOutV2","nodeType":"FunctionDefinition","parameters":{"id":3988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3979,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4039,"src":"567:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"567:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3981,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4039,"src":"593:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3980,"name":"uint256","nodeType":"ElementaryTypeName","src":"593:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3983,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4039,"src":"620:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3982,"name":"uint256","nodeType":"ElementaryTypeName","src":"620:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3985,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":4039,"src":"648:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3984,"name":"uint8","nodeType":"ElementaryTypeName","src":"648:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3987,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":4039,"src":"674:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3986,"name":"uint8","nodeType":"ElementaryTypeName","src":"674:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"557:139:25"},"returnParameters":{"id":3991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3990,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4039,"src":"720:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3989,"name":"uint256","nodeType":"ElementaryTypeName","src":"720:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"719:19:25"},"scope":4692,"src":"533:622:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4100,"nodeType":"Block","src":"1366:370:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4054,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"1418:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1431:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1418:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4059,"nodeType":"IfStatement","src":"1414:28:25","trueBody":{"expression":{"hexValue":"30","id":4057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1441:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4053,"id":4058,"nodeType":"Return","src":"1434:8:25"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4060,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4043,"src":"1490:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1503:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1490:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4063,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"1508:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1508:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1490:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4069,"nodeType":"IfStatement","src":"1486:47:25","trueBody":{"expression":{"hexValue":"30","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1532:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4053,"id":4068,"nodeType":"Return","src":"1525:8:25"}},{"assignments":[4071],"declarations":[{"constant":false,"id":4071,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":4100,"src":"1543:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"1543:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4079,"initialValue":{"arguments":[{"id":4077,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"1592:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[{"id":4074,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"1577:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4072,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4043,"src":"1563:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1563:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1563:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1563:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1563:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1543:60:25"},{"assignments":[4081],"declarations":[{"constant":false,"id":4081,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":4100,"src":"1613:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1613:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4089,"initialValue":{"arguments":[{"id":4087,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"1665:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[{"id":4084,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"1650:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4082,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"1635:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1251,"src":"1635:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1635:29:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1613:63:25"},{"expression":{"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4090,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"1686:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":4096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1727:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4091,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"1698:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4092,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"1710:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1698:23:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4094,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1697:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"1697:29:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1697:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1686:43:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4099,"nodeType":"ExpressionStatement","src":"1686:43:25"}]},"id":4101,"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountInV2","nodeType":"FunctionDefinition","parameters":{"id":4050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4041,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4101,"src":"1194:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4040,"name":"uint256","nodeType":"ElementaryTypeName","src":"1194:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4043,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4101,"src":"1221:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4042,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4045,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4101,"src":"1248:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4044,"name":"uint256","nodeType":"ElementaryTypeName","src":"1248:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4047,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":4101,"src":"1276:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4046,"name":"uint8","nodeType":"ElementaryTypeName","src":"1276:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4049,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":4101,"src":"1302:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4048,"name":"uint8","nodeType":"ElementaryTypeName","src":"1302:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1184:140:25"},"returnParameters":{"id":4053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4052,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4101,"src":"1348:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4051,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1347:18:25"},"scope":4692,"src":"1161:575:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4187,"nodeType":"Block","src":"1963:694:25","statements":[{"assignments":[4119],"declarations":[{"constant":false,"id":4119,"mutability":"mutable","name":"v2pair","nodeType":"VariableDeclaration","scope":4187,"src":"1973:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"},"typeName":{"id":4118,"name":"IUniswapV2Pair","nodeType":"UserDefinedTypeName","referencedDeclaration":241,"src":"1973:14:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"visibility":"internal"}],"id":4123,"initialValue":{"arguments":[{"id":4121,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"2012:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4120,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"1997:14:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$241_$","typeString":"type(contract IUniswapV2Pair)"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1997:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"nodeType":"VariableDeclarationStatement","src":"1973:44:25"},{"assignments":[4125,4127],"declarations":[{"constant":false,"id":4125,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":4187,"src":"2028:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4124,"name":"address","nodeType":"ElementaryTypeName","src":"2028:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4127,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":4187,"src":"2044:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4126,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4138,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4128,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"2062:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4129,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2072:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2062:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4134,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2130:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4135,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"2140:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2129:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2062:86:25","trueExpression":{"components":[{"id":4131,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"2096:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4132,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2105:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2095:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"2027:121:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4139,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2185:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":169,"src":"2185:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2185:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4142,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"2204:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2185:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4144,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2214:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":174,"src":"2214:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2214:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4147,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"2233:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2214:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2185:54:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4153,"nodeType":"IfStatement","src":"2181:93:25","trueBody":{"id":4152,"nodeType":"Block","src":"2241:33:25","statements":[{"expression":{"hexValue":"30","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2262:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4117,"id":4151,"nodeType":"Return","src":"2255:8:25"}]}},{"assignments":[4155,4157,null],"declarations":[{"constant":false,"id":4155,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":4187,"src":"2285:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4154,"name":"uint256","nodeType":"ElementaryTypeName","src":"2285:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4157,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":4187,"src":"2303:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"2303:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4161,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4158,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2325:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":183,"src":"2325:18:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2325:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"2284:61:25"},{"assignments":[4163,4165],"declarations":[{"constant":false,"id":4163,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4187,"src":"2356:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"2356:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4165,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4187,"src":"2375:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4164,"name":"uint256","nodeType":"ElementaryTypeName","src":"2375:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4176,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4166,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"2397:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4167,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2407:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2397:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4172,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"2466:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4173,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"2476:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2465:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2397:88:25","trueExpression":{"components":[{"id":4169,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"2431:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4170,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"2441:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4171,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2430:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2355:130:25"},{"expression":{"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4177,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"2496:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4179,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2537:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4180,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"2559:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4181,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"2582:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4182,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"2606:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4183,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"2630:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4178,"name":"_getAmountOutV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"2508:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint8,uint8) pure returns (uint256)"}},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2508:142:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2496:154:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4186,"nodeType":"ExpressionStatement","src":"2496:154:25"}]},"functionSelector":"97de0a84","id":4188,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOutV2","nodeType":"FunctionDefinition","parameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4103,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4188,"src":"1775:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4102,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4105,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4188,"src":"1800:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4104,"name":"address","nodeType":"ElementaryTypeName","src":"1800:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4107,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4188,"src":"1826:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4106,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4109,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":4188,"src":"1848:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4108,"name":"uint8","nodeType":"ElementaryTypeName","src":"1848:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":4188,"src":"1874:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4110,"name":"uint8","nodeType":"ElementaryTypeName","src":"1874:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4113,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4188,"src":"1900:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1900:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1765:157:25"},"returnParameters":{"id":4117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4116,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4188,"src":"1944:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4115,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1943:19:25"},"scope":4692,"src":"1742:915:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4274,"nodeType":"Block","src":"2883:693:25","statements":[{"assignments":[4206],"declarations":[{"constant":false,"id":4206,"mutability":"mutable","name":"v2pair","nodeType":"VariableDeclaration","scope":4274,"src":"2893:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"},"typeName":{"id":4205,"name":"IUniswapV2Pair","nodeType":"UserDefinedTypeName","referencedDeclaration":241,"src":"2893:14:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"visibility":"internal"}],"id":4210,"initialValue":{"arguments":[{"id":4208,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"2932:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4207,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"2917:14:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$241_$","typeString":"type(contract IUniswapV2Pair)"}},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2917:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"nodeType":"VariableDeclarationStatement","src":"2893:44:25"},{"assignments":[4212,4214],"declarations":[{"constant":false,"id":4212,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":4274,"src":"2948:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4211,"name":"address","nodeType":"ElementaryTypeName","src":"2948:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4214,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":4274,"src":"2964:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4213,"name":"address","nodeType":"ElementaryTypeName","src":"2964:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4225,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4215,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"2982:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4216,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"2992:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2982:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4221,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"3050:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4222,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"3060:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4223,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3049:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2982:86:25","trueExpression":{"components":[{"id":4218,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"3016:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4219,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"3025:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4220,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3015:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"2947:121:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4226,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"3105:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":169,"src":"3105:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3105:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4229,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"3124:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3105:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4231,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"3134:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":174,"src":"3134:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3134:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4234,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"3153:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3134:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3105:54:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4240,"nodeType":"IfStatement","src":"3101:93:25","trueBody":{"id":4239,"nodeType":"Block","src":"3161:33:25","statements":[{"expression":{"hexValue":"30","id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3182:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4204,"id":4238,"nodeType":"Return","src":"3175:8:25"}]}},{"assignments":[4242,4244,null],"declarations":[{"constant":false,"id":4242,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":4274,"src":"3205:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4241,"name":"uint256","nodeType":"ElementaryTypeName","src":"3205:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4244,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":4274,"src":"3223:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"3223:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4248,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4245,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"3245:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":183,"src":"3245:18:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3245:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"3204:61:25"},{"assignments":[4250,4252],"declarations":[{"constant":false,"id":4250,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4274,"src":"3276:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4249,"name":"uint256","nodeType":"ElementaryTypeName","src":"3276:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4252,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4274,"src":"3295:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4251,"name":"uint256","nodeType":"ElementaryTypeName","src":"3295:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4263,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4253,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"3317:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4254,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"3327:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3317:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4259,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"3386:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4260,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"3396:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4261,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3385:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3317:88:25","trueExpression":{"components":[{"id":4256,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"3351:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4257,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"3361:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4258,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3350:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3275:130:25"},{"expression":{"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4264,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"3416:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4266,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"3455:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4267,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4250,"src":"3478:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4268,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"3501:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4269,"name":"feePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"3525:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4270,"name":"maxPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"3549:10:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4265,"name":"_getAmountInV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"3427:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint8,uint8) pure returns (uint256)"}},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3427:142:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3416:153:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4273,"nodeType":"ExpressionStatement","src":"3416:153:25"}]},"functionSelector":"53201a4c","id":4275,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountInV2","nodeType":"FunctionDefinition","parameters":{"id":4201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4190,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4275,"src":"2695:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4189,"name":"address","nodeType":"ElementaryTypeName","src":"2695:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4192,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4275,"src":"2720:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4191,"name":"address","nodeType":"ElementaryTypeName","src":"2720:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4194,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4275,"src":"2746:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4193,"name":"address","nodeType":"ElementaryTypeName","src":"2746:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4196,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":4275,"src":"2768:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4195,"name":"uint8","nodeType":"ElementaryTypeName","src":"2768:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4198,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":4275,"src":"2794:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4197,"name":"uint8","nodeType":"ElementaryTypeName","src":"2794:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4200,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4275,"src":"2820:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4199,"name":"uint256","nodeType":"ElementaryTypeName","src":"2820:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2685:158:25"},"returnParameters":{"id":4204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4203,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4275,"src":"2865:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4202,"name":"uint256","nodeType":"ElementaryTypeName","src":"2865:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2864:18:25"},"scope":4692,"src":"2663:913:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4367,"nodeType":"Block","src":"3751:696:25","statements":[{"assignments":[4289],"declarations":[{"constant":false,"id":4289,"mutability":"mutable","name":"v3pool","nodeType":"VariableDeclaration","scope":4367,"src":"3761:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":4288,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"3761:18:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":4293,"initialValue":{"arguments":[{"id":4291,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"3808:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4290,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"3789:18:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3789:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"3761:52:25"},{"assignments":[4295,4297],"declarations":[{"constant":false,"id":4295,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":4367,"src":"3824:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4294,"name":"address","nodeType":"ElementaryTypeName","src":"3824:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4297,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":4367,"src":"3840:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4296,"name":"address","nodeType":"ElementaryTypeName","src":"3840:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4308,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4298,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"3858:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4299,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"3868:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3858:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4304,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"3926:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4305,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"3936:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4306,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3925:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3858:86:25","trueExpression":{"components":[{"id":4301,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"3892:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4302,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"3901:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4303,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3891:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"3823:121:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4309,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"3981:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":524,"src":"3981:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3981:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4312,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"4000:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3981:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4314,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"4010:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":530,"src":"4010:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4010:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4317,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"4029:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4010:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3981:54:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4323,"nodeType":"IfStatement","src":"3977:93:25","trueBody":{"id":4322,"nodeType":"Block","src":"4037:33:25","statements":[{"expression":{"hexValue":"30","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4058:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4287,"id":4321,"nodeType":"Return","src":"4051:8:25"}]}},{"assignments":[4325],"declarations":[{"constant":false,"id":4325,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":4367,"src":"4080:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4324,"name":"bool","nodeType":"ElementaryTypeName","src":"4080:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4329,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4326,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"4098:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4327,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"4108:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4098:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4080:36:25"},{"assignments":[4331,4333],"declarations":[{"constant":false,"id":4331,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":4367,"src":"4127:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4330,"name":"int256","nodeType":"ElementaryTypeName","src":"4127:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4333,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":4367,"src":"4143:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4332,"name":"int256","nodeType":"ElementaryTypeName","src":"4143:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4351,"initialValue":{"arguments":[{"id":4335,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"4180:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4336,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4325,"src":"4198:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4337,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4283,"src":"4222:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"4222:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4222:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"id":4340,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4325,"src":"4255:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4345,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4330:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"4330:23:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4356:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4330:27:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4255:102:25","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4341,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4284:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"4284:23:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4284:27:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4334,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"4161:5:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4161:206:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"4126:241:25"},{"expression":{"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4352,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4286,"src":"4378:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":4353,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4325,"src":"4390:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4431:8:25","subExpression":{"id":4361,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"4432:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4423:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4359,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:25","typeDescriptions":{}}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4423:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4390:50:25","trueExpression":{"arguments":[{"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4411:8:25","subExpression":{"id":4356,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"4412:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4403:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4354,"name":"uint256","nodeType":"ElementaryTypeName","src":"4403:7:25","typeDescriptions":{}}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4403:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4378:62:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4366,"nodeType":"ExpressionStatement","src":"4378:62:25"}]},"functionSelector":"2d0f9a30","id":4368,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOutV3","nodeType":"FunctionDefinition","parameters":{"id":4284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4277,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4368,"src":"3615:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4276,"name":"address","nodeType":"ElementaryTypeName","src":"3615:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4279,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4368,"src":"3640:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4278,"name":"address","nodeType":"ElementaryTypeName","src":"3640:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4281,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4368,"src":"3666:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4280,"name":"address","nodeType":"ElementaryTypeName","src":"3666:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4283,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4368,"src":"3688:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4282,"name":"uint256","nodeType":"ElementaryTypeName","src":"3688:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3605:105:25"},"returnParameters":{"id":4287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4286,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4368,"src":"3732:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4285,"name":"uint256","nodeType":"ElementaryTypeName","src":"3732:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3731:19:25"},"scope":4692,"src":"3582:865:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4457,"nodeType":"Block","src":"4621:691:25","statements":[{"assignments":[4382],"declarations":[{"constant":false,"id":4382,"mutability":"mutable","name":"v3pool","nodeType":"VariableDeclaration","scope":4457,"src":"4631:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":4381,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"4631:18:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":4386,"initialValue":{"arguments":[{"id":4384,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"4678:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4383,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"4659:18:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4659:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"4631:52:25"},{"assignments":[4388,4390],"declarations":[{"constant":false,"id":4388,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":4457,"src":"4694:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4387,"name":"address","nodeType":"ElementaryTypeName","src":"4694:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4390,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":4457,"src":"4710:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4389,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4401,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4391,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4370,"src":"4728:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4392,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"4738:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4728:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4397,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"4796:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4398,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4370,"src":"4806:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4399,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4795:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4728:86:25","trueExpression":{"components":[{"id":4394,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4370,"src":"4762:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4395,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"4771:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4761:19:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"4693:121:25"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4402,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4382,"src":"4851:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":524,"src":"4851:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4851:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4405,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"4870:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4851:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4407,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4382,"src":"4880:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":530,"src":"4880:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4880:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4410,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"4899:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4880:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4851:54:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4416,"nodeType":"IfStatement","src":"4847:93:25","trueBody":{"id":4415,"nodeType":"Block","src":"4907:33:25","statements":[{"expression":{"hexValue":"30","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4928:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4380,"id":4414,"nodeType":"Return","src":"4921:8:25"}]}},{"assignments":[4418],"declarations":[{"constant":false,"id":4418,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":4457,"src":"4950:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4417,"name":"bool","nodeType":"ElementaryTypeName","src":"4950:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4422,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4419,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4370,"src":"4968:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4420,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"4978:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4968:18:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4950:36:25"},{"assignments":[4424,4426],"declarations":[{"constant":false,"id":4424,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":4457,"src":"4997:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4423,"name":"int256","nodeType":"ElementaryTypeName","src":"4997:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4426,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":4457,"src":"5013:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4425,"name":"int256","nodeType":"ElementaryTypeName","src":"5013:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4445,"initialValue":{"arguments":[{"id":4428,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"5050:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4429,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"5068:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"5092:21:25","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4430,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4376,"src":"5093:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"5093:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5093:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"id":4434,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"5127:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4439,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5202:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"5202:23:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5228:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5202:27:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5127:102:25","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4435,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5156:8:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"5156:23:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5182:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5156:27:25","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4427,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"5031:5:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5031:208:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"4996:243:25"},{"expression":{"condition":{"id":4446,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"5257:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":4453,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4426,"src":"5297:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5289:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"5289:7:25","typeDescriptions":{}}},"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5289:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5257:48:25","trueExpression":{"arguments":[{"id":4449,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4424,"src":"5278:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5270:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4447,"name":"uint256","nodeType":"ElementaryTypeName","src":"5270:7:25","typeDescriptions":{}}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5270:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4380,"id":4456,"nodeType":"Return","src":"5250:55:25"}]},"functionSelector":"6e95d3d8","id":4458,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountInV3","nodeType":"FunctionDefinition","parameters":{"id":4377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4370,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4458,"src":"4485:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4369,"name":"address","nodeType":"ElementaryTypeName","src":"4485:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4372,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4458,"src":"4510:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4371,"name":"address","nodeType":"ElementaryTypeName","src":"4510:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4374,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4458,"src":"4536:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4373,"name":"address","nodeType":"ElementaryTypeName","src":"4536:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4376,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4458,"src":"4558:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4375,"name":"uint256","nodeType":"ElementaryTypeName","src":"4558:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4475:106:25"},"returnParameters":{"id":4380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4379,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4458,"src":"4603:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4378,"name":"uint256","nodeType":"ElementaryTypeName","src":"4603:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4602:18:25"},"scope":4692,"src":"4453:859:25","stateMutability":"view","virtual":false,"visibility":"public"},{"canonicalName":"UniswapStaticQuoter.Route","id":4471,"members":[{"constant":false,"id":4460,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4471,"src":"5341:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4459,"name":"address","nodeType":"ElementaryTypeName","src":"5341:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4462,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4471,"src":"5366:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4461,"name":"address","nodeType":"ElementaryTypeName","src":"5366:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4464,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4471,"src":"5392:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4463,"name":"address","nodeType":"ElementaryTypeName","src":"5392:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4466,"mutability":"mutable","name":"poolType","nodeType":"VariableDeclaration","scope":4471,"src":"5414:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4465,"name":"uint8","nodeType":"ElementaryTypeName","src":"5414:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4468,"mutability":"mutable","name":"feePercent","nodeType":"VariableDeclaration","scope":4471,"src":"5454:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4467,"name":"uint8","nodeType":"ElementaryTypeName","src":"5454:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4470,"mutability":"mutable","name":"maxPercent","nodeType":"VariableDeclaration","scope":4471,"src":"5480:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4469,"name":"uint8","nodeType":"ElementaryTypeName","src":"5480:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"Route","nodeType":"StructDefinition","scope":4692,"src":"5318:185:25","visibility":"public"},{"body":{"id":4579,"nodeType":"Block","src":"5627:875:25","statements":[{"assignments":[4484],"declarations":[{"constant":false,"id":4484,"mutability":"mutable","name":"routes","nodeType":"VariableDeclaration","scope":4579,"src":"5637:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route[]"},"typeName":{"baseType":{"id":4482,"name":"Route","nodeType":"UserDefinedTypeName","referencedDeclaration":4471,"src":"5637:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_storage_ptr","typeString":"struct UniswapStaticQuoter.Route"}},"id":4483,"nodeType":"ArrayTypeName","src":"5637:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_storage_$dyn_storage_ptr","typeString":"struct UniswapStaticQuoter.Route[]"}},"visibility":"internal"}],"id":4492,"initialValue":{"arguments":[{"id":4487,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"5672:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":4488,"name":"Route","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"5679:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Route_$4471_storage_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route storage pointer)"}},"id":4489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"5679:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}}],"id":4490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5678:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}],"expression":{"id":4485,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5661:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5661:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5661:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5637:51:25"},{"assignments":[4497],"declarations":[{"constant":false,"id":4497,"mutability":"mutable","name":"amountOuts","nodeType":"VariableDeclaration","scope":4579,"src":"5698:27:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4495,"name":"uint256","nodeType":"ElementaryTypeName","src":"5698:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4496,"nodeType":"ArrayTypeName","src":"5698:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4504,"initialValue":{"arguments":[{"expression":{"id":4501,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"5742:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5742:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5728:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4498,"name":"uint256","nodeType":"ElementaryTypeName","src":"5732:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4499,"nodeType":"ArrayTypeName","src":"5732:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5728:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5698:58:25"},{"body":{"id":4575,"nodeType":"Block","src":"5810:658:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":4516,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"5828:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4518,"indexExpression":{"id":4517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"5835:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5828:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4519,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"poolType","nodeType":"MemberAccess","referencedDeclaration":4466,"src":"5828:18:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5850:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5828:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4567,"nodeType":"Block","src":"6182:239:25","statements":[{"expression":{"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4549,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"6222:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":4551,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6267:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4553,"indexExpression":{"id":4552,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6274:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6267:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4554,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"6267:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4555,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6306:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4557,"indexExpression":{"id":4556,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6313:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6306:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4558,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":4462,"src":"6306:18:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4559,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6346:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4561,"indexExpression":{"id":4560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6353:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6346:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4562,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"6346:14:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4563,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"6382:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4550,"name":"getAmountOutV3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"6231:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) view returns (uint256)"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6231:175:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6222:184:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4566,"nodeType":"ExpressionStatement","src":"6222:184:25"}]},"id":4568,"nodeType":"IfStatement","src":"5824:597:25","trueBody":{"id":4548,"nodeType":"Block","src":"5853:323:25","statements":[{"expression":{"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4522,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"5893:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":4524,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"5938:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4526,"indexExpression":{"id":4525,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"5945:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5938:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"5938:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4528,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"5977:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4530,"indexExpression":{"id":4529,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"5984:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5977:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":4462,"src":"5977:18:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4532,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6017:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4534,"indexExpression":{"id":4533,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6024:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6017:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4535,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"6017:14:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4536,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6053:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4538,"indexExpression":{"id":4537,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6060:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6053:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feePercent","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"6053:20:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"baseExpression":{"id":4540,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6095:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4542,"indexExpression":{"id":4541,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6102:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6095:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"maxPercent","nodeType":"MemberAccess","referencedDeclaration":4470,"src":"6095:20:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4544,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"6137:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4523,"name":"getAmountOutV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5902:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint8,uint8,uint256) view returns (uint256)"}},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5902:259:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5893:268:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4547,"nodeType":"ExpressionStatement","src":"5893:268:25"}]}},{"expression":{"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4569,"name":"amountOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"6435:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4571,"indexExpression":{"id":4570,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"6446:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6435:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4572,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4475,"src":"6451:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6435:22:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4574,"nodeType":"ExpressionStatement","src":"6435:22:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"5786:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4510,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"5790:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5790:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5786:17:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4576,"initializationExpression":{"assignments":[4506],"declarations":[{"constant":false,"id":4506,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":4576,"src":"5771:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4505,"name":"uint256","nodeType":"ElementaryTypeName","src":"5771:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4508,"initialValue":{"hexValue":"30","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5783:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5771:13:25"},"loopExpression":{"expression":{"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5805:3:25","subExpression":{"id":4513,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4506,"src":"5805:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4515,"nodeType":"ExpressionStatement","src":"5805:3:25"},"nodeType":"ForStatement","src":"5766:702:25"},{"expression":{"id":4577,"name":"amountOuts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"6485:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4480,"id":4578,"nodeType":"Return","src":"6478:17:25"}]},"functionSelector":"77cd49e4","id":4580,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nodeType":"FunctionDefinition","parameters":{"id":4476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4473,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":4580,"src":"5540:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4472,"name":"bytes","nodeType":"ElementaryTypeName","src":"5540:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4475,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":4580,"src":"5567:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5567:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5530:57:25"},"returnParameters":{"id":4480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4479,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4580,"src":"5609:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4477,"name":"uint256","nodeType":"ElementaryTypeName","src":"5609:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4478,"nodeType":"ArrayTypeName","src":"5609:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5608:18:25"},"scope":4692,"src":"5509:993:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4690,"nodeType":"Block","src":"6625:875:25","statements":[{"assignments":[4593],"declarations":[{"constant":false,"id":4593,"mutability":"mutable","name":"routes","nodeType":"VariableDeclaration","scope":4690,"src":"6635:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route[]"},"typeName":{"baseType":{"id":4591,"name":"Route","nodeType":"UserDefinedTypeName","referencedDeclaration":4471,"src":"6635:5:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_storage_ptr","typeString":"struct UniswapStaticQuoter.Route"}},"id":4592,"nodeType":"ArrayTypeName","src":"6635:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_storage_$dyn_storage_ptr","typeString":"struct UniswapStaticQuoter.Route[]"}},"visibility":"internal"}],"id":4601,"initialValue":{"arguments":[{"id":4596,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4582,"src":"6670:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":4597,"name":"Route","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"6677:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Route_$4471_storage_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route storage pointer)"}},"id":4598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"6677:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}}],"id":4599,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6676:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct UniswapStaticQuoter.Route memory[] memory)"}],"expression":{"id":4594,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6659:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"6659:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6659:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6635:51:25"},{"assignments":[4606],"declarations":[{"constant":false,"id":4606,"mutability":"mutable","name":"amountIns","nodeType":"VariableDeclaration","scope":4690,"src":"6696:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4604,"name":"uint256","nodeType":"ElementaryTypeName","src":"6696:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4605,"nodeType":"ArrayTypeName","src":"6696:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4613,"initialValue":{"arguments":[{"expression":{"id":4610,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"6739:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6739:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6725:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4607,"name":"uint256","nodeType":"ElementaryTypeName","src":"6729:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4608,"nodeType":"ArrayTypeName","src":"6729:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6725:28:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6696:57:25"},{"body":{"id":4686,"nodeType":"Block","src":"6812:655:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":4627,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"6830:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4629,"indexExpression":{"id":4628,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"6837:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6830:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"poolType","nodeType":"MemberAccess","referencedDeclaration":4466,"src":"6830:18:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6830:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4678,"nodeType":"Block","src":"7183:238:25","statements":[{"expression":{"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4660,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7223:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":4662,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"7267:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4664,"indexExpression":{"id":4663,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7274:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7267:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4665,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"7267:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4666,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"7306:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4668,"indexExpression":{"id":4667,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7313:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7306:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4669,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":4462,"src":"7306:18:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4670,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"7346:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4672,"indexExpression":{"id":4671,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7353:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7346:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"7346:14:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4674,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7382:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4661,"name":"getAmountInV3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4458,"src":"7232:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) view returns (uint256)"}},"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7232:174:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7223:183:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4677,"nodeType":"ExpressionStatement","src":"7223:183:25"}]},"id":4679,"nodeType":"IfStatement","src":"6826:595:25","trueBody":{"id":4659,"nodeType":"Block","src":"6855:322:25","statements":[{"expression":{"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4633,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"6895:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":4635,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"6939:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4637,"indexExpression":{"id":4636,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"6946:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6939:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4460,"src":"6939:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4639,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"6978:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4641,"indexExpression":{"id":4640,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"6985:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6978:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":4462,"src":"6978:18:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4643,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"7018:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4645,"indexExpression":{"id":4644,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7025:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7018:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4464,"src":"7018:14:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4647,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"7054:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4649,"indexExpression":{"id":4648,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7061:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7054:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4650,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feePercent","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"7054:20:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"baseExpression":{"id":4651,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"7096:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4653,"indexExpression":{"id":4652,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7103:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7096:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_Route_$4471_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory"}},"id":4654,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"maxPercent","nodeType":"MemberAccess","referencedDeclaration":4470,"src":"7096:20:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4655,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7138:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4634,"name":"getAmountInV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4275,"src":"6904:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint8_$_t_uint8_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint8,uint8,uint256) view returns (uint256)"}},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6904:258:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6895:267:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4658,"nodeType":"ExpressionStatement","src":"6895:267:25"}]}},{"expression":{"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4680,"name":"amountIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"7435:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4682,"indexExpression":{"id":4681,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7445:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7435:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4683,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7450:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7435:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4685,"nodeType":"ExpressionStatement","src":"7435:21:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4621,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"6799:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6804:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6799:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4687,"initializationExpression":{"assignments":[4615],"declarations":[{"constant":false,"id":4615,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":4687,"src":"6768:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4614,"name":"uint256","nodeType":"ElementaryTypeName","src":"6768:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4620,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4616,"name":"routes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"6780:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr","typeString":"struct UniswapStaticQuoter.Route memory[] memory"}},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6780:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6796:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6780:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6768:29:25"},"loopExpression":{"expression":{"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"6807:3:25","subExpression":{"id":4624,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"6807:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4626,"nodeType":"ExpressionStatement","src":"6807:3:25"},"nodeType":"ForStatement","src":"6763:704:25"},{"expression":{"id":4688,"name":"amountIns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"7484:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":4589,"id":4689,"nodeType":"Return","src":"7477:16:25"}]},"functionSelector":"00614b2e","id":4691,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountIn","nodeType":"FunctionDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":4691,"src":"6538:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4581,"name":"bytes","nodeType":"ElementaryTypeName","src":"6538:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4584,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":4691,"src":"6565:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"6565:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6528:57:25"},"returnParameters":{"id":4589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4588,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":4691,"src":"6607:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4586,"name":"uint256","nodeType":"ElementaryTypeName","src":"6607:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4587,"nodeType":"ArrayTypeName","src":"6607:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6606:18:25"},"scope":4692,"src":"6508:992:25","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4693,"src":"191:7311:25"}],"src":"45:7458:25"},"id":25},"contracts/UniswapV2StaticQuoter.sol":{"ast":{"absolutePath":"contracts/UniswapV2StaticQuoter.sol","exportedSymbols":{"IUniswapV2Pair":[241],"LowGasSafeMath":[1334],"UniswapV2StaticQuoter":[4991]},"id":4992,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4694,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:26"},{"id":4695,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"69:19:26"},{"absolutePath":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","file":"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol","id":4696,"nodeType":"ImportDirective","scope":4992,"sourceUnit":242,"src":"90:66:26","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","file":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","id":4697,"nodeType":"ImportDirective","scope":4992,"sourceUnit":1335,"src":"157:65:26","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4991,"linearizedBaseContracts":[4991],"name":"UniswapV2StaticQuoter","nodeType":"ContractDefinition","nodes":[{"id":4700,"libraryName":{"id":4698,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"267:14:26","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"261:33:26","typeName":{"id":4699,"name":"uint256","nodeType":"ElementaryTypeName","src":"286:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":4702,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","scope":4991,"src":"300:25:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4701,"name":"address","nodeType":"ElementaryTypeName","src":"300:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"body":{"id":4711,"nodeType":"Block","src":"362:35:26","statements":[{"expression":{"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4707,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4702,"src":"372:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4708,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"382:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"372:18:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4710,"nodeType":"ExpressionStatement","src":"372:18:26"}]},"id":4712,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":4705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4704,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":4712,"src":"344:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4703,"name":"address","nodeType":"ElementaryTypeName","src":"344:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"343:18:26"},"returnParameters":{"id":4706,"nodeType":"ParameterList","parameters":[],"src":"362:0:26"},"scope":4991,"src":"332:65:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4769,"nodeType":"Block","src":"555:403:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4723,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"606:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"618:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"606:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4728,"nodeType":"IfStatement","src":"602:27:26","trueBody":{"expression":{"hexValue":"30","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"628:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4722,"id":4727,"nodeType":"Return","src":"621:8:26"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4729,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"677:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"690:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"677:14:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4732,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"695:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"709:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"695:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"677:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4738,"nodeType":"IfStatement","src":"673:47:26","trueBody":{"expression":{"hexValue":"30","id":4736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"719:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4722,"id":4737,"nodeType":"Return","src":"712:8:26"}},{"assignments":[4740],"declarations":[{"constant":false,"id":4740,"mutability":"mutable","name":"amountInWithFee","nodeType":"VariableDeclaration","scope":4769,"src":"730:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4739,"name":"uint256","nodeType":"ElementaryTypeName","src":"730:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4745,"initialValue":{"arguments":[{"hexValue":"393937","id":4743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"769:3:26","typeDescriptions":{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"},"value":"997"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"}],"expression":{"id":4741,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"756:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"756:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"756:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"730:43:26"},{"assignments":[4747],"declarations":[{"constant":false,"id":4747,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":4769,"src":"783:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4746,"name":"uint256","nodeType":"ElementaryTypeName","src":"783:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4752,"initialValue":{"arguments":[{"id":4750,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"823:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4748,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"803:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"803:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"803:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"783:51:26"},{"assignments":[4754],"declarations":[{"constant":false,"id":4754,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":4769,"src":"844:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4753,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4762,"initialValue":{"arguments":[{"id":4760,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"890:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"31303030","id":4757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"880:4:26","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"id":4755,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"866:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"866:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"866:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"866:23:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"866:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"844:62:26"},{"expression":{"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4763,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"916:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4764,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4747,"src":"928:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4765,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"940:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"928:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"916:35:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4768,"nodeType":"ExpressionStatement","src":"916:35:26"}]},"id":4770,"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountOut","nodeType":"FunctionDefinition","parameters":{"id":4719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4714,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4770,"src":"435:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4713,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4716,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4770,"src":"461:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4715,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4718,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4770,"src":"488:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4717,"name":"uint256","nodeType":"ElementaryTypeName","src":"488:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:87:26"},"returnParameters":{"id":4722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4721,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4770,"src":"536:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4720,"name":"uint256","nodeType":"ElementaryTypeName","src":"536:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"535:19:26"},"scope":4991,"src":"403:555:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4827,"nodeType":"Block","src":"1115:357:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4781,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"1167:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1180:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1167:14:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4786,"nodeType":"IfStatement","src":"1163:28:26","trueBody":{"expression":{"hexValue":"30","id":4784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1190:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4780,"id":4785,"nodeType":"Return","src":"1183:8:26"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4787,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"1239:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1252:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1239:14:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4790,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"1257:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1271:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1257:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1239:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4796,"nodeType":"IfStatement","src":"1235:47:26","trueBody":{"expression":{"hexValue":"30","id":4794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1281:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4780,"id":4795,"nodeType":"Return","src":"1274:8:26"}},{"assignments":[4798],"declarations":[{"constant":false,"id":4798,"mutability":"mutable","name":"numerator","nodeType":"VariableDeclaration","scope":4827,"src":"1292:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"1292:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4806,"initialValue":{"arguments":[{"hexValue":"31303030","id":4804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1341:4:26","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"arguments":[{"id":4801,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"1326:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4799,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"1312:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1312:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1312:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1312:28:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1312:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1292:54:26"},{"assignments":[4808],"declarations":[{"constant":false,"id":4808,"mutability":"mutable","name":"denominator","nodeType":"VariableDeclaration","scope":4827,"src":"1356:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1356:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4816,"initialValue":{"arguments":[{"hexValue":"393937","id":4814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1408:3:26","typeDescriptions":{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"},"value":"997"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"}],"expression":{"arguments":[{"id":4811,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"1393:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4809,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"1378:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1251,"src":"1378:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1378:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1279,"src":"1378:29:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1378:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1356:56:26"},{"expression":{"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4817,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"1422:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":4823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4818,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"1434:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4819,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"1446:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1434:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1433:25:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"1433:29:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1422:43:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4826,"nodeType":"ExpressionStatement","src":"1422:43:26"}]},"id":4828,"implemented":true,"kind":"function","modifiers":[],"name":"_getAmountIn","nodeType":"FunctionDefinition","parameters":{"id":4777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4828,"src":"995:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4771,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4774,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4828,"src":"1022:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4776,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4828,"src":"1049:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4775,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"985:88:26"},"returnParameters":{"id":4780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4779,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4828,"src":"1097:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1097:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1096:18:26"},"scope":4991,"src":"964:508:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4908,"nodeType":"Block","src":"1645:597:26","statements":[{"assignments":[4842],"declarations":[{"constant":false,"id":4842,"mutability":"mutable","name":"v2pair","nodeType":"VariableDeclaration","scope":4908,"src":"1655:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"},"typeName":{"id":4841,"name":"IUniswapV2Pair","nodeType":"UserDefinedTypeName","referencedDeclaration":241,"src":"1655:14:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"visibility":"internal"}],"id":4846,"initialValue":{"arguments":[{"id":4844,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"1694:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4843,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"1679:14:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$241_$","typeString":"type(contract IUniswapV2Pair)"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1679:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"nodeType":"VariableDeclarationStatement","src":"1655:44:26"},{"assignments":[4848,4850],"declarations":[{"constant":false,"id":4848,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":4908,"src":"1710:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4847,"name":"address","nodeType":"ElementaryTypeName","src":"1710:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4850,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":4908,"src":"1726:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4849,"name":"address","nodeType":"ElementaryTypeName","src":"1726:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4861,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4851,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"1744:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4852,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"1754:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1744:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4857,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"1812:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4858,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"1822:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4859,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1811:19:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1744:86:26","trueExpression":{"components":[{"id":4854,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"1778:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4855,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"1787:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4856,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1777:19:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"1709:121:26"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4862,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"1867:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":169,"src":"1867:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1867:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4865,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"1886:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1867:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4867,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"1896:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":174,"src":"1896:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1896:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4870,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4850,"src":"1915:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1896:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1867:54:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4876,"nodeType":"IfStatement","src":"1863:93:26","trueBody":{"id":4875,"nodeType":"Block","src":"1923:33:26","statements":[{"expression":{"hexValue":"30","id":4873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1944:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4840,"id":4874,"nodeType":"Return","src":"1937:8:26"}]}},{"assignments":[4878,4880,null],"declarations":[{"constant":false,"id":4878,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":4908,"src":"1967:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4877,"name":"uint256","nodeType":"ElementaryTypeName","src":"1967:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4880,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":4908,"src":"1985:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4879,"name":"uint256","nodeType":"ElementaryTypeName","src":"1985:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4884,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4881,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"2006:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":183,"src":"2006:18:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2006:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"1966:60:26"},{"assignments":[4886,4888],"declarations":[{"constant":false,"id":4886,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4908,"src":"2037:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2037:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4888,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4908,"src":"2056:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4887,"name":"uint256","nodeType":"ElementaryTypeName","src":"2056:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4899,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4889,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"2078:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4890,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4832,"src":"2088:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2078:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4895,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"2147:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4896,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"2157:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2146:20:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2078:88:26","trueExpression":{"components":[{"id":4892,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"2112:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4893,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"2122:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4894,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2111:20:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2036:130:26"},{"expression":{"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4900,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"2177:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4902,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4836,"src":"2203:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4903,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"2213:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4904,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"2224:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4901,"name":"_getAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4770,"src":"2189:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2189:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2177:58:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4907,"nodeType":"ExpressionStatement","src":"2177:58:26"}]},"functionSelector":"d7176ca9","id":4909,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nodeType":"FunctionDefinition","parameters":{"id":4837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4830,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4909,"src":"1509:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4829,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4832,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4909,"src":"1534:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4831,"name":"address","nodeType":"ElementaryTypeName","src":"1534:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4834,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4909,"src":"1560:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4833,"name":"address","nodeType":"ElementaryTypeName","src":"1560:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4836,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4909,"src":"1582:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4835,"name":"uint256","nodeType":"ElementaryTypeName","src":"1582:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1499:105:26"},"returnParameters":{"id":4840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4909,"src":"1626:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1626:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1625:19:26"},"scope":4991,"src":"1478:764:26","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4989,"nodeType":"Block","src":"2414:596:26","statements":[{"assignments":[4923],"declarations":[{"constant":false,"id":4923,"mutability":"mutable","name":"v2pair","nodeType":"VariableDeclaration","scope":4989,"src":"2424:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"},"typeName":{"id":4922,"name":"IUniswapV2Pair","nodeType":"UserDefinedTypeName","referencedDeclaration":241,"src":"2424:14:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"visibility":"internal"}],"id":4927,"initialValue":{"arguments":[{"id":4925,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"2463:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4924,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"2448:14:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$241_$","typeString":"type(contract IUniswapV2Pair)"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2448:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"nodeType":"VariableDeclarationStatement","src":"2424:44:26"},{"assignments":[4929,4931],"declarations":[{"constant":false,"id":4929,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":4989,"src":"2479:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4928,"name":"address","nodeType":"ElementaryTypeName","src":"2479:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4931,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":4989,"src":"2495:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4930,"name":"address","nodeType":"ElementaryTypeName","src":"2495:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4942,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4932,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"2513:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4933,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"2523:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2513:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4938,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"2581:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4939,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"2591:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4940,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2580:19:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2513:86:26","trueExpression":{"components":[{"id":4935,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"2547:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4936,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"2556:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4937,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2546:19:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"2478:121:26"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4943,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"2636:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":169,"src":"2636:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2636:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4946,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"2655:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2636:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4948,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"2665:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":174,"src":"2665:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2665:15:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4951,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"2684:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2665:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2636:54:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4957,"nodeType":"IfStatement","src":"2632:93:26","trueBody":{"id":4956,"nodeType":"Block","src":"2692:33:26","statements":[{"expression":{"hexValue":"30","id":4954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2713:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4921,"id":4955,"nodeType":"Return","src":"2706:8:26"}]}},{"assignments":[4959,4961,null],"declarations":[{"constant":false,"id":4959,"mutability":"mutable","name":"reserve0","nodeType":"VariableDeclaration","scope":4989,"src":"2736:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4958,"name":"uint256","nodeType":"ElementaryTypeName","src":"2736:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4961,"mutability":"mutable","name":"reserve1","nodeType":"VariableDeclaration","scope":4989,"src":"2754:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4960,"name":"uint256","nodeType":"ElementaryTypeName","src":"2754:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4965,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4962,"name":"v2pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"2775:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$241","typeString":"contract IUniswapV2Pair"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":183,"src":"2775:18:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2775:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"2735:60:26"},{"assignments":[4967,4969],"declarations":[{"constant":false,"id":4967,"mutability":"mutable","name":"reserveIn","nodeType":"VariableDeclaration","scope":4989,"src":"2806:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4966,"name":"uint256","nodeType":"ElementaryTypeName","src":"2806:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4969,"mutability":"mutable","name":"reserveOut","nodeType":"VariableDeclaration","scope":4989,"src":"2825:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4968,"name":"uint256","nodeType":"ElementaryTypeName","src":"2825:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4980,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4970,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"2847:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4971,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"2857:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2847:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4976,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"2916:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4977,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4959,"src":"2926:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2915:20:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2847:88:26","trueExpression":{"components":[{"id":4973,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4959,"src":"2881:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4974,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"2891:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2880:20:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2805:130:26"},{"expression":{"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4981,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"2946:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4983,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"2970:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4984,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"2981:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4985,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"2992:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4982,"name":"_getAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"2957:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2946:57:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4988,"nodeType":"ExpressionStatement","src":"2946:57:26"}]},"functionSelector":"ec278309","id":4990,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountIn","nodeType":"FunctionDefinition","parameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4911,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":4990,"src":"2278:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4910,"name":"address","nodeType":"ElementaryTypeName","src":"2278:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4913,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":4990,"src":"2303:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4912,"name":"address","nodeType":"ElementaryTypeName","src":"2303:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4915,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":4990,"src":"2329:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4914,"name":"address","nodeType":"ElementaryTypeName","src":"2329:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4917,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":4990,"src":"2351:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4916,"name":"uint256","nodeType":"ElementaryTypeName","src":"2351:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2268:106:26"},"returnParameters":{"id":4921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4920,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":4990,"src":"2396:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4919,"name":"uint256","nodeType":"ElementaryTypeName","src":"2396:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2395:18:26"},"scope":4991,"src":"2248:762:26","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4992,"src":"224:2788:26"}],"src":"45:2968:26"},"id":26},"contracts/UniswapV3StaticQuoter.sol":{"ast":{"absolutePath":"contracts/UniswapV3StaticQuoter.sol","exportedSymbols":{"BitMath":[962],"BytesLib":[2898],"CustomizedPoolAddress":[6166],"FixedPoint128":[969],"FixedPoint96":[979],"FullMath":[1152],"GlobalState":[5957],"IPeripheryImmutableState":[2779],"IUniV3likeQuoterCore":[5999],"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683],"IUniswapV3StaticQuoter":[6061],"IUniswapV3likePool":[6072],"LiquidityMath":[1204],"LowGasSafeMath":[1334],"Path":[3031],"PeripheryImmutableState":[2763],"SafeCast":[1404],"SqrtPriceMath":[1920],"StepComputations":[5983],"SwapMath":[2181],"SwapState":[5968],"TickBitmap":[6386],"TickMath":[2716],"UniV3QuoterCore":[3941],"UniV3likeQuoterCore":[5948],"UniswapV3StaticQuoter":[5442],"UnsafeMath":[2732]},"id":5443,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4993,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:27"},{"id":4994,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"69:19:27"},{"absolutePath":"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol","file":"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol","id":4995,"nodeType":"ImportDirective","scope":5443,"sourceUnit":2764,"src":"90:74:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/Path.sol","file":"@uniswap/v3-periphery/contracts/libraries/Path.sol","id":4996,"nodeType":"ImportDirective","scope":5443,"sourceUnit":3032,"src":"165:60:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/CustomizedPoolAddress.sol","file":"./libraries/CustomizedPoolAddress.sol","id":4997,"nodeType":"ImportDirective","scope":5443,"sourceUnit":6167,"src":"227:47:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IUniswapV3StaticQuoter.sol","file":"./interfaces/IUniswapV3StaticQuoter.sol","id":4998,"nodeType":"ImportDirective","scope":5443,"sourceUnit":6062,"src":"275:49:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/UniV3QuoterCore.sol","file":"./UniV3QuoterCore.sol","id":4999,"nodeType":"ImportDirective","scope":5443,"sourceUnit":3942,"src":"325:31:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5000,"name":"IUniswapV3StaticQuoter","nodeType":"UserDefinedTypeName","referencedDeclaration":6061,"src":"392:22:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3StaticQuoter_$6061","typeString":"contract IUniswapV3StaticQuoter"}},"id":5001,"nodeType":"InheritanceSpecifier","src":"392:22:27"},{"baseName":{"id":5002,"name":"UniV3QuoterCore","nodeType":"UserDefinedTypeName","referencedDeclaration":3941,"src":"416:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_UniV3QuoterCore_$3941","typeString":"contract UniV3QuoterCore"}},"id":5003,"nodeType":"InheritanceSpecifier","src":"416:15:27"}],"contractDependencies":[3941,5948,6061],"contractKind":"contract","fullyImplemented":true,"id":5442,"linearizedBaseContracts":[5442,3941,5948,6061],"name":"UniswapV3StaticQuoter","nodeType":"ContractDefinition","nodes":[{"id":5006,"libraryName":{"id":5004,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"444:14:27","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"438:33:27","typeName":{"id":5005,"name":"uint256","nodeType":"ElementaryTypeName","src":"463:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":5009,"libraryName":{"id":5007,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"482:14:27","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"476:32:27","typeName":{"id":5008,"name":"int256","nodeType":"ElementaryTypeName","src":"501:6:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":5012,"libraryName":{"id":5010,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"519:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"513:27:27","typeName":{"id":5011,"name":"uint256","nodeType":"ElementaryTypeName","src":"532:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":5015,"libraryName":{"id":5013,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"551:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"545:26:27","typeName":{"id":5014,"name":"int256","nodeType":"ElementaryTypeName","src":"564:6:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":5018,"libraryName":{"id":5016,"name":"Path","nodeType":"UserDefinedTypeName","referencedDeclaration":3031,"src":"582:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Path_$3031","typeString":"library Path"}},"nodeType":"UsingForDirective","src":"576:21:27","typeName":{"id":5017,"name":"bytes","nodeType":"ElementaryTypeName","src":"591:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":false,"id":5020,"mutability":"immutable","name":"factory","nodeType":"VariableDeclaration","scope":5442,"src":"603:25:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5019,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5022,"mutability":"immutable","name":"initCodeHash","nodeType":"VariableDeclaration","scope":5442,"src":"634:30:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5021,"name":"bytes32","nodeType":"ElementaryTypeName","src":"634:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":5037,"nodeType":"Block","src":"724:73:27","statements":[{"expression":{"id":5031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5029,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5020,"src":"734:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5030,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5024,"src":"744:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"734:18:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5032,"nodeType":"ExpressionStatement","src":"734:18:27"},{"expression":{"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5033,"name":"initCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"762:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5034,"name":"_initCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"777:13:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"762:28:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5036,"nodeType":"ExpressionStatement","src":"762:28:27"}]},"id":5038,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":5027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5024,"mutability":"mutable","name":"_factory","nodeType":"VariableDeclaration","scope":5038,"src":"683:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5023,"name":"address","nodeType":"ElementaryTypeName","src":"683:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5026,"mutability":"mutable","name":"_initCodeHash","nodeType":"VariableDeclaration","scope":5038,"src":"701:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"701:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"682:41:27"},"returnParameters":{"id":5028,"nodeType":"ParameterList","parameters":[],"src":"724:0:27"},"scope":5442,"src":"671:126:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5063,"nodeType":"Block","src":"936:278:27","statements":[{"expression":{"arguments":[{"arguments":[{"id":5052,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5020,"src":"1059:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5053,"name":"initCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"1088:12:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":5056,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5040,"src":"1155:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5057,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"1163:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5058,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5044,"src":"1171:3:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":5054,"name":"CustomizedPoolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6166,"src":"1122:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CustomizedPoolAddress_$6166_$","typeString":"type(library CustomizedPoolAddress)"}},"id":5055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getPoolKey","nodeType":"MemberAccess","referencedDeclaration":6113,"src":"1122:32:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$6082_memory_ptr_$","typeString":"function (address,address,uint24) pure returns (struct CustomizedPoolAddress.PoolKey memory)"}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1122:53:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}],"expression":{"id":5050,"name":"CustomizedPoolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6166,"src":"1001:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CustomizedPoolAddress_$6166_$","typeString":"type(library CustomizedPoolAddress)"}},"id":5051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"computeAddress","nodeType":"MemberAccess","referencedDeclaration":6165,"src":"1001:36:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes32_$_t_struct$_PoolKey_$6082_memory_ptr_$returns$_t_address_$","typeString":"function (address,bytes32,struct CustomizedPoolAddress.PoolKey memory) pure returns (address)"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1001:192:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5049,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"965:18:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"965:242:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"functionReturnParameters":5048,"id":5062,"nodeType":"Return","src":"946:261:27"}]},"id":5064,"implemented":true,"kind":"function","modifiers":[],"name":"getPool","nodeType":"FunctionDefinition","parameters":{"id":5045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5040,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":5064,"src":"829:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5039,"name":"address","nodeType":"ElementaryTypeName","src":"829:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5042,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":5064,"src":"853:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5041,"name":"address","nodeType":"ElementaryTypeName","src":"853:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5044,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":5064,"src":"877:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5043,"name":"uint24","nodeType":"ElementaryTypeName","src":"877:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"819:74:27"},"returnParameters":{"id":5048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5047,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5064,"src":"916:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":5046,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"916:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"src":"915:20:27"},"scope":5442,"src":"803:411:27","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[6031],"body":{"id":5138,"nodeType":"Block","src":"1357:684:27","statements":[{"assignments":[5073],"declarations":[{"constant":false,"id":5073,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5138,"src":"1367:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5072,"name":"bool","nodeType":"ElementaryTypeName","src":"1367:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5079,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5074,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1385:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5075,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":6014,"src":"1385:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5076,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1402:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5077,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":6016,"src":"1402:15:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1385:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1367:50:27"},{"assignments":[5081],"declarations":[{"constant":false,"id":5081,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5138,"src":"1427:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":5080,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"1427:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":5090,"initialValue":{"arguments":[{"expression":{"id":5083,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1474:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5084,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":6014,"src":"1474:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5085,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1502:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5086,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":6016,"src":"1502:15:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5087,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1531:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":6020,"src":"1531:10:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":5082,"name":"getPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5064,"src":"1453:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"function (address,address,uint24) view returns (contract IUniswapV3likePool)"}},"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1453:98:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"1427:124:27"},{"assignments":[5092,5094],"declarations":[{"constant":false,"id":5092,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":5138,"src":"1563:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5091,"name":"int256","nodeType":"ElementaryTypeName","src":"1563:6:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5094,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":5138,"src":"1579:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5093,"name":"int256","nodeType":"ElementaryTypeName","src":"1579:6:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5124,"initialValue":{"arguments":[{"arguments":[{"id":5098,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"1624:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}],"id":5097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5096,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:27","typeDescriptions":{}}},"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1616:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5100,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"1643:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":5101,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1667:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":6018,"src":"1667:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"1667:24:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1667:26:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5105,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1707:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5106,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":6022,"src":"1707:24:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1707:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":5120,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"1932:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}},"id":5121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":6022,"src":"1932:24:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1707:249:27","trueExpression":{"components":[{"condition":{"id":5109,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"1777:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5114,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"1868:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"1868:23:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1894:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1868:27:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1777:118:27","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5110,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"1814:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"1814:23:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1840:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1814:27:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":5119,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1755:158:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5095,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"1597:5:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1597:369:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"1562:404:27"},{"expression":{"condition":{"id":5125,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"1984:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2025:8:27","subExpression":{"id":5133,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"2026:7:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2017:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5131,"name":"uint256","nodeType":"ElementaryTypeName","src":"2017:7:27","typeDescriptions":{}}},"id":5135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2017:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1984:50:27","trueExpression":{"arguments":[{"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2005:8:27","subExpression":{"id":5128,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5094,"src":"2006:7:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1997:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:27","typeDescriptions":{}}},"id":5130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1997:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5071,"id":5137,"nodeType":"Return","src":"1977:57:27"}]},"functionSelector":"c6a5026a","id":5139,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactInputSingle","nodeType":"FunctionDefinition","overrides":{"id":5068,"nodeType":"OverrideSpecifier","overrides":[],"src":"1320:8:27"},"parameters":{"id":5067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5066,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":5139,"src":"1260:41:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"},"typeName":{"id":5065,"name":"QuoteExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":6023,"src":"1260:27:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"}},"visibility":"internal"}],"src":"1250:57:27"},"returnParameters":{"id":5071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5070,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5139,"src":"1338:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5069,"name":"uint256","nodeType":"ElementaryTypeName","src":"1338:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1337:19:27"},"scope":5442,"src":"1220:821:27","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6012],"body":{"id":5188,"nodeType":"Block","src":"2180:746:27","statements":[{"body":{"id":5186,"nodeType":"Block","src":"2203:717:27","statements":[{"assignments":[5151,5153,5155],"declarations":[{"constant":false,"id":5151,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":5186,"src":"2218:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5150,"name":"address","nodeType":"ElementaryTypeName","src":"2218:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5153,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":5186,"src":"2235:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5152,"name":"address","nodeType":"ElementaryTypeName","src":"2235:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5155,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":5186,"src":"2253:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5154,"name":"uint24","nodeType":"ElementaryTypeName","src":"2253:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":5159,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5156,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"2267:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decodeFirstPool","nodeType":"MemberAccess","referencedDeclaration":2997,"src":"2267:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (address,address,uint24)"}},"id":5158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2267:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint24_$","typeString":"tuple(address,address,uint24)"}},"nodeType":"VariableDeclarationStatement","src":"2217:89:27"},{"expression":{"id":5170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5160,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"2400:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5163,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5151,"src":"2509:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5164,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"2548:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5165,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5155,"src":"2583:3:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":5166,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"2618:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2667:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5162,"name":"QuoteExactInputSingleParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6023,"src":"2450:27:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_QuoteExactInputSingleParams_$6023_storage_ptr_$","typeString":"type(struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams storage pointer)"}},"id":5168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","fee","amountIn","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"2450:237:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}],"id":5161,"name":"quoteExactInputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"2411:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory) view returns (uint256)"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2411:290:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2400:301:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5171,"nodeType":"ExpressionStatement","src":"2400:301:27"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5172,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"2775:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"hasMultiplePools","nodeType":"MemberAccess","referencedDeclaration":2945,"src":"2775:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2775:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5184,"nodeType":"Block","src":"2862:48:27","statements":[{"expression":{"id":5182,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"2887:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5148,"id":5183,"nodeType":"Return","src":"2880:15:27"}]},"id":5185,"nodeType":"IfStatement","src":"2771:139:27","trueBody":{"id":5181,"nodeType":"Block","src":"2800:56:27","statements":[{"expression":{"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5175,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"2818:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5176,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"2825:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"skipToken","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"2825:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2825:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2818:23:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5180,"nodeType":"ExpressionStatement","src":"2818:23:27"}]}}]},"condition":{"hexValue":"74727565","id":5149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2197:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":5187,"nodeType":"WhileStatement","src":"2190:730:27"}]},"functionSelector":"cdca1753","id":5189,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactInput","nodeType":"FunctionDefinition","overrides":{"id":5145,"nodeType":"OverrideSpecifier","overrides":[],"src":"2143:8:27"},"parameters":{"id":5144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5141,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":5189,"src":"2081:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5140,"name":"bytes","nodeType":"ElementaryTypeName","src":"2081:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5143,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5189,"src":"2108:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5142,"name":"uint256","nodeType":"ElementaryTypeName","src":"2108:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2071:59:27"},"returnParameters":{"id":5148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5147,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5189,"src":"2161:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5146,"name":"uint256","nodeType":"ElementaryTypeName","src":"2161:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2160:19:27"},"scope":5442,"src":"2047:879:27","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6060],"body":{"id":5262,"nodeType":"Block","src":"3070:681:27","statements":[{"assignments":[5198],"declarations":[{"constant":false,"id":5198,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5262,"src":"3080:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5197,"name":"bool","nodeType":"ElementaryTypeName","src":"3080:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5204,"initialValue":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5199,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3098:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":6043,"src":"3098:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5201,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3115:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":6045,"src":"3115:15:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3098:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3080:50:27"},{"assignments":[5206],"declarations":[{"constant":false,"id":5206,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5262,"src":"3140:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":5205,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"3140:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":5215,"initialValue":{"arguments":[{"expression":{"id":5208,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3187:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":6043,"src":"3187:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5210,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3215:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5211,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenOut","nodeType":"MemberAccess","referencedDeclaration":6045,"src":"3215:15:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5212,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3244:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":6049,"src":"3244:10:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":5207,"name":"getPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5064,"src":"3166:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"function (address,address,uint24) view returns (contract IUniswapV3likePool)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3166:98:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"3140:124:27"},{"assignments":[5217,5219],"declarations":[{"constant":false,"id":5217,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":5262,"src":"3276:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5216,"name":"int256","nodeType":"ElementaryTypeName","src":"3276:6:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5219,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":5262,"src":"3292:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5218,"name":"int256","nodeType":"ElementaryTypeName","src":"3292:6:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5250,"initialValue":{"arguments":[{"arguments":[{"id":5223,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"3337:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}],"id":5222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3329:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5221,"name":"address","nodeType":"ElementaryTypeName","src":"3329:7:27","typeDescriptions":{}}},"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3329:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5225,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5198,"src":"3356:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3380:25:27","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":5226,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3381:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6047,"src":"3381:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"3381:22:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":5229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3381:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5231,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3419:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5232,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":6051,"src":"3419:24:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3447:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3419:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":5246,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"3644:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}},"id":5247,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceLimitX96","nodeType":"MemberAccess","referencedDeclaration":6051,"src":"3644:24:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3419:249:27","trueExpression":{"components":[{"condition":{"id":5235,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5198,"src":"3489:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5240,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"3580:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"3580:23:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3606:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3580:27:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3489:118:27","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5236,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"3526:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"3526:23:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3552:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3526:27:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":5245,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3467:158:27","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5220,"name":"quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5715,"src":"3310:5:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int256_$_t_int256_$","typeString":"function (address,bool,int256,uint160) view returns (int256,int256)"}},"id":5249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3310:368:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"VariableDeclarationStatement","src":"3275:403:27"},{"expression":{"condition":{"id":5251,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5198,"src":"3696:10:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":5258,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"3736:7:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3728:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5256,"name":"uint256","nodeType":"ElementaryTypeName","src":"3728:7:27","typeDescriptions":{}}},"id":5259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3728:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3696:48:27","trueExpression":{"arguments":[{"id":5254,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5217,"src":"3717:7:27","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3709:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5252,"name":"uint256","nodeType":"ElementaryTypeName","src":"3709:7:27","typeDescriptions":{}}},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3709:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5196,"id":5261,"nodeType":"Return","src":"3689:55:27"}]},"functionSelector":"bd21704a","id":5263,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactOutputSingle","nodeType":"FunctionDefinition","overrides":{"id":5193,"nodeType":"OverrideSpecifier","overrides":[],"src":"3034:8:27"},"parameters":{"id":5192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5191,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":5263,"src":"2973:42:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"},"typeName":{"id":5190,"name":"QuoteExactOutputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":6052,"src":"2973:28:27","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"}},"visibility":"internal"}],"src":"2963:58:27"},"returnParameters":{"id":5196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5195,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5263,"src":"3052:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5194,"name":"uint256","nodeType":"ElementaryTypeName","src":"3052:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3051:18:27"},"scope":5442,"src":"2932:819:27","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6041],"body":{"id":5312,"nodeType":"Block","src":"3891:749:27","statements":[{"body":{"id":5310,"nodeType":"Block","src":"3914:720:27","statements":[{"assignments":[5275,5277,5279],"declarations":[{"constant":false,"id":5275,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":5310,"src":"3929:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5274,"name":"address","nodeType":"ElementaryTypeName","src":"3929:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5277,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":5310,"src":"3947:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5276,"name":"address","nodeType":"ElementaryTypeName","src":"3947:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5279,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":5310,"src":"3964:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5278,"name":"uint24","nodeType":"ElementaryTypeName","src":"3964:6:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":5283,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5280,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"3978:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decodeFirstPool","nodeType":"MemberAccess","referencedDeclaration":2997,"src":"3978:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (address,address,uint24)"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3978:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint24_$","typeString":"tuple(address,address,uint24)"}},"nodeType":"VariableDeclarationStatement","src":"3928:89:27"},{"expression":{"id":5294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5284,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"4111:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5287,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5277,"src":"4223:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5288,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"4262:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5289,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5279,"src":"4297:3:27","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":5290,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"4330:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4380:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5286,"name":"QuoteExactOutputSingleParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6052,"src":"4163:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_QuoteExactOutputSingleParams_$6052_storage_ptr_$","typeString":"type(struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams storage pointer)"}},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","fee","amount","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"4163:237:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}],"id":5285,"name":"quoteExactOutputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"4123:22:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory) view returns (uint256)"}},"id":5293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4123:291:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4111:303:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5295,"nodeType":"ExpressionStatement","src":"4111:303:27"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5296,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"4488:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"hasMultiplePools","nodeType":"MemberAccess","referencedDeclaration":2945,"src":"4488:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4488:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5308,"nodeType":"Block","src":"4575:49:27","statements":[{"expression":{"id":5306,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"4600:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5272,"id":5307,"nodeType":"Return","src":"4593:16:27"}]},"id":5309,"nodeType":"IfStatement","src":"4484:140:27","trueBody":{"id":5305,"nodeType":"Block","src":"4513:56:27","statements":[{"expression":{"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5299,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"4531:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5300,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"4538:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"skipToken","nodeType":"MemberAccess","referencedDeclaration":3030,"src":"4538:14:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4538:16:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4531:23:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5304,"nodeType":"ExpressionStatement","src":"4531:23:27"}]}}]},"condition":{"hexValue":"74727565","id":5273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3908:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":5311,"nodeType":"WhileStatement","src":"3901:733:27"}]},"functionSelector":"2f80bb1d","id":5313,"implemented":true,"kind":"function","modifiers":[],"name":"quoteExactOutput","nodeType":"FunctionDefinition","overrides":{"id":5269,"nodeType":"OverrideSpecifier","overrides":[],"src":"3855:8:27"},"parameters":{"id":5268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5265,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":5313,"src":"3792:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5264,"name":"bytes","nodeType":"ElementaryTypeName","src":"3792:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5267,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5313,"src":"3819:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5266,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3782:60:27"},"returnParameters":{"id":5272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5271,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5313,"src":"3873:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5270,"name":"uint256","nodeType":"ElementaryTypeName","src":"3873:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3872:18:27"},"scope":5442,"src":"3757:883:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5376,"nodeType":"Block","src":"4813:615:27","statements":[{"assignments":[5327],"declarations":[{"constant":false,"id":5327,"mutability":"mutable","name":"v3pool","nodeType":"VariableDeclaration","scope":5376,"src":"4823:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":5326,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"4823:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":5331,"initialValue":{"arguments":[{"id":5329,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"4870:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5328,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"4851:18:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4851:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"4823:52:27"},{"assignments":[5333,5335],"declarations":[{"constant":false,"id":5333,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":5376,"src":"4886:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5332,"name":"address","nodeType":"ElementaryTypeName","src":"4886:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5335,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":5376,"src":"4902:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5334,"name":"address","nodeType":"ElementaryTypeName","src":"4902:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5346,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5336,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"4920:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5337,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"4930:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4920:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":5342,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"4988:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5343,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"4998:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5344,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4987:19:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4920:86:27","trueExpression":{"components":[{"id":5339,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"4954:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5340,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"4963:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4953:19:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"4885:121:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5347,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"5043:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":524,"src":"5043:13:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5043:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5350,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"5062:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5043:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5352,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"5072:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":530,"src":"5072:13:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5072:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5355,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"5091:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5072:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5043:54:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5361,"nodeType":"IfStatement","src":"5039:93:27","trueBody":{"id":5360,"nodeType":"Block","src":"5099:33:27","statements":[{"expression":{"hexValue":"30","id":5358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5120:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5325,"id":5359,"nodeType":"Return","src":"5113:8:27"}]}},{"expression":{"id":5374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5362,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"5142:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5365,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"5244:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5366,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5317,"src":"5279:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5367,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"5315:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5368,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"5346:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":5369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":536,"src":"5346:10:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint24_$","typeString":"function () view external returns (uint24)"}},"id":5370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5346:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"hexValue":"30","id":5371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5395:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5364,"name":"QuoteExactInputSingleParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6023,"src":"5189:27:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_QuoteExactInputSingleParams_$6023_storage_ptr_$","typeString":"type(struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams storage pointer)"}},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","amountIn","fee","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"5189:222:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory"}],"id":5363,"name":"quoteExactInputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"5154:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams memory) view returns (uint256)"}},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5154:267:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:279:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5375,"nodeType":"ExpressionStatement","src":"5142:279:27"}]},"functionSelector":"d7176ca9","id":5377,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nodeType":"FunctionDefinition","parameters":{"id":5322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5315,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":5377,"src":"4677:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5314,"name":"address","nodeType":"ElementaryTypeName","src":"4677:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5317,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":5377,"src":"4702:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5316,"name":"address","nodeType":"ElementaryTypeName","src":"4702:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5319,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5377,"src":"4728:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5318,"name":"address","nodeType":"ElementaryTypeName","src":"4728:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5321,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5377,"src":"4750:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5320,"name":"uint256","nodeType":"ElementaryTypeName","src":"4750:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4667:105:27"},"returnParameters":{"id":5325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5324,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5377,"src":"4794:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5323,"name":"uint256","nodeType":"ElementaryTypeName","src":"4794:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4793:19:27"},"scope":5442,"src":"4646:782:27","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5440,"nodeType":"Block","src":"5600:615:27","statements":[{"assignments":[5391],"declarations":[{"constant":false,"id":5391,"mutability":"mutable","name":"v3pool","nodeType":"VariableDeclaration","scope":5440,"src":"5610:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":5390,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"5610:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":5395,"initialValue":{"arguments":[{"id":5393,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5383,"src":"5657:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5392,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"5638:18:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5638:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"5610:52:27"},{"assignments":[5397,5399],"declarations":[{"constant":false,"id":5397,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":5440,"src":"5673:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5396,"name":"address","nodeType":"ElementaryTypeName","src":"5673:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5399,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":5440,"src":"5689:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5398,"name":"address","nodeType":"ElementaryTypeName","src":"5689:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5410,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5400,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"5707:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5401,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"5717:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5707:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":5406,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"5775:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5407,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"5785:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5408,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5774:19:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5707:86:27","trueExpression":{"components":[{"id":5403,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"5741:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5404,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"5750:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5405,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5740:19:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"5672:121:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5411,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"5830:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":5412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":524,"src":"5830:13:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5830:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5414,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"5849:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5830:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5416,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"5859:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":530,"src":"5859:13:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5859:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5419,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"5878:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5859:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5830:54:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5425,"nodeType":"IfStatement","src":"5826:93:27","trueBody":{"id":5424,"nodeType":"Block","src":"5886:33:27","statements":[{"expression":{"hexValue":"30","id":5422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5907:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5389,"id":5423,"nodeType":"Return","src":"5900:8:27"}]}},{"expression":{"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5426,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5388,"src":"5929:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5429,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"6032:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5430,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"6067:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5431,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"6101:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5432,"name":"v3pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"6133:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":536,"src":"6133:10:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint24_$","typeString":"function () view external returns (uint24)"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6133:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"hexValue":"30","id":5435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6182:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5428,"name":"QuoteExactOutputSingleParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6052,"src":"5976:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_QuoteExactOutputSingleParams_$6052_storage_ptr_$","typeString":"type(struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams storage pointer)"}},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["tokenIn","tokenOut","amount","fee","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"5976:222:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory"}],"id":5427,"name":"quoteExactOutputSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"5940:22:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams memory) view returns (uint256)"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5940:268:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5929:279:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5439,"nodeType":"ExpressionStatement","src":"5929:279:27"}]},"functionSelector":"ec278309","id":5441,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountIn","nodeType":"FunctionDefinition","parameters":{"id":5386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5379,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":5441,"src":"5464:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5378,"name":"address","nodeType":"ElementaryTypeName","src":"5464:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5381,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":5441,"src":"5489:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5380,"name":"address","nodeType":"ElementaryTypeName","src":"5489:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5383,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5441,"src":"5515:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5382,"name":"address","nodeType":"ElementaryTypeName","src":"5515:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5385,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5441,"src":"5537:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5384,"name":"uint256","nodeType":"ElementaryTypeName","src":"5537:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5454:106:27"},"returnParameters":{"id":5389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5388,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5441,"src":"5582:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5387,"name":"uint256","nodeType":"ElementaryTypeName","src":"5582:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5581:18:27"},"scope":5442,"src":"5434:781:27","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5443,"src":"358:5859:27"}],"src":"45:6173:27"},"id":27},"contracts/base/UniV3likeQuoterCore.sol":{"ast":{"absolutePath":"contracts/base/UniV3likeQuoterCore.sol","exportedSymbols":{"FixedPoint128":[969],"FixedPoint96":[979],"FullMath":[1152],"GlobalState":[5957],"IUniV3likeQuoterCore":[5999],"LiquidityMath":[1204],"LowGasSafeMath":[1334],"SafeCast":[1404],"SqrtPriceMath":[1920],"StepComputations":[5983],"SwapMath":[2181],"SwapState":[5968],"TickMath":[2716],"UniV3likeQuoterCore":[5948],"UnsafeMath":[2732]},"id":5949,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5444,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:28"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","file":"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol","id":5445,"nodeType":"ImportDirective","scope":5949,"sourceUnit":1335,"src":"70:65:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol","file":"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol","id":5446,"nodeType":"ImportDirective","scope":5949,"sourceUnit":1205,"src":"136:64:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol","file":"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol","id":5447,"nodeType":"ImportDirective","scope":5949,"sourceUnit":970,"src":"201:64:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","file":"@uniswap/v3-core/contracts/libraries/SafeCast.sol","id":5448,"nodeType":"ImportDirective","scope":5949,"sourceUnit":1405,"src":"266:59:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/TickMath.sol","file":"@uniswap/v3-core/contracts/libraries/TickMath.sol","id":5449,"nodeType":"ImportDirective","scope":5949,"sourceUnit":2717,"src":"326:59:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/FullMath.sol","file":"@uniswap/v3-core/contracts/libraries/FullMath.sol","id":5450,"nodeType":"ImportDirective","scope":5949,"sourceUnit":1153,"src":"386:59:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/libraries/SwapMath.sol","file":"@uniswap/v3-core/contracts/libraries/SwapMath.sol","id":5451,"nodeType":"ImportDirective","scope":5949,"sourceUnit":2182,"src":"446:59:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IUniV3likeQuoterCore.sol","file":"../interfaces/IUniV3likeQuoterCore.sol","id":5452,"nodeType":"ImportDirective","scope":5949,"sourceUnit":6000,"src":"506:48:28","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":5948,"linearizedBaseContracts":[5948],"name":"UniV3likeQuoterCore","nodeType":"ContractDefinition","nodes":[{"id":5455,"libraryName":{"id":5453,"name":"LowGasSafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":1334,"src":"607:14:28","typeDescriptions":{"typeIdentifier":"t_contract$_LowGasSafeMath_$1334","typeString":"library LowGasSafeMath"}},"nodeType":"UsingForDirective","src":"601:32:28","typeName":{"id":5454,"name":"int256","nodeType":"ElementaryTypeName","src":"626:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"id":5458,"libraryName":{"id":5456,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"644:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"638:27:28","typeName":{"id":5457,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":5461,"libraryName":{"id":5459,"name":"SafeCast","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"676:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_SafeCast_$1404","typeString":"library SafeCast"}},"nodeType":"UsingForDirective","src":"670:26:28","typeName":{"id":5460,"name":"int256","nodeType":"ElementaryTypeName","src":"689:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"body":{"id":5714,"nodeType":"Block","src":"905:3081:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5477,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"923:15:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"942:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"923:20:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"616d6f756e745370656369666965642063616e6e6f74206265207a65726f","id":5480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"945:32:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_bc23a3cab2e1b389c1dc1dd0cd3093ed83859bcfcc938d0ab91d1b009c811c10","typeString":"literal_string \"amountSpecified cannot be zero\""},"value":"amountSpecified cannot be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bc23a3cab2e1b389c1dc1dd0cd3093ed83859bcfcc938d0ab91d1b009c811c10","typeString":"literal_string \"amountSpecified cannot be zero\""}],"id":5476,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"915:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:63:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5482,"nodeType":"ExpressionStatement","src":"915:63:28"},{"assignments":[5484],"declarations":[{"constant":false,"id":5484,"mutability":"mutable","name":"exactInput","nodeType":"VariableDeclaration","scope":5714,"src":"988:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5483,"name":"bool","nodeType":"ElementaryTypeName","src":"988:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5488,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5485,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"1006:15:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1024:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1006:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"988:37:28"},{"assignments":[5490,5492,5494],"declarations":[{"constant":false,"id":5490,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":5714,"src":"1036:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5489,"name":"int24","nodeType":"ElementaryTypeName","src":"1036:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5492,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":5714,"src":"1055:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5491,"name":"uint16","nodeType":"ElementaryTypeName","src":"1055:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5494,"mutability":"mutable","name":"state","nodeType":"VariableDeclaration","scope":5714,"src":"1067:22:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState"},"typeName":{"id":5493,"name":"SwapState","nodeType":"UserDefinedTypeName","referencedDeclaration":5968,"src":"1067:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_storage_ptr","typeString":"struct SwapState"}},"visibility":"internal"}],"id":5501,"initialValue":{"arguments":[{"id":5496,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"1119:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5497,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"1144:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5498,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"1168:15:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5499,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"1197:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5495,"name":"getInitState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"1093:12:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_int256_$_t_uint160_$returns$_t_int24_$_t_uint16_$_t_struct$_SwapState_$5968_memory_ptr_$","typeString":"function (address,bool,int256,uint160) view returns (int24,uint16,struct SwapState memory)"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1093:131:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_uint16_$_t_struct$_SwapState_$5968_memory_ptr_$","typeString":"tuple(int24,uint16,struct SwapState memory)"}},"nodeType":"VariableDeclarationStatement","src":"1035:189:28"},{"body":{"id":5689,"nodeType":"Block","src":"1437:2309:28","statements":[{"assignments":[5512],"declarations":[{"constant":false,"id":5512,"mutability":"mutable","name":"step","nodeType":"VariableDeclaration","scope":5689,"src":"1451:28:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations"},"typeName":{"id":5511,"name":"StepComputations","nodeType":"UserDefinedTypeName","referencedDeclaration":5983,"src":"1451:16:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_storage_ptr","typeString":"struct StepComputations"}},"visibility":"internal"}],"id":5513,"nodeType":"VariableDeclarationStatement","src":"1451:28:28"},{"expression":{"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5514,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1493:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"sqrtPriceStartX96","nodeType":"MemberAccess","referencedDeclaration":5970,"src":"1493:22:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5517,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1518:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5518,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"1518:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1493:43:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5520,"nodeType":"ExpressionStatement","src":"1493:43:28"},{"expression":{"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":5521,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1552:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5523,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":5972,"src":"1552:13:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"expression":{"id":5524,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1567:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"initialized","nodeType":"MemberAccess","referencedDeclaration":5974,"src":"1567:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":5526,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1585:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"sqrtPriceNextX96","nodeType":"MemberAccess","referencedDeclaration":5976,"src":"1585:21:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":5528,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1551:56:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$_t_uint160_$","typeString":"tuple(int24,bool,uint160)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5530,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"1655:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5531,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1684:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5532,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":5965,"src":"1684:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5533,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5490,"src":"1712:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5534,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"1741:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5529,"name":"nextInitializedTickAndPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5863,"src":"1610:27:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$_t_int24_$_t_bool_$returns$_t_int24_$_t_bool_$_t_uint160_$","typeString":"function (address,int24,int24,bool) view returns (int24,bool,uint160)"}},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1610:155:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$_t_uint160_$","typeString":"tuple(int24,bool,uint160)"}},"src":"1551:214:28","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5537,"nodeType":"ExpressionStatement","src":"1551:214:28"},{"expression":{"id":5564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":5538,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1899:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5540,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"1899:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":5541,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1919:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5542,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":5978,"src":"1919:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5543,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1934:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountOut","nodeType":"MemberAccess","referencedDeclaration":5980,"src":"1934:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5545,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"1950:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5546,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"feeAmount","nodeType":"MemberAccess","referencedDeclaration":5982,"src":"1950:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5547,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1898:67:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint160,uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5550,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2010:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5551,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"2010:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"arguments":[{"id":5553,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"2068:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":5554,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2080:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceNextX96","nodeType":"MemberAccess","referencedDeclaration":5976,"src":"2080:21:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":5556,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"2103:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5552,"name":"getSqrtRatioTargetX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5888,"src":"2046:21:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint160_$_t_uint160_$returns$_t_uint160_$","typeString":"function (bool,uint160,uint160) pure returns (uint160)"}},"id":5557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2046:75:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":5558,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2139:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"2139:15:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"id":5560,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2172:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":5959,"src":"2172:30:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5562,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5492,"src":"2220:3:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":5548,"name":"SwapMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"1968:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SwapMath_$2181_$","typeString":"type(library SwapMath)"}},"id":5549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"computeSwapStep","nodeType":"MemberAccess","referencedDeclaration":2180,"src":"1968:24:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$_t_int256_$_t_uint24_$returns$_t_uint160_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint160,uint160,uint128,int256,uint24) pure returns (uint160,uint256,uint256,uint256)"}},"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1968:269:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint160,uint256,uint256,uint256)"}},"src":"1898:339:28","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5565,"nodeType":"ExpressionStatement","src":"1898:339:28"},{"condition":{"id":5566,"name":"exactInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"2255:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5620,"nodeType":"Block","src":"2479:206:28","statements":[{"expression":{"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5594,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2497:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":5959,"src":"2497:30:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":5597,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2531:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5598,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountOut","nodeType":"MemberAccess","referencedDeclaration":5980,"src":"2531:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"2531:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":5600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2531:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2497:59:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5602,"nodeType":"ExpressionStatement","src":"2497:59:28"},{"expression":{"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5603,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2574:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5605,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":5961,"src":"2574:22:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5609,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2627:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5610,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":5978,"src":"2627:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":5611,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2643:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feeAmount","nodeType":"MemberAccess","referencedDeclaration":5982,"src":"2643:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2627:30:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5614,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2626:32:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"2626:41:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2626:43:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":5606,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2599:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5607,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":5961,"src":"2599:22:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1306,"src":"2599:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2599:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2574:96:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5619,"nodeType":"ExpressionStatement","src":"2574:96:28"}]},"id":5621,"nodeType":"IfStatement","src":"2251:434:28","trueBody":{"id":5593,"nodeType":"Block","src":"2267:206:28","statements":[{"expression":{"id":5578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5567,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2285:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":5959,"src":"2285:30:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5570,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2320:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5571,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":5978,"src":"2320:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":5572,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2336:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5573,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"feeAmount","nodeType":"MemberAccess","referencedDeclaration":5982,"src":"2336:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2320:30:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5575,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2319:32:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"2319:41:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2319:43:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2285:77:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5579,"nodeType":"ExpressionStatement","src":"2285:77:28"},{"expression":{"id":5591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5580,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2380:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":5961,"src":"2380:22:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":5586,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2432:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountOut","nodeType":"MemberAccess","referencedDeclaration":5980,"src":"2432:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":1403,"src":"2432:23:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":5589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2432:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":5583,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2405:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":5961,"src":"2405:22:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1333,"src":"2405:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2405:53:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2380:78:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5592,"nodeType":"ExpressionStatement","src":"2380:78:28"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5622,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"2757:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5623,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"2757:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5624,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2779:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceNextX96","nodeType":"MemberAccess","referencedDeclaration":5976,"src":"2779:21:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"2757:43:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5671,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3477:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"3477:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5673,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"3499:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5674,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceStartX96","nodeType":"MemberAccess","referencedDeclaration":5970,"src":"3499:22:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3477:44:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5687,"nodeType":"IfStatement","src":"3473:263:28","trueBody":{"id":5686,"nodeType":"Block","src":"3523:213:28","statements":[{"expression":{"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5676,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3661:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":5965,"src":"3661:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5681,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3702:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"3702:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"id":5679,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"3674:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getTickAtSqrtRatio","nodeType":"MemberAccess","referencedDeclaration":2715,"src":"3674:27:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint160_$returns$_t_int24_$","typeString":"function (uint160) pure returns (int24)"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3674:47:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3661:60:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5685,"nodeType":"ExpressionStatement","src":"3661:60:28"}]}},"id":5688,"nodeType":"IfStatement","src":"2753:983:28","trueBody":{"id":5670,"nodeType":"Block","src":"2802:665:28","statements":[{"condition":{"expression":{"id":5627,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2895:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialized","nodeType":"MemberAccess","referencedDeclaration":5974,"src":"2895:16:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5656,"nodeType":"IfStatement","src":"2891:485:28","trueBody":{"id":5655,"nodeType":"Block","src":"2913:463:28","statements":[{"assignments":[null,5630,null,null,null,null,null,null],"declarations":[null,{"constant":false,"id":5630,"mutability":"mutable","name":"liquidityNet","nodeType":"VariableDeclaration","scope":5655,"src":"2937:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":5629,"name":"int128","nodeType":"ElementaryTypeName","src":"2937:6:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},null,null,null,null,null,null],"id":5636,"initialValue":{"arguments":[{"id":5632,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"2975:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5633,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"2988:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":5972,"src":"2988:13:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":5631,"name":"getTicks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5947,"src":"2966:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$returns$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"function (address,int24) view returns (uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"id":5635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2966:36:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint128_$_t_int128_$_t_uint256_$_t_uint256_$_t_int56_$_t_uint160_$_t_uint32_$_t_bool_$","typeString":"tuple(uint128,int128,uint256,uint256,int56,uint160,uint32,bool)"}},"nodeType":"VariableDeclarationStatement","src":"2935:67:28"},{"condition":{"id":5637,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"3200:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5643,"nodeType":"IfStatement","src":"3196:68:28","trueBody":{"expression":{"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5638,"name":"liquidityNet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"3236:12:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3251:13:28","subExpression":{"id":5639,"name":"liquidityNet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"3252:12:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"3236:28:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":5642,"nodeType":"ExpressionStatement","src":"3236:28:28"}},{"expression":{"id":5653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5644,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3286:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"3286:15:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5649,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3327:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5650,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"3327:15:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":5651,"name":"liquidityNet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"3344:12:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_int128","typeString":"int128"}],"expression":{"id":5647,"name":"LiquidityMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3304:13:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LiquidityMath_$1204_$","typeString":"type(library LiquidityMath)"}},"id":5648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"addDelta","nodeType":"MemberAccess","referencedDeclaration":1203,"src":"3304:22:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_int128_$returns$_t_uint128_$","typeString":"function (uint128,int128) pure returns (uint128)"}},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3304:53:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"3286:71:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":5654,"nodeType":"ExpressionStatement","src":"3286:71:28"}]}},{"expression":{"id":5668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5657,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3393:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":5965,"src":"3393:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":5660,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"3406:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":5665,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"3439:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":5972,"src":"3439:13:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3406:46:28","trueExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":5664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5661,"name":"step","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5512,"src":"3419:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_StepComputations_$5983_memory_ptr","typeString":"struct StepComputations memory"}},"id":5662,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tickNext","nodeType":"MemberAccess","referencedDeclaration":5972,"src":"3419:13:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3435:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3419:17:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3393:59:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5669,"nodeType":"ExpressionStatement","src":"3393:59:28"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5502,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1357:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":5959,"src":"1357:30:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1391:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1357:35:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5506,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"1396:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5507,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"sqrtPriceX96","nodeType":"MemberAccess","referencedDeclaration":5963,"src":"1396:18:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5508,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"1418:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1396:39:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1357:78:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5690,"nodeType":"WhileStatement","src":"1350:2396:28"},{"expression":{"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":5691,"name":"amount0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5472,"src":"3757:7:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":5692,"name":"amount1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"3766:7:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5693,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3756:18:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5694,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5465,"src":"3777:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5695,"name":"exactInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"3791:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3777:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"expression":{"id":5704,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3906:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5705,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":5961,"src":"3906:22:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5706,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"3930:15:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5707,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3948:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":5959,"src":"3948:30:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"3930:48:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5710,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3905:74:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"id":5711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3777:202:28","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5697,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"3817:15:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5698,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3835:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountSpecifiedRemaining","nodeType":"MemberAccess","referencedDeclaration":5959,"src":"3835:30:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"3817:48:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"expression":{"id":5701,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3867:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountCalculated","nodeType":"MemberAccess","referencedDeclaration":5961,"src":"3867:22:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5703,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3816:74:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"src":"3756:223:28","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5713,"nodeType":"ExpressionStatement","src":"3756:223:28"}]},"functionSelector":"90405d36","id":5715,"implemented":true,"kind":"function","modifiers":[],"name":"quote","nodeType":"FunctionDefinition","parameters":{"id":5470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5463,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":5715,"src":"726:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5462,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5465,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5715,"src":"755:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5464,"name":"bool","nodeType":"ElementaryTypeName","src":"755:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5467,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":5715,"src":"780:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5466,"name":"int256","nodeType":"ElementaryTypeName","src":"780:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5469,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":5715,"src":"812:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5468,"name":"uint160","nodeType":"ElementaryTypeName","src":"812:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"716:127:28"},"returnParameters":{"id":5475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5472,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":5715,"src":"873:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5471,"name":"int256","nodeType":"ElementaryTypeName","src":"873:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5474,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":5715,"src":"889:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5473,"name":"int256","nodeType":"ElementaryTypeName","src":"889:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"872:32:28"},"scope":5948,"src":"702:3284:28","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":5770,"nodeType":"Block","src":"4210:474:28","statements":[{"assignments":[5733],"declarations":[{"constant":false,"id":5733,"mutability":"mutable","name":"gs","nodeType":"VariableDeclaration","scope":5770,"src":"4220:21:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState"},"typeName":{"id":5732,"name":"GlobalState","nodeType":"UserDefinedTypeName","referencedDeclaration":5957,"src":"4220:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_storage_ptr","typeString":"struct GlobalState"}},"visibility":"internal"}],"id":5737,"initialValue":{"arguments":[{"id":5735,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"4263:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5734,"name":"getPoolGlobalState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5895,"src":"4244:18:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_struct$_GlobalState_$5957_memory_ptr_$","typeString":"function (address) view returns (struct GlobalState memory)"}},"id":5736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4244:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"nodeType":"VariableDeclarationStatement","src":"4220:55:28"},{"expression":{"arguments":[{"id":5739,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"4318:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5740,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"4330:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"expression":{"id":5741,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"4349:2:28","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":5742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startPrice","nodeType":"MemberAccess","referencedDeclaration":5952,"src":"4349:13:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5738,"name":"checkSqrtPriceLimitWithinAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5807,"src":"4285:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint160_$_t_uint160_$returns$__$","typeString":"function (bool,uint160,uint160) pure"}},"id":5743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4285:78:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5744,"nodeType":"ExpressionStatement","src":"4285:78:28"},{"expression":{"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5745,"name":"ts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5726,"src":"4373:2:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5747,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"4393:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5746,"name":"getTickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"4378:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_int24_$","typeString":"function (address) view returns (int24)"}},"id":5748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4378:27:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"4373:32:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5750,"nodeType":"ExpressionStatement","src":"4373:32:28"},{"expression":{"id":5754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5751,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5728,"src":"4415:3:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5752,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"4421:2:28","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":5753,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":5956,"src":"4421:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"4415:12:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":5755,"nodeType":"ExpressionStatement","src":"4415:12:28"},{"expression":{"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5756,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5730,"src":"4437:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5758,"name":"amountSpecified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"4495:15:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"arguments":[{"id":5760,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"4548:11:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5759,"name":"getLiquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5902,"src":"4535:12:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint128_$","typeString":"function (address) view returns (uint128)"}},"id":5761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4535:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"expression":{"id":5762,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"4588:2:28","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":5763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startPrice","nodeType":"MemberAccess","referencedDeclaration":5952,"src":"4588:13:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"hexValue":"30","id":5764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4633:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":5765,"name":"gs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"4654:2:28","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState memory"}},"id":5766,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startTick","nodeType":"MemberAccess","referencedDeclaration":5954,"src":"4654:12:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_int24","typeString":"int24"}],"id":5757,"name":"SwapState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5968,"src":"4445:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_SwapState_$5968_storage_ptr_$","typeString":"type(struct SwapState storage pointer)"}},"id":5767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["amountSpecifiedRemaining","liquidity","sqrtPriceX96","amountCalculated","tick"],"nodeType":"FunctionCall","src":"4445:232:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"src":"4437:240:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState memory"}},"id":5769,"nodeType":"ExpressionStatement","src":"4437:240:28"}]},"id":5771,"implemented":true,"kind":"function","modifiers":[],"name":"getInitState","nodeType":"FunctionDefinition","parameters":{"id":5724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5717,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":5771,"src":"4023:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5716,"name":"address","nodeType":"ElementaryTypeName","src":"4023:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5719,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5771,"src":"4052:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5718,"name":"bool","nodeType":"ElementaryTypeName","src":"4052:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5721,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":5771,"src":"4077:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5720,"name":"int256","nodeType":"ElementaryTypeName","src":"4077:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5723,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":5771,"src":"4109:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5722,"name":"uint160","nodeType":"ElementaryTypeName","src":"4109:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4013:127:28"},"returnParameters":{"id":5731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5726,"mutability":"mutable","name":"ts","nodeType":"VariableDeclaration","scope":5771,"src":"4164:8:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5725,"name":"int24","nodeType":"ElementaryTypeName","src":"4164:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5728,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":5771,"src":"4174:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5727,"name":"uint16","nodeType":"ElementaryTypeName","src":"4174:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":5730,"mutability":"mutable","name":"state","nodeType":"VariableDeclaration","scope":5771,"src":"4186:22:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_memory_ptr","typeString":"struct SwapState"},"typeName":{"id":5729,"name":"SwapState","nodeType":"UserDefinedTypeName","referencedDeclaration":5968,"src":"4186:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_SwapState_$5968_storage_ptr","typeString":"struct SwapState"}},"visibility":"internal"}],"src":"4163:46:28"},"scope":5948,"src":"3992:692:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5806,"nodeType":"Block","src":"4838:284:28","statements":[{"assignments":[5781],"declarations":[{"constant":false,"id":5781,"mutability":"mutable","name":"withinAllowed","nodeType":"VariableDeclaration","scope":5806,"src":"4848:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5780,"name":"bool","nodeType":"ElementaryTypeName","src":"4848:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5800,"initialValue":{"condition":{"id":5782,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5773,"src":"4869:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5791,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"4980:14:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5792,"name":"startPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"4997:10:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4980:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5794,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"5011:14:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5795,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5028:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2202,"src":"5028:23:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"5011:40:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4980:71:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4869:182:28","trueExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5783,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"4894:14:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5784,"name":"startPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"4911:10:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4894:27:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5786,"name":"sqrtPriceLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5775,"src":"4925:14:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5787,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4942:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_SQRT_RATIO","nodeType":"MemberAccess","referencedDeclaration":2198,"src":"4942:23:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4925:40:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4894:71:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4848:203:28"},{"expression":{"arguments":[{"id":5802,"name":"withinAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5781,"src":"5069:13:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"7371727450726963654c696d6974206f7574206f6620626f756e6473","id":5803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5084:30:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca4aaa3158dfd44db1a6eb12aade985c9fa4ae1a0cf109837acc0028275e4275","typeString":"literal_string \"sqrtPriceLimit out of bounds\""},"value":"sqrtPriceLimit out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ca4aaa3158dfd44db1a6eb12aade985c9fa4ae1a0cf109837acc0028275e4275","typeString":"literal_string \"sqrtPriceLimit out of bounds\""}],"id":5801,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5061:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5061:54:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5805,"nodeType":"ExpressionStatement","src":"5061:54:28"}]},"id":5807,"implemented":true,"kind":"function","modifiers":[],"name":"checkSqrtPriceLimitWithinAllowed","nodeType":"FunctionDefinition","parameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5773,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5807,"src":"4741:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5772,"name":"bool","nodeType":"ElementaryTypeName","src":"4741:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5775,"mutability":"mutable","name":"sqrtPriceLimit","nodeType":"VariableDeclaration","scope":5807,"src":"4766:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5774,"name":"uint160","nodeType":"ElementaryTypeName","src":"4766:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5777,"mutability":"mutable","name":"startPrice","nodeType":"VariableDeclaration","scope":5807,"src":"4799:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5776,"name":"uint160","nodeType":"ElementaryTypeName","src":"4799:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4731:92:28"},"returnParameters":{"id":5779,"nodeType":"ParameterList","parameters":[],"src":"4838:0:28"},"scope":5948,"src":"4690:432:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5862,"nodeType":"Block","src":"5350:503:28","statements":[{"expression":{"id":5833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":5824,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"5361:8:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5825,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"5371:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5826,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"5360:23:28","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$","typeString":"tuple(int24,bool)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5828,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5809,"src":"5419:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5829,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5811,"src":"5425:4:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5830,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"5431:11:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":5831,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5815,"src":"5444:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5827,"name":"nextInitializedTickWithinOneWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5924,"src":"5386:32:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_int24_$_t_int24_$_t_bool_$returns$_t_int24_$_t_bool_$","typeString":"function (address,int24,int24,bool) view returns (int24,bool)"}},"id":5832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5386:69:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_bool_$","typeString":"tuple(int24,bool)"}},"src":"5360:95:28","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5834,"nodeType":"ExpressionStatement","src":"5360:95:28"},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":5838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5835,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"5578:8:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5836,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5589:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_TICK","nodeType":"MemberAccess","referencedDeclaration":2189,"src":"5589:17:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5578:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5844,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"5667:8:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5845,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5678:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":2194,"src":"5678:17:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5667:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5853,"nodeType":"IfStatement","src":"5663:74:28","trueBody":{"expression":{"id":5851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5848,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"5709:8:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5849,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5720:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MAX_TICK","nodeType":"MemberAccess","referencedDeclaration":2194,"src":"5720:17:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5709:28:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5852,"nodeType":"ExpressionStatement","src":"5709:28:28"}},"id":5854,"nodeType":"IfStatement","src":"5574:163:28","trueBody":{"expression":{"id":5842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5839,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"5620:8:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5840,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5631:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"MIN_TICK","nodeType":"MemberAccess","referencedDeclaration":2189,"src":"5631:17:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"5620:28:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5843,"nodeType":"ExpressionStatement","src":"5620:28:28"}},{"expression":{"id":5860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5855,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"5790:16:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5858,"name":"tickNext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"5837:8:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"expression":{"id":5856,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"5809:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2716_$","typeString":"type(library TickMath)"}},"id":5857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getSqrtRatioAtTick","nodeType":"MemberAccess","referencedDeclaration":2576,"src":"5809:27:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":5859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5809:37:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"5790:56:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5861,"nodeType":"ExpressionStatement","src":"5790:56:28"}]},"id":5863,"implemented":true,"kind":"function","modifiers":[],"name":"nextInitializedTickAndPrice","nodeType":"FunctionDefinition","parameters":{"id":5816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5809,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5863,"src":"5174:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5808,"name":"address","nodeType":"ElementaryTypeName","src":"5174:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5811,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":5863,"src":"5197:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5810,"name":"int24","nodeType":"ElementaryTypeName","src":"5197:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5813,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":5863,"src":"5218:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5812,"name":"int24","nodeType":"ElementaryTypeName","src":"5218:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5815,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5863,"src":"5245:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5814,"name":"bool","nodeType":"ElementaryTypeName","src":"5245:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5164:102:28"},"returnParameters":{"id":5823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5818,"mutability":"mutable","name":"tickNext","nodeType":"VariableDeclaration","scope":5863,"src":"5290:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5817,"name":"int24","nodeType":"ElementaryTypeName","src":"5290:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5820,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":5863,"src":"5306:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5819,"name":"bool","nodeType":"ElementaryTypeName","src":"5306:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5822,"mutability":"mutable","name":"sqrtPriceNextX96","nodeType":"VariableDeclaration","scope":5863,"src":"5324:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5821,"name":"uint160","nodeType":"ElementaryTypeName","src":"5324:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"5289:60:28"},"scope":5948,"src":"5128:725:28","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5887,"nodeType":"Block","src":"6022:173:28","statements":[{"expression":{"condition":{"components":[{"condition":{"id":5874,"name":"zeroForOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5865,"src":"6040:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5878,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5867,"src":"6090:16:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5879,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6107:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"6090:34:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6040:84:28","trueExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5875,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5867,"src":"6053:16:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5876,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6070:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"6053:34:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5882,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6039:86:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5884,"name":"sqrtPriceNextX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5867,"src":"6172:16:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6039:149:28","trueExpression":{"id":5883,"name":"sqrtPriceLimitX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"6140:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":5873,"id":5886,"nodeType":"Return","src":"6032:156:28"}]},"id":5888,"implemented":true,"kind":"function","modifiers":[],"name":"getSqrtRatioTargetX96","nodeType":"FunctionDefinition","parameters":{"id":5870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5865,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5888,"src":"5899:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5864,"name":"bool","nodeType":"ElementaryTypeName","src":"5899:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5867,"mutability":"mutable","name":"sqrtPriceNextX96","nodeType":"VariableDeclaration","scope":5888,"src":"5924:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5866,"name":"uint160","nodeType":"ElementaryTypeName","src":"5924:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5869,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":5888,"src":"5958:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5868,"name":"uint160","nodeType":"ElementaryTypeName","src":"5958:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"5889:100:28"},"returnParameters":{"id":5873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5872,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5888,"src":"6013:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5871,"name":"uint160","nodeType":"ElementaryTypeName","src":"6013:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"6012:9:28"},"scope":5948,"src":"5859:336:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5895,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolGlobalState","nodeType":"FunctionDefinition","parameters":{"id":5891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5890,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5895,"src":"6229:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5889,"name":"address","nodeType":"ElementaryTypeName","src":"6229:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6228:14:28"},"returnParameters":{"id":5894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5893,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5895,"src":"6274:18:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_memory_ptr","typeString":"struct GlobalState"},"typeName":{"id":5892,"name":"GlobalState","nodeType":"UserDefinedTypeName","referencedDeclaration":5957,"src":"6274:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_GlobalState_$5957_storage_ptr","typeString":"struct GlobalState"}},"visibility":"internal"}],"src":"6273:20:28"},"scope":5948,"src":"6201:93:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":5902,"implemented":false,"kind":"function","modifiers":[],"name":"getLiquidity","nodeType":"FunctionDefinition","parameters":{"id":5898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5897,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5902,"src":"6326:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5896,"name":"address","nodeType":"ElementaryTypeName","src":"6326:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6325:14:28"},"returnParameters":{"id":5901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5900,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5902,"src":"6371:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":5899,"name":"uint128","nodeType":"ElementaryTypeName","src":"6371:7:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"6370:9:28"},"scope":5948,"src":"6304:76:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":5909,"implemented":false,"kind":"function","modifiers":[],"name":"getTickSpacing","nodeType":"FunctionDefinition","parameters":{"id":5905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5904,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5909,"src":"6410:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5903,"name":"address","nodeType":"ElementaryTypeName","src":"6410:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6409:14:28"},"returnParameters":{"id":5908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5907,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":5909,"src":"6455:5:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5906,"name":"int24","nodeType":"ElementaryTypeName","src":"6455:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"6454:7:28"},"scope":5948,"src":"6386:76:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":5924,"implemented":false,"kind":"function","modifiers":[],"name":"nextInitializedTickWithinOneWord","nodeType":"FunctionDefinition","parameters":{"id":5918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5911,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":5924,"src":"6523:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5910,"name":"address","nodeType":"ElementaryTypeName","src":"6523:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5913,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":5924,"src":"6552:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5912,"name":"int24","nodeType":"ElementaryTypeName","src":"6552:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5915,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":5924,"src":"6572:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5914,"name":"int24","nodeType":"ElementaryTypeName","src":"6572:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5917,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5924,"src":"6599:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5916,"name":"bool","nodeType":"ElementaryTypeName","src":"6599:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6513:107:28"},"returnParameters":{"id":5923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5920,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":5924,"src":"6652:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5919,"name":"int24","nodeType":"ElementaryTypeName","src":"6652:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5922,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":5924,"src":"6664:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5921,"name":"bool","nodeType":"ElementaryTypeName","src":"6664:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6651:30:28"},"scope":5948,"src":"6472:210:28","stateMutability":"view","virtual":true,"visibility":"internal"},{"id":5947,"implemented":false,"kind":"function","modifiers":[],"name":"getTicks","nodeType":"FunctionDefinition","parameters":{"id":5929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5926,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":5947,"src":"6710:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5925,"name":"address","nodeType":"ElementaryTypeName","src":"6710:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5928,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":5947,"src":"6724:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5927,"name":"int24","nodeType":"ElementaryTypeName","src":"6724:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"6709:26:28"},"returnParameters":{"id":5946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5931,"mutability":"mutable","name":"liquidityTotal","nodeType":"VariableDeclaration","scope":5947,"src":"6776:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":5930,"name":"uint128","nodeType":"ElementaryTypeName","src":"6776:7:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":5933,"mutability":"mutable","name":"liquidityDelta","nodeType":"VariableDeclaration","scope":5947,"src":"6808:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":5932,"name":"int128","nodeType":"ElementaryTypeName","src":"6808:6:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":5935,"mutability":"mutable","name":"outerFeeGrowth0Token","nodeType":"VariableDeclaration","scope":5947,"src":"6839:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5934,"name":"uint256","nodeType":"ElementaryTypeName","src":"6839:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5937,"mutability":"mutable","name":"outerFeeGrowth1Token","nodeType":"VariableDeclaration","scope":5947,"src":"6877:28:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5936,"name":"uint256","nodeType":"ElementaryTypeName","src":"6877:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5939,"mutability":"mutable","name":"outerTickCumulative","nodeType":"VariableDeclaration","scope":5947,"src":"6915:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":5938,"name":"int56","nodeType":"ElementaryTypeName","src":"6915:5:28","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":5941,"mutability":"mutable","name":"outerSecondsPerLiquidity","nodeType":"VariableDeclaration","scope":5947,"src":"6950:32:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5940,"name":"uint160","nodeType":"ElementaryTypeName","src":"6950:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5943,"mutability":"mutable","name":"outerSecondsSpent","nodeType":"VariableDeclaration","scope":5947,"src":"6992:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5942,"name":"uint32","nodeType":"ElementaryTypeName","src":"6992:6:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5945,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":5947,"src":"7026:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5944,"name":"bool","nodeType":"ElementaryTypeName","src":"7026:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6766:282:28"},"scope":5948,"src":"6692:357:28","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":5949,"src":"557:6495:28"}],"src":"45:7007:28"},"id":28},"contracts/interfaces/IUniV3likeQuoterCore.sol":{"ast":{"absolutePath":"contracts/interfaces/IUniV3likeQuoterCore.sol","exportedSymbols":{"GlobalState":[5957],"IUniV3likeQuoterCore":[5999],"StepComputations":[5983],"SwapState":[5968]},"id":6000,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5950,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:29"},{"canonicalName":"GlobalState","id":5957,"members":[{"constant":false,"id":5952,"mutability":"mutable","name":"startPrice","nodeType":"VariableDeclaration","scope":5957,"src":"95:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5951,"name":"uint160","nodeType":"ElementaryTypeName","src":"95:7:29","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5954,"mutability":"mutable","name":"startTick","nodeType":"VariableDeclaration","scope":5957,"src":"119:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5953,"name":"int24","nodeType":"ElementaryTypeName","src":"119:5:29","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5956,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":5957,"src":"140:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5955,"name":"uint16","nodeType":"ElementaryTypeName","src":"140:6:29","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"name":"GlobalState","nodeType":"StructDefinition","scope":6000,"src":"70:83:29","visibility":"public"},{"canonicalName":"SwapState","id":5968,"members":[{"constant":false,"id":5959,"mutability":"mutable","name":"amountSpecifiedRemaining","nodeType":"VariableDeclaration","scope":5968,"src":"345:31:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5958,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5961,"mutability":"mutable","name":"amountCalculated","nodeType":"VariableDeclaration","scope":5968,"src":"449:23:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5960,"name":"int256","nodeType":"ElementaryTypeName","src":"449:6:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5963,"mutability":"mutable","name":"sqrtPriceX96","nodeType":"VariableDeclaration","scope":5968,"src":"505:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5962,"name":"uint160","nodeType":"ElementaryTypeName","src":"505:7:29","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5965,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":5968,"src":"581:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5964,"name":"int24","nodeType":"ElementaryTypeName","src":"581:5:29","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5967,"mutability":"mutable","name":"liquidity","nodeType":"VariableDeclaration","scope":5968,"src":"635:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":5966,"name":"uint128","nodeType":"ElementaryTypeName","src":"635:7:29","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"SwapState","nodeType":"StructDefinition","scope":6000,"src":"247:408:29","visibility":"public"},{"canonicalName":"StepComputations","id":5983,"members":[{"constant":false,"id":5970,"mutability":"mutable","name":"sqrtPriceStartX96","nodeType":"VariableDeclaration","scope":5983,"src":"733:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5969,"name":"uint160","nodeType":"ElementaryTypeName","src":"733:7:29","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5972,"mutability":"mutable","name":"tickNext","nodeType":"VariableDeclaration","scope":5983,"src":"840:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5971,"name":"int24","nodeType":"ElementaryTypeName","src":"840:5:29","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":5974,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":5983,"src":"906:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5973,"name":"bool","nodeType":"ElementaryTypeName","src":"906:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5976,"mutability":"mutable","name":"sqrtPriceNextX96","nodeType":"VariableDeclaration","scope":5983,"src":"971:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5975,"name":"uint160","nodeType":"ElementaryTypeName","src":"971:7:29","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":5978,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":5983,"src":"1050:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5977,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5980,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":5983,"src":"1109:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5979,"name":"uint256","nodeType":"ElementaryTypeName","src":"1109:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5982,"mutability":"mutable","name":"feeAmount","nodeType":"VariableDeclaration","scope":5983,"src":"1169:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1169:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StepComputations","nodeType":"StructDefinition","scope":6000,"src":"657:532:29","visibility":"public"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5999,"linearizedBaseContracts":[5999],"name":"IUniV3likeQuoterCore","nodeType":"ContractDefinition","nodes":[{"functionSelector":"90405d36","id":5998,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nodeType":"FunctionDefinition","parameters":{"id":5992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5985,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":5998,"src":"1253:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5984,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5987,"mutability":"mutable","name":"zeroForOne","nodeType":"VariableDeclaration","scope":5998,"src":"1282:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5986,"name":"bool","nodeType":"ElementaryTypeName","src":"1282:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5989,"mutability":"mutable","name":"amountSpecified","nodeType":"VariableDeclaration","scope":5998,"src":"1307:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5988,"name":"int256","nodeType":"ElementaryTypeName","src":"1307:6:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5991,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":5998,"src":"1339:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5990,"name":"uint160","nodeType":"ElementaryTypeName","src":"1339:7:29","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1243:127:29"},"returnParameters":{"id":5997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5994,"mutability":"mutable","name":"amount0","nodeType":"VariableDeclaration","scope":5998,"src":"1394:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5993,"name":"int256","nodeType":"ElementaryTypeName","src":"1394:6:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5996,"mutability":"mutable","name":"amount1","nodeType":"VariableDeclaration","scope":5998,"src":"1410:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5995,"name":"int256","nodeType":"ElementaryTypeName","src":"1410:6:29","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1393:32:29"},"scope":5999,"src":"1229:197:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6000,"src":"1191:238:29"}],"src":"45:1384:29"},"id":29},"contracts/interfaces/IUniswapV3StaticQuoter.sol":{"ast":{"absolutePath":"contracts/interfaces/IUniswapV3StaticQuoter.sol","exportedSymbols":{"IUniswapV3StaticQuoter":[6061]},"id":6062,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":6001,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:30"},{"id":6002,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:30"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6061,"linearizedBaseContracts":[6061],"name":"IUniswapV3StaticQuoter","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6003,"nodeType":"StructuredDocumentation","src":"130:319:30","text":"@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received"},"functionSelector":"cdca1753","id":6012,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactInput","nodeType":"FunctionDefinition","parameters":{"id":6008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6005,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":6012,"src":"488:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6004,"name":"bytes","nodeType":"ElementaryTypeName","src":"488:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6007,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":6012,"src":"515:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6006,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"478:59:30"},"returnParameters":{"id":6011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6010,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":6012,"src":"561:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6009,"name":"uint256","nodeType":"ElementaryTypeName","src":"561:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"560:19:30"},"scope":6061,"src":"454:126:30","stateMutability":"view","virtual":false,"visibility":"external"},{"canonicalName":"IUniswapV3StaticQuoter.QuoteExactInputSingleParams","id":6023,"members":[{"constant":false,"id":6014,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":6023,"src":"631:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6013,"name":"address","nodeType":"ElementaryTypeName","src":"631:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6016,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":6023,"src":"656:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6015,"name":"address","nodeType":"ElementaryTypeName","src":"656:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6018,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":6023,"src":"682:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6017,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6020,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":6023,"src":"708:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":6019,"name":"uint24","nodeType":"ElementaryTypeName","src":"708:6:30","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":6022,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":6023,"src":"728:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":6021,"name":"uint160","nodeType":"ElementaryTypeName","src":"728:7:30","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"QuoteExactInputSingleParams","nodeType":"StructDefinition","scope":6061,"src":"586:174:30","visibility":"public"},{"documentation":{"id":6024,"nodeType":"StructuredDocumentation","src":"766:545:30","text":"@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountIn The desired input amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received"},"functionSelector":"c6a5026a","id":6031,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactInputSingle","nodeType":"FunctionDefinition","parameters":{"id":6027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6026,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":6031,"src":"1356:41:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"},"typeName":{"id":6025,"name":"QuoteExactInputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":6023,"src":"1356:27:30","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$6023_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams"}},"visibility":"internal"}],"src":"1346:57:30"},"returnParameters":{"id":6030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6029,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":6031,"src":"1427:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6028,"name":"uint256","nodeType":"ElementaryTypeName","src":"1427:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1426:19:30"},"scope":6061,"src":"1316:130:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6032,"nodeType":"StructuredDocumentation","src":"1452:317:30","text":"@notice Returns the amount in needed for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountOut The amount of the last token that would be received\n @return amountIn The amount of the first token to swap"},"functionSelector":"2f80bb1d","id":6041,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactOutput","nodeType":"FunctionDefinition","parameters":{"id":6037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6034,"mutability":"mutable","name":"path","nodeType":"VariableDeclaration","scope":6041,"src":"1809:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6033,"name":"bytes","nodeType":"ElementaryTypeName","src":"1809:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6036,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":6041,"src":"1836:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6035,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1799:60:30"},"returnParameters":{"id":6040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6039,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":6041,"src":"1883:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6038,"name":"uint256","nodeType":"ElementaryTypeName","src":"1883:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1882:18:30"},"scope":6061,"src":"1774:127:30","stateMutability":"view","virtual":false,"visibility":"external"},{"canonicalName":"IUniswapV3StaticQuoter.QuoteExactOutputSingleParams","id":6052,"members":[{"constant":false,"id":6043,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":6052,"src":"1953:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6042,"name":"address","nodeType":"ElementaryTypeName","src":"1953:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6045,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":6052,"src":"1978:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6044,"name":"address","nodeType":"ElementaryTypeName","src":"1978:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6047,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":6052,"src":"2004:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6046,"name":"uint256","nodeType":"ElementaryTypeName","src":"2004:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6049,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":6052,"src":"2028:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":6048,"name":"uint24","nodeType":"ElementaryTypeName","src":"2028:6:30","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":6051,"mutability":"mutable","name":"sqrtPriceLimitX96","nodeType":"VariableDeclaration","scope":6052,"src":"2048:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":6050,"name":"uint160","nodeType":"ElementaryTypeName","src":"2048:7:30","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"QuoteExactOutputSingleParams","nodeType":"StructDefinition","scope":6061,"src":"1907:173:30","visibility":"public"},{"documentation":{"id":6053,"nodeType":"StructuredDocumentation","src":"2086:542:30","text":"@notice Returns the amount in needed for a given exact output but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountOut The desired output amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount of `tokenIn` that would be needed"},"functionSelector":"bd21704a","id":6060,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactOutputSingle","nodeType":"FunctionDefinition","parameters":{"id":6056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6055,"mutability":"mutable","name":"params","nodeType":"VariableDeclaration","scope":6060,"src":"2674:42:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"},"typeName":{"id":6054,"name":"QuoteExactOutputSingleParams","nodeType":"UserDefinedTypeName","referencedDeclaration":6052,"src":"2674:28:30","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$6052_storage_ptr","typeString":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams"}},"visibility":"internal"}],"src":"2664:58:30"},"returnParameters":{"id":6059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6058,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":6060,"src":"2746:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6057,"name":"uint256","nodeType":"ElementaryTypeName","src":"2746:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2745:18:30"},"scope":6061,"src":"2633:131:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6062,"src":"91:2675:30"}],"src":"45:2722:30"},"id":30},"contracts/interfaces/IUniswapV3likePool.sol":{"ast":{"absolutePath":"contracts/interfaces/IUniswapV3likePool.sol","exportedSymbols":{"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683],"IUniswapV3likePool":[6072]},"id":6073,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":6063,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:31"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","id":6064,"nodeType":"ImportDirective","scope":6073,"sourceUnit":264,"src":"70:66:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6065,"name":"IUniswapV3Pool","nodeType":"UserDefinedTypeName","referencedDeclaration":263,"src":"170:14:31","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$263","typeString":"contract IUniswapV3Pool"}},"id":6066,"nodeType":"InheritanceSpecifier","src":"170:14:31"}],"contractDependencies":[263,359,390,509,549,575,683],"contractKind":"interface","fullyImplemented":false,"id":6072,"linearizedBaseContracts":[6072,263,509,575,359,390,683,549],"name":"IUniswapV3likePool","nodeType":"ContractDefinition","nodes":[{"functionSelector":"da3c300d","id":6071,"implemented":false,"kind":"function","modifiers":[],"name":"currentFee","nodeType":"FunctionDefinition","parameters":{"id":6067,"nodeType":"ParameterList","parameters":[],"src":"263:2:31"},"returnParameters":{"id":6070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6069,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":6071,"src":"289:6:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":6068,"name":"uint24","nodeType":"ElementaryTypeName","src":"289:6:31","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"288:8:31"},"scope":6072,"src":"244:53:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6073,"src":"138:161:31"}],"src":"45:255:31"},"id":31},"contracts/libraries/CustomizedPoolAddress.sol":{"ast":{"absolutePath":"contracts/libraries/CustomizedPoolAddress.sol","exportedSymbols":{"CustomizedPoolAddress":[6166]},"id":6167,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":6074,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:32"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":6075,"nodeType":"StructuredDocumentation","src":"71:96:32","text":"@title Provides functions for deriving a pool address from the factory, tokens, and the fee"},"fullyImplemented":true,"id":6166,"linearizedBaseContracts":[6166],"name":"CustomizedPoolAddress","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CustomizedPoolAddress.PoolKey","id":6082,"members":[{"constant":false,"id":6077,"mutability":"mutable","name":"token0","nodeType":"VariableDeclaration","scope":6082,"src":"276:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6076,"name":"address","nodeType":"ElementaryTypeName","src":"276:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6079,"mutability":"mutable","name":"token1","nodeType":"VariableDeclaration","scope":6082,"src":"300:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6078,"name":"address","nodeType":"ElementaryTypeName","src":"300:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6081,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":6082,"src":"324:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":6080,"name":"uint24","nodeType":"ElementaryTypeName","src":"324:6:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"name":"PoolKey","nodeType":"StructDefinition","scope":6166,"src":"251:90:32","visibility":"public"},{"body":{"id":6112,"nodeType":"Block","src":"806:141:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6094,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6085,"src":"820:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6095,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"829:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"820:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6105,"nodeType":"IfStatement","src":"816:56:32","trueBody":{"expression":{"id":6103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":6097,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6085,"src":"838:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6098,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"846:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6099,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"837:16:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":6100,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"857:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6101,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6085,"src":"865:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"856:16:32","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"src":"837:35:32","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6104,"nodeType":"ExpressionStatement","src":"837:35:32"}},{"expression":{"arguments":[{"id":6107,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6085,"src":"906:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6108,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"922:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6109,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"935:3:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":6106,"name":"PoolKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6082,"src":"889:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolKey_$6082_storage_ptr_$","typeString":"type(struct CustomizedPoolAddress.PoolKey storage pointer)"}},"id":6110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["token0","token1","fee"],"nodeType":"FunctionCall","src":"889:51:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}},"functionReturnParameters":6093,"id":6111,"nodeType":"Return","src":"882:58:32"}]},"documentation":{"id":6083,"nodeType":"StructuredDocumentation","src":"347:321:32","text":"@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"},"id":6113,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolKey","nodeType":"FunctionDefinition","parameters":{"id":6090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6085,"mutability":"mutable","name":"tokenA","nodeType":"VariableDeclaration","scope":6113,"src":"702:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6084,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6087,"mutability":"mutable","name":"tokenB","nodeType":"VariableDeclaration","scope":6113,"src":"726:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6086,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6089,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","scope":6113,"src":"750:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":6088,"name":"uint24","nodeType":"ElementaryTypeName","src":"750:6:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"692:74:32"},"returnParameters":{"id":6093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6092,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":6113,"src":"790:14:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey"},"typeName":{"id":6091,"name":"PoolKey","nodeType":"UserDefinedTypeName","referencedDeclaration":6082,"src":"790:7:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_storage_ptr","typeString":"struct CustomizedPoolAddress.PoolKey"}},"visibility":"internal"}],"src":"789:16:32"},"scope":6166,"src":"673:274:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6164,"nodeType":"Block","src":"1344:544:32","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6126,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"1362:3:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}},"id":6127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":6077,"src":"1362:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6128,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"1375:3:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}},"id":6129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":6079,"src":"1375:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1362:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6125,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1354:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1354:32:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6132,"nodeType":"ExpressionStatement","src":"1354:32:32"},{"expression":{"id":6162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6133,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6123,"src":"1396:4:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"ff","id":6143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"1559:7:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""}},{"id":6144,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"1596:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"expression":{"id":6148,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"1687:3:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}},"id":6149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token0","nodeType":"MemberAccess","referencedDeclaration":6077,"src":"1687:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6150,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"1699:3:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}},"id":6151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token1","nodeType":"MemberAccess","referencedDeclaration":6079,"src":"1699:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6152,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"1711:3:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey memory"}},"id":6153,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"fee","nodeType":"MemberAccess","referencedDeclaration":6081,"src":"1711:7:32","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":6146,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1676:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"1676:10:32","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1676:43:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6145,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1633:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1633:116:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6156,"name":"initCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6118,"src":"1779:12:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6141,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1513:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1513:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1513:304:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6140,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1478:9:32","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1478:361:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1449:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6138,"name":"uint256","nodeType":"ElementaryTypeName","src":"1449:7:32","typeDescriptions":{}}},"id":6159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1449:408:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1424:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6136,"name":"uint160","nodeType":"ElementaryTypeName","src":"1424:7:32","typeDescriptions":{}}},"id":6160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1424:447:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1403:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6134,"name":"address","nodeType":"ElementaryTypeName","src":"1403:7:32","typeDescriptions":{}}},"id":6161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1403:478:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1396:485:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6163,"nodeType":"ExpressionStatement","src":"1396:485:32"}]},"documentation":{"id":6114,"nodeType":"StructuredDocumentation","src":"953:236:32","text":"@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"},"id":6165,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nodeType":"FunctionDefinition","parameters":{"id":6121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6116,"mutability":"mutable","name":"factory","nodeType":"VariableDeclaration","scope":6165,"src":"1227:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6115,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6118,"mutability":"mutable","name":"initCodeHash","nodeType":"VariableDeclaration","scope":6165,"src":"1252:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1252:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6120,"mutability":"mutable","name":"key","nodeType":"VariableDeclaration","scope":6165,"src":"1282:18:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_memory_ptr","typeString":"struct CustomizedPoolAddress.PoolKey"},"typeName":{"id":6119,"name":"PoolKey","nodeType":"UserDefinedTypeName","referencedDeclaration":6082,"src":"1282:7:32","typeDescriptions":{"typeIdentifier":"t_struct$_PoolKey_$6082_storage_ptr","typeString":"struct CustomizedPoolAddress.PoolKey"}},"visibility":"internal"}],"src":"1217:89:32"},"returnParameters":{"id":6124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6123,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":6165,"src":"1330:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6122,"name":"address","nodeType":"ElementaryTypeName","src":"1330:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1329:14:32"},"scope":6166,"src":"1194:694:32","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6167,"src":"167:1723:32"}],"src":"45:1846:32"},"id":32},"contracts/libraries/TickBitmap.sol":{"ast":{"absolutePath":"contracts/libraries/TickBitmap.sol","exportedSymbols":{"BitMath":[962],"IUniswapV3Pool":[263],"IUniswapV3PoolActions":[359],"IUniswapV3PoolDerivedState":[390],"IUniswapV3PoolEvents":[509],"IUniswapV3PoolImmutables":[549],"IUniswapV3PoolOwnerActions":[575],"IUniswapV3PoolState":[683],"IUniswapV3likePool":[6072],"TickBitmap":[6386]},"id":6387,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":6168,"literals":["solidity","=","0.7",".6"],"nodeType":"PragmaDirective","src":"45:23:33"},{"absolutePath":"@uniswap/v3-core/contracts/libraries/BitMath.sol","file":"@uniswap/v3-core/contracts/libraries/BitMath.sol","id":6169,"nodeType":"ImportDirective","scope":6387,"sourceUnit":963,"src":"70:58:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IUniswapV3likePool.sol","file":"../interfaces/IUniswapV3likePool.sol","id":6170,"nodeType":"ImportDirective","scope":6387,"sourceUnit":6073,"src":"129:46:33","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":6171,"nodeType":"StructuredDocumentation","src":"177:243:33","text":"@title Packed tick initialized state library\n @notice Stores a packed mapping of tick index to its initialized state\n @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word."},"fullyImplemented":true,"id":6386,"linearizedBaseContracts":[6386],"name":"TickBitmap","nodeType":"ContractDefinition","nodes":[{"body":{"id":6199,"nodeType":"Block","src":"856:79:33","statements":[{"expression":{"id":6188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6181,"name":"wordPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"866:7:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6184,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6174,"src":"882:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":6185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"890:1:33","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"882:9:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":6183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"876:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":6182,"name":"int16","nodeType":"ElementaryTypeName","src":"876:5:33","typeDescriptions":{}}},"id":6187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"876:16:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"866:26:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":6189,"nodeType":"ExpressionStatement","src":"866:26:33"},{"expression":{"id":6197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6190,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6179,"src":"902:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6193,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6174,"src":"917:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"323536","id":6194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"924:3:33","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"917:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":6192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"911:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6191,"name":"uint8","nodeType":"ElementaryTypeName","src":"911:5:33","typeDescriptions":{}}},"id":6196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"911:17:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"902:26:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6198,"nodeType":"ExpressionStatement","src":"902:26:33"}]},"documentation":{"id":6172,"nodeType":"StructuredDocumentation","src":"445:325:33","text":"@notice Computes the position in the mapping where the initialized bit for a tick lives\n @param tick The tick for which to compute the position\n @return wordPos The key in the mapping containing the word in which the bit is stored\n @return bitPos The bit position in the word where the flag is stored"},"id":6200,"implemented":true,"kind":"function","modifiers":[],"name":"position","nodeType":"FunctionDefinition","parameters":{"id":6175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6174,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":6200,"src":"793:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":6173,"name":"int24","nodeType":"ElementaryTypeName","src":"793:5:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"792:12:33"},"returnParameters":{"id":6180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6177,"mutability":"mutable","name":"wordPos","nodeType":"VariableDeclaration","scope":6200,"src":"827:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":6176,"name":"int16","nodeType":"ElementaryTypeName","src":"827:5:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"},{"constant":false,"id":6179,"mutability":"mutable","name":"bitPos","nodeType":"VariableDeclaration","scope":6200,"src":"842:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6178,"name":"uint8","nodeType":"ElementaryTypeName","src":"842:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"826:29:33"},"scope":6386,"src":"775:160:33","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":6384,"nodeType":"Block","src":"1891:1796:33","statements":[{"assignments":[6217],"declarations":[{"constant":false,"id":6217,"mutability":"mutable","name":"pool","nodeType":"VariableDeclaration","scope":6384,"src":"1901:23:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"},"typeName":{"id":6216,"name":"IUniswapV3likePool","nodeType":"UserDefinedTypeName","referencedDeclaration":6072,"src":"1901:18:33","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"visibility":"internal"}],"id":6221,"initialValue":{"arguments":[{"id":6219,"name":"poolAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"1946:11:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6218,"name":"IUniswapV3likePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"1927:18:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3likePool_$6072_$","typeString":"type(contract IUniswapV3likePool)"}},"id":6220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1927:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"nodeType":"VariableDeclarationStatement","src":"1901:57:33"},{"assignments":[6223],"declarations":[{"constant":false,"id":6223,"mutability":"mutable","name":"compressed","nodeType":"VariableDeclaration","scope":6384,"src":"1968:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":6222,"name":"int24","nodeType":"ElementaryTypeName","src":"1968:5:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":6227,"initialValue":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6224,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"1987:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":6225,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"1994:11:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"1987:18:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"1968:37:33"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6228,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"2019:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":6229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2026:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2019:8:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6231,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"2031:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":6232,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"2038:11:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2031:18:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2053:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2031:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2019:35:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6240,"nodeType":"IfStatement","src":"2015:53:33","trueBody":{"expression":{"id":6238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"2056:12:33","subExpression":{"id":6237,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"2056:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":6239,"nodeType":"ExpressionStatement","src":"2056:12:33"}},{"condition":{"id":6241,"name":"lte","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6209,"src":"2118:3:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6382,"nodeType":"Block","src":"2856:825:33","statements":[{"assignments":[6309,6311],"declarations":[{"constant":false,"id":6309,"mutability":"mutable","name":"wordPos","nodeType":"VariableDeclaration","scope":6382,"src":"2968:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":6308,"name":"int16","nodeType":"ElementaryTypeName","src":"2968:5:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"},{"constant":false,"id":6311,"mutability":"mutable","name":"bitPos","nodeType":"VariableDeclaration","scope":6382,"src":"2983:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6310,"name":"uint8","nodeType":"ElementaryTypeName","src":"2983:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":6317,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6313,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"3008:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":6314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3021:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3008:14:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":6312,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"2999:8:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$","typeString":"function (int24) pure returns (int16,uint8)"}},"id":6316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2999:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int16_$_t_uint8_$","typeString":"tuple(int16,uint8)"}},"nodeType":"VariableDeclarationStatement","src":"2967:56:33"},{"assignments":[6319],"declarations":[{"constant":false,"id":6319,"mutability":"mutable","name":"mask","nodeType":"VariableDeclaration","scope":6382,"src":"3095:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6318,"name":"uint256","nodeType":"ElementaryTypeName","src":"3095:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6328,"initialValue":{"id":6327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3110:20:33","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3113:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":6321,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6311,"src":"3118:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3113:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3112:13:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3128:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3112:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3111:19:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3095:35:33"},{"assignments":[6330],"declarations":[{"constant":false,"id":6330,"mutability":"mutable","name":"masked","nodeType":"VariableDeclaration","scope":6382,"src":"3144:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6329,"name":"uint256","nodeType":"ElementaryTypeName","src":"3144:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6337,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6333,"name":"wordPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6309,"src":"3177:7:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int16","typeString":"int16"}],"expression":{"id":6331,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"3161:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":6332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickBitmap","nodeType":"MemberAccess","referencedDeclaration":652,"src":"3161:15:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_int16_$returns$_t_uint256_$","typeString":"function (int16) view external returns (uint256)"}},"id":6334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3161:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":6335,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"3188:4:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3161:31:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3144:48:33"},{"expression":{"id":6342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6338,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"3317:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6339,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6330,"src":"3331:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3341:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3331:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3317:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6343,"nodeType":"ExpressionStatement","src":"3317:25:33"},{"expression":{"id":6380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6344,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6212,"src":"3466:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":6345,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"3473:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6362,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"3607:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":6363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3620:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3607:14:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":6369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3635:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6368,"name":"uint8","nodeType":"ElementaryTypeName","src":"3635:5:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":6367,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3630:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3630:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":6371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3630:15:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6372,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6311,"src":"3648:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3630:24:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3624:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":6365,"name":"int24","nodeType":"ElementaryTypeName","src":"3624:5:33","typeDescriptions":{}}},"id":6374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3624:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3607:48:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":6376,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3606:50:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6377,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"3659:11:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3606:64:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":6379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3473:197:33","trueExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6346,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"3504:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":6347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3517:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3504:14:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6353,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6330,"src":"3555:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6351,"name":"BitMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"3527:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BitMath_$962_$","typeString":"type(library BitMath)"}},"id":6352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"leastSignificantBit","nodeType":"MemberAccess","referencedDeclaration":961,"src":"3527:27:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint8_$","typeString":"function (uint256) pure returns (uint8)"}},"id":6354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3527:35:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6355,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6311,"src":"3565:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3527:44:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3521:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":6349,"name":"int24","nodeType":"ElementaryTypeName","src":"3521:5:33","typeDescriptions":{}}},"id":6357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3521:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3504:68:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":6359,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3503:70:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6360,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"3576:11:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3503:84:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"3466:204:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":6381,"nodeType":"ExpressionStatement","src":"3466:204:33"}]},"id":6383,"nodeType":"IfStatement","src":"2114:1567:33","trueBody":{"id":6307,"nodeType":"Block","src":"2123:727:33","statements":[{"assignments":[6243,6245],"declarations":[{"constant":false,"id":6243,"mutability":"mutable","name":"wordPos","nodeType":"VariableDeclaration","scope":6307,"src":"2138:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":6242,"name":"int16","nodeType":"ElementaryTypeName","src":"2138:5:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"},{"constant":false,"id":6245,"mutability":"mutable","name":"bitPos","nodeType":"VariableDeclaration","scope":6307,"src":"2153:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6244,"name":"uint8","nodeType":"ElementaryTypeName","src":"2153:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":6249,"initialValue":{"arguments":[{"id":6247,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"2178:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":6246,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"2169:8:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_int16_$_t_uint8_$","typeString":"function (int24) pure returns (int16,uint8)"}},"id":6248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2169:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int16_$_t_uint8_$","typeString":"tuple(int16,uint8)"}},"nodeType":"VariableDeclarationStatement","src":"2137:52:33"},{"assignments":[6251],"declarations":[{"constant":false,"id":6251,"mutability":"mutable","name":"mask","nodeType":"VariableDeclaration","scope":6307,"src":"2270:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6250,"name":"uint256","nodeType":"ElementaryTypeName","src":"2270:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6263,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2286:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":6253,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"2291:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2286:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2285:13:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2301:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2285:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":6258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2306:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":6259,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"2311:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2306:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6261,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2305:13:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2285:33:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2270:48:33"},{"assignments":[6265],"declarations":[{"constant":false,"id":6265,"mutability":"mutable","name":"masked","nodeType":"VariableDeclaration","scope":6307,"src":"2332:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6264,"name":"uint256","nodeType":"ElementaryTypeName","src":"2332:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6272,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6268,"name":"wordPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"2365:7:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int16","typeString":"int16"}],"expression":{"id":6266,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"2349:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3likePool_$6072","typeString":"contract IUniswapV3likePool"}},"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tickBitmap","nodeType":"MemberAccess","referencedDeclaration":652,"src":"2349:15:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_int16_$returns$_t_uint256_$","typeString":"function (int16) view external returns (uint256)"}},"id":6269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2349:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":6270,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"2376:4:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2349:31:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2332:48:33"},{"expression":{"id":6277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6273,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"2513:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6274,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6265,"src":"2527:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2513:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6278,"nodeType":"ExpressionStatement","src":"2513:25:33"},{"expression":{"id":6305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6279,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6212,"src":"2662:4:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":6280,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"2669:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6295,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"2798:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":6298,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"2817:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2811:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":6296,"name":"int24","nodeType":"ElementaryTypeName","src":"2811:5:33","typeDescriptions":{}}},"id":6299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2811:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2798:26:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":6301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2797:28:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6302,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"2828:11:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2797:42:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":6304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2669:170:33","trueExpression":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":6291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6281,"name":"compressed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"2700:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":6289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6284,"name":"bitPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"2719:6:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":6287,"name":"masked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6265,"src":"2755:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6285,"name":"BitMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2728:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BitMath_$962_$","typeString":"type(library BitMath)"}},"id":6286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mostSignificantBit","nodeType":"MemberAccess","referencedDeclaration":800,"src":"2728:26:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint8_$","typeString":"function (uint256) pure returns (uint8)"}},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2719:43:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2713:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":6282,"name":"int24","nodeType":"ElementaryTypeName","src":"2713:5:33","typeDescriptions":{}}},"id":6290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2713:50:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2700:63:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"id":6292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2699:65:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6293,"name":"tickSpacing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"2767:11:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2699:79:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"2662:177:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":6306,"nodeType":"ExpressionStatement","src":"2662:177:33"}]}}]},"documentation":{"id":6201,"nodeType":"StructuredDocumentation","src":"941:750:33","text":"@notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n to the left (less than or equal to) or right (greater than) of the given tick\n @param poolAddress Pool containing the mapping in which to compute the next initialized tick\n @param tick The starting tick\n @param tickSpacing The spacing between usable ticks\n @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks"},"id":6385,"implemented":true,"kind":"function","modifiers":[],"name":"nextInitializedTickWithinOneWord","nodeType":"FunctionDefinition","parameters":{"id":6210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6203,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":6385,"src":"1747:19:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6202,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6205,"mutability":"mutable","name":"tick","nodeType":"VariableDeclaration","scope":6385,"src":"1776:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":6204,"name":"int24","nodeType":"ElementaryTypeName","src":"1776:5:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":6207,"mutability":"mutable","name":"tickSpacing","nodeType":"VariableDeclaration","scope":6385,"src":"1796:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":6206,"name":"int24","nodeType":"ElementaryTypeName","src":"1796:5:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":6209,"mutability":"mutable","name":"lte","nodeType":"VariableDeclaration","scope":6385,"src":"1823:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6208,"name":"bool","nodeType":"ElementaryTypeName","src":"1823:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1737:100:33"},"returnParameters":{"id":6215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6212,"mutability":"mutable","name":"next","nodeType":"VariableDeclaration","scope":6385,"src":"1861:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":6211,"name":"int24","nodeType":"ElementaryTypeName","src":"1861:5:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":6214,"mutability":"mutable","name":"initialized","nodeType":"VariableDeclaration","scope":6385,"src":"1873:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6213,"name":"bool","nodeType":"ElementaryTypeName","src":"1873:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1860:30:33"},"scope":6386,"src":"1696:1991:33","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":6387,"src":"420:3269:33"}],"src":"45:3644:33"},"id":33}},"contracts":{"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"IUniswapV2Pair":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},{"internalType":"uint112","name":"reserve1","type":"uint112"},{"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","MINIMUM_LIQUIDITY()":"ba9a7a56","PERMIT_TYPEHASH()":"30adf81f","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address)":"89afcb44","decimals()":"313ce567","factory()":"c45a0155","getReserves()":"0902f1ac","initialize(address,address)":"485cc955","kLast()":"7464fc3d","mint(address)":"6a627842","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","price0CumulativeLast()":"5909c0d5","price1CumulativeLast()":"5a3d5493","skim(address)":"bc25cf77","swap(uint256,uint256,address,bytes)":"022c0d9f","symbol()":"95d89b41","sync()":"fff6cae9","token0()":"0dfe1681","token1()":"d21220a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"IUniswapV3Pool":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The pool interface is broken up into many smaller pieces","kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"The interface for a Uniswap V3 Pool","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","collectProtocol(address,uint128,uint128)":"85b66729","factory()":"c45a0155","fee()":"ddca3f43","feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","liquidity()":"1a686502","maxLiquidityPerTick()":"70cf754a","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","observations(uint256)":"252c09d7","observe(uint32[])":"883bdbfd","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","setFeeProtocol(uint8,uint8)":"8206a4d1","slot0()":"3850c7bd","snapshotCumulativesInside(int24,int24)":"a38807f2","swap(address,bool,int256,uint160,bytes)":"128acb08","tickBitmap(int16)":"5339c296","tickSpacing()":"d0c93a7c","ticks(int24)":"f30dba93","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"tickSpacing()":{"notice":"The pool tick spacing"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"IUniswapV3PoolActions":{"abi":[{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}}},"title":"Permissionless pool actions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","swap(address,bool,int256,uint160,bytes)":"128acb08"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"}},"notice":"Contains pool methods that can be called by anyone","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"IUniswapV3PoolDerivedState":{"abi":[{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}}},"title":"Pool state that is not stored","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"observe(uint32[])":"883bdbfd","snapshotCumulativesInside(int24,int24)":"a38807f2"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"}},"notice":"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"IUniswapV3PoolEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"}],"devdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"details":"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect","params":{"amount":"The amount of liquidity to remove","amount0":"The amount of token0 withdrawn","amount1":"The amount of token1 withdrawn","owner":"The owner of the position for which liquidity is removed","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"Collect(address,address,int24,int24,uint128,uint128)":{"details":"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees","params":{"amount0":"The amount of token0 fees collected","amount1":"The amount of token1 fees collected","owner":"The owner of the position for which fees are collected","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"CollectProtocol(address,address,uint128,uint128)":{"params":{"amount0":"The amount of token1 protocol fees that is withdrawn","recipient":"The address that receives the collected protocol fees","sender":"The address that collects the protocol fees"}},"Flash(address,address,uint256,uint256,uint256,uint256)":{"params":{"amount0":"The amount of token0 that was flashed","amount1":"The amount of token1 that was flashed","paid0":"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee","paid1":"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee","recipient":"The address that received the tokens from flash","sender":"The address that initiated the swap call, and that received the callback"}},"IncreaseObservationCardinalityNext(uint16,uint16)":{"details":"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.","params":{"observationCardinalityNextNew":"The updated value of the next observation cardinality","observationCardinalityNextOld":"The previous value of the next observation cardinality"}},"Initialize(uint160,int24)":{"details":"Mint/Burn/Swap cannot be emitted by the pool before Initialize","params":{"sqrtPriceX96":"The initial sqrt price of the pool, as a Q64.96","tick":"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"}},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"params":{"amount":"The amount of liquidity minted to the position range","amount0":"How much token0 was required for the minted liquidity","amount1":"How much token1 was required for the minted liquidity","owner":"The owner of the position and recipient of any minted liquidity","sender":"The address that minted the liquidity","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"params":{"feeProtocol0New":"The updated value of the token0 protocol fee","feeProtocol0Old":"The previous value of the token0 protocol fee","feeProtocol1New":"The updated value of the token1 protocol fee","feeProtocol1Old":"The previous value of the token1 protocol fee"}},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"params":{"amount0":"The delta of the token0 balance of the pool","amount1":"The delta of the token1 balance of the pool","liquidity":"The liquidity of the pool after the swap","recipient":"The address that received the output of the swap","sender":"The address that initiated the swap call, and that received the callback","sqrtPriceX96":"The sqrt(price) of the pool after the swap, as a Q64.96","tick":"The log base 1.0001 of price of the pool after the swap"}}},"kind":"dev","methods":{},"title":"Events emitted by a pool","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{},"notice":"Contains all events emitted by the pool","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"IUniswapV3PoolImmutables":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"Pool state that never changes","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"These parameters are fixed for a pool forever, i.e., the methods will always return the same values","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"IUniswapV3PoolOwnerActions":{"abi":[{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}}},"title":"Permissioned pool actions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"collectProtocol(address,uint128,uint128)":"85b66729","setFeeProtocol(uint8,uint8)":"8206a4d1"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"}},"notice":"Contains pool methods that may only be called by the factory owner","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"IUniswapV3PoolState":{"abi":[{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}}},"title":"Pool state that can change","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","liquidity()":"1a686502","observations(uint256)":"252c09d7","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","slot0()":"3850c7bd","tickBitmap(int16)":"5339c296","ticks(int24)":"f30dba93"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"}},"notice":"These methods compose the pool's state, and can change with any frequency including multiple times per transaction","version":1}}},"@uniswap/v3-core/contracts/libraries/BitMath.sol":{"BitMath":{"abi":[],"devdoc":{"details":"This library provides functionality for computing bit properties of an unsigned integer","kind":"dev","methods":{},"title":"BitMath","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206758f24e74eb96a286a07546c1451883142808b498f3de831a16f8c0ee2ac8a464736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x58F24E74EB96A286 LOG0 PUSH22 0x46C1451883142808B498F3DE831A16F8C0EE2AC8A464 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"187:2602:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206758f24e74eb96a286a07546c1451883142808b498f3de831a16f8c0ee2ac8a464736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x58F24E74EB96A286 LOG0 PUSH22 0x46C1451883142808B498F3DE831A16F8C0EE2AC8A464 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"187:2602:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"leastSignificantBit(uint256)":"infinite","mostSignificantBit(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides functionality for computing bit properties of an unsigned integer\",\"kind\":\"dev\",\"methods\":{},\"title\":\"BitMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":\"BitMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol":{"FixedPoint128":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"FixedPoint128","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220378529c70a0168279da77b02d6dc2c411fd49eb9c5a380aa1e31d96cb765ab8964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY DUP6 0x29 0xC7 EXP ADD PUSH9 0x279DA77B02D6DC2C41 0x1F 0xD4 SWAP15 0xB9 0xC5 LOG3 DUP1 0xAA 0x1E BALANCE 0xD9 PUSH13 0xB765AB8964736F6C6343000706 STOP CALLER ","sourceMap":"211:99:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220378529c70a0168279da77b02d6dc2c411fd49eb9c5a380aa1e31d96cb765ab8964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY DUP6 0x29 0xC7 EXP ADD PUSH9 0x279DA77B02D6DC2C41 0x1F 0xD4 SWAP15 0xB9 0xC5 LOG3 DUP1 0xAA 0x1E BALANCE 0xD9 PUSH13 0xB765AB8964736F6C6343000706 STOP CALLER ","sourceMap":"211:99:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint128\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":\"FixedPoint128\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)","version":1}}},"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol":{"FixedPoint96":{"abi":[],"devdoc":{"details":"Used in SqrtPriceMath.sol","kind":"dev","methods":{},"title":"FixedPoint96","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122031a0ef230a7a6dfc3371716490fc3fb4f73fdc3735c09c61c1dddf33b7f0a6cc64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE LOG0 0xEF 0x23 EXP PUSH27 0x6DFC3371716490FC3FB4F73FDC3735C09C61C1DDDF33B7F0A6CC64 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"245:134:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122031a0ef230a7a6dfc3371716490fc3fb4f73fdc3735c09c61c1dddf33b7f0a6cc64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE LOG0 0xEF 0x23 EXP PUSH27 0x6DFC3371716490FC3FB4F73FDC3735C09C61C1DDDF33B7F0A6CC64 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"245:134:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Used in SqrtPriceMath.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint96\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":\"FixedPoint96\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)","version":1}}},"@uniswap/v3-core/contracts/libraries/FullMath.sol":{"FullMath":{"abi":[],"devdoc":{"details":"Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits","kind":"dev","methods":{},"title":"Contains 512-bit math functions","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052618bc0e7a68dc79dd9b919742ff691d06ed4121d58673aefba874cf9151d7b64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE PUSH2 0x8BC0 0xE7 0xA6 DUP14 0xC7 SWAP14 0xD9 0xB9 NOT PUSH21 0x2FF691D06ED4121D58673AEFBA874CF9151D7B6473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"362:4762:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052618bc0e7a68dc79dd9b919742ff691d06ed4121d58673aefba874cf9151d7b64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE PUSH2 0x8BC0 0xE7 0xA6 DUP14 0xC7 SWAP14 0xD9 0xB9 NOT PUSH21 0x2FF691D06ED4121D58673AEFBA874CF9151D7B6473 PUSH16 0x6C634300070600330000000000000000 ","sourceMap":"362:4762:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"mulDiv(uint256,uint256,uint256)":"infinite","mulDivRoundingUp(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision","version":1}}},"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol":{"LiquidityMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Math library for liquidity","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a164947e29291846cd252bdc98ab74904a29328a98f5b1e77f6c829de9fcc8a64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 AND 0x49 SELFBALANCE 0xE2 SWAP3 SWAP2 DUP5 PUSH13 0xD252BDC98AB74904A29328A98F JUMPDEST 0x1E PUSH24 0xF6C829DE9FCC8A64736F6C63430007060033000000000000 ","sourceMap":"109:512:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a164947e29291846cd252bdc98ab74904a29328a98f5b1e77f6c829de9fcc8a64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 AND 0x49 SELFBALANCE 0xE2 SWAP3 SWAP2 DUP5 PUSH13 0xD252BDC98AB74904A29328A98F JUMPDEST 0x1E PUSH24 0xF6C829DE9FCC8A64736F6C63430007060033000000000000 ","sourceMap":"109:512:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"addDelta(uint128,int128)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math library for liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":\"LiquidityMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol":{"LowGasSafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Optimized overflow and underflow safe math operations","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dcf343a47861eafa68a7a124766049596e9ea5370a4824ee614e5c699abec24d64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC RETURN NUMBER LOG4 PUSH25 0x61EAFA68A7A124766049596E9EA5370A4824EE614E5C699ABE 0xC2 0x4D PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"249:1446:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dcf343a47861eafa68a7a124766049596e9ea5370a4824ee614e5c699abec24d64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC RETURN NUMBER LOG4 PUSH25 0x61EAFA68A7A124766049596E9EA5370A4824EE614E5C699ABE 0xC2 0x4D PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"249:1446:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(int256,int256)":"infinite","add(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(int256,int256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost","version":1}}},"@uniswap/v3-core/contracts/libraries/SafeCast.sol":{"SafeCast":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Safe casting methods","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7bb228bab5b2c71e439ae2d91d260c7e46811f3e2288086c25ea7c3237c934e64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xBB 0x22 DUP12 0xAB JUMPDEST 0x2C PUSH18 0xE439AE2D91D260C7E46811F3E2288086C25E 0xA7 0xC3 0x23 PUSH29 0x934E64736F6C6343000706003300000000000000000000000000000000 ","sourceMap":"165:882:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7bb228bab5b2c71e439ae2d91d260c7e46811f3e2288086c25ea7c3237c934e64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xBB 0x22 DUP12 0xAB JUMPDEST 0x2C PUSH18 0xE439AE2D91D260C7E46811F3E2288086C25E 0xA7 0xC3 0x23 PUSH29 0x934E64736F6C6343000706003300000000000000000000000000000000 ","sourceMap":"165:882:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toInt128(int256)":"infinite","toInt256(uint256)":"infinite","toUint160(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods for safely casting between types","version":1}}},"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol":{"SqrtPriceMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Functions based on Q64.96 sqrt price and liquidity","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202fbc291b2db56407b28cfba6d140eaa80629dd7862065d89bb80e32cc34f1fc964736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0xBC 0x29 SHL 0x2D 0xB5 PUSH5 0x7B28CFBA6 0xD1 BLOCKHASH 0xEA 0xA8 MOD 0x29 0xDD PUSH25 0x62065D89BB80E32CC34F1FC964736F6C634300070600330000 ","sourceMap":"369:10404:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202fbc291b2db56407b28cfba6d140eaa80629dd7862065d89bb80e32cc34f1fc964736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0xBC 0x29 SHL 0x2D 0xB5 PUSH5 0x7B28CFBA6 0xD1 BLOCKHASH 0xEA 0xA8 MOD 0x29 0xDD PUSH25 0x62065D89BB80E32CC34F1FC964736F6C634300070600330000 ","sourceMap":"369:10404:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAmount0Delta(uint160,uint160,int128)":"infinite","getAmount0Delta(uint160,uint160,uint128,bool)":"infinite","getAmount1Delta(uint160,uint160,int128)":"infinite","getAmount1Delta(uint160,uint160,uint128,bool)":"infinite","getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool)":"infinite","getNextSqrtPriceFromAmount1RoundingDown(uint160,uint128,uint256,bool)":"infinite","getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)":"infinite","getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Functions based on Q64.96 sqrt price and liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":\"SqrtPriceMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas","version":1}}},"@uniswap/v3-core/contracts/libraries/SwapMath.sol":{"SwapMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Computes the result of a swap within ticks","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf66d2ca10dc6c3c1cd35fcd96c2f83f26fc851e9df3e5a10af16ffc18f6ae1c64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF PUSH7 0xD2CA10DC6C3C1C 0xD3 0x5F 0xCD SWAP7 0xC2 0xF8 EXTCODEHASH 0x26 0xFC DUP6 0x1E SWAP14 RETURN 0xE5 LOG1 EXP CALL PUSH16 0xFC18F6AE1C64736F6C63430007060033 ","sourceMap":"292:4340:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf66d2ca10dc6c3c1cd35fcd96c2f83f26fc851e9df3e5a10af16ffc18f6ae1c64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF PUSH7 0xD2CA10DC6C3C1C 0xD3 0x5F 0xCD SWAP7 0xC2 0xF8 EXTCODEHASH 0x26 0xFC DUP6 0x1E SWAP14 RETURN 0xE5 LOG1 EXP CALL PUSH16 0xFC18F6AE1C64736F6C63430007060033 ","sourceMap":"292:4340:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"computeSwapStep(uint160,uint160,uint128,int256,uint24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Computes the result of a swap within ticks\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":\"SwapMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.","version":1}}},"@uniswap/v3-core/contracts/libraries/TickMath.sol":{"TickMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"MAX_SQRT_RATIO":{"details":"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"MAX_TICK":{"details":"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"MIN_SQRT_RATIO":{"details":"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"MIN_TICK":{"details":"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"}},"title":"Math library for computing sqrt prices from ticks and vice versa","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220183eeca62cf048114e82af4b711e7c01f48e33581817e9ebb9805bf938c8aca164736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR RETURNDATACOPY 0xEC 0xA6 0x2C CREATE 0x48 GT 0x4E DUP3 0xAF 0x4B PUSH18 0x1E7C01F48E33581817E9EBB9805BF938C8AC LOG1 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"313:8331:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220183eeca62cf048114e82af4b711e7c01f48e33581817e9ebb9805bf938c8aca164736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR RETURNDATACOPY 0xEC 0xA6 0x2C CREATE 0x48 GT 0x4E DUP3 0xAF 0x4B PUSH18 0x1E7C01F48E33581817E9EBB9805BF938C8AC LOG1 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"313:8331:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getSqrtRatioAtTick(int24)":"infinite","getTickAtSqrtRatio(uint160)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128","version":1}}},"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol":{"UnsafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Math functions that do not check inputs or outputs","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201844b176e6bd4cb0165964a7275c648a290043fdf71b1c09fc2f0cabaac946cc64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR DIFFICULTY 0xB1 PUSH23 0xE6BD4CB0165964A7275C648A290043FDF71B1C09FC2F0C 0xAB 0xAA 0xC9 CHAINID 0xCC PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"244:415:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201844b176e6bd4cb0165964a7275c648a290043fdf71b1c09fc2f0cabaac946cc64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR DIFFICULTY 0xB1 PUSH23 0xE6BD4CB0165964A7275C648A290043FDF71B1C09FC2F0C 0xAB 0xAA 0xC9 CHAINID 0xCC PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"244:415:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"divRoundingUp(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math functions that do not check inputs or outputs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods that perform common math functions but do not do any overflow or underflow checks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":\"UnsafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Contains methods that perform common math functions but do not do any overflow or underflow checks","version":1}}},"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol":{"PeripheryImmutableState":{"abi":[{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"WETH9":{"return":"Returns the address of WETH9"},"factory":{"return":"Returns the address of the Uniswap V3 factory"}},"title":"Immutable state","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"WETH9()":"4aa4a4fc","factory()":"c45a0155"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '../interfaces/IPeripheryImmutableState.sol';\\n\\n/// @title Immutable state\\n/// @notice Immutable state used by periphery contracts\\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override factory;\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override WETH9;\\n\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n}\\n\",\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Immutable state used by periphery contracts","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol":{"IPeripheryImmutableState":{"abi":[{"inputs":[],"name":"WETH9","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"WETH9()":{"returns":{"_0":"Returns the address of WETH9"}},"factory()":{"returns":{"_0":"Returns the address of the Uniswap V3 factory"}}},"title":"Immutable state","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"WETH9()":"4aa4a4fc","factory()":"c45a0155"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Functions that return immutable state of the router","version":1}}},"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol":{"BytesLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083ebb06a1e67d28c0be9a175016f4f9e0c7b709e844e6f0d2e27f143150266b164736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xEB 0xB0 PUSH11 0x1E67D28C0BE9A175016F4F SWAP15 0xC PUSH28 0x709E844E6F0D2E27F143150266B164736F6C63430007060033000000 ","sourceMap":"376:3825:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083ebb06a1e67d28c0be9a175016f4f9e0c7b709e844e6f0d2e27f143150266b164736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xEB 0xB0 PUSH11 0x1E67D28C0BE9A175016F4F SWAP15 0xC PUSH28 0x709E844E6F0D2E27F143150266B164736F6C63430007060033000000 ","sourceMap":"376:3825:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"slice(bytes memory,uint256,uint256)":"infinite","toAddress(bytes memory,uint256)":"infinite","toUint24(bytes memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-periphery/contracts/libraries/Path.sol":{"Path":{"abi":[],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"ADDR_SIZE":{"details":"The length of the bytes encoded address"},"FEE_SIZE":{"details":"The length of the bytes encoded fee"},"MULTIPLE_POOLS_MIN_LENGTH":{"details":"The minimum length of an encoding that contains 2 or more pools"},"NEXT_OFFSET":{"details":"The offset of a single token address and pool fee"},"POP_OFFSET":{"details":"The offset of an encoded pool key"}},"title":"Functions for manipulating path data for multihop swaps","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122097d036a52f56afc5d9384d893f6edabb5530dbe0b162b315414930bddf62751b64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 0xD0 CALLDATASIZE 0xA5 0x2F JUMP 0xAF 0xC5 0xD9 CODESIZE 0x4D DUP10 EXTCODEHASH PUSH15 0xDABB5530DBE0B162B315414930BDDF PUSH3 0x751B64 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"164:2622:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122097d036a52f56afc5d9384d893f6edabb5530dbe0b162b315414930bddf62751b64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 0xD0 CALLDATASIZE 0xA5 0x2F JUMP 0xAF 0xC5 0xD9 CODESIZE 0x4D DUP10 EXTCODEHASH PUSH15 0xDABB5530DBE0B162B315414930BDDF PUSH3 0x751B64 PUSH20 0x6F6C634300070600330000000000000000000000 ","sourceMap":"164:2622:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"decodeFirstPool(bytes memory)":"infinite","getFirstPool(bytes memory)":"infinite","hasMultiplePools(bytes memory)":"infinite","numPools(bytes memory)":"infinite","skipToken(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"MULTIPLE_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_OFFSET\":{\"details\":\"The offset of a single token address and pool fee\"},\"POP_OFFSET\":{\"details\":\"The offset of an encoded pool key\"}},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":\"Path\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/StaticQuoter.sol":{"StaticQuoter":{"abi":[{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"}],"name":"decodePath","outputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint8","name":"poolType","type":"uint8"},{"internalType":"uint8","name":"feePercent","type":"uint8"},{"internalType":"uint8","name":"maxPercent","type":"uint8"}],"internalType":"struct StaticQuoter.Route[]","name":"","type":"tuple[]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint8","name":"feePercent","type":"uint8"},{"internalType":"uint8","name":"maxPercent","type":"uint8"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"getAmountInV2","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"getAmountInV3","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint8","name":"feePercent","type":"uint8"},{"internalType":"uint8","name":"maxPercent","type":"uint8"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOutV2","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOutV3","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50612c49806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c806377cd49e41161005b57806377cd49e4146100fb57806390405d361461010e57806397de0a841461012f578063c25ddce01461014257610087565b8062614b2e1461008c5780632d0f9a30146100b557806353201a4c146100d55780636e95d3d8146100e8575b600080fd5b61009f61009a366004612a4b565b610162565b6040516100ac9190612b6d565b60405180910390f35b6100c86100c33660046127ca565b6102f6565b6040516100ac9190612bbf565b6100c86100e336600461281a565b6104b2565b6100c86100f63660046127ca565b6106d2565b61009f610109366004612a4b565b61087b565b61012161011c366004612892565b610a07565b6040516100ac929190612bb1565b6100c861013d36600461281a565b610cc5565b610155610150366004612a18565b610ed1565b6040516100ac9190612adc565b606060008380602001905181019061017a91906128e8565b90506000815167ffffffffffffffff8111801561019657600080fd5b506040519080825280602002602001820160405280156101c0578160200160208202803683370190505b508251909150600019015b8281815181106101d757fe5b60200260200101516060015160ff16600014156102765761026f8382815181106101fd57fe5b60200260200101516000015184838151811061021557fe5b60200260200101516020015185848151811061022d57fe5b60200260200101516040015186858151811061024557fe5b60200260200101516080015187868151811061025d57fe5b602002602001015160a001518a6104b2565b94506102ca565b6102c783828151811061028557fe5b60200260200101516000015184838151811061029d57fe5b6020026020010151602001518584815181106102b557fe5b602002602001015160400151886106d2565b94505b848282815181106102d757fe5b6020908102919091010152600019016101cb565b509150505b92915050565b60008281806001600160a01b0380881690891610610315578688610318565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039791906127ae565b6001600160a01b031614158061042f5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042391906127ae565b6001600160a01b031614155b1561044057600093505050506104aa565b6001600160a01b038088169089161060008061048a89846104608b610eef565b8661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b6401000276a4610a07565b915091508261049c57816000036104a1565b806000035b96505050505050505b949350505050565b60008481806001600160a01b03808a16908b16106104d157888a6104d4565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906127ae565b6001600160a01b03161415806105eb5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df91906127ae565b6001600160a01b031614155b156105fc57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b0316106106aa5782846106ad565b83835b915091506106be8983838e8e610f05565b9750505050505050505b9695505050505050565b60008281806001600160a01b03808816908916106106f15786886106f4565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906127ae565b6001600160a01b031614158061080b5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906127ae565b6001600160a01b031614155b1561081c57600093505050506104aa565b6001600160a01b038088169089161060008061085e898461083c8b610eef565b6000038661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b915091508261086d57806104a1565b509998505050505050505050565b606060008380602001905181019061089391906128e8565b90506000815167ffffffffffffffff811180156108af57600080fd5b506040519080825280602002602001820160405280156108d9578160200160208202803683370190505b50905060005b82518110156102eb578281815181106108f457fe5b60200260200101516060015160ff16600014156109935761098c83828151811061091a57fe5b60200260200101516000015184838151811061093257fe5b60200260200101516020015185848151811061094a57fe5b60200260200101516040015186858151811061096257fe5b60200260200101516080015187868151811061097a57fe5b602002602001015160a001518a610cc5565b94506109e7565b6109e48382815181106109a257fe5b6020026020010151600001518483815181106109ba57fe5b6020026020010151602001518584815181106109d257fe5b602002602001015160400151886102f6565b94505b848282815181106109f457fe5b60209081029190910101526001016108df565b60008083610a5c576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b6000808513908080610a708a8a8a8a610f7f565b9250925092505b805115801590610a9d5750866001600160a01b031681604001516001600160a01b031614155b15610c8e57610aaa612692565b60408201516001600160a01b031681526060820151610acc908c90868d611012565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b602084015290830151610b1a91610b09908d908c61106f565b6080850151855161ffff88166110bc565b60c085015260a084015260808301526001600160a01b031660408301528415610b7c57610b508160c00151826080015101610eef565b825103825260a0810151610b7290610b6790610eef565b6020840151906112ae565b6020830152610bb7565b610b898160a00151610eef565b825101825260c08101516080820151610bb191610ba69101610eef565b6020840151906112c4565b60208301525b80606001516001600160a01b031682604001516001600160a01b03161415610c4d57806040015115610c24576000610bf38c83602001516112da565b5050505050509150508a15610c06576000035b610c148360800151826113a1565b6001600160801b03166080840152505b89610c33578060200151610c3c565b60018160200151035b600290810b900b6060830152610c88565b80600001516001600160a01b031682604001516001600160a01b031614610c8857610c7b8260400151611457565b600290810b900b60608301525b50610a77565b83151589151514610ca757602081015181518903610cb4565b8060000151880381602001515b909b909a5098505050505050505050565b60008481806001600160a01b03808a16908b1610610ce457888a610ce7565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906127ae565b6001600160a01b0316141580610dfe5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df291906127ae565b6001600160a01b031614155b15610e0f57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b031610610ebd578284610ec0565b83835b915091506106be8983838e8e611776565b606081806020019051810190610ee791906128e8565b90505b919050565b6000600160ff1b8210610f0157600080fd5b5090565b600085610f1457506000610f76565b841580610f1f575083155b15610f2c57506000610f76565b6000610f4560ff8416610f3f888a6117ee565b906117ee565b90506000610f5a60ff8616610f3f888b611812565b9050610f716001828481610f6a57fe5b0490611822565b925050505b95945050505050565b600080610f8a6126ce565b6000610f9588611832565b9050610fa6878683600001516118e0565b610faf886119b1565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b8152602001610ff98a611a1e565b6001600160801b03168152509150509450945094915050565b600080600061102387878787611a59565b9093509150620d89e719600284900b121561104457620d89e719925061105a565b620d89e8600284900b131561105a57620d89e892505b61106383611a75565b90509450945094915050565b60008361109057816001600160a01b0316836001600160a01b0316116110a6565b816001600160a01b0316836001600160a01b0316105b6110b057826110b2565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906111415760006110f58989620f42400362ffffff16620f4240611da7565b90508261110e576111098c8c8c6001611e56565b61111b565b61111b8b8d8c6001611ec6565b955085811061112c578a965061113b565b6111388c8b8386611f71565b96505b5061118b565b81611158576111538b8b8b6000611ec6565b611165565b6111658a8c8b6000611e56565b93508388600003106111795789955061118b565b6111888b8a8a60000385611fbd565b95505b6001600160a01b038a81169087161482156111ee578080156111aa5750815b6111c0576111bb878d8c6001611ec6565b6111c2565b855b95508080156111cf575081155b6111e5576111e0878d8c6000611e56565b6111e7565b845b9450611238565b8080156111f85750815b61120e576112098c888c6001611e56565b611210565b855b955080801561121d575081155b6112335761122e8c888c6000611ec6565b611235565b845b94505b8115801561124857508860000385115b15611254578860000394505b81801561127357508a6001600160a01b0316876001600160a01b031614155b1561128257858903935061129f565b61129c868962ffffff168a620f42400362ffffff16612009565b93505b50505095509550955095915050565b808203828113156000831215146102f057600080fd5b818101828112156000831215146102f057600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d61010081101561135957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b121561140657826001600160801b03168260000384039150816001600160801b031610611401576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6102f0565b826001600160801b03168284019150816001600160801b031610156102f0576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590611493575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6114c8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061155c57607f810383901c9150611566565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461176757886001600160a01b031661174b82611a75565b6001600160a01b031611156117605781611762565b805b611769565b815b9998505050505050505050565b60008561178557506000610f76565b841580611790575083155b1561179d57506000610f76565b60006117ac8760ff86166117ee565b905060006117ba82876117ee565b905060006117d5836117cf8a60ff89166117ee565b90611822565b90508082816117e057fe5b049998505050505050505050565b60008215806118095750508181028183828161180657fe5b04145b6102f057600080fd5b808203828111156102f057600080fd5b808201828110156102f057600080fd5b61183a6126fc565b61184382612043565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d60e08110156118b957600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361192957816001600160a01b0316836001600160a01b0316118015611924575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b611957565b816001600160a01b0316836001600160a01b031610801561195757506401000276a36001600160a01b038416115b9050806119ab576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d6020811015611a1657600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b600080611a688686868661211a565b9150915094509492505050565b60008060008360020b12611a8c578260020b611a94565b8260020b6000035b9050620d89e8811115611ad2576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216611ae657600160801b611af8565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611b2c576ffff97272373d413259a46990580e213a0260801c5b6004821615611b4b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611b6a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611b89576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611ba8576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611bc7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611be6576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611c06576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611c26576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611c46576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611c66576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611c86576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611ca6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611cc6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611ce6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611d07576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611d27576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611d46576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611d63576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611d7e578060001981611d7a57fe5b0490505b640100000000810615611d92576001611d95565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611ddd5760008411611dd257600080fd5b5082900490506110b5565b808411611de957600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b03161115611e76579293925b81611ea357611e9e836001600160801b03168686036001600160a01b0316600160601b611da7565b610f76565b610f76836001600160801b03168686036001600160a01b0316600160601b612009565b6000836001600160a01b0316856001600160a01b03161115611ee6579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716611f1057600080fd5b83611f4057866001600160a01b0316611f338383896001600160a01b0316611da7565b81611f3a57fe5b04611f66565b611f66611f578383896001600160a01b0316612009565b886001600160a01b0316612318565b979650505050505050565b600080856001600160a01b031611611f8857600080fd5b6000846001600160801b031611611f9e57600080fd5b81611fb057611e9e8585856001612323565b610f768585856001612404565b600080856001600160a01b031611611fd457600080fd5b6000846001600160801b031611611fea57600080fd5b81611ffc57611e9e8585856000612404565b610f768585856000612323565b6000612016848484611da7565b90506000828061202257fe5b84860911156110b557600019811061203957600080fd5b6001019392505050565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207e57600080fd5b505afa9250505080156120a357506040513d602081101561209e57600080fd5b505160015b61211357816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506040513d602081101561210a57600080fd5b50519050610eea565b9050610eea565b6000808581600286810b9088900b8161212f57fe5b05905060008760020b12801561215657508560020b8760020b8161214f57fe5b0760020b15155b1561216057600019015b841561223757600080612172836124e0565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d60208110156121fd57600080fd5b505116801515975090508661221957898360ff1686030261222c565b89612223826124f2565b840360ff168603025b97505050505061230d565b600080612246836001016124e0565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156122a457600080fd5b505afa1580156122b8573d6000803e3d6000fd5b505050506040513d60208110156122ce57600080fd5b50511680151597509050866122f057898360ff0360ff16866001010102612306565b89836122fb83612592565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b600081156123965760006001600160a01b038411156123595761235484600160601b876001600160801b0316611da7565b612371565b6001600160801b038516606085901b8161236f57fe5b045b905061238e6123896001600160a01b03881683611822565b61267c565b9150506104aa565b60006001600160a01b038411156123c4576123bf84600160601b876001600160801b0316612009565b6123db565b6123db606085901b6001600160801b038716612318565b905080866001600160a01b0316116123f257600080fd5b6001600160a01b0386160390506104aa565b6000826124125750836104aa565b600160601b600160e01b03606085901b168215612499576001600160a01b0386168481029085828161244057fe5b0414156124715781810182811061246f5761246583896001600160a01b031683612009565b93505050506104aa565b505b6124908261248b878a6001600160a01b03168681610f6a57fe5b612318565b925050506104aa565b6001600160a01b038616848102908582816124b057fe5b041480156124bd57508082115b6124c657600080fd5b808203612465612389846001600160a01b038b1684612009565b60020b600881901d9161010090910790565b600080821161250057600080fd5b600160801b821061251357608091821c91015b68010000000000000000821061252b57604091821c91015b640100000000821061253f57602091821c91015b62010000821061255157601091821c91015b610100821061256257600891821c91015b6010821061257257600491821c91015b6004821061258257600291821c91015b60028210610eea57600101919050565b60008082116125a057600080fd5b5060ff6001600160801b038216156125bb57607f19016125c3565b608082901c91505b67ffffffffffffffff8216156125dc57603f19016125e4565b604082901c91505b63ffffffff8216156125f957601f1901612601565b602082901c91505b61ffff82161561261457600f190161261c565b601082901c91505b60ff82161561262e5760071901612636565b600882901c91505b600f8216156126485760031901612650565b600482901c91505b6003821615612662576001190161266a565b600282901c91505b6001821615610eea5760001901919050565b806001600160a01b0381168114610eea57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b8051610eea81612bec565b600082601f830112612737578081fd5b813567ffffffffffffffff81111561274b57fe5b61275e601f8201601f1916602001612bc8565b818152846020838601011115612772578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b0381168114610eea57600080fd5b8051610eea81612c04565b6000602082840312156127bf578081fd5b81516110b581612bec565b600080600080608085870312156127df578283fd5b84356127ea81612bec565b935060208501356127fa81612bec565b9250604085013561280a81612bec565b9396929550929360600135925050565b60008060008060008060c08789031215612832578182fd5b863561283d81612bec565b9550602087013561284d81612bec565b9450604087013561285d81612bec565b9350606087013561286d81612c04565b9250608087013561287d81612c04565b8092505060a087013590509295509295509295565b600080600080608085870312156128a7578384fd5b84356128b281612bec565b9350602085013580151581146128c6578384fd5b92506040850135915060608501356128dd81612bec565b939692955090935050565b600060208083850312156128fa578182fd5b825167ffffffffffffffff80821115612911578384fd5b818501915085601f830112612924578384fd5b81518181111561293057fe5b61293d8485830201612bc8565b8181528481019084860160c0808502870188018b101561295b578889fd5b8896505b84871015612a095780828c031215612975578889fd5b60408051828101818110898211171561298a57fe5b8252835161299781612bec565b81526129a4848b0161271c565b8a8201526129b382850161271c565b82820152606091506129c68285016127a3565b82820152608091506129d98285016127a3565b8282015260a091506129ec8285016127a3565b91810191909152845260019690960195928701929081019061295f565b50909998505050505050505050565b600060208284031215612a29578081fd5b813567ffffffffffffffff811115612a3f578182fd5b6104aa84828501612727565b60008060408385031215612a5d578182fd5b823567ffffffffffffffff811115612a73578283fd5b612a7f85828601612727565b95602094909401359450505050565b600080600060608486031215612aa2578081fd5b612aab8461278c565b9250612ab96020850161278c565b9150604084015163ffffffff81168114612ad1578182fd5b809150509250925092565b602080825282518282018190526000919060409081850190868401855b82811015612b6057815180516001600160a01b0390811686528782015181168887015286820151168686015260608082015160ff9081169187019190915260808083015182169087015260a091820151169085015260c09093019290850190600101612af9565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ba557835183529284019291840191600101612b89565b50909695505050505050565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612be457fe5b604052919050565b6001600160a01b0381168114612c0157600080fd5b50565b60ff81168114612c0157600080fdfea26469706673582212205f0301b94acc3ae7c95c9cf7282b659b38b1111b9512431d6c6ae24f2141335364736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C49 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77CD49E4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x77CD49E4 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x97DE0A84 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xC25DDCE0 EQ PUSH2 0x142 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH3 0x614B2E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x2D0F9A30 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x53201A4C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x6E95D3D8 EQ PUSH2 0xE8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2B6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2BBF JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x2892 JUMP JUMPDEST PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP3 SWAP2 SWAP1 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0xCC5 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A18 JUMP JUMPDEST PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2ADC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 NOT ADD JUMPDEST DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x276 JUMPI PUSH2 0x26F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x215 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x245 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x25D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0x4B2 JUMP JUMPDEST SWAP5 POP PUSH2 0x2CA JUMP JUMPDEST PUSH2 0x2C7 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x285 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x6D2 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT ADD PUSH2 0x1CB JUMP JUMPDEST POP SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x315 JUMPI DUP7 DUP9 PUSH2 0x318 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x397 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x42F JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x423 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x48A DUP10 DUP5 PUSH2 0x460 DUP12 PUSH2 0xEEF JUMP JUMPDEST DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0xA07 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x49C JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x4A1 JUMP JUMPDEST DUP1 PUSH1 0x0 SUB JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0x4D1 JUMPI DUP9 DUP11 PUSH2 0x4D4 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x553 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x5EB JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x670 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x6AA JUMPI DUP3 DUP5 PUSH2 0x6AD JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0xF05 JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x6F1 JUMPI DUP7 DUP9 PUSH2 0x6F4 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x773 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x80B JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x85E DUP10 DUP5 PUSH2 0x83C DUP12 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x0 SUB DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x86D JUMPI DUP1 PUSH2 0x4A1 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x893 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x8AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2EB JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x993 JUMPI PUSH2 0x98C DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x91A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x932 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x94A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x962 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x97A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0xCC5 JUMP JUMPDEST SWAP5 POP PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x9E4 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x9BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x2F6 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xA5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xA70 DUP11 DUP11 DUP11 DUP11 PUSH2 0xF7F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA9D JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xC8E JUMPI PUSH2 0xAAA PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xACC SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x1012 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0xB1A SWAP2 PUSH2 0xB09 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x106F JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x10BC JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0xB7C JUMPI PUSH2 0xB50 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xB72 SWAP1 PUSH2 0xB67 SWAP1 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0xB89 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xBB1 SWAP2 PUSH2 0xBA6 SWAP2 ADD PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xC4D JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0xC24 JUMPI PUSH1 0x0 PUSH2 0xBF3 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x12DA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0xC06 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0xC14 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0xC33 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xC88 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC88 JUMPI PUSH2 0xC7B DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xA77 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0xCA7 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0xCB4 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0xCE4 JUMPI DUP9 DUP11 PUSH2 0xCE7 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0xDFE JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF2 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE83 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0xEBD JUMPI DUP3 DUP5 PUSH2 0xEC0 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0x1776 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xEE7 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0xF01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xF14 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0xF1F JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF2C JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF45 PUSH1 0xFF DUP5 AND PUSH2 0xF3F DUP9 DUP11 PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF5A PUSH1 0xFF DUP7 AND PUSH2 0xF3F DUP9 DUP12 PUSH2 0x1812 JUMP JUMPDEST SWAP1 POP PUSH2 0xF71 PUSH1 0x1 DUP3 DUP5 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF8A PUSH2 0x26CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP9 PUSH2 0x1832 JUMP JUMPDEST SWAP1 POP PUSH2 0xFA6 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xFAF DUP9 PUSH2 0x19B1 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF9 DUP11 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1023 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1A59 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x1044 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x105A JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x105A JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x1063 DUP4 PUSH2 0x1A75 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1090 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x10A6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x10B0 JUMPI DUP3 PUSH2 0x10B2 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x1141 JUMPI PUSH1 0x0 PUSH2 0x10F5 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x110E JUMPI PUSH2 0x1109 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x111B JUMP JUMPDEST PUSH2 0x111B DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x112C JUMPI DUP11 SWAP7 POP PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1138 DUP13 DUP12 DUP4 DUP7 PUSH2 0x1F71 JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x118B JUMP JUMPDEST DUP2 PUSH2 0x1158 JUMPI PUSH2 0x1153 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1165 JUMP JUMPDEST PUSH2 0x1165 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x1179 JUMPI DUP10 SWAP6 POP PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1188 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1FBD JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x11EE JUMPI DUP1 DUP1 ISZERO PUSH2 0x11AA JUMPI POP DUP2 JUMPDEST PUSH2 0x11C0 JUMPI PUSH2 0x11BB DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x11CF JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x11E5 JUMPI PUSH2 0x11E0 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x11E7 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x1238 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x11F8 JUMPI POP DUP2 JUMPDEST PUSH2 0x120E JUMPI PUSH2 0x1209 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x121D JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x1233 JUMPI PUSH2 0x122E DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1235 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x1248 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x1254 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1273 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1282 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x129F JUMP JUMPDEST PUSH2 0x129C DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1342 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x1359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1406 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x1401 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x1493 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x14C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x155C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x1566 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1767 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x174B DUP3 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1760 JUMPI DUP2 PUSH2 0x1762 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x1769 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0x1785 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0x1790 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x179D JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AC DUP8 PUSH1 0xFF DUP7 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17BA DUP3 DUP8 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17D5 DUP4 PUSH2 0x17CF DUP11 PUSH1 0xFF DUP10 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x17E0 JUMPI INVALID JUMPDEST DIV SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1809 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x1806 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x183A PUSH2 0x26FC JUMP JUMPDEST PUSH2 0x1843 DUP3 PUSH2 0x2043 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x188F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x18B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1929 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1924 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x1957 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x1957 JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x19AB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A68 DUP7 DUP7 DUP7 DUP7 PUSH2 0x211A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1A8C JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1A94 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1AE6 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1AF8 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x1B2C JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1B4B JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x1B6A JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x1B89 JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x1BA8 JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x1BC7 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1BE6 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1C06 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1C26 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1C46 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x1C66 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1C86 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1CA6 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1CC6 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1CE6 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1D07 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1D27 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1D46 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1D63 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1D7E JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x1D7A JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1D92 JUMPI PUSH1 0x1 PUSH2 0x1D95 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1DDD JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1DD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x10B5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1DE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1E76 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1EA3 JUMPI PUSH2 0x1E9E DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF76 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1EE6 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1F40 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F33 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST DUP2 PUSH2 0x1F3A JUMPI INVALID JUMPDEST DIV PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1F66 PUSH2 0x1F57 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2318 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FB0 JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2323 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2404 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FFC JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2323 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2016 DUP5 DUP5 DUP5 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x2022 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x2039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x207E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x20A3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x209E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x2113 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x212F JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x2156 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x214F JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2160 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x2237 JUMPI PUSH1 0x0 DUP1 PUSH2 0x2172 DUP4 PUSH2 0x24E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x2219 JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x222C JUMP JUMPDEST DUP10 PUSH2 0x2223 DUP3 PUSH2 0x24F2 JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2246 DUP4 PUSH1 0x1 ADD PUSH2 0x24E0 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x22CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x22F0 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x2306 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x22FB DUP4 PUSH2 0x2592 JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x2396 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x2359 JUMPI PUSH2 0x2354 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x2371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x236F JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x238E PUSH2 0x2389 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x267C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x23C4 JUMPI PUSH2 0x23BF DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST PUSH2 0x23DB JUMP JUMPDEST PUSH2 0x23DB PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x2318 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x23F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2412 JUMPI POP DUP4 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x2499 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x2440 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x2471 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x246F JUMPI PUSH2 0x2465 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST POP JUMPDEST PUSH2 0x2490 DUP3 PUSH2 0x248B DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST PUSH2 0x2318 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x24B0 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x24BD JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x24C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x2465 PUSH2 0x2389 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x2513 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x252B JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x253F JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x2551 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x2562 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x2572 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x2582 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xEEA JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x25A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x25BB JUMPI PUSH1 0x7F NOT ADD PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x25DC JUMPI PUSH1 0x3F NOT ADD PUSH2 0x25E4 JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x25F9 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x2601 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x2614 JUMPI PUSH1 0xF NOT ADD PUSH2 0x261C JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x262E JUMPI PUSH1 0x7 NOT ADD PUSH2 0x2636 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x2648 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x2650 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x2662 JUMPI PUSH1 0x1 NOT ADD PUSH2 0x266A JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xEEA JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2737 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x274B JUMPI INVALID JUMPDEST PUSH2 0x275E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2772 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2C04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10B5 DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27DF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x27EA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x27FA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x280A DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2832 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x283D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x284D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x285D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x286D DUP2 PUSH2 0x2C04 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x287D DUP2 PUSH2 0x2C04 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28A7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x28B2 DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x28C6 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x28DD DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28FA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2911 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2924 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2930 JUMPI INVALID JUMPDEST PUSH2 0x293D DUP5 DUP6 DUP4 MUL ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD PUSH1 0xC0 DUP1 DUP6 MUL DUP8 ADD DUP9 ADD DUP12 LT ISZERO PUSH2 0x295B JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x2A09 JUMPI DUP1 DUP3 DUP13 SUB SLT ISZERO PUSH2 0x2975 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT DUP10 DUP3 GT OR ISZERO PUSH2 0x298A JUMPI INVALID JUMPDEST DUP3 MSTORE DUP4 MLOAD PUSH2 0x2997 DUP2 PUSH2 0x2BEC JUMP JUMPDEST DUP2 MSTORE PUSH2 0x29A4 DUP5 DUP12 ADD PUSH2 0x271C JUMP JUMPDEST DUP11 DUP3 ADD MSTORE PUSH2 0x29B3 DUP3 DUP6 ADD PUSH2 0x271C JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 POP PUSH2 0x29C6 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x80 SWAP2 POP PUSH2 0x29D9 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 POP PUSH2 0x29EC DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP8 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x295F JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A29 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A3F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4AA DUP5 DUP3 DUP6 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A5D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A73 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2A7F DUP6 DUP3 DUP7 ADD PUSH2 0x2727 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2AAB DUP5 PUSH2 0x278C JUMP JUMPDEST SWAP3 POP PUSH2 0x2AB9 PUSH1 0x20 DUP6 ADD PUSH2 0x278C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AD1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2B60 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE DUP8 DUP3 ADD MLOAD DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD AND DUP7 DUP7 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP2 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP3 AND SWAP1 DUP8 ADD MSTORE PUSH1 0xA0 SWAP2 DUP3 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AF9 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2BA5 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B89 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BE4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F SUB ADD 0xB9 0x4A 0xCC GASPRICE 0xE7 0xC9 0x5C SWAP13 0xF7 0x28 0x2B PUSH6 0x9B38B1111B95 SLT NUMBER SAR PUSH13 0x6AE24F2141335364736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"191:7304:23:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9463:34","statements":[{"nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:80:34","statements":[{"nodeType":"YulAssignment","src":"86:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:34"},"nodeType":"YulFunctionCall","src":"95:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:34"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"144:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"117:26:34"},"nodeType":"YulFunctionCall","src":"117:33:34"},"nodeType":"YulExpressionStatement","src":"117:33:34"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:34","type":""}],"src":"14:142:34"},{"body":{"nodeType":"YulBlock","src":"215:488:34","statements":[{"body":{"nodeType":"YulBlock","src":"264:24:34","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"273:5:34"},{"name":"array","nodeType":"YulIdentifier","src":"280:5:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"266:6:34"},"nodeType":"YulFunctionCall","src":"266:20:34"},"nodeType":"YulExpressionStatement","src":"266:20:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"243:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"251:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:34"},"nodeType":"YulFunctionCall","src":"239:17:34"},{"name":"end","nodeType":"YulIdentifier","src":"258:3:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"235:3:34"},"nodeType":"YulFunctionCall","src":"235:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"228:6:34"},"nodeType":"YulFunctionCall","src":"228:35:34"},"nodeType":"YulIf","src":"225:2:34"},{"nodeType":"YulVariableDeclaration","src":"297:30:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"320:6:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"307:12:34"},"nodeType":"YulFunctionCall","src":"307:20:34"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"301:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"366:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"368:7:34"},"nodeType":"YulFunctionCall","src":"368:9:34"},"nodeType":"YulExpressionStatement","src":"368:9:34"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"342:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"346:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"339:2:34"},"nodeType":"YulFunctionCall","src":"339:26:34"},"nodeType":"YulIf","src":"336:2:34"},{"nodeType":"YulVariableDeclaration","src":"388:69:34","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"430:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"434:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"426:3:34"},"nodeType":"YulFunctionCall","src":"426:13:34"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"445:2:34","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"441:3:34"},"nodeType":"YulFunctionCall","src":"441:7:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"422:3:34"},"nodeType":"YulFunctionCall","src":"422:27:34"},{"kind":"number","nodeType":"YulLiteral","src":"451:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:34"},"nodeType":"YulFunctionCall","src":"418:38:34"}],"functionName":{"name":"allocateMemory","nodeType":"YulIdentifier","src":"403:14:34"},"nodeType":"YulFunctionCall","src":"403:54:34"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"392:7:34","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"473:7:34"},{"name":"_1","nodeType":"YulIdentifier","src":"482:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"466:6:34"},"nodeType":"YulFunctionCall","src":"466:19:34"},"nodeType":"YulExpressionStatement","src":"466:19:34"},{"body":{"nodeType":"YulBlock","src":"533:24:34","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"542:5:34"},{"name":"array","nodeType":"YulIdentifier","src":"549:5:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"535:6:34"},"nodeType":"YulFunctionCall","src":"535:20:34"},"nodeType":"YulExpressionStatement","src":"535:20:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"508:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"516:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"504:3:34"},"nodeType":"YulFunctionCall","src":"504:15:34"},{"kind":"number","nodeType":"YulLiteral","src":"521:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"500:3:34"},"nodeType":"YulFunctionCall","src":"500:26:34"},{"name":"end","nodeType":"YulIdentifier","src":"528:3:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"497:2:34"},"nodeType":"YulFunctionCall","src":"497:35:34"},"nodeType":"YulIf","src":"494:2:34"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"583:7:34"},{"kind":"number","nodeType":"YulLiteral","src":"592:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"579:3:34"},"nodeType":"YulFunctionCall","src":"579:18:34"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"603:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"611:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"599:3:34"},"nodeType":"YulFunctionCall","src":"599:17:34"},{"name":"_1","nodeType":"YulIdentifier","src":"618:2:34"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"566:12:34"},"nodeType":"YulFunctionCall","src":"566:55:34"},"nodeType":"YulExpressionStatement","src":"566:55:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"645:7:34"},{"name":"_1","nodeType":"YulIdentifier","src":"654:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"641:3:34"},"nodeType":"YulFunctionCall","src":"641:16:34"},{"kind":"number","nodeType":"YulLiteral","src":"659:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"637:3:34"},"nodeType":"YulFunctionCall","src":"637:27:34"},{"name":"array","nodeType":"YulIdentifier","src":"666:5:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"630:6:34"},"nodeType":"YulFunctionCall","src":"630:42:34"},"nodeType":"YulExpressionStatement","src":"630:42:34"},{"nodeType":"YulAssignment","src":"681:16:34","value":{"name":"array_1","nodeType":"YulIdentifier","src":"690:7:34"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"681:5:34"}]}]},"name":"abi_decode_t_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"189:6:34","type":""},{"name":"end","nodeType":"YulTypedName","src":"197:3:34","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"205:5:34","type":""}],"src":"161:542:34"},{"body":{"nodeType":"YulBlock","src":"770:128:34","statements":[{"nodeType":"YulAssignment","src":"780:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"795:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"789:5:34"},"nodeType":"YulFunctionCall","src":"789:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"780:5:34"}]},{"body":{"nodeType":"YulBlock","src":"876:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"885:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"888:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"878:6:34"},"nodeType":"YulFunctionCall","src":"878:12:34"},"nodeType":"YulExpressionStatement","src":"878:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"824:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"835:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"842:30:34","type":"","value":"0xffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"831:3:34"},"nodeType":"YulFunctionCall","src":"831:42:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"821:2:34"},"nodeType":"YulFunctionCall","src":"821:53:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"814:6:34"},"nodeType":"YulFunctionCall","src":"814:61:34"},"nodeType":"YulIf","src":"811:2:34"}]},"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"749:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"760:5:34","type":""}],"src":"708:190:34"},{"body":{"nodeType":"YulBlock","src":"963:78:34","statements":[{"nodeType":"YulAssignment","src":"973:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"988:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"982:5:34"},"nodeType":"YulFunctionCall","src":"982:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:34"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:34"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"1004:24:34"},"nodeType":"YulFunctionCall","src":"1004:31:34"},"nodeType":"YulExpressionStatement","src":"1004:31:34"}]},"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"942:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"953:5:34","type":""}],"src":"903:138:34"},{"body":{"nodeType":"YulBlock","src":"1127:182:34","statements":[{"body":{"nodeType":"YulBlock","src":"1173:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1182:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"1190:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1175:6:34"},"nodeType":"YulFunctionCall","src":"1175:22:34"},"nodeType":"YulExpressionStatement","src":"1175:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1148:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1157:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1144:3:34"},"nodeType":"YulFunctionCall","src":"1144:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1169:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1140:3:34"},"nodeType":"YulFunctionCall","src":"1140:32:34"},"nodeType":"YulIf","src":"1137:2:34"},{"nodeType":"YulVariableDeclaration","src":"1208:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1227:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1221:5:34"},"nodeType":"YulFunctionCall","src":"1221:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1212:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1273:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1246:26:34"},"nodeType":"YulFunctionCall","src":"1246:33:34"},"nodeType":"YulExpressionStatement","src":"1246:33:34"},{"nodeType":"YulAssignment","src":"1288:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1298:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1288:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1093:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1104:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1116:6:34","type":""}],"src":"1046:263:34"},{"body":{"nodeType":"YulBlock","src":"1435:493:34","statements":[{"body":{"nodeType":"YulBlock","src":"1482:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1491:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"1499:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1484:6:34"},"nodeType":"YulFunctionCall","src":"1484:22:34"},"nodeType":"YulExpressionStatement","src":"1484:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1456:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1465:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1452:3:34"},"nodeType":"YulFunctionCall","src":"1452:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1477:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1448:3:34"},"nodeType":"YulFunctionCall","src":"1448:33:34"},"nodeType":"YulIf","src":"1445:2:34"},{"nodeType":"YulVariableDeclaration","src":"1517:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1543:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1530:12:34"},"nodeType":"YulFunctionCall","src":"1530:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1521:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1589:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1562:26:34"},"nodeType":"YulFunctionCall","src":"1562:33:34"},"nodeType":"YulExpressionStatement","src":"1562:33:34"},{"nodeType":"YulAssignment","src":"1604:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1614:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1604:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1628:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1660:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1671:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1656:3:34"},"nodeType":"YulFunctionCall","src":"1656:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1643:12:34"},"nodeType":"YulFunctionCall","src":"1643:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1632:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1711:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1684:26:34"},"nodeType":"YulFunctionCall","src":"1684:35:34"},"nodeType":"YulExpressionStatement","src":"1684:35:34"},{"nodeType":"YulAssignment","src":"1728:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1738:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1728:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1754:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1786:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1797:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1782:3:34"},"nodeType":"YulFunctionCall","src":"1782:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1769:12:34"},"nodeType":"YulFunctionCall","src":"1769:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1758:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1837:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1810:26:34"},"nodeType":"YulFunctionCall","src":"1810:35:34"},"nodeType":"YulExpressionStatement","src":"1810:35:34"},{"nodeType":"YulAssignment","src":"1854:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1864:7:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1854:6:34"}]},{"nodeType":"YulAssignment","src":"1880:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1907:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1918:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1903:3:34"},"nodeType":"YulFunctionCall","src":"1903:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1890:12:34"},"nodeType":"YulFunctionCall","src":"1890:32:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1880:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1377:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1388:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1400:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1408:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1416:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1424:6:34","type":""}],"src":"1314:614:34"},{"body":{"nodeType":"YulBlock","src":"2084:743:34","statements":[{"body":{"nodeType":"YulBlock","src":"2131:26:34","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"2140:6:34"},{"name":"value4","nodeType":"YulIdentifier","src":"2148:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2133:6:34"},"nodeType":"YulFunctionCall","src":"2133:22:34"},"nodeType":"YulExpressionStatement","src":"2133:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2105:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"2114:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2101:3:34"},"nodeType":"YulFunctionCall","src":"2101:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"2126:3:34","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2097:3:34"},"nodeType":"YulFunctionCall","src":"2097:33:34"},"nodeType":"YulIf","src":"2094:2:34"},{"nodeType":"YulVariableDeclaration","src":"2166:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2192:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2179:12:34"},"nodeType":"YulFunctionCall","src":"2179:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2170:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2238:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2211:26:34"},"nodeType":"YulFunctionCall","src":"2211:33:34"},"nodeType":"YulExpressionStatement","src":"2211:33:34"},{"nodeType":"YulAssignment","src":"2253:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"2263:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2253:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2277:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2309:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2320:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2305:3:34"},"nodeType":"YulFunctionCall","src":"2305:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2292:12:34"},"nodeType":"YulFunctionCall","src":"2292:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2281:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2360:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2333:26:34"},"nodeType":"YulFunctionCall","src":"2333:35:34"},"nodeType":"YulExpressionStatement","src":"2333:35:34"},{"nodeType":"YulAssignment","src":"2377:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2387:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2377:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2403:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2435:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2446:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2431:3:34"},"nodeType":"YulFunctionCall","src":"2431:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2418:12:34"},"nodeType":"YulFunctionCall","src":"2418:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"2407:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"2486:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2459:26:34"},"nodeType":"YulFunctionCall","src":"2459:35:34"},"nodeType":"YulExpressionStatement","src":"2459:35:34"},{"nodeType":"YulAssignment","src":"2503:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"2513:7:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2503:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2529:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2561:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2572:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2557:3:34"},"nodeType":"YulFunctionCall","src":"2557:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2544:12:34"},"nodeType":"YulFunctionCall","src":"2544:32:34"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"2533:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"2610:7:34"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"2585:24:34"},"nodeType":"YulFunctionCall","src":"2585:33:34"},"nodeType":"YulExpressionStatement","src":"2585:33:34"},{"nodeType":"YulAssignment","src":"2627:17:34","value":{"name":"value_3","nodeType":"YulIdentifier","src":"2637:7:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2627:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2653:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2685:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2696:3:34","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2681:3:34"},"nodeType":"YulFunctionCall","src":"2681:19:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2668:12:34"},"nodeType":"YulFunctionCall","src":"2668:33:34"},"variables":[{"name":"value_4","nodeType":"YulTypedName","src":"2657:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_4","nodeType":"YulIdentifier","src":"2735:7:34"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"2710:24:34"},"nodeType":"YulFunctionCall","src":"2710:33:34"},"nodeType":"YulExpressionStatement","src":"2710:33:34"},{"nodeType":"YulAssignment","src":"2752:17:34","value":{"name":"value_4","nodeType":"YulIdentifier","src":"2762:7:34"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2752:6:34"}]},{"nodeType":"YulAssignment","src":"2778:43:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2805:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2816:3:34","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2801:3:34"},"nodeType":"YulFunctionCall","src":"2801:19:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2788:12:34"},"nodeType":"YulFunctionCall","src":"2788:33:34"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2778:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint8t_uint8t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2010:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2021:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2033:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2041:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2049:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2057:6:34","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2065:6:34","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2073:6:34","type":""}],"src":"1933:894:34"},{"body":{"nodeType":"YulBlock","src":"2949:532:34","statements":[{"body":{"nodeType":"YulBlock","src":"2996:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3005:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3013:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2998:6:34"},"nodeType":"YulFunctionCall","src":"2998:22:34"},"nodeType":"YulExpressionStatement","src":"2998:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2970:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"2979:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2966:3:34"},"nodeType":"YulFunctionCall","src":"2966:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"2991:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2962:3:34"},"nodeType":"YulFunctionCall","src":"2962:33:34"},"nodeType":"YulIf","src":"2959:2:34"},{"nodeType":"YulVariableDeclaration","src":"3031:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3057:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3044:12:34"},"nodeType":"YulFunctionCall","src":"3044:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3035:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3103:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3076:26:34"},"nodeType":"YulFunctionCall","src":"3076:33:34"},"nodeType":"YulExpressionStatement","src":"3076:33:34"},{"nodeType":"YulAssignment","src":"3118:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"3128:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3118:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"3142:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3174:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"3185:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3170:3:34"},"nodeType":"YulFunctionCall","src":"3170:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3157:12:34"},"nodeType":"YulFunctionCall","src":"3157:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3146:7:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3246:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3255:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"3263:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3248:6:34"},"nodeType":"YulFunctionCall","src":"3248:22:34"},"nodeType":"YulExpressionStatement","src":"3248:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3211:7:34"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3234:7:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3227:6:34"},"nodeType":"YulFunctionCall","src":"3227:15:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3220:6:34"},"nodeType":"YulFunctionCall","src":"3220:23:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3208:2:34"},"nodeType":"YulFunctionCall","src":"3208:36:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3201:6:34"},"nodeType":"YulFunctionCall","src":"3201:44:34"},"nodeType":"YulIf","src":"3198:2:34"},{"nodeType":"YulAssignment","src":"3281:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3291:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3281:6:34"}]},{"nodeType":"YulAssignment","src":"3307:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3334:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"3345:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3330:3:34"},"nodeType":"YulFunctionCall","src":"3330:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3317:12:34"},"nodeType":"YulFunctionCall","src":"3317:32:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3307:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"3358:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3390:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"3401:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3386:3:34"},"nodeType":"YulFunctionCall","src":"3386:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3373:12:34"},"nodeType":"YulFunctionCall","src":"3373:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"3362:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"3441:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3414:26:34"},"nodeType":"YulFunctionCall","src":"3414:35:34"},"nodeType":"YulExpressionStatement","src":"3414:35:34"},{"nodeType":"YulAssignment","src":"3458:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"3468:7:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3458:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_boolt_int256t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2891:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2902:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2914:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2922:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2930:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2938:6:34","type":""}],"src":"2832:649:34"},{"body":{"nodeType":"YulBlock","src":"3615:1773:34","statements":[{"nodeType":"YulVariableDeclaration","src":"3625:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"3635:2:34","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3629:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3682:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3691:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3699:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3684:6:34"},"nodeType":"YulFunctionCall","src":"3684:22:34"},"nodeType":"YulExpressionStatement","src":"3684:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3657:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"3666:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3653:3:34"},"nodeType":"YulFunctionCall","src":"3653:23:34"},{"name":"_1","nodeType":"YulIdentifier","src":"3678:2:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3649:3:34"},"nodeType":"YulFunctionCall","src":"3649:32:34"},"nodeType":"YulIf","src":"3646:2:34"},{"nodeType":"YulVariableDeclaration","src":"3717:30:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3737:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3731:5:34"},"nodeType":"YulFunctionCall","src":"3731:16:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3721:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3756:28:34","value":{"kind":"number","nodeType":"YulLiteral","src":"3766:18:34","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3760:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3811:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3820:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3828:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3813:6:34"},"nodeType":"YulFunctionCall","src":"3813:22:34"},"nodeType":"YulExpressionStatement","src":"3813:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3799:6:34"},{"name":"_2","nodeType":"YulIdentifier","src":"3807:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3796:2:34"},"nodeType":"YulFunctionCall","src":"3796:14:34"},"nodeType":"YulIf","src":"3793:2:34"},{"nodeType":"YulVariableDeclaration","src":"3846:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3860:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"3871:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3856:3:34"},"nodeType":"YulFunctionCall","src":"3856:22:34"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3850:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3926:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3935:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3943:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3928:6:34"},"nodeType":"YulFunctionCall","src":"3928:22:34"},"nodeType":"YulExpressionStatement","src":"3928:22:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3905:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"3909:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3901:3:34"},"nodeType":"YulFunctionCall","src":"3901:13:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3916:7:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3897:3:34"},"nodeType":"YulFunctionCall","src":"3897:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3890:6:34"},"nodeType":"YulFunctionCall","src":"3890:35:34"},"nodeType":"YulIf","src":"3887:2:34"},{"nodeType":"YulVariableDeclaration","src":"3961:19:34","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3977:2:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3971:5:34"},"nodeType":"YulFunctionCall","src":"3971:9:34"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3965:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4003:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"4005:7:34"},"nodeType":"YulFunctionCall","src":"4005:9:34"},"nodeType":"YulExpressionStatement","src":"4005:9:34"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"3995:2:34"},{"name":"_2","nodeType":"YulIdentifier","src":"3999:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3992:2:34"},"nodeType":"YulFunctionCall","src":"3992:10:34"},"nodeType":"YulIf","src":"3989:2:34"},{"nodeType":"YulVariableDeclaration","src":"4025:47:34","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4059:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4063:2:34"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4055:3:34"},"nodeType":"YulFunctionCall","src":"4055:11:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4068:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4051:3:34"},"nodeType":"YulFunctionCall","src":"4051:20:34"}],"functionName":{"name":"allocateMemory","nodeType":"YulIdentifier","src":"4036:14:34"},"nodeType":"YulFunctionCall","src":"4036:36:34"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4029:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4081:16:34","value":{"name":"dst","nodeType":"YulIdentifier","src":"4094:3:34"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4085:5:34","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4113:3:34"},{"name":"_4","nodeType":"YulIdentifier","src":"4118:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4106:6:34"},"nodeType":"YulFunctionCall","src":"4106:15:34"},"nodeType":"YulExpressionStatement","src":"4106:15:34"},{"nodeType":"YulAssignment","src":"4130:19:34","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4141:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4146:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4137:3:34"},"nodeType":"YulFunctionCall","src":"4137:12:34"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4130:3:34"}]},{"nodeType":"YulVariableDeclaration","src":"4158:22:34","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4173:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4177:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4169:3:34"},"nodeType":"YulFunctionCall","src":"4169:11:34"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4162:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4189:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"4199:4:34","type":"","value":"0xc0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"4193:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4258:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4267:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4275:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4260:6:34"},"nodeType":"YulFunctionCall","src":"4260:22:34"},"nodeType":"YulExpressionStatement","src":"4260:22:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4226:2:34"},{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4234:2:34"},{"name":"_5","nodeType":"YulIdentifier","src":"4238:2:34"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4230:3:34"},"nodeType":"YulFunctionCall","src":"4230:11:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4222:3:34"},"nodeType":"YulFunctionCall","src":"4222:20:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4244:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4218:3:34"},"nodeType":"YulFunctionCall","src":"4218:29:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4249:7:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4215:2:34"},"nodeType":"YulFunctionCall","src":"4215:42:34"},"nodeType":"YulIf","src":"4212:2:34"},{"nodeType":"YulVariableDeclaration","src":"4293:15:34","value":{"name":"value0","nodeType":"YulIdentifier","src":"4302:6:34"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4297:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4362:996:34","statements":[{"body":{"nodeType":"YulBlock","src":"4406:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4415:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4423:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4408:6:34"},"nodeType":"YulFunctionCall","src":"4408:22:34"},"nodeType":"YulExpressionStatement","src":"4408:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4387:7:34"},{"name":"src","nodeType":"YulIdentifier","src":"4396:3:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4383:3:34"},"nodeType":"YulFunctionCall","src":"4383:17:34"},{"name":"_5","nodeType":"YulIdentifier","src":"4402:2:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4379:3:34"},"nodeType":"YulFunctionCall","src":"4379:26:34"},"nodeType":"YulIf","src":"4376:2:34"},{"nodeType":"YulVariableDeclaration","src":"4445:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"4455:2:34","type":"","value":"64"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"4449:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4470:23:34","value":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"4490:2:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4484:5:34"},"nodeType":"YulFunctionCall","src":"4484:9:34"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4474:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4506:33:34","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4528:6:34"},{"name":"_5","nodeType":"YulIdentifier","src":"4536:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4524:3:34"},"nodeType":"YulFunctionCall","src":"4524:15:34"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4510:10:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4602:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"4604:7:34"},"nodeType":"YulFunctionCall","src":"4604:9:34"},"nodeType":"YulExpressionStatement","src":"4604:9:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4561:10:34"},{"name":"_2","nodeType":"YulIdentifier","src":"4573:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4558:2:34"},"nodeType":"YulFunctionCall","src":"4558:18:34"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4581:10:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4593:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4578:2:34"},"nodeType":"YulFunctionCall","src":"4578:22:34"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4555:2:34"},"nodeType":"YulFunctionCall","src":"4555:46:34"},"nodeType":"YulIf","src":"4552:2:34"},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"4635:2:34"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4639:10:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4628:6:34"},"nodeType":"YulFunctionCall","src":"4628:22:34"},"nodeType":"YulExpressionStatement","src":"4628:22:34"},{"nodeType":"YulVariableDeclaration","src":"4663:23:34","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4682:3:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4676:5:34"},"nodeType":"YulFunctionCall","src":"4676:10:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4667:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4726:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4699:26:34"},"nodeType":"YulFunctionCall","src":"4699:33:34"},"nodeType":"YulExpressionStatement","src":"4699:33:34"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4752:6:34"},{"name":"value","nodeType":"YulIdentifier","src":"4760:5:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4745:6:34"},"nodeType":"YulFunctionCall","src":"4745:21:34"},"nodeType":"YulExpressionStatement","src":"4745:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4790:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4798:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4786:3:34"},"nodeType":"YulFunctionCall","src":"4786:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4839:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4844:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:34"},"nodeType":"YulFunctionCall","src":"4835:12:34"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"4803:31:34"},"nodeType":"YulFunctionCall","src":"4803:45:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4779:6:34"},"nodeType":"YulFunctionCall","src":"4779:70:34"},"nodeType":"YulExpressionStatement","src":"4779:70:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4873:6:34"},{"name":"_6","nodeType":"YulIdentifier","src":"4881:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4869:3:34"},"nodeType":"YulFunctionCall","src":"4869:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4922:3:34"},{"name":"_6","nodeType":"YulIdentifier","src":"4927:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4918:3:34"},"nodeType":"YulFunctionCall","src":"4918:12:34"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"4886:31:34"},"nodeType":"YulFunctionCall","src":"4886:45:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4862:6:34"},"nodeType":"YulFunctionCall","src":"4862:70:34"},"nodeType":"YulExpressionStatement","src":"4862:70:34"},{"nodeType":"YulVariableDeclaration","src":"4945:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"4955:2:34","type":"","value":"96"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"4949:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4981:6:34"},{"name":"_7","nodeType":"YulIdentifier","src":"4989:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4977:3:34"},"nodeType":"YulFunctionCall","src":"4977:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5028:3:34"},{"name":"_7","nodeType":"YulIdentifier","src":"5033:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5024:3:34"},"nodeType":"YulFunctionCall","src":"5024:12:34"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"4994:29:34"},"nodeType":"YulFunctionCall","src":"4994:43:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4970:6:34"},"nodeType":"YulFunctionCall","src":"4970:68:34"},"nodeType":"YulExpressionStatement","src":"4970:68:34"},{"nodeType":"YulVariableDeclaration","src":"5051:13:34","value":{"kind":"number","nodeType":"YulLiteral","src":"5061:3:34","type":"","value":"128"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"5055:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5088:6:34"},{"name":"_8","nodeType":"YulIdentifier","src":"5096:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:34"},"nodeType":"YulFunctionCall","src":"5084:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5135:3:34"},{"name":"_8","nodeType":"YulIdentifier","src":"5140:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5131:3:34"},"nodeType":"YulFunctionCall","src":"5131:12:34"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"5101:29:34"},"nodeType":"YulFunctionCall","src":"5101:43:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5077:6:34"},"nodeType":"YulFunctionCall","src":"5077:68:34"},"nodeType":"YulExpressionStatement","src":"5077:68:34"},{"nodeType":"YulVariableDeclaration","src":"5158:13:34","value":{"kind":"number","nodeType":"YulLiteral","src":"5168:3:34","type":"","value":"160"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"5162:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5195:6:34"},{"name":"_9","nodeType":"YulIdentifier","src":"5203:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5191:3:34"},"nodeType":"YulFunctionCall","src":"5191:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5242:3:34"},{"name":"_9","nodeType":"YulIdentifier","src":"5247:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5238:3:34"},"nodeType":"YulFunctionCall","src":"5238:12:34"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"5208:29:34"},"nodeType":"YulFunctionCall","src":"5208:43:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5184:6:34"},"nodeType":"YulFunctionCall","src":"5184:68:34"},"nodeType":"YulExpressionStatement","src":"5184:68:34"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5272:3:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5277:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5265:6:34"},"nodeType":"YulFunctionCall","src":"5265:19:34"},"nodeType":"YulExpressionStatement","src":"5265:19:34"},{"nodeType":"YulAssignment","src":"5297:19:34","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5308:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"5313:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5304:3:34"},"nodeType":"YulFunctionCall","src":"5304:12:34"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5297:3:34"}]},{"nodeType":"YulAssignment","src":"5329:19:34","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5340:3:34"},{"name":"_5","nodeType":"YulIdentifier","src":"5345:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5336:3:34"},"nodeType":"YulFunctionCall","src":"5336:12:34"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5329:3:34"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4328:1:34"},{"name":"_4","nodeType":"YulIdentifier","src":"4331:2:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4325:2:34"},"nodeType":"YulFunctionCall","src":"4325:9:34"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4335:18:34","statements":[{"nodeType":"YulAssignment","src":"4337:14:34","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4346:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4349:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4342:3:34"},"nodeType":"YulFunctionCall","src":"4342:9:34"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4337:1:34"}]}]},"pre":{"nodeType":"YulBlock","src":"4321:3:34","statements":[]},"src":"4317:1041:34"},{"nodeType":"YulAssignment","src":"5367:15:34","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5377:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5367:6:34"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3581:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3592:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3604:6:34","type":""}],"src":"3486:1902:34"},{"body":{"nodeType":"YulBlock","src":"5472:263:34","statements":[{"body":{"nodeType":"YulBlock","src":"5518:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5527:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"5535:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5520:6:34"},"nodeType":"YulFunctionCall","src":"5520:22:34"},"nodeType":"YulExpressionStatement","src":"5520:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5493:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"5502:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5489:3:34"},"nodeType":"YulFunctionCall","src":"5489:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"5514:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5485:3:34"},"nodeType":"YulFunctionCall","src":"5485:32:34"},"nodeType":"YulIf","src":"5482:2:34"},{"nodeType":"YulVariableDeclaration","src":"5553:37:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5580:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5567:12:34"},"nodeType":"YulFunctionCall","src":"5567:23:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5557:6:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"5633:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5642:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"5650:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5635:6:34"},"nodeType":"YulFunctionCall","src":"5635:22:34"},"nodeType":"YulExpressionStatement","src":"5635:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5605:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"5613:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5602:2:34"},"nodeType":"YulFunctionCall","src":"5602:30:34"},"nodeType":"YulIf","src":"5599:2:34"},{"nodeType":"YulAssignment","src":"5668:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5701:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"5712:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5697:3:34"},"nodeType":"YulFunctionCall","src":"5697:22:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5721:7:34"}],"functionName":{"name":"abi_decode_t_bytes","nodeType":"YulIdentifier","src":"5678:18:34"},"nodeType":"YulFunctionCall","src":"5678:51:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5668:6:34"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5438:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5449:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5461:6:34","type":""}],"src":"5393:342:34"},{"body":{"nodeType":"YulBlock","src":"5836:314:34","statements":[{"body":{"nodeType":"YulBlock","src":"5882:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5891:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"5899:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5884:6:34"},"nodeType":"YulFunctionCall","src":"5884:22:34"},"nodeType":"YulExpressionStatement","src":"5884:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5857:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"5866:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5853:3:34"},"nodeType":"YulFunctionCall","src":"5853:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"5878:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5849:3:34"},"nodeType":"YulFunctionCall","src":"5849:32:34"},"nodeType":"YulIf","src":"5846:2:34"},{"nodeType":"YulVariableDeclaration","src":"5917:37:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5944:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5931:12:34"},"nodeType":"YulFunctionCall","src":"5931:23:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5921:6:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"5997:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6006:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"6014:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5999:6:34"},"nodeType":"YulFunctionCall","src":"5999:22:34"},"nodeType":"YulExpressionStatement","src":"5999:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5969:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"5977:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5966:2:34"},"nodeType":"YulFunctionCall","src":"5966:30:34"},"nodeType":"YulIf","src":"5963:2:34"},{"nodeType":"YulAssignment","src":"6032:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6065:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"6076:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6061:3:34"},"nodeType":"YulFunctionCall","src":"6061:22:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6085:7:34"}],"functionName":{"name":"abi_decode_t_bytes","nodeType":"YulIdentifier","src":"6042:18:34"},"nodeType":"YulFunctionCall","src":"6042:51:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6032:6:34"}]},{"nodeType":"YulAssignment","src":"6102:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6129:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"6140:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6125:3:34"},"nodeType":"YulFunctionCall","src":"6125:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6112:12:34"},"nodeType":"YulFunctionCall","src":"6112:32:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6102:6:34"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5794:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5805:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5817:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5825:6:34","type":""}],"src":"5740:410:34"},{"body":{"nodeType":"YulBlock","src":"6269:360:34","statements":[{"body":{"nodeType":"YulBlock","src":"6315:26:34","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6324:6:34"},{"name":"value2","nodeType":"YulIdentifier","src":"6332:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6317:6:34"},"nodeType":"YulFunctionCall","src":"6317:22:34"},"nodeType":"YulExpressionStatement","src":"6317:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6290:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"6299:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6286:3:34"},"nodeType":"YulFunctionCall","src":"6286:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"6311:2:34","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6282:3:34"},"nodeType":"YulFunctionCall","src":"6282:32:34"},"nodeType":"YulIf","src":"6279:2:34"},{"nodeType":"YulAssignment","src":"6350:52:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6392:9:34"}],"functionName":{"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulIdentifier","src":"6360:31:34"},"nodeType":"YulFunctionCall","src":"6360:42:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6350:6:34"}]},{"nodeType":"YulAssignment","src":"6411:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6457:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"6468:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6453:3:34"},"nodeType":"YulFunctionCall","src":"6453:18:34"}],"functionName":{"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulIdentifier","src":"6421:31:34"},"nodeType":"YulFunctionCall","src":"6421:51:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6411:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"6481:38:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6504:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"6515:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6500:3:34"},"nodeType":"YulFunctionCall","src":"6500:18:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6494:5:34"},"nodeType":"YulFunctionCall","src":"6494:25:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6485:5:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"6573:26:34","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6582:6:34"},{"name":"value2","nodeType":"YulIdentifier","src":"6590:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6575:6:34"},"nodeType":"YulFunctionCall","src":"6575:22:34"},"nodeType":"YulExpressionStatement","src":"6575:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6541:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6552:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"6559:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6548:3:34"},"nodeType":"YulFunctionCall","src":"6548:22:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6538:2:34"},"nodeType":"YulFunctionCall","src":"6538:33:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6531:6:34"},"nodeType":"YulFunctionCall","src":"6531:41:34"},"nodeType":"YulIf","src":"6528:2:34"},{"nodeType":"YulAssignment","src":"6608:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"6618:5:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6608:6:34"}]}]},"name":"abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6219:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6230:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6242:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6250:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6258:6:34","type":""}],"src":"6155:474:34"},{"body":{"nodeType":"YulBlock","src":"6831:1053:34","statements":[{"nodeType":"YulVariableDeclaration","src":"6841:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"6851:2:34","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6845:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6862:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6880:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"6891:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6876:3:34"},"nodeType":"YulFunctionCall","src":"6876:18:34"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6866:6:34","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6910:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"6921:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6903:6:34"},"nodeType":"YulFunctionCall","src":"6903:21:34"},"nodeType":"YulExpressionStatement","src":"6903:21:34"},{"nodeType":"YulVariableDeclaration","src":"6933:17:34","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"6944:6:34"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"6937:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6959:27:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6979:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6973:5:34"},"nodeType":"YulFunctionCall","src":"6973:13:34"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6963:6:34","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7002:6:34"},{"name":"length","nodeType":"YulIdentifier","src":"7010:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6995:6:34"},"nodeType":"YulFunctionCall","src":"6995:22:34"},"nodeType":"YulExpressionStatement","src":"6995:22:34"},{"nodeType":"YulVariableDeclaration","src":"7026:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7036:2:34","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7030:2:34","type":""}]},{"nodeType":"YulAssignment","src":"7047:25:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7058:9:34"},{"name":"_2","nodeType":"YulIdentifier","src":"7069:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7054:3:34"},"nodeType":"YulFunctionCall","src":"7054:18:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7047:3:34"}]},{"nodeType":"YulVariableDeclaration","src":"7081:29:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7099:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7107:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7095:3:34"},"nodeType":"YulFunctionCall","src":"7095:15:34"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7085:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7119:13:34","value":{"name":"tail","nodeType":"YulIdentifier","src":"7128:4:34"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7123:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"7190:668:34","statements":[{"nodeType":"YulVariableDeclaration","src":"7204:23:34","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7220:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7214:5:34"},"nodeType":"YulFunctionCall","src":"7214:13:34"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7208:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7240:29:34","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7258:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7263:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7254:3:34"},"nodeType":"YulFunctionCall","src":"7254:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"7267:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7250:3:34"},"nodeType":"YulFunctionCall","src":"7250:19:34"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7244:2:34","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7289:3:34"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7304:2:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7298:5:34"},"nodeType":"YulFunctionCall","src":"7298:9:34"},{"name":"_4","nodeType":"YulIdentifier","src":"7309:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7294:3:34"},"nodeType":"YulFunctionCall","src":"7294:18:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7282:6:34"},"nodeType":"YulFunctionCall","src":"7282:31:34"},"nodeType":"YulExpressionStatement","src":"7282:31:34"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7337:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7342:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7333:3:34"},"nodeType":"YulFunctionCall","src":"7333:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7361:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7365:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7357:3:34"},"nodeType":"YulFunctionCall","src":"7357:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7351:5:34"},"nodeType":"YulFunctionCall","src":"7351:18:34"},{"name":"_4","nodeType":"YulIdentifier","src":"7371:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7347:3:34"},"nodeType":"YulFunctionCall","src":"7347:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7326:6:34"},"nodeType":"YulFunctionCall","src":"7326:49:34"},"nodeType":"YulExpressionStatement","src":"7326:49:34"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7399:3:34"},{"name":"_2","nodeType":"YulIdentifier","src":"7404:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7395:3:34"},"nodeType":"YulFunctionCall","src":"7395:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7423:2:34"},{"name":"_2","nodeType":"YulIdentifier","src":"7427:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7419:3:34"},"nodeType":"YulFunctionCall","src":"7419:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7413:5:34"},"nodeType":"YulFunctionCall","src":"7413:18:34"},{"name":"_4","nodeType":"YulIdentifier","src":"7433:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7409:3:34"},"nodeType":"YulFunctionCall","src":"7409:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7388:6:34"},"nodeType":"YulFunctionCall","src":"7388:49:34"},"nodeType":"YulExpressionStatement","src":"7388:49:34"},{"nodeType":"YulVariableDeclaration","src":"7450:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7460:4:34","type":"","value":"0x60"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"7454:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7477:38:34","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7507:2:34"},{"name":"_5","nodeType":"YulIdentifier","src":"7511:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7503:3:34"},"nodeType":"YulFunctionCall","src":"7503:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7497:5:34"},"nodeType":"YulFunctionCall","src":"7497:18:34"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7481:12:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7528:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7538:4:34","type":"","value":"0xff"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"7532:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7566:3:34"},{"name":"_5","nodeType":"YulIdentifier","src":"7571:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7562:3:34"},"nodeType":"YulFunctionCall","src":"7562:12:34"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7580:12:34"},{"name":"_6","nodeType":"YulIdentifier","src":"7594:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7576:3:34"},"nodeType":"YulFunctionCall","src":"7576:21:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7555:6:34"},"nodeType":"YulFunctionCall","src":"7555:43:34"},"nodeType":"YulExpressionStatement","src":"7555:43:34"},{"nodeType":"YulVariableDeclaration","src":"7611:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7621:4:34","type":"","value":"0x80"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"7615:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7649:3:34"},{"name":"_7","nodeType":"YulIdentifier","src":"7654:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7645:3:34"},"nodeType":"YulFunctionCall","src":"7645:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7673:2:34"},{"name":"_7","nodeType":"YulIdentifier","src":"7677:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7669:3:34"},"nodeType":"YulFunctionCall","src":"7669:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7663:5:34"},"nodeType":"YulFunctionCall","src":"7663:18:34"},{"name":"_6","nodeType":"YulIdentifier","src":"7683:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7659:3:34"},"nodeType":"YulFunctionCall","src":"7659:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7638:6:34"},"nodeType":"YulFunctionCall","src":"7638:49:34"},"nodeType":"YulExpressionStatement","src":"7638:49:34"},{"nodeType":"YulVariableDeclaration","src":"7700:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7710:4:34","type":"","value":"0xa0"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"7704:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7738:3:34"},{"name":"_8","nodeType":"YulIdentifier","src":"7743:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7734:3:34"},"nodeType":"YulFunctionCall","src":"7734:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7762:2:34"},{"name":"_8","nodeType":"YulIdentifier","src":"7766:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7758:3:34"},"nodeType":"YulFunctionCall","src":"7758:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7752:5:34"},"nodeType":"YulFunctionCall","src":"7752:18:34"},{"name":"_6","nodeType":"YulIdentifier","src":"7772:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7748:3:34"},"nodeType":"YulFunctionCall","src":"7748:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7727:6:34"},"nodeType":"YulFunctionCall","src":"7727:49:34"},"nodeType":"YulExpressionStatement","src":"7727:49:34"},{"nodeType":"YulAssignment","src":"7789:21:34","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7800:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"7805:4:34","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7796:3:34"},"nodeType":"YulFunctionCall","src":"7796:14:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7789:3:34"}]},{"nodeType":"YulAssignment","src":"7823:25:34","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7837:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7845:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7833:3:34"},"nodeType":"YulFunctionCall","src":"7833:15:34"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7823:6:34"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7152:1:34"},{"name":"length","nodeType":"YulIdentifier","src":"7155:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7149:2:34"},"nodeType":"YulFunctionCall","src":"7149:13:34"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7163:18:34","statements":[{"nodeType":"YulAssignment","src":"7165:14:34","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7174:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"7177:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7170:3:34"},"nodeType":"YulFunctionCall","src":"7170:9:34"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7165:1:34"}]}]},"pre":{"nodeType":"YulBlock","src":"7145:3:34","statements":[]},"src":"7141:717:34"},{"nodeType":"YulAssignment","src":"7867:11:34","value":{"name":"pos","nodeType":"YulIdentifier","src":"7875:3:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7867:4:34"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6800:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6811:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6822:4:34","type":""}],"src":"6634:1250:34"},{"body":{"nodeType":"YulBlock","src":"8040:484:34","statements":[{"nodeType":"YulVariableDeclaration","src":"8050:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"8060:2:34","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8054:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8071:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8089:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8100:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8085:3:34"},"nodeType":"YulFunctionCall","src":"8085:18:34"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8075:6:34","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8119:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8130:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8112:6:34"},"nodeType":"YulFunctionCall","src":"8112:21:34"},"nodeType":"YulExpressionStatement","src":"8112:21:34"},{"nodeType":"YulVariableDeclaration","src":"8142:17:34","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"8153:6:34"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"8146:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8168:27:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8188:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8182:5:34"},"nodeType":"YulFunctionCall","src":"8182:13:34"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8172:6:34","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8211:6:34"},{"name":"length","nodeType":"YulIdentifier","src":"8219:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8204:6:34"},"nodeType":"YulFunctionCall","src":"8204:22:34"},"nodeType":"YulExpressionStatement","src":"8204:22:34"},{"nodeType":"YulAssignment","src":"8235:25:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8246:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8257:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8242:3:34"},"nodeType":"YulFunctionCall","src":"8242:18:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8235:3:34"}]},{"nodeType":"YulVariableDeclaration","src":"8269:29:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8287:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8295:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8283:3:34"},"nodeType":"YulFunctionCall","src":"8283:15:34"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8273:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8307:13:34","value":{"name":"tail","nodeType":"YulIdentifier","src":"8316:4:34"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8311:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"8378:120:34","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8399:3:34"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8410:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8404:5:34"},"nodeType":"YulFunctionCall","src":"8404:13:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8392:6:34"},"nodeType":"YulFunctionCall","src":"8392:26:34"},"nodeType":"YulExpressionStatement","src":"8392:26:34"},{"nodeType":"YulAssignment","src":"8431:19:34","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8442:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8447:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8438:3:34"},"nodeType":"YulFunctionCall","src":"8438:12:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8431:3:34"}]},{"nodeType":"YulAssignment","src":"8463:25:34","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8477:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8485:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:34"},"nodeType":"YulFunctionCall","src":"8473:15:34"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8463:6:34"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8340:1:34"},{"name":"length","nodeType":"YulIdentifier","src":"8343:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8337:2:34"},"nodeType":"YulFunctionCall","src":"8337:13:34"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8351:18:34","statements":[{"nodeType":"YulAssignment","src":"8353:14:34","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8362:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"8365:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8358:3:34"},"nodeType":"YulFunctionCall","src":"8358:9:34"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8353:1:34"}]}]},"pre":{"nodeType":"YulBlock","src":"8333:3:34","statements":[]},"src":"8329:169:34"},{"nodeType":"YulAssignment","src":"8507:11:34","value":{"name":"pos","nodeType":"YulIdentifier","src":"8515:3:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8507:4:34"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8009:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8020:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8031:4:34","type":""}],"src":"7889:635:34"},{"body":{"nodeType":"YulBlock","src":"8654:119:34","statements":[{"nodeType":"YulAssignment","src":"8664:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8676:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8687:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8672:3:34"},"nodeType":"YulFunctionCall","src":"8672:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8664:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8706:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"8717:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8699:6:34"},"nodeType":"YulFunctionCall","src":"8699:25:34"},"nodeType":"YulExpressionStatement","src":"8699:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8744:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8755:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8740:3:34"},"nodeType":"YulFunctionCall","src":"8740:18:34"},{"name":"value1","nodeType":"YulIdentifier","src":"8760:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8733:6:34"},"nodeType":"YulFunctionCall","src":"8733:34:34"},"nodeType":"YulExpressionStatement","src":"8733:34:34"}]},"name":"abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8615:9:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8626:6:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8634:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8645:4:34","type":""}],"src":"8529:244:34"},{"body":{"nodeType":"YulBlock","src":"8879:76:34","statements":[{"nodeType":"YulAssignment","src":"8889:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8901:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8912:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8897:3:34"},"nodeType":"YulFunctionCall","src":"8897:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8889:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8931:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"8942:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8924:6:34"},"nodeType":"YulFunctionCall","src":"8924:25:34"},"nodeType":"YulExpressionStatement","src":"8924:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8848:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8859:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8870:4:34","type":""}],"src":"8778:177:34"},{"body":{"nodeType":"YulBlock","src":"9004:198:34","statements":[{"nodeType":"YulAssignment","src":"9014:19:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9030:2:34","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9024:5:34"},"nodeType":"YulFunctionCall","src":"9024:9:34"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9014:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"9042:35:34","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9064:6:34"},{"name":"size","nodeType":"YulIdentifier","src":"9072:4:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9060:3:34"},"nodeType":"YulFunctionCall","src":"9060:17:34"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"9046:10:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"9152:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"9154:7:34"},"nodeType":"YulFunctionCall","src":"9154:9:34"},"nodeType":"YulExpressionStatement","src":"9154:9:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9095:10:34"},{"kind":"number","nodeType":"YulLiteral","src":"9107:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9092:2:34"},"nodeType":"YulFunctionCall","src":"9092:34:34"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9131:10:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9143:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9128:2:34"},"nodeType":"YulFunctionCall","src":"9128:22:34"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9089:2:34"},"nodeType":"YulFunctionCall","src":"9089:62:34"},"nodeType":"YulIf","src":"9086:2:34"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9181:2:34","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9185:10:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9174:6:34"},"nodeType":"YulFunctionCall","src":"9174:22:34"},"nodeType":"YulExpressionStatement","src":"9174:22:34"}]},"name":"allocateMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"8984:4:34","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8993:6:34","type":""}],"src":"8960:242:34"},{"body":{"nodeType":"YulBlock","src":"9254:86:34","statements":[{"body":{"nodeType":"YulBlock","src":"9318:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9327:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9330:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9320:6:34"},"nodeType":"YulFunctionCall","src":"9320:12:34"},"nodeType":"YulExpressionStatement","src":"9320:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9277:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9288:5:34"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9303:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9308:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9299:3:34"},"nodeType":"YulFunctionCall","src":"9299:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"9312:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9295:3:34"},"nodeType":"YulFunctionCall","src":"9295:19:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9284:3:34"},"nodeType":"YulFunctionCall","src":"9284:31:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9274:2:34"},"nodeType":"YulFunctionCall","src":"9274:42:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9267:6:34"},"nodeType":"YulFunctionCall","src":"9267:50:34"},"nodeType":"YulIf","src":"9264:2:34"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9243:5:34","type":""}],"src":"9207:133:34"},{"body":{"nodeType":"YulBlock","src":"9390:71:34","statements":[{"body":{"nodeType":"YulBlock","src":"9439:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9448:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9451:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9441:6:34"},"nodeType":"YulFunctionCall","src":"9441:12:34"},"nodeType":"YulExpressionStatement","src":"9441:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9413:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9424:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"9431:4:34","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9420:3:34"},"nodeType":"YulFunctionCall","src":"9420:16:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9410:2:34"},"nodeType":"YulFunctionCall","src":"9410:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9403:6:34"},"nodeType":"YulFunctionCall","src":"9403:35:34"},"nodeType":"YulIf","src":"9400:2:34"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9379:5:34","type":""}],"src":"9345:116:34"}]},"contents":"{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { invalid() }\n        let array_1 := allocateMemory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_t_uint112_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_t_uint8(value)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint8t_uint8t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_t_uint8(value_3)\n        value3 := value_3\n        let value_4 := calldataload(add(headStart, 128))\n        validator_revert_t_uint8(value_4)\n        value4 := value_4\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_addresst_boolt_int256t_uint160(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(value1, value1) }\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_2)\n        value3 := value_2\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value0, value0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { invalid() }\n        let dst := allocateMemory(add(mul(_4, _1), _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let src := add(_3, _1)\n        let _5 := 0xc0\n        if gt(add(add(_3, mul(_4, _5)), _1), dataEnd) { revert(value0, value0) }\n        let i := value0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            if slt(sub(dataEnd, src), _5) { revert(value0, value0) }\n            let _6 := 64\n            let memPtr := mload(_6)\n            let newFreePtr := add(memPtr, _5)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { invalid() }\n            mstore(_6, newFreePtr)\n            let value := mload(src)\n            validator_revert_t_address(value)\n            mstore(memPtr, value)\n            mstore(add(memPtr, _1), abi_decode_t_address_fromMemory(add(src, _1)))\n            mstore(add(memPtr, _6), abi_decode_t_address_fromMemory(add(src, _6)))\n            let _7 := 96\n            mstore(add(memPtr, _7), abi_decode_t_uint8_fromMemory(add(src, _7)))\n            let _8 := 128\n            mstore(add(memPtr, _8), abi_decode_t_uint8_fromMemory(add(src, _8)))\n            let _9 := 160\n            mstore(add(memPtr, _9), abi_decode_t_uint8_fromMemory(add(src, _9)))\n            mstore(dst, memPtr)\n            dst := add(dst, _1)\n            src := add(src, _5)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_uint112_fromMemory(headStart)\n        value1 := abi_decode_t_uint112_fromMemory(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(value2, value2) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Route_$3561_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            let _4 := sub(shl(160, 1), 1)\n            mstore(pos, and(mload(_3), _4))\n            mstore(add(pos, _1), and(mload(add(_3, _1)), _4))\n            mstore(add(pos, _2), and(mload(add(_3, _2)), _4))\n            let _5 := 0x60\n            let memberValue0 := mload(add(_3, _5))\n            let _6 := 0xff\n            mstore(add(pos, _5), and(memberValue0, _6))\n            let _7 := 0x80\n            mstore(add(pos, _7), and(mload(add(_3, _7)), _6))\n            let _8 := 0xa0\n            mstore(add(pos, _8), and(mload(add(_3, _8)), _6))\n            pos := add(pos, 0xc0)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_t_uint8(value)\n    {\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c806377cd49e41161005b57806377cd49e4146100fb57806390405d361461010e57806397de0a841461012f578063c25ddce01461014257610087565b8062614b2e1461008c5780632d0f9a30146100b557806353201a4c146100d55780636e95d3d8146100e8575b600080fd5b61009f61009a366004612a4b565b610162565b6040516100ac9190612b6d565b60405180910390f35b6100c86100c33660046127ca565b6102f6565b6040516100ac9190612bbf565b6100c86100e336600461281a565b6104b2565b6100c86100f63660046127ca565b6106d2565b61009f610109366004612a4b565b61087b565b61012161011c366004612892565b610a07565b6040516100ac929190612bb1565b6100c861013d36600461281a565b610cc5565b610155610150366004612a18565b610ed1565b6040516100ac9190612adc565b606060008380602001905181019061017a91906128e8565b90506000815167ffffffffffffffff8111801561019657600080fd5b506040519080825280602002602001820160405280156101c0578160200160208202803683370190505b508251909150600019015b8281815181106101d757fe5b60200260200101516060015160ff16600014156102765761026f8382815181106101fd57fe5b60200260200101516000015184838151811061021557fe5b60200260200101516020015185848151811061022d57fe5b60200260200101516040015186858151811061024557fe5b60200260200101516080015187868151811061025d57fe5b602002602001015160a001518a6104b2565b94506102ca565b6102c783828151811061028557fe5b60200260200101516000015184838151811061029d57fe5b6020026020010151602001518584815181106102b557fe5b602002602001015160400151886106d2565b94505b848282815181106102d757fe5b6020908102919091010152600019016101cb565b509150505b92915050565b60008281806001600160a01b0380881690891610610315578688610318565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039791906127ae565b6001600160a01b031614158061042f5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042391906127ae565b6001600160a01b031614155b1561044057600093505050506104aa565b6001600160a01b038088169089161060008061048a89846104608b610eef565b8661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b6401000276a4610a07565b915091508261049c57816000036104a1565b806000035b96505050505050505b949350505050565b60008481806001600160a01b03808a16908b16106104d157888a6104d4565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906127ae565b6001600160a01b03161415806105eb5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df91906127ae565b6001600160a01b031614155b156105fc57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b0316106106aa5782846106ad565b83835b915091506106be8983838e8e610f05565b9750505050505050505b9695505050505050565b60008281806001600160a01b03808816908916106106f15786886106f4565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906127ae565b6001600160a01b031614158061080b5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906127ae565b6001600160a01b031614155b1561081c57600093505050506104aa565b6001600160a01b038088169089161060008061085e898461083c8b610eef565b6000038661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b915091508261086d57806104a1565b509998505050505050505050565b606060008380602001905181019061089391906128e8565b90506000815167ffffffffffffffff811180156108af57600080fd5b506040519080825280602002602001820160405280156108d9578160200160208202803683370190505b50905060005b82518110156102eb578281815181106108f457fe5b60200260200101516060015160ff16600014156109935761098c83828151811061091a57fe5b60200260200101516000015184838151811061093257fe5b60200260200101516020015185848151811061094a57fe5b60200260200101516040015186858151811061096257fe5b60200260200101516080015187868151811061097a57fe5b602002602001015160a001518a610cc5565b94506109e7565b6109e48382815181106109a257fe5b6020026020010151600001518483815181106109ba57fe5b6020026020010151602001518584815181106109d257fe5b602002602001015160400151886102f6565b94505b848282815181106109f457fe5b60209081029190910101526001016108df565b60008083610a5c576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b6000808513908080610a708a8a8a8a610f7f565b9250925092505b805115801590610a9d5750866001600160a01b031681604001516001600160a01b031614155b15610c8e57610aaa612692565b60408201516001600160a01b031681526060820151610acc908c90868d611012565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b602084015290830151610b1a91610b09908d908c61106f565b6080850151855161ffff88166110bc565b60c085015260a084015260808301526001600160a01b031660408301528415610b7c57610b508160c00151826080015101610eef565b825103825260a0810151610b7290610b6790610eef565b6020840151906112ae565b6020830152610bb7565b610b898160a00151610eef565b825101825260c08101516080820151610bb191610ba69101610eef565b6020840151906112c4565b60208301525b80606001516001600160a01b031682604001516001600160a01b03161415610c4d57806040015115610c24576000610bf38c83602001516112da565b5050505050509150508a15610c06576000035b610c148360800151826113a1565b6001600160801b03166080840152505b89610c33578060200151610c3c565b60018160200151035b600290810b900b6060830152610c88565b80600001516001600160a01b031682604001516001600160a01b031614610c8857610c7b8260400151611457565b600290810b900b60608301525b50610a77565b83151589151514610ca757602081015181518903610cb4565b8060000151880381602001515b909b909a5098505050505050505050565b60008481806001600160a01b03808a16908b1610610ce457888a610ce7565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906127ae565b6001600160a01b0316141580610dfe5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df291906127ae565b6001600160a01b031614155b15610e0f57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b031610610ebd578284610ec0565b83835b915091506106be8983838e8e611776565b606081806020019051810190610ee791906128e8565b90505b919050565b6000600160ff1b8210610f0157600080fd5b5090565b600085610f1457506000610f76565b841580610f1f575083155b15610f2c57506000610f76565b6000610f4560ff8416610f3f888a6117ee565b906117ee565b90506000610f5a60ff8616610f3f888b611812565b9050610f716001828481610f6a57fe5b0490611822565b925050505b95945050505050565b600080610f8a6126ce565b6000610f9588611832565b9050610fa6878683600001516118e0565b610faf886119b1565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b8152602001610ff98a611a1e565b6001600160801b03168152509150509450945094915050565b600080600061102387878787611a59565b9093509150620d89e719600284900b121561104457620d89e719925061105a565b620d89e8600284900b131561105a57620d89e892505b61106383611a75565b90509450945094915050565b60008361109057816001600160a01b0316836001600160a01b0316116110a6565b816001600160a01b0316836001600160a01b0316105b6110b057826110b2565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906111415760006110f58989620f42400362ffffff16620f4240611da7565b90508261110e576111098c8c8c6001611e56565b61111b565b61111b8b8d8c6001611ec6565b955085811061112c578a965061113b565b6111388c8b8386611f71565b96505b5061118b565b81611158576111538b8b8b6000611ec6565b611165565b6111658a8c8b6000611e56565b93508388600003106111795789955061118b565b6111888b8a8a60000385611fbd565b95505b6001600160a01b038a81169087161482156111ee578080156111aa5750815b6111c0576111bb878d8c6001611ec6565b6111c2565b855b95508080156111cf575081155b6111e5576111e0878d8c6000611e56565b6111e7565b845b9450611238565b8080156111f85750815b61120e576112098c888c6001611e56565b611210565b855b955080801561121d575081155b6112335761122e8c888c6000611ec6565b611235565b845b94505b8115801561124857508860000385115b15611254578860000394505b81801561127357508a6001600160a01b0316876001600160a01b031614155b1561128257858903935061129f565b61129c868962ffffff168a620f42400362ffffff16612009565b93505b50505095509550955095915050565b808203828113156000831215146102f057600080fd5b818101828112156000831215146102f057600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d61010081101561135957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b121561140657826001600160801b03168260000384039150816001600160801b031610611401576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6102f0565b826001600160801b03168284019150816001600160801b031610156102f0576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590611493575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6114c8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061155c57607f810383901c9150611566565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461176757886001600160a01b031661174b82611a75565b6001600160a01b031611156117605781611762565b805b611769565b815b9998505050505050505050565b60008561178557506000610f76565b841580611790575083155b1561179d57506000610f76565b60006117ac8760ff86166117ee565b905060006117ba82876117ee565b905060006117d5836117cf8a60ff89166117ee565b90611822565b90508082816117e057fe5b049998505050505050505050565b60008215806118095750508181028183828161180657fe5b04145b6102f057600080fd5b808203828111156102f057600080fd5b808201828110156102f057600080fd5b61183a6126fc565b61184382612043565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d60e08110156118b957600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361192957816001600160a01b0316836001600160a01b0316118015611924575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b611957565b816001600160a01b0316836001600160a01b031610801561195757506401000276a36001600160a01b038416115b9050806119ab576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d6020811015611a1657600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b600080611a688686868661211a565b9150915094509492505050565b60008060008360020b12611a8c578260020b611a94565b8260020b6000035b9050620d89e8811115611ad2576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216611ae657600160801b611af8565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611b2c576ffff97272373d413259a46990580e213a0260801c5b6004821615611b4b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611b6a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611b89576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611ba8576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611bc7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611be6576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611c06576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611c26576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611c46576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611c66576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611c86576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611ca6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611cc6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611ce6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611d07576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611d27576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611d46576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611d63576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611d7e578060001981611d7a57fe5b0490505b640100000000810615611d92576001611d95565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611ddd5760008411611dd257600080fd5b5082900490506110b5565b808411611de957600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b03161115611e76579293925b81611ea357611e9e836001600160801b03168686036001600160a01b0316600160601b611da7565b610f76565b610f76836001600160801b03168686036001600160a01b0316600160601b612009565b6000836001600160a01b0316856001600160a01b03161115611ee6579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716611f1057600080fd5b83611f4057866001600160a01b0316611f338383896001600160a01b0316611da7565b81611f3a57fe5b04611f66565b611f66611f578383896001600160a01b0316612009565b886001600160a01b0316612318565b979650505050505050565b600080856001600160a01b031611611f8857600080fd5b6000846001600160801b031611611f9e57600080fd5b81611fb057611e9e8585856001612323565b610f768585856001612404565b600080856001600160a01b031611611fd457600080fd5b6000846001600160801b031611611fea57600080fd5b81611ffc57611e9e8585856000612404565b610f768585856000612323565b6000612016848484611da7565b90506000828061202257fe5b84860911156110b557600019811061203957600080fd5b6001019392505050565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207e57600080fd5b505afa9250505080156120a357506040513d602081101561209e57600080fd5b505160015b61211357816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506040513d602081101561210a57600080fd5b50519050610eea565b9050610eea565b6000808581600286810b9088900b8161212f57fe5b05905060008760020b12801561215657508560020b8760020b8161214f57fe5b0760020b15155b1561216057600019015b841561223757600080612172836124e0565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d60208110156121fd57600080fd5b505116801515975090508661221957898360ff1686030261222c565b89612223826124f2565b840360ff168603025b97505050505061230d565b600080612246836001016124e0565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156122a457600080fd5b505afa1580156122b8573d6000803e3d6000fd5b505050506040513d60208110156122ce57600080fd5b50511680151597509050866122f057898360ff0360ff16866001010102612306565b89836122fb83612592565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b600081156123965760006001600160a01b038411156123595761235484600160601b876001600160801b0316611da7565b612371565b6001600160801b038516606085901b8161236f57fe5b045b905061238e6123896001600160a01b03881683611822565b61267c565b9150506104aa565b60006001600160a01b038411156123c4576123bf84600160601b876001600160801b0316612009565b6123db565b6123db606085901b6001600160801b038716612318565b905080866001600160a01b0316116123f257600080fd5b6001600160a01b0386160390506104aa565b6000826124125750836104aa565b600160601b600160e01b03606085901b168215612499576001600160a01b0386168481029085828161244057fe5b0414156124715781810182811061246f5761246583896001600160a01b031683612009565b93505050506104aa565b505b6124908261248b878a6001600160a01b03168681610f6a57fe5b612318565b925050506104aa565b6001600160a01b038616848102908582816124b057fe5b041480156124bd57508082115b6124c657600080fd5b808203612465612389846001600160a01b038b1684612009565b60020b600881901d9161010090910790565b600080821161250057600080fd5b600160801b821061251357608091821c91015b68010000000000000000821061252b57604091821c91015b640100000000821061253f57602091821c91015b62010000821061255157601091821c91015b610100821061256257600891821c91015b6010821061257257600491821c91015b6004821061258257600291821c91015b60028210610eea57600101919050565b60008082116125a057600080fd5b5060ff6001600160801b038216156125bb57607f19016125c3565b608082901c91505b67ffffffffffffffff8216156125dc57603f19016125e4565b604082901c91505b63ffffffff8216156125f957601f1901612601565b602082901c91505b61ffff82161561261457600f190161261c565b601082901c91505b60ff82161561262e5760071901612636565b600882901c91505b600f8216156126485760031901612650565b600482901c91505b6003821615612662576001190161266a565b600282901c91505b6001821615610eea5760001901919050565b806001600160a01b0381168114610eea57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b8051610eea81612bec565b600082601f830112612737578081fd5b813567ffffffffffffffff81111561274b57fe5b61275e601f8201601f1916602001612bc8565b818152846020838601011115612772578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b0381168114610eea57600080fd5b8051610eea81612c04565b6000602082840312156127bf578081fd5b81516110b581612bec565b600080600080608085870312156127df578283fd5b84356127ea81612bec565b935060208501356127fa81612bec565b9250604085013561280a81612bec565b9396929550929360600135925050565b60008060008060008060c08789031215612832578182fd5b863561283d81612bec565b9550602087013561284d81612bec565b9450604087013561285d81612bec565b9350606087013561286d81612c04565b9250608087013561287d81612c04565b8092505060a087013590509295509295509295565b600080600080608085870312156128a7578384fd5b84356128b281612bec565b9350602085013580151581146128c6578384fd5b92506040850135915060608501356128dd81612bec565b939692955090935050565b600060208083850312156128fa578182fd5b825167ffffffffffffffff80821115612911578384fd5b818501915085601f830112612924578384fd5b81518181111561293057fe5b61293d8485830201612bc8565b8181528481019084860160c0808502870188018b101561295b578889fd5b8896505b84871015612a095780828c031215612975578889fd5b60408051828101818110898211171561298a57fe5b8252835161299781612bec565b81526129a4848b0161271c565b8a8201526129b382850161271c565b82820152606091506129c68285016127a3565b82820152608091506129d98285016127a3565b8282015260a091506129ec8285016127a3565b91810191909152845260019690960195928701929081019061295f565b50909998505050505050505050565b600060208284031215612a29578081fd5b813567ffffffffffffffff811115612a3f578182fd5b6104aa84828501612727565b60008060408385031215612a5d578182fd5b823567ffffffffffffffff811115612a73578283fd5b612a7f85828601612727565b95602094909401359450505050565b600080600060608486031215612aa2578081fd5b612aab8461278c565b9250612ab96020850161278c565b9150604084015163ffffffff81168114612ad1578182fd5b809150509250925092565b602080825282518282018190526000919060409081850190868401855b82811015612b6057815180516001600160a01b0390811686528782015181168887015286820151168686015260608082015160ff9081169187019190915260808083015182169087015260a091820151169085015260c09093019290850190600101612af9565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ba557835183529284019291840191600101612b89565b50909695505050505050565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612be457fe5b604052919050565b6001600160a01b0381168114612c0157600080fd5b50565b60ff81168114612c0157600080fdfea26469706673582212205f0301b94acc3ae7c95c9cf7282b659b38b1111b9512431d6c6ae24f2141335364736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77CD49E4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x77CD49E4 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x97DE0A84 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xC25DDCE0 EQ PUSH2 0x142 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH3 0x614B2E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x2D0F9A30 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x53201A4C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x6E95D3D8 EQ PUSH2 0xE8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2B6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2BBF JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x2892 JUMP JUMPDEST PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP3 SWAP2 SWAP1 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0xCC5 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A18 JUMP JUMPDEST PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2ADC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 NOT ADD JUMPDEST DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x276 JUMPI PUSH2 0x26F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x215 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x245 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x25D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0x4B2 JUMP JUMPDEST SWAP5 POP PUSH2 0x2CA JUMP JUMPDEST PUSH2 0x2C7 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x285 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x6D2 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT ADD PUSH2 0x1CB JUMP JUMPDEST POP SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x315 JUMPI DUP7 DUP9 PUSH2 0x318 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x397 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x42F JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x423 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x48A DUP10 DUP5 PUSH2 0x460 DUP12 PUSH2 0xEEF JUMP JUMPDEST DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0xA07 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x49C JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x4A1 JUMP JUMPDEST DUP1 PUSH1 0x0 SUB JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0x4D1 JUMPI DUP9 DUP11 PUSH2 0x4D4 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x553 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x5EB JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x670 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x6AA JUMPI DUP3 DUP5 PUSH2 0x6AD JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0xF05 JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x6F1 JUMPI DUP7 DUP9 PUSH2 0x6F4 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x773 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x80B JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x85E DUP10 DUP5 PUSH2 0x83C DUP12 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x0 SUB DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x86D JUMPI DUP1 PUSH2 0x4A1 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x893 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x8AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2EB JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x993 JUMPI PUSH2 0x98C DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x91A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x932 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x94A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x962 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x97A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0xCC5 JUMP JUMPDEST SWAP5 POP PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x9E4 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x9BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x2F6 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xA5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xA70 DUP11 DUP11 DUP11 DUP11 PUSH2 0xF7F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA9D JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xC8E JUMPI PUSH2 0xAAA PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xACC SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x1012 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0xB1A SWAP2 PUSH2 0xB09 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x106F JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x10BC JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0xB7C JUMPI PUSH2 0xB50 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xB72 SWAP1 PUSH2 0xB67 SWAP1 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0xB89 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xBB1 SWAP2 PUSH2 0xBA6 SWAP2 ADD PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xC4D JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0xC24 JUMPI PUSH1 0x0 PUSH2 0xBF3 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x12DA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0xC06 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0xC14 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0xC33 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xC88 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC88 JUMPI PUSH2 0xC7B DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xA77 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0xCA7 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0xCB4 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0xCE4 JUMPI DUP9 DUP11 PUSH2 0xCE7 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0xDFE JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF2 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE83 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0xEBD JUMPI DUP3 DUP5 PUSH2 0xEC0 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0x1776 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xEE7 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0xF01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xF14 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0xF1F JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF2C JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF45 PUSH1 0xFF DUP5 AND PUSH2 0xF3F DUP9 DUP11 PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF5A PUSH1 0xFF DUP7 AND PUSH2 0xF3F DUP9 DUP12 PUSH2 0x1812 JUMP JUMPDEST SWAP1 POP PUSH2 0xF71 PUSH1 0x1 DUP3 DUP5 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF8A PUSH2 0x26CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP9 PUSH2 0x1832 JUMP JUMPDEST SWAP1 POP PUSH2 0xFA6 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xFAF DUP9 PUSH2 0x19B1 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF9 DUP11 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1023 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1A59 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x1044 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x105A JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x105A JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x1063 DUP4 PUSH2 0x1A75 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1090 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x10A6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x10B0 JUMPI DUP3 PUSH2 0x10B2 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x1141 JUMPI PUSH1 0x0 PUSH2 0x10F5 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x110E JUMPI PUSH2 0x1109 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x111B JUMP JUMPDEST PUSH2 0x111B DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x112C JUMPI DUP11 SWAP7 POP PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1138 DUP13 DUP12 DUP4 DUP7 PUSH2 0x1F71 JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x118B JUMP JUMPDEST DUP2 PUSH2 0x1158 JUMPI PUSH2 0x1153 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1165 JUMP JUMPDEST PUSH2 0x1165 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x1179 JUMPI DUP10 SWAP6 POP PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1188 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1FBD JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x11EE JUMPI DUP1 DUP1 ISZERO PUSH2 0x11AA JUMPI POP DUP2 JUMPDEST PUSH2 0x11C0 JUMPI PUSH2 0x11BB DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x11CF JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x11E5 JUMPI PUSH2 0x11E0 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x11E7 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x1238 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x11F8 JUMPI POP DUP2 JUMPDEST PUSH2 0x120E JUMPI PUSH2 0x1209 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x121D JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x1233 JUMPI PUSH2 0x122E DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1235 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x1248 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x1254 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1273 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1282 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x129F JUMP JUMPDEST PUSH2 0x129C DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1342 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x1359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1406 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x1401 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x1493 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x14C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x155C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x1566 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1767 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x174B DUP3 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1760 JUMPI DUP2 PUSH2 0x1762 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x1769 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0x1785 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0x1790 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x179D JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AC DUP8 PUSH1 0xFF DUP7 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17BA DUP3 DUP8 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17D5 DUP4 PUSH2 0x17CF DUP11 PUSH1 0xFF DUP10 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x17E0 JUMPI INVALID JUMPDEST DIV SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1809 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x1806 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x183A PUSH2 0x26FC JUMP JUMPDEST PUSH2 0x1843 DUP3 PUSH2 0x2043 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x188F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x18B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1929 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1924 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x1957 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x1957 JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x19AB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A68 DUP7 DUP7 DUP7 DUP7 PUSH2 0x211A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1A8C JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1A94 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1AE6 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1AF8 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x1B2C JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1B4B JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x1B6A JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x1B89 JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x1BA8 JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x1BC7 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1BE6 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1C06 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1C26 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1C46 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x1C66 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1C86 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1CA6 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1CC6 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1CE6 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1D07 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1D27 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1D46 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1D63 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1D7E JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x1D7A JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1D92 JUMPI PUSH1 0x1 PUSH2 0x1D95 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1DDD JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1DD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x10B5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1DE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1E76 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1EA3 JUMPI PUSH2 0x1E9E DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF76 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1EE6 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1F40 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F33 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST DUP2 PUSH2 0x1F3A JUMPI INVALID JUMPDEST DIV PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1F66 PUSH2 0x1F57 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2318 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FB0 JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2323 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2404 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FFC JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2323 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2016 DUP5 DUP5 DUP5 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x2022 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x2039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x207E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x20A3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x209E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x2113 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x212F JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x2156 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x214F JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2160 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x2237 JUMPI PUSH1 0x0 DUP1 PUSH2 0x2172 DUP4 PUSH2 0x24E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x2219 JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x222C JUMP JUMPDEST DUP10 PUSH2 0x2223 DUP3 PUSH2 0x24F2 JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2246 DUP4 PUSH1 0x1 ADD PUSH2 0x24E0 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x22CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x22F0 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x2306 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x22FB DUP4 PUSH2 0x2592 JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x2396 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x2359 JUMPI PUSH2 0x2354 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x2371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x236F JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x238E PUSH2 0x2389 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x267C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x23C4 JUMPI PUSH2 0x23BF DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST PUSH2 0x23DB JUMP JUMPDEST PUSH2 0x23DB PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x2318 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x23F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2412 JUMPI POP DUP4 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x2499 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x2440 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x2471 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x246F JUMPI PUSH2 0x2465 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST POP JUMPDEST PUSH2 0x2490 DUP3 PUSH2 0x248B DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST PUSH2 0x2318 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x24B0 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x24BD JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x24C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x2465 PUSH2 0x2389 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x2513 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x252B JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x253F JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x2551 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x2562 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x2572 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x2582 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xEEA JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x25A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x25BB JUMPI PUSH1 0x7F NOT ADD PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x25DC JUMPI PUSH1 0x3F NOT ADD PUSH2 0x25E4 JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x25F9 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x2601 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x2614 JUMPI PUSH1 0xF NOT ADD PUSH2 0x261C JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x262E JUMPI PUSH1 0x7 NOT ADD PUSH2 0x2636 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x2648 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x2650 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x2662 JUMPI PUSH1 0x1 NOT ADD PUSH2 0x266A JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xEEA JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2737 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x274B JUMPI INVALID JUMPDEST PUSH2 0x275E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2772 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2C04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10B5 DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27DF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x27EA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x27FA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x280A DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2832 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x283D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x284D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x285D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x286D DUP2 PUSH2 0x2C04 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x287D DUP2 PUSH2 0x2C04 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28A7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x28B2 DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x28C6 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x28DD DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28FA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2911 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2924 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2930 JUMPI INVALID JUMPDEST PUSH2 0x293D DUP5 DUP6 DUP4 MUL ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD PUSH1 0xC0 DUP1 DUP6 MUL DUP8 ADD DUP9 ADD DUP12 LT ISZERO PUSH2 0x295B JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x2A09 JUMPI DUP1 DUP3 DUP13 SUB SLT ISZERO PUSH2 0x2975 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT DUP10 DUP3 GT OR ISZERO PUSH2 0x298A JUMPI INVALID JUMPDEST DUP3 MSTORE DUP4 MLOAD PUSH2 0x2997 DUP2 PUSH2 0x2BEC JUMP JUMPDEST DUP2 MSTORE PUSH2 0x29A4 DUP5 DUP12 ADD PUSH2 0x271C JUMP JUMPDEST DUP11 DUP3 ADD MSTORE PUSH2 0x29B3 DUP3 DUP6 ADD PUSH2 0x271C JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 POP PUSH2 0x29C6 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x80 SWAP2 POP PUSH2 0x29D9 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 POP PUSH2 0x29EC DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP8 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x295F JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A29 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A3F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4AA DUP5 DUP3 DUP6 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A5D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A73 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2A7F DUP6 DUP3 DUP7 ADD PUSH2 0x2727 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2AAB DUP5 PUSH2 0x278C JUMP JUMPDEST SWAP3 POP PUSH2 0x2AB9 PUSH1 0x20 DUP6 ADD PUSH2 0x278C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AD1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2B60 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE DUP8 DUP3 ADD MLOAD DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD AND DUP7 DUP7 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP2 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP3 AND SWAP1 DUP8 ADD MSTORE PUSH1 0xA0 SWAP2 DUP3 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AF9 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2BA5 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B89 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BE4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F SUB ADD 0xB9 0x4A 0xCC GASPRICE 0xE7 0xC9 0x5C SWAP13 0xF7 0x28 0x2B PUSH6 0x9B38B1111B95 SLT NUMBER SAR PUSH13 0x6AE24F2141335364736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"191:7304:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6501:992;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3575:865;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2656:913::-;;;;;;:::i;:::-;;:::i;4446:859::-;;;;;;:::i;:::-;;:::i;5502:993::-;;;;;;:::i;:::-;;:::i;702:3284:28:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1735:915:23:-;;;;;;:::i;:::-;;:::i;377:143::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6501:992::-;6600:16;6628:21;6663:4;6652:27;;;;;;;;;;;;:::i;:::-;6628:51;;6689:26;6732:6;:13;6718:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6718:28:23;-1:-1:-1;6773:13:23;;6689:57;;-1:-1:-1;;;6773:17:23;6756:704;6823:6;6830:1;6823:9;;;;;;;;;;;;;;:18;;;:23;;6845:1;6823:23;6819:595;;;6897:258;6932:6;6939:1;6932:9;;;;;;;;;;;;;;:17;;;6971:6;6978:1;6971:9;;;;;;;;;;;;;;:18;;;7011:6;7018:1;7011:9;;;;;;;;;;;;;;:14;;;7047:6;7054:1;7047:9;;;;;;;;;;;;;;:20;;;7089:6;7096:1;7089:9;;;;;;;;;;;;;;:20;;;7131:6;6897:13;:258::i;:::-;6888:267;;6819:595;;;7225:174;7260:6;7267:1;7260:9;;;;;;;;;;;;;;:17;;;7299:6;7306:1;7299:9;;;;;;;;;;;;;;:18;;;7339:6;7346:1;7339:9;;;;;;;;;;;;;;:14;;;7375:6;7225:13;:174::i;:::-;7216:183;;6819:595;7443:6;7428:9;7438:1;7428:12;;;;;;;;;;;;;;;;;:21;-1:-1:-1;;6800:3:23;6756:704;;;-1:-1:-1;7477:9:23;-1:-1:-1;;6501:992:23;;;;;:::o;3575:865::-;3725:17;3801:4;3725:17;;-1:-1:-1;;;;;3851:18:23;;;;;;;:86;;3919:8;3929:7;3851:86;;;3885:7;3894:8;3851:86;3816:121;;;;3993:6;-1:-1:-1;;;;;3974:25:23;:6;-1:-1:-1;;;;;3974:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3974:25:23;;;:54;;;;4022:6;-1:-1:-1;;;;;4003:25:23;:6;-1:-1:-1;;;;;4003:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4003:25:23;;;3974:54;3970:93;;;4051:1;4044:8;;;;;;;3970:93;-1:-1:-1;;;;;4091:18:23;;;;;;;4073:15;;4154:206;4173:4;4091:18;4215:19;:8;:17;:19::i;:::-;4248:10;:102;;4323:27;4248:102;;;4277:27;4154:5;:206::i;:::-;4119:241;;;;4383:10;:50;;4425:7;4424:8;;4383:50;;;4405:7;4404:8;;4383:50;4371:62;;3575:865;;;;;;;;;;;;;:::o;2656:913::-;2858:16;2925:4;2858:16;;-1:-1:-1;;;;;2975:18:23;;;;;;;:86;;3043:8;3053:7;2975:86;;;3009:7;3018:8;2975:86;2940:121;;;;3117:6;-1:-1:-1;;;;;3098:25:23;:6;-1:-1:-1;;;;;3098:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3098:25:23;;;:54;;;;3146:6;-1:-1:-1;;;;;3127:25:23;:6;-1:-1:-1;;;;;3127:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3127:25:23;;;3098:54;3094:93;;;3175:1;3168:8;;;;;;;3094:93;3198:16;3216;3238:6;-1:-1:-1;;;;;3238:18:23;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3197:61;-1:-1:-1;;;;;3197:61:23;;;-1:-1:-1;;;;;3197:61:23;;;3269:17;3288:18;3320:8;-1:-1:-1;;;;;3310:18:23;:7;-1:-1:-1;;;;;3310:18:23;;:88;;3379:8;3389;3310:88;;;3344:8;3354;3310:88;3268:130;;;;3420:142;3448:9;3471;3494:10;3518;3542;3420:14;:142::i;:::-;3409:153;;2656:913;;;;;;;;;;;;;;;;:::o;4446:859::-;4596:16;4671:4;4596:16;;-1:-1:-1;;;;;4721:18:23;;;;;;;:86;;4789:8;4799:7;4721:86;;;4755:7;4764:8;4721:86;4686:121;;;;4863:6;-1:-1:-1;;;;;4844:25:23;:6;-1:-1:-1;;;;;4844:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4844:25:23;;;:54;;;;4892:6;-1:-1:-1;;;;;4873:25:23;:6;-1:-1:-1;;;;;4873:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4873:25:23;;;4844:54;4840:93;;;4921:1;4914:8;;;;;;;4840:93;-1:-1:-1;;;;;4961:18:23;;;;;;;4943:15;;5024:208;5043:4;4961:18;5086:20;:9;:18;:20::i;:::-;5085:21;;5120:10;:102;;5195:27;5120:102;;5024:208;4989:243;;;;5250:10;:48;;5290:7;5250:48;;;-1:-1:-1;5271:7:23;4446:859;-1:-1:-1;;;;;;;;;4446:859:23:o;5502:993::-;5602:16;5630:21;5665:4;5654:27;;;;;;;;;;;;:::i;:::-;5630:51;;5691:27;5735:6;:13;5721:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5721:28:23;;5691:58;;5764:9;5759:702;5783:6;:13;5779:1;:17;5759:702;;;5821:6;5828:1;5821:9;;;;;;;;;;;;;;:18;;;:23;;5843:1;5821:23;5817:597;;;5895:259;5931:6;5938:1;5931:9;;;;;;;;;;;;;;:17;;;5970:6;5977:1;5970:9;;;;;;;;;;;;;;:18;;;6010:6;6017:1;6010:9;;;;;;;;;;;;;;:14;;;6046:6;6053:1;6046:9;;;;;;;;;;;;;;:20;;;6088:6;6095:1;6088:9;;;;;;;;;;;;;;:20;;;6130:6;5895:14;:259::i;:::-;5886:268;;5817:597;;;6224:175;6260:6;6267:1;6260:9;;;;;;;;;;;;;;:17;;;6299:6;6306:1;6299:9;;;;;;;;;;;;;;:18;;;6339:6;6346:1;6339:9;;;;;;;;;;;;;;:14;;;6375:6;6224:14;:175::i;:::-;6215:184;;5817:597;6444:6;6428:10;6439:1;6428:13;;;;;;;;;;;;;;;;;:22;5798:3;;5759:702;;702:3284:28;873:14;;923:20;915:63;;;;;-1:-1:-1;;;915:63:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;988:15;1006:19;;;;988:15;;1093:131;1119:11;1144:10;1006:15;1197:17;1093:12;:131::i;:::-;1035:189;;;;;;1350:2396;1357:30;;:35;;;;:78;;;1418:17;-1:-1:-1;;;;;1396:39:28;:5;:18;;;-1:-1:-1;;;;;1396:39:28;;;1357:78;1350:2396;;;1451:28;;:::i;:::-;1518:18;;;;-1:-1:-1;;;;;1493:43:28;;;1684:10;;;;1610:155;;1655:11;;1712;1741:10;1610:27;:155::i;:::-;-1:-1:-1;;;;;1551:214:28;1585:21;;;1551:214;;;;;;1567:16;;;;1551:214;;;;;;;;;;;1552:13;;;1551:214;2010:18;;;;1968:269;;2046:75;;2068:10;;2103:17;2046:21;:75::i;:::-;2139:15;;;;2172:30;;1968:269;;;:24;:269::i;:::-;1950:14;;;1898:339;1934:14;;;1898:339;1919:13;;;1898:339;-1:-1:-1;;;;;1898:339:28;1899:18;;;1898:339;2251:434;;;;2319:43;2336:4;:14;;;2320:4;:13;;;:30;2319:41;:43::i;:::-;2285:77;;;;;2432:14;;;;2405:53;;2432:25;;:23;:25::i;:::-;2405:22;;;;;:26;:53::i;:::-;2380:22;;;:78;2251:434;;;2531:25;:4;:14;;;:23;:25::i;:::-;2497:59;;;;;2643:14;;;;2627:13;;;;2599:71;;2626:43;;2627:30;2626:41;:43::i;:::-;2599:22;;;;;:26;:71::i;:::-;2574:22;;;:96;2251:434;2779:4;:21;;;-1:-1:-1;;;;;2757:43:28;:5;:18;;;-1:-1:-1;;;;;2757:43:28;;2753:983;;;2895:4;:16;;;2891:485;;;2937:19;2966:36;2975:11;2988:4;:13;;;2966:8;:36::i;:::-;2935:67;;;;;;;;;3200:10;3196:68;;;3251:13;;3196:68;3304:53;3327:5;:15;;;3344:12;3304:22;:53::i;:::-;-1:-1:-1;;;;;3286:71:28;:15;;;:71;-1:-1:-1;2891:485:28;3406:10;:46;;3439:4;:13;;;3406:46;;;3435:1;3419:4;:13;;;:17;3406:46;3393:59;;;;;;:10;;;:59;2753:983;;;3499:4;:22;;;-1:-1:-1;;;;;3477:44:28;:5;:18;;;-1:-1:-1;;;;;3477:44:28;;3473:263;;3674:47;3702:5;:18;;;3674:27;:47::i;:::-;3661:60;;;;;;:10;;;:60;3473:263;1350:2396;;;;3791:10;3777:24;;:10;:24;;;:202;;3906:22;;;;3948:30;;3930:48;;3777:202;;;3835:5;:30;;;3817:15;:48;3867:5;:22;;;3777:202;3756:223;;;;-1:-1:-1;702:3284:28;-1:-1:-1;;;;;;;;;702:3284:28:o;1735:915:23:-;1937:17;2005:4;1937:17;;-1:-1:-1;;;;;2055:18:23;;;;;;;:86;;2123:8;2133:7;2055:86;;;2089:7;2098:8;2055:86;2020:121;;;;2197:6;-1:-1:-1;;;;;2178:25:23;:6;-1:-1:-1;;;;;2178:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2178:25:23;;;:54;;;;2226:6;-1:-1:-1;;;;;2207:25:23;:6;-1:-1:-1;;;;;2207:13:23;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2207:25:23;;;2178:54;2174:93;;;2255:1;2248:8;;;;;;;2174:93;2278:16;2296;2318:6;-1:-1:-1;;;;;2318:18:23;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2277:61;-1:-1:-1;;;;;2277:61:23;;;-1:-1:-1;;;;;2277:61:23;;;2349:17;2368:18;2400:8;-1:-1:-1;;;;;2390:18:23;:7;-1:-1:-1;;;;;2390:18:23;;:88;;2459:8;2469;2390:88;;;2424:8;2434;2390:88;2348:130;;;;2501:142;2530:8;2552:9;2575:10;2599;2623;2501:15;:142::i;377:143::-;453:14;497:4;486:27;;;;;;;;;;;;:::i;:::-;479:34;;377:143;;;;:::o;924:121:14:-;976:8;-1:-1:-1;;;1004:1:14;:10;996:19;;;;;;-1:-1:-1;1036:1:14;924:121::o;1154:575:23:-;1341:16;1411:14;1407:28;;-1:-1:-1;1434:1:23;1427:8;;1407:28;1483:14;;;:33;;-1:-1:-1;1501:15:23;;1483:33;1479:47;;;-1:-1:-1;1525:1:23;1518:8;;1479:47;1536:17;1556:40;;;;:24;:9;1570;1556:13;:24::i;:::-;:28;;:40::i;:::-;1536:60;-1:-1:-1;1606:19:23;1628:41;;;;:25;:10;1643:9;1628:14;:25::i;:41::-;1606:63;;1690:32;1720:1;1703:11;1691:9;:23;;;;;;;1690:29;:32::i;:::-;1679:43;;1154:575;;;;;;;;;;:::o;3992:692:28:-;4164:8;4174:10;4186:22;;:::i;:::-;4220:21;4244:31;4263:11;4244:18;:31::i;:::-;4220:55;;4285:78;4318:10;4330:17;4349:2;:13;;;4285:32;:78::i;:::-;4378:27;4393:11;4378:14;:27::i;:::-;4373:32;;4421:2;:6;;;4415:12;;4445:232;;;;;;;;4495:15;4445:232;;;;4633:1;4445:232;;;;4588:2;:13;;;-1:-1:-1;;;;;4445:232:28;;;;;4654:2;:12;;;4445:232;;;;;;4535:25;4548:11;4535:12;:25::i;:::-;-1:-1:-1;;;;;4445:232:28;;;;4437:240;;3992:692;;;;;;;;;:::o;5128:725::-;5290:14;5306:16;5324:24;5386:69;5419:4;5425;5431:11;5444:10;5386:32;:69::i;:::-;5360:95;;-1:-1:-1;5360:95:28;-1:-1:-1;;;5578:28:28;;;;;5574:163;;;-1:-1:-1;;5620:28:28;;5574:163;;;644:9:17;5667:28:28;;;;;5663:74;;;644:9:17;;-1:-1:-1;5663:74:28;5809:37;5837:8;5809:27;:37::i;:::-;5790:56;;5128:725;;;;;;;;:::o;5859:336::-;6013:7;6040:10;:84;;6107:17;-1:-1:-1;;;;;6090:34:28;:16;-1:-1:-1;;;;;6090:34:28;;6040:84;;;6070:17;-1:-1:-1;;;;;6053:34:28;:16;-1:-1:-1;;;;;6053:34:28;;6040:84;6039:149;;6172:16;6039:149;;;6140:17;6039:149;6032:156;;5859:336;;;;;;:::o;1391:3239:16:-;1638:24;;;;-1:-1:-1;;;;;1797:41:16;;;;;;;;1863:20;;;;;;1894:1354;;1921:30;1954:61;1978:15;2002:7;1996:3;:13;1954:61;;2011:3;1954:15;:61::i;:::-;1921:94;;2040:10;:222;;2175:87;2205:19;2226:18;2246:9;2257:4;2175:29;:87::i;:::-;2040:222;;;2069:87;2099:18;2119:19;2140:9;2151:4;2069:29;:87::i;:::-;2029:233;;2306:8;2280:22;:34;2276:336;;2335:18;2316:37;;2276:336;;;2407:205;2468:19;2509:9;2540:22;2584:10;2407:39;:205::i;:::-;2388:224;;2276:336;1894:1354;;;;2655:10;:224;;2791:88;2821:19;2842:18;2862:9;2873:5;2791:29;:88::i;:::-;2655:224;;;2684:88;2714:18;2734:19;2755:9;2766:5;2684:29;:88::i;:::-;2643:236;;2926:9;2906:15;2905:16;;2897:38;2893:344;;2956:18;2937:37;;2893:344;;;3028:209;3090:19;3131:9;3171:15;3170:16;;3209:10;3028:40;:209::i;:::-;3009:228;;2893:344;-1:-1:-1;;;;;3269:38:16;;;;;;;3358:732;;;;3399:3;:14;;;;;3406:7;3399:14;:145;;3459:85;3489:16;3507:19;3528:9;3539:4;3459:29;:85::i;:::-;3399:145;;;3432:8;3399:145;3388:156;;3570:3;:15;;;;;3578:7;3577:8;3570:15;:148;;3632:86;3662:16;3680:19;3701:9;3712:5;3632:29;:86::i;:::-;3570:148;;;3604:9;3570:148;3558:160;;3358:732;;;3760:3;:14;;;;;3767:7;3760:14;:145;;3820:85;3850:19;3871:16;3889:9;3900:4;3820:29;:85::i;:::-;3760:145;;;3793:8;3760:145;3749:156;;3931:3;:15;;;;;3939:7;3938:8;3931:15;:148;;3993:86;4023:19;4044:16;4062:9;4073:5;3993:29;:86::i;:::-;3931:148;;;3965:9;3931:148;3919:160;;3358:732;4180:7;4179:8;:49;;;;;4212:15;4211:16;;4191:9;:37;4179:49;4175:117;;;4265:15;4264:16;;4244:37;;4175:117;4306:7;:49;;;;;4337:18;-1:-1:-1;;;;;4317:38:16;:16;-1:-1:-1;;;;;4317:38:16;;;4306:49;4302:322;;;4503:8;4484:15;4476:35;4464:47;;4302:322;;;4554:59;4580:8;4590:7;4554:59;;4605:7;4599:3;:13;4554:59;;:25;:59::i;:::-;4542:71;;4302:322;1391:3239;;;;;;;;;;;;;:::o;1573:120:13:-;1662:5;;;1657:16;;;;1629:8;1678:6;;;1657:28;1649:37;;;;;1276:120;1365:5;;;1360:16;;;;1332:8;1381:6;;;1360:28;1352:37;;;;;1505:512:24;1648:22;1684:21;1719:28;1761;1803:25;1842:32;1888:24;1926:16;1993:4;-1:-1:-1;;;;;1974:30:24;;2005:4;1974:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1505:512:24;;;;;;;;;;;:::o;383:236:12:-;445:9;474:1;470;:5;;;466:147;;;523:1;-1:-1:-1;;;;;499:25:12;517:1;516:2;;504:1;:15;500:19;;;-1:-1:-1;;;;;499:25:12;;491:40;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;;;;466:147;;;594:1;-1:-1:-1;;;;;570:25:12;587:1;575;:14;571:18;;;-1:-1:-1;;;;;570:25:12;;;562:40;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;;;4361:4281:17;4434:10;824;-1:-1:-1;;;;;4563:30:17;;;;;;:63;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;4597:29:17;;;4563:63;4555:77;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;;;;-1:-1:-1;;;;;4683:2:17;4658:27;;;;-1:-1:-1;;;;;4788:41:17;;4785:1;4781:49;4878:9;;;4951:18;4945:25;;4942:1;4938:33;5019:9;;;5092:10;5086:17;;5083:1;5079:25;5152:9;;;5225:6;5219:13;;5216:1;5212:21;5281:9;;;5354:4;5348:11;;5345:1;5341:19;;;5408:9;;;5481:3;5475:10;;5472:1;5468:18;5534:9;;;5601:10;;;5598:1;5594:18;;;5660:9;;;;5720:10;;;4991;;5124;;;5253;;;5380;5506;;;5632;5750;5791:3;5784:10;;5780:79;;5816:3;5810;:9;5800:5;:20;;5796:24;;5780:79;;;5855:3;5849;:9;5839:5;:20;;5835:24;;5780:79;5958:9;;;5953:3;5949:19;;;5990:11;;;;6062:9;;;;6127;;6118:19;;;6159:11;;;6231:9;6296;;6287:19;;;6328:11;;;6400:9;6465;;6456:19;;;6497:11;;;6569:9;6634;;6625:19;;;6666:11;;;6738:9;6803;;6794:19;;;6835:11;;;6907:9;6972;;6963:19;;;7004:11;;;7076:9;7141;;7132:19;;;7173:11;;;7245:9;7310;;7301:19;;;7342:11;;;7414:9;7479;;7470:19;;;7511:11;;;7583:9;7648;;7639:19;;;7680:11;;;7752:9;7817;;7808:19;;;7849:11;;;7921:9;7986;;7977:19;;;8018:11;;;;8090:9;;;;8155;;8146:19;;;;;5958:9;-1:-1:-1;;5886:17:17;;5908:2;5885:25;6033:10;;;;;;;6023:21;6202:10;;;;;;;6192:21;;;;6371:10;;;;;;;6361:21;;;;6540:10;;;;;;;6530:21;;;;6709:10;;;;;;;6699:21;;;;6878:10;;;;;;;6868:21;;;;7047:10;;;;;;;7037:21;7216:10;;;;;;;7206:21;7385:10;;;;;;;7375:21;7554:10;;;;;;;7544:21;7723:10;;;;;;;7713:21;7892:10;;;;;;;7882:21;8061:10;;;;;;;8051:21;8230:10;;;;;;;8220:21;8292:24;8284:32;;-1:-1:-1;;8368:53:17;;5900:3;8367:62;;;;8478:39;8462:55;;8461:64;;8544:17;;;;;;;;;:91;;8604:12;-1:-1:-1;;;;;8574:42:17;:26;8593:6;8574:18;:26::i;:::-;-1:-1:-1;;;;;8574:42:17;;;:61;;8628:7;8574:61;;;8619:6;8574:61;8544:91;;;8564:7;8544:91;8537:98;4361:4281;-1:-1:-1;;;;;;;;;4361:4281:17:o;526:622:23:-;713:17;783:13;779:27;;-1:-1:-1;805:1:23;798:8;;779:27;854:14;;;:33;;-1:-1:-1;872:15:23;;854:33;850:47;;;-1:-1:-1;896:1:23;889:8;;850:47;907:23;933:24;:8;:24;;;:12;:24::i;:::-;907:50;-1:-1:-1;967:17:23;987:31;907:50;1007:10;987:19;:31::i;:::-;967:51;-1:-1:-1;1028:19:23;1050:46;1080:15;1050:25;:9;:25;;;:13;:25::i;:::-;:29;;:46::i;:::-;1028:68;;1130:11;1118:9;:23;;;;;;;526:622;-1:-1:-1;;;;;;;;;526:622:23:o;986:125:13:-;1044:9;1073:6;;;:30;;-1:-1:-1;;1088:5:13;;;1102:1;1097;1088:5;1097:1;1083:15;;;;;:20;1073:30;1065:39;;;;;710:111;802:5;;;797:16;;;;789:25;;;;;435:111;527:5;;;522:16;;;;514:25;;;;;504:261:24;592:21;;:::i;:::-;634:27;656:4;634:21;:27::i;:::-;625:2;:6;;:36;;;;;;;;;;;732:4;-1:-1:-1;;;;;713:43:24;;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;713:45:24;;;;;;;671:87;;;;;;687:12;;;671:87;;;;-1:-1:-1;;;;;671:87:24;;;672:2;504:261;-1:-1:-1;504:261:24:o;4690:432:28:-;4848:18;4869:10;:182;;4997:10;-1:-1:-1;;;;;4980:27:28;:14;-1:-1:-1;;;;;4980:27:28;;:71;;;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;5011:40:28;;;4980:71;4869:182;;;4911:10;-1:-1:-1;;;;;4894:27:28;:14;-1:-1:-1;;;;;4894:27:28;;:71;;;;-1:-1:-1;824:10:17;-1:-1:-1;;;;;4925:40:28;;;4894:71;4848:203;;5069:13;5061:54;;;;;-1:-1:-1;;;5061:54:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:432;;;;:::o;771:153:24:-;855:5;898:4;-1:-1:-1;;;;;879:36:24;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;879:38:24;;771:153;-1:-1:-1;;771:153:24:o;930:151::-;1012:7;1057:4;-1:-1:-1;;;;;1038:34:24;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1087:412;1268:10;1280:16;1327:165;1388:11;1417:4;1439:11;1468:10;1327:43;:165::i;:::-;1308:184;;;;1087:412;;;;;;;:::o;1362:2580:17:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;-1:-1:-1;644:9:17;1550:28;;;1542:42;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;;;;1595:13;1621:3;1611:13;;:93;;-1:-1:-1;;;1611:93:17;;;1632:34;1611:93;1595:109;;;-1:-1:-1;1728:3:17;1718:13;;:18;1714:83;;1755:34;1747:42;1794:3;1746:51;1714:83;1821:3;1811:13;;:18;1807:83;;1848:34;1840:42;1887:3;1839:51;1807:83;1914:3;1904:13;;:18;1900:83;;1941:34;1933:42;1980:3;1932:51;1900:83;2007:4;1997:14;;:19;1993:84;;2035:34;2027:42;2074:3;2026:51;1993:84;2101:4;2091:14;;:19;2087:84;;2129:34;2121:42;2168:3;2120:51;2087:84;2195:4;2185:14;;:19;2181:84;;2223:34;2215:42;2262:3;2214:51;2181:84;2289:4;2279:14;;:19;2275:84;;2317:34;2309:42;2356:3;2308:51;2275:84;2383:5;2373:15;;:20;2369:85;;2412:34;2404:42;2451:3;2403:51;2369:85;2478:5;2468:15;;:20;2464:85;;2507:34;2499:42;2546:3;2498:51;2464:85;2573:5;2563:15;;:20;2559:85;;2602:34;2594:42;2641:3;2593:51;2559:85;2668:5;2658:15;;:20;2654:85;;2697:34;2689:42;2736:3;2688:51;2654:85;2763:6;2753:16;;:21;2749:86;;2793:34;2785:42;2832:3;2784:51;2749:86;2859:6;2849:16;;:21;2845:86;;2889:34;2881:42;2928:3;2880:51;2845:86;2955:6;2945:16;;:21;2941:86;;2985:34;2977:42;3024:3;2976:51;2941:86;3051:6;3041:16;;:21;3037:86;;3081:34;3073:42;3120:3;3072:51;3037:86;3147:7;3137:17;;:22;3133:86;;3178:33;3170:41;3216:3;3169:50;3133:86;3243:7;3233:17;;:22;3229:85;;3274:32;3266:40;3311:3;3265:49;3229:85;3338:7;3328:17;;:22;3324:83;;3369:30;3361:38;3404:3;3360:47;3324:83;3431:7;3421:17;;:22;3417:78;;3462:25;3454:33;3492:3;3453:42;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;-1:-1:-1;;3528:25:17;;;;;;3520:33;;3506:47;3912:7;3903:5;:17;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:11:-;861:14;;;-1:-1:-1;;1368:1:11;1365;1358:20;1400:9;;;;-1:-1:-1;1451:13:11;;;1435:14;;;;1431:34;;-1:-1:-1;1547:10:11;1543:179;;1595:1;1581:11;:15;1573:24;;;;;;-1:-1:-1;1648:23:11;;;;-1:-1:-1;1698:13:11;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2560:12;2575;;;:26;;2695:22;;;;;3498:1;3479;:15;;3478:21;;3725:17;;;3721:21;;3714:28;3783:17;;;3779:21;;3772:28;3842:17;;;3838:21;;3831:28;3901:17;;;3897:21;;3890:28;3960:17;;;3956:21;;3949:28;4020:17;;;4016:21;;;4009:28;3067:12;;;;3063:23;;;3088:1;3059:31;2337:20;;;2326:32;;;3118:12;;;;2380:21;;;;2823:16;;;;3109:21;;;;4484:11;;;;;-1:-1:-1;;749:3776:11;;;;;:::o;8727:532:15:-;8892:15;8939:13;-1:-1:-1;;;;;8923:29:15;:13;-1:-1:-1;;;;;8923:29:15;;8919:98;;;8988:13;;9003;8919:98;9047:7;:205;;9177:75;9193:9;-1:-1:-1;;;;;9177:75:15;9220:13;9204;:29;-1:-1:-1;;;;;9177:75:15;-1:-1:-1;;;9177:15:15;:75::i;:::-;9047:205;;;9073:85;9099:9;-1:-1:-1;;;;;9073:85:15;9126:13;9110;:29;-1:-1:-1;;;;;9073:85:15;-1:-1:-1;;;9073:25:15;:85::i;7493:779::-;7658:15;7705:13;-1:-1:-1;;;;;7689:29:15;:13;-1:-1:-1;;;;;7689:29:15;;7685:98;;;7754:13;;7769;7685:98;-1:-1:-1;;;;;;;309:2:10;7815:45:15;;;;-1:-1:-1;;;;;7891:29:15;;;7870:50;;;7939:17;;7931:26;;;;;;7987:7;:278;;8252:13;-1:-1:-1;;;;;8195:70:15;:54;8211:10;8223;8235:13;-1:-1:-1;;;;;8195:54:15;:15;:54::i;:::-;:70;;;;;;7987:278;;;8013:163;8059:64;8085:10;8097;8109:13;-1:-1:-1;;;;;8059:64:15;:25;:64::i;:::-;8145:13;-1:-1:-1;;;;;8013:163:15;:24;:163::i;:::-;7968:297;7493:779;-1:-1:-1;;;;;;;7493:779:15:o;5299:550::-;5467:16;5514:1;5503:8;-1:-1:-1;;;;;5503:12:15;;5495:21;;;;;;5546:1;5534:9;-1:-1:-1;;;;;5534:13:15;;5526:22;;;;;;5644:10;:198;;5766:76;5806:8;5816:9;5827:8;5837:4;5766:39;:76::i;5644:198::-;5673:74;5711:8;5721:9;5732:8;5742:4;5673:37;:74::i;6395:550::-;6565:16;6612:1;6601:8;-1:-1:-1;;;;;6601:12:15;;6593:21;;;;;;6644:1;6632:9;-1:-1:-1;;;;;6632:13:15;;6624:22;;;;;;6736:10;:202;;6862:76;6900:8;6910:9;6921;6932:5;6862:37;:76::i;6736:202::-;6765:78;6805:8;6815:9;6826;6837:5;6765:39;:78::i;4807:315:11:-;4929:14;4964:25;4971:1;4974;4977:11;4964:6;:25::i;:::-;4955:34;;5031:1;5016:11;5003:25;;;;;5013:1;5010;5003:25;:29;4999:117;;;-1:-1:-1;;5056:6:11;:26;5048:35;;;;;;5097:8;;4807:315;;;;;:::o;203:295:24:-;285:6;326:4;-1:-1:-1;;;;;307:35:24;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;307:37:24;;;303:189;;469:4;-1:-1:-1;;;;;450:28:24;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;450:30:24;;-1:-1:-1;436:45:24;;303:189;397:6;-1:-1:-1;383:21:24;;1696:1991:33;1861:10;;1946:11;1861:10;1987:18;;;;;;;;;;;;;;1968:37;;2026:1;2019:4;:8;;;:35;;;;;2038:11;2031:18;;:4;:18;;;;;;;;:23;;;;2019:35;2015:53;;;-1:-1:-1;;2056:12:33;2015:53;2118:3;2114:1567;;;2138:13;2153:12;2169:20;2178:10;2169:8;:20::i;:::-;2349:24;;;-1:-1:-1;;;2349:24:33;;2306:1;2349:24;;;;;;;;;2137:52;;-1:-1:-1;2137:52:33;;-1:-1:-1;2306:11:33;;;;2285:33;;-1:-1:-1;;2285:33:33;;2270:12;;2285:33;;-1:-1:-1;;;;;2349:15:33;;;;;:24;;;;;;;;;;;;;;:15;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2349:24:33;:31;2527:11;;;;-1:-1:-1;2349:31:33;-1:-1:-1;2527:11:33;2669:170;;2828:11;2817:6;2811:13;;2798:10;:26;2797:42;2669:170;;;2767:11;2728:34;2755:6;2728:26;:34::i;:::-;2719:6;:43;2713:50;;2700:10;:63;2699:79;2669:170;2662:177;;2114:1567;;;;;;;2968:13;2983:12;2999:24;3008:10;3021:1;3008:14;2999:8;:24::i;:::-;2967:56;;;;3095:12;3128:1;3118:6;3113:11;;:1;:11;;3112:17;3110:20;3095:35;;3144:14;3188:4;3161;-1:-1:-1;;;;;3161:15:33;;3177:7;3161:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3161:24:33;:31;3331:11;;;;-1:-1:-1;3161:31:33;-1:-1:-1;3331:11:33;3473:197;;3659:11;3648:6;3630:15;:24;3624:31;;3607:10;3620:1;3607:14;:48;3606:64;3473:197;;;3576:11;3565:6;3527:35;3555:6;3527:27;:35::i;:::-;:44;3521:51;;3504:10;3517:1;3504:14;:68;3503:84;3473:197;3466:204;;2114:1567;;;;;1696:1991;;;;;;;;;:::o;492:165:18:-;613:9;;;627;;624:16;;609:32;;590:61::o;3597:1153:15:-;3770:7;3947:3;3943:801;;;3966:16;-1:-1:-1;;;;;4023:27:15;;;:180;;4151:52;4167:6;-1:-1:-1;;;4193:9:15;-1:-1:-1;;;;;4151:52:15;:15;:52::i;:::-;4023:180;;;-1:-1:-1;;;;;4077:47:15;;309:2:10;4078:33:15;;;4077:47;;;;;;4023:180;3966:255;-1:-1:-1;4243:43:15;:31;-1:-1:-1;;;;;4243:17:15;;3966:255;4243:21;:31::i;:::-;:41;:43::i;:::-;4236:50;;;;;3943:801;4317:16;-1:-1:-1;;;;;4374:27:15;;;:213;;4525:62;4551:6;-1:-1:-1;;;4577:9:15;-1:-1:-1;;;;;4525:62:15;:25;:62::i;:::-;4374:213;;;4428:70;309:2:10;4453:33:15;;;-1:-1:-1;;;;;4428:70:15;;:24;:70::i;:::-;4317:288;;4639:8;4628;-1:-1:-1;;;;;4628:19:15;;4620:28;;;;;;-1:-1:-1;;;;;4713:19:15;;;;-1:-1:-1;4698:35:15;;1405:1366;1576:7;1711:11;1707:32;;-1:-1:-1;1731:8:15;1724:15;;1707:32;-1:-1:-1;;;;;;;309:2:10;1770:45:15;;;;1826:939;;;;-1:-1:-1;;;;;1882:50:15;;1893:17;;;;1914:6;1893:17;1914:6;1882:38;;;;;:50;1878:323;;;1974:20;;;2016:25;;;2012:174;;2125:60;2151:10;2163:8;-1:-1:-1;;;;;2125:60:15;2173:11;2125:25;:60::i;:::-;2110:76;;;;;;;2012:174;1878:323;;2230:73;2255:10;2267:35;2295:6;2281:8;-1:-1:-1;;;;;2268:21:15;:10;:21;;;;2267:35;2230:24;:73::i;:::-;2215:89;;;;;;1826:939;-1:-1:-1;;;;;2530:50:15;;2541:17;;;;2562:6;2541:17;2562:6;2530:38;;;;;:50;:74;;;;;2597:7;2584:10;:20;2530:74;2522:83;;;;;;2641:20;;;2682:72;:60;2641:10;-1:-1:-1;;;;;2682:60:15;;2641:20;2682:25;:60::i;775:160:33:-;882:9;;890:1;882:9;;;;924:3;917:10;;;;775:160::o;671:731:8:-;733:7;764:1;760;:5;752:14;;;;;;-1:-1:-1;;;781:1:8;:40;777:102;;843:3;837:9;;;;860:8;777:102;897:19;892:1;:24;888:84;;938:2;932:8;;;;954:7;888:84;990:11;985:1;:16;981:76;;1023:2;1017:8;;;;1039:7;981:76;1075:7;1070:1;:12;1066:72;;1104:2;1098:8;;;;1120:7;1066:72;1156:5;1151:1;:10;1147:68;;1183:1;1177:7;;;;1198:6;1147:68;1233:4;1228:1;:9;1224:67;;1259:1;1253:7;;;;1274:6;1224:67;1309:3;1304:1;:8;1300:66;;1334:1;1328:7;;;;1349:6;1300:66;1384:3;1379:1;:8;1375:20;;1394:1;1389:6;671:731;;;:::o;1893:894::-;1956:7;1987:1;1983;:5;1975:14;;;;;;-1:-1:-1;2004:3:8;-1:-1:-1;;;;;2021:21:8;;:25;2017:104;;-1:-1:-1;;2062:8:8;2017:104;;;2107:3;2101:9;;;;;2017:104;2138:16;2134:20;;:24;2130:101;;-1:-1:-1;;2174:7:8;2130:101;;;2218:2;2212:8;;;;;2130:101;2248:16;2244:20;;:24;2240:101;;-1:-1:-1;;2284:7:8;2240:101;;;2328:2;2322:8;;;;;2240:101;2358:16;2354:20;;:24;2350:101;;-1:-1:-1;;2394:7:8;2350:101;;;2438:2;2432:8;;;;;2350:101;2468:15;2464:19;;:23;2460:98;;-1:-1:-1;;2503:6:8;2460:98;;;2546:1;2540:7;;;;;2460:98;2575:3;2571:7;;:11;2567:86;;-1:-1:-1;;2598:6:8;2567:86;;;2641:1;2635:7;;;;;2567:86;2670:3;2666:7;;:11;2662:86;;-1:-1:-1;;2693:6:8;2662:86;;;2736:1;2730:7;;;;;2662:86;2765:3;2761:7;;:11;2757:23;;-1:-1:-1;;2774:6:8;1893:894;;;:::o;357:111:14:-;459:1;-1:-1:-1;;;;;439:21:14;;;;431:30;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:142:34:-;95:13;;117:33;95:13;117:33;:::i;161:542::-;;258:3;251:4;243:6;239:17;235:27;225:2;;280:5;273;266:20;225:2;320:6;307:20;346:18;342:2;339:26;336:2;;;368:9;336:2;403:54;445:2;426:13;;-1:-1:-1;;422:27:34;451:4;418:38;403:54;:::i;:::-;482:2;473:7;466:19;528:3;521:4;516:2;508:6;504:15;500:26;497:35;494:2;;;549:5;542;535:20;494:2;618;611:4;603:6;599:17;592:4;583:7;579:18;566:55;641:16;;;659:4;637:27;630:42;;;;645:7;215:488;-1:-1:-1;;215:488:34:o;708:190::-;789:13;;-1:-1:-1;;;;;831:42:34;;821:53;;811:2;;888:1;885;878:12;903:138;982:13;;1004:31;982:13;1004:31;:::i;1046:263::-;;1169:2;1157:9;1148:7;1144:23;1140:32;1137:2;;;1190:6;1182;1175:22;1137:2;1227:9;1221:16;1246:33;1273:5;1246:33;:::i;1314:614::-;;;;;1477:3;1465:9;1456:7;1452:23;1448:33;1445:2;;;1499:6;1491;1484:22;1445:2;1543:9;1530:23;1562:33;1589:5;1562:33;:::i;:::-;1614:5;-1:-1:-1;1671:2:34;1656:18;;1643:32;1684:35;1643:32;1684:35;:::i;:::-;1738:7;-1:-1:-1;1797:2:34;1782:18;;1769:32;1810:35;1769:32;1810:35;:::i;:::-;1435:493;;;;-1:-1:-1;1864:7:34;;1918:2;1903:18;1890:32;;-1:-1:-1;;1435:493:34:o;1933:894::-;;;;;;;2126:3;2114:9;2105:7;2101:23;2097:33;2094:2;;;2148:6;2140;2133:22;2094:2;2192:9;2179:23;2211:33;2238:5;2211:33;:::i;:::-;2263:5;-1:-1:-1;2320:2:34;2305:18;;2292:32;2333:35;2292:32;2333:35;:::i;:::-;2387:7;-1:-1:-1;2446:2:34;2431:18;;2418:32;2459:35;2418:32;2459:35;:::i;:::-;2513:7;-1:-1:-1;2572:2:34;2557:18;;2544:32;2585:33;2544:32;2585:33;:::i;:::-;2637:7;-1:-1:-1;2696:3:34;2681:19;;2668:33;2710;2668;2710;:::i;:::-;2762:7;2752:17;;;2816:3;2805:9;2801:19;2788:33;2778:43;;2084:743;;;;;;;;:::o;2832:649::-;;;;;2991:3;2979:9;2970:7;2966:23;2962:33;2959:2;;;3013:6;3005;2998:22;2959:2;3057:9;3044:23;3076:33;3103:5;3076:33;:::i;:::-;3128:5;-1:-1:-1;3185:2:34;3170:18;;3157:32;3227:15;;3220:23;3208:36;;3198:2;;3263:6;3255;3248:22;3198:2;3291:7;-1:-1:-1;3345:2:34;3330:18;;3317:32;;-1:-1:-1;3401:2:34;3386:18;;3373:32;3414:35;3373:32;3414:35;:::i;:::-;2949:532;;;;-1:-1:-1;2949:532:34;;-1:-1:-1;;2949:532:34:o;3486:1902::-;;3635:2;3678;3666:9;3657:7;3653:23;3649:32;3646:2;;;3699:6;3691;3684:22;3646:2;3737:9;3731:16;3766:18;3807:2;3799:6;3796:14;3793:2;;;3828:6;3820;3813:22;3793:2;3871:6;3860:9;3856:22;3846:32;;3916:7;3909:4;3905:2;3901:13;3897:27;3887:2;;3943:6;3935;3928:22;3887:2;3977;3971:9;3999:2;3995;3992:10;3989:2;;;4005:9;3989:2;4036:36;4068:2;4063;4059;4055:11;4051:20;4036:36;:::i;:::-;4106:15;;;4137:12;;;;4169:11;;;4199:4;4230:11;;;4222:20;;4218:29;;4215:42;-1:-1:-1;4212:2:34;;;4275:6;4267;4260:22;4212:2;4302:6;4293:15;;4317:1041;4331:2;4328:1;4325:9;4317:1041;;;4402:2;4396:3;4387:7;4383:17;4379:26;4376:2;;;4423:6;4415;4408:22;4376:2;4455;4490;4484:9;4536:2;4528:6;4524:15;4593:6;4581:10;4578:22;4573:2;4561:10;4558:18;4555:46;4552:2;;;4604:9;4552:2;4628:22;;4676:10;;4699:33;4676:10;4699:33;:::i;:::-;4745:21;;4803:45;4835:12;;;4803:45;:::i;:::-;4798:2;4790:6;4786:15;4779:70;4886:45;4927:2;4922:3;4918:12;4886:45;:::i;:::-;4881:2;4873:6;4869:15;4862:70;4955:2;4945:12;;4994:43;5033:2;5028:3;5024:12;4994:43;:::i;:::-;4989:2;4981:6;4977:15;4970:68;5061:3;5051:13;;5101:43;5140:2;5135:3;5131:12;5101:43;:::i;:::-;5096:2;5088:6;5084:15;5077:68;5168:3;5158:13;;5208:43;5247:2;5242:3;5238:12;5208:43;:::i;:::-;5191:15;;;5184:68;;;;5265:19;;4349:1;4342:9;;;;;5304:12;;;;5336;;;;4317:1041;;;-1:-1:-1;5377:5:34;;3615:1773;-1:-1:-1;;;;;;;;;3615:1773:34:o;5393:342::-;;5514:2;5502:9;5493:7;5489:23;5485:32;5482:2;;;5535:6;5527;5520:22;5482:2;5580:9;5567:23;5613:18;5605:6;5602:30;5599:2;;;5650:6;5642;5635:22;5599:2;5678:51;5721:7;5712:6;5701:9;5697:22;5678:51;:::i;5740:410::-;;;5878:2;5866:9;5857:7;5853:23;5849:32;5846:2;;;5899:6;5891;5884:22;5846:2;5944:9;5931:23;5977:18;5969:6;5966:30;5963:2;;;6014:6;6006;5999:22;5963:2;6042:51;6085:7;6076:6;6065:9;6061:22;6042:51;:::i;:::-;6032:61;6140:2;6125:18;;;;6112:32;;-1:-1:-1;;;;5836:314:34:o;6155:474::-;;;;6311:2;6299:9;6290:7;6286:23;6282:32;6279:2;;;6332:6;6324;6317:22;6279:2;6360:42;6392:9;6360:42;:::i;:::-;6350:52;;6421:51;6468:2;6457:9;6453:18;6421:51;:::i;:::-;6411:61;;6515:2;6504:9;6500:18;6494:25;6559:10;6552:5;6548:22;6541:5;6538:33;6528:2;;6590:6;6582;6575:22;6528:2;6618:5;6608:15;;;6269:360;;;;;:::o;6634:1250::-;6851:2;6903:21;;;6973:13;;6876:18;;;6995:22;;;6634:1250;;6851:2;7036;;7054:18;;;;7095:15;;;6634:1250;7141:717;7155:6;7152:1;7149:13;7141:717;;;7214:13;;7298:9;;-1:-1:-1;;;;;7294:18:34;;;7282:31;;7357:11;;;7351:18;7347:27;;7333:12;;;7326:49;7419:11;;;7413:18;7409:27;7395:12;;;7388:49;7460:4;7503:11;;;7497:18;7538:4;7576:21;;;7562:12;;;7555:43;;;;7621:4;7669:11;;;7663:18;7659:27;;7645:12;;;7638:49;7258:3;7758:11;;;7752:18;7748:27;7734:12;;;7727:49;7805:4;7796:14;;;;7833:15;;;;7267:1;7170:9;7141:717;;;-1:-1:-1;7875:3:34;;6831:1053;-1:-1:-1;;;;;;;6831:1053:34:o;7889:635::-;8060:2;8112:21;;;8182:13;;8085:18;;;8204:22;;;7889:635;;8060:2;8283:15;;;;8257:2;8242:18;;;7889:635;8329:169;8343:6;8340:1;8337:13;8329:169;;;8404:13;;8392:26;;8473:15;;;;8438:12;;;;8365:1;8358:9;8329:169;;;-1:-1:-1;8515:3:34;;8040:484;-1:-1:-1;;;;;;8040:484:34:o;8529:244::-;8699:25;;;8755:2;8740:18;;8733:34;8687:2;8672:18;;8654:119::o;8778:177::-;8924:25;;;8912:2;8897:18;;8879:76::o;8960:242::-;9030:2;9024:9;9060:17;;;9107:18;9092:34;;9128:22;;;9089:62;9086:2;;;9154:9;9086:2;9181;9174:22;9004:198;;-1:-1:-1;9004:198:34:o;9207:133::-;-1:-1:-1;;;;;9284:31:34;;9274:42;;9264:2;;9330:1;9327;9320:12;9264:2;9254:86;:::o;9345:116::-;9431:4;9424:5;9420:16;9413:5;9410:27;9400:2;;9451:1;9448;9441:12"},"gasEstimates":{"creation":{"codeDepositCost":"2267400","executionCost":"2427","totalCost":"2269827"},"external":{"decodePath(bytes)":"infinite","getAmountIn(bytes,uint256)":"infinite","getAmountInV2(address,address,address,uint8,uint8,uint256)":"infinite","getAmountInV3(address,address,address,uint256)":"infinite","getAmountOut(bytes,uint256)":"infinite","getAmountOutV2(address,address,address,uint8,uint8,uint256)":"infinite","getAmountOutV3(address,address,address,uint256)":"infinite","quote(address,bool,int256,uint160)":"infinite"},"internal":{"_getAmountInV2(uint256,uint256,uint256,uint8,uint8)":"infinite","_getAmountOutV2(uint256,uint256,uint256,uint8,uint8)":"infinite"}},"methodIdentifiers":{"decodePath(bytes)":"c25ddce0","getAmountIn(bytes,uint256)":"00614b2e","getAmountInV2(address,address,address,uint8,uint8,uint256)":"53201a4c","getAmountInV3(address,address,address,uint256)":"6e95d3d8","getAmountOut(bytes,uint256)":"77cd49e4","getAmountOutV2(address,address,address,uint8,uint8,uint256)":"97de0a84","getAmountOutV3(address,address,address,uint256)":"2d0f9a30","quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"decodePath\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercent\",\"type\":\"uint8\"}],\"internalType\":\"struct StaticQuoter.Route[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountInV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountInV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StaticQuoter.sol\":\"StaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./UniV3QuoterCore.sol\\\";\\n\\ncontract StaticQuoter is UniV3QuoterCore {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function decodePath(\\n        bytes memory path\\n    ) external pure returns (Route[] memory) {\\n        return abi.decode(path, (Route[]));\\n    }\\n\\n    function _getAmountOutV2(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint8 feePercent,\\n        uint8 maxPercent\\n    ) internal pure returns (uint256 amountOut) {\\n        // INSUFFICIENT_INPUT_AMOUNT\\n        if (amountIn == 0) return 0;\\n        // INSUFFICIENT_LIQUIDITY\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 amountInWithFee = amountIn.mul(feePercent);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(maxPercent).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function _getAmountInV2(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint8 feePercent,\\n        uint8 maxPercent\\n    ) internal pure returns (uint256 amountIn) {\\n        // INSUFFICIENT_OUTPUT_AMOUNT\\n        if (amountOut == 0) return 0;\\n        // INSUFFICIENT_LIQUIDITY\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 numerator = reserveIn.mul(amountOut).mul(maxPercent);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(feePercent);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    function getAmountOutV2(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint8 feePercent,\\n        uint8 maxPercent,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\\n            return 0;\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        amountOut = _getAmountOutV2(\\n            amountIn,\\n            reserveIn,\\n            reserveOut,\\n            feePercent,\\n            maxPercent\\n        );\\n    }\\n\\n    function getAmountInV2(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint8 feePercent,\\n        uint8 maxPercent,\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn) {\\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\\n            return 0;\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        amountIn = _getAmountInV2(\\n            amountOut,\\n            reserveIn,\\n            reserveOut,\\n            feePercent,\\n            maxPercent\\n        );\\n    }\\n\\n    function getAmountOutV3(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\\n            return 0;\\n        }\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n        (int256 amount0, int256 amount1) = quote(\\n            pool,\\n            zeroForOne,\\n            amountIn.toInt256(),\\n            zeroForOne\\n                ? TickMath.MIN_SQRT_RATIO + 1\\n                : TickMath.MAX_SQRT_RATIO - 1\\n        );\\n\\n        amountOut = zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function getAmountInV3(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn) {\\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\\n            return 0;\\n        }\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n        (int256 amount0, int256 amount1) = quote(\\n            pool,\\n            zeroForOne,\\n            -amountOut.toInt256(),\\n            zeroForOne\\n                ? TickMath.MIN_SQRT_RATIO + 1\\n                : TickMath.MAX_SQRT_RATIO - 1\\n        );\\n\\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\\n    }\\n\\n    struct Route {\\n        address tokenIn;\\n        address tokenOut;\\n        address pool;\\n        uint8 poolType; // 0: v2, 1: v3\\n        uint8 feePercent;\\n        uint8 maxPercent;\\n    }\\n\\n    function getAmountOut(\\n        bytes memory path,\\n        uint256 amount\\n    ) public view returns (uint256[] memory) {\\n        Route[] memory routes = abi.decode(path, (Route[]));\\n        uint256[] memory amountOuts = new uint256[](routes.length);\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            if (routes[i].poolType == 0) {\\n                // v2\\n                amount = getAmountOutV2(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    routes[i].feePercent,\\n                    routes[i].maxPercent,\\n                    amount\\n                );\\n            } else {\\n                // v3\\n                amount = getAmountOutV3(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    amount\\n                );\\n            }\\n\\n            amountOuts[i] = amount;\\n        }\\n\\n        return amountOuts;\\n    }\\n\\n    function getAmountIn(\\n        bytes memory path,\\n        uint256 amount\\n    ) public view returns (uint256[] memory) {\\n        Route[] memory routes = abi.decode(path, (Route[]));\\n        uint256[] memory amountIns = new uint256[](routes.length);\\n        for (uint256 i = routes.length - 1; i >= 0; i--) {\\n            if (routes[i].poolType == 0) {\\n                // v2\\n                amount = getAmountInV2(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    routes[i].feePercent,\\n                    routes[i].maxPercent,\\n                    amount\\n                );\\n            } else {\\n                // v3\\n                amount = getAmountInV3(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    amount\\n                );\\n            }\\n\\n            amountIns[i] = amount;\\n        }\\n\\n        return amountIns;\\n    }\\n}\\n\",\"keccak256\":\"0xcb132012198b3ec7d77ae33f57e9b8cc684e850e4f835aec1c97df0159b4a533\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV3QuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"./base/UniV3likeQuoterCore.sol\\\";\\nimport \\\"./libraries/TickBitmap.sol\\\";\\n\\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\\n    function _tryGetPoolCurrentFee(\\n        address pool\\n    ) internal view returns (uint16) {\\n        try IUniswapV3likePool(pool).currentFee() returns (uint24 result) {\\n            return uint16(result);\\n        } catch {\\n            return uint16(IUniswapV3likePool(pool).fee());\\n        }\\n    }\\n\\n    function getPoolGlobalState(\\n        address pool\\n    ) internal view override returns (GlobalState memory gs) {\\n        gs.fee = _tryGetPoolCurrentFee(pool);\\n        (gs.startPrice, gs.startTick, , , , , ) = IUniswapV3likePool(pool)\\n            .slot0();\\n    }\\n\\n    function getTickSpacing(\\n        address pool\\n    ) internal view override returns (int24) {\\n        return IUniswapV3likePool(pool).tickSpacing();\\n    }\\n\\n    function getLiquidity(\\n        address pool\\n    ) internal view override returns (uint128) {\\n        return IUniswapV3likePool(pool).liquidity();\\n    }\\n\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view override returns (int24 next, bool initialized) {\\n        return\\n            TickBitmap.nextInitializedTickWithinOneWord(\\n                poolAddress,\\n                tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n    }\\n\\n    function getTicks(\\n        address pool,\\n        int24 tick\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        )\\n    {\\n        return IUniswapV3likePool(pool).ticks(tick);\\n    }\\n}\\n\",\"keccak256\":\"0x558a10ddfe6bb718eadf82efceac70e8d4572196f89f1335aa32c9ba4da2afb0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3likePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IUniswapV3likePool is IUniswapV3Pool {\\n    // Ramses Exchange use this one instead of fee()\\n    function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x838f4eea881ae8762a698047a8e04191e1388272ef7c477e870c39e5e59d72e7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\nimport '../interfaces/IUniswapV3likePool.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3likePool pool = IUniswapV3likePool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x3eabb9b7e185e901ac1d43bf8225533620cb18ce89fdeecba73b35bebdf15db8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/UniV3QuoterCore.sol":{"UniV3QuoterCore":{"abi":[{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611a9a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806390405d3614610030575b600080fd5b61006c6004803603608081101561004657600080fd5b506001600160a01b03813581169160208101351515916040820135916060013516610085565b6040805192835260208301919091528051918290030190f35b600080836100da576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806100ee8a8a8a8a610343565b9250925092505b80511580159061011b5750866001600160a01b031681604001516001600160a01b031614155b1561030c576101286119da565b60408201516001600160a01b03168152606082015161014a908c90868d6103d6565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b60208401529083015161019891610187908d908c610433565b6080850151855161ffff8816610480565b60c085015260a084015260808301526001600160a01b0316604083015284156101fa576101ce8160c00151826080015101610672565b825103825260a08101516101f0906101e590610672565b602084015190610688565b6020830152610235565b6102078160a00151610672565b825101825260c0810151608082015161022f916102249101610672565b6020840151906106a4565b60208301525b80606001516001600160a01b031682604001516001600160a01b031614156102cb578060400151156102a25760006102718c83602001516106ba565b5050505050509150508a15610284576000035b610292836080015182610781565b6001600160801b03166080840152505b896102b15780602001516102ba565b60018160200151035b600290810b900b6060830152610306565b80600001516001600160a01b031682604001516001600160a01b031614610306576102f98260400151610837565b600290810b900b60608301525b506100f5565b8315158915151461032557602081015181518903610332565b8060000151880381602001515b909b909a5098505050505050505050565b60008061034e611a16565b600061035988610b56565b905061036a87868360000151610c04565b61037388610cd5565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b81526020016103bd8a610d44565b6001600160801b03168152509150509450945094915050565b60008060006103e787878787610d7f565b9093509150620d89e719600284900b121561040857620d89e719925061041e565b620d89e8600284900b131561041e57620d89e892505b61042783610d9b565b90509450945094915050565b60008361045457816001600160a01b0316836001600160a01b03161161046a565b816001600160a01b0316836001600160a01b0316105b6104745782610476565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906105055760006104b98989620f42400362ffffff16620f42406110cd565b9050826104d2576104cd8c8c8c600161117c565b6104df565b6104df8b8d8c60016111f7565b95508581106104f0578a96506104ff565b6104fc8c8b83866112a2565b96505b5061054f565b8161051c576105178b8b8b60006111f7565b610529565b6105298a8c8b600061117c565b935083886000031061053d5789955061054f565b61054c8b8a8a600003856112ee565b95505b6001600160a01b038a81169087161482156105b25780801561056e5750815b6105845761057f878d8c60016111f7565b610586565b855b9550808015610593575081155b6105a9576105a4878d8c600061117c565b6105ab565b845b94506105fc565b8080156105bc5750815b6105d2576105cd8c888c600161117c565b6105d4565b855b95508080156105e1575081155b6105f7576105f28c888c60006111f7565b6105f9565b845b94505b8115801561060c57508860000385115b15610618578860000394505b81801561063757508a6001600160a01b0316876001600160a01b031614155b15610646578589039350610663565b610660868962ffffff168a620f42400362ffffff1661133a565b93505b50505095509550955095915050565b6000600160ff1b821061068457600080fd5b5090565b8082038281131560008312151461069e57600080fd5b92915050565b8181018281121560008312151461069e57600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d61010081101561073957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b12156107e657826001600160801b03168260000384039150816001600160801b0316106107e1576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b61069e565b826001600160801b03168284019150816001600160801b0316101561069e576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610873575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6108a8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061093c57607f810383901c9150610946565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610b4757886001600160a01b0316610b2b82610d9b565b6001600160a01b03161115610b405781610b42565b805b610b49565b815b9998505050505050505050565b610b5e611a44565b610b6782611374565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610bb357600080fd5b505afa158015610bc7573d6000803e3d6000fd5b505050506040513d60e0811015610bdd57600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b600083610c4d57816001600160a01b0316836001600160a01b0316118015610c48575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b610c7b565b816001600160a01b0316836001600160a01b0316108015610c7b57506401000276a36001600160a01b038416115b905080610ccf576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6020811015610d3a57600080fd5b505190505b919050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b600080610d8e8686868661144b565b9150915094509492505050565b60008060008360020b12610db2578260020b610dba565b8260020b6000035b9050620d89e8811115610df8576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610e0c57600160801b610e1e565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610e52576ffff97272373d413259a46990580e213a0260801c5b6004821615610e71576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610e90576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610eaf576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610ece576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610eed576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610f0c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610f2c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610f4c576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610f6c576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610f8c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610fac576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610fcc576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610fec576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561100c576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561102d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561104d576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561106c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611089576b048a170391f7dc42444e8fa20260801c5b60008460020b13156110a45780600019816110a057fe5b0490505b6401000000008106156110b85760016110bb565b60005b60ff16602082901c0192505050919050565b600080806000198587098686029250828110908390030390508061110357600084116110f857600080fd5b508290049050610479565b80841161110f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b0316111561119c579293925b816111c9576111c4836001600160801b03168686036001600160a01b0316600160601b6110cd565b6111ec565b6111ec836001600160801b03168686036001600160a01b0316600160601b61133a565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611217579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661124157600080fd5b8361127157866001600160a01b03166112648383896001600160a01b03166110cd565b8161126b57fe5b04611297565b6112976112888383896001600160a01b031661133a565b886001600160a01b0316611649565b979650505050505050565b600080856001600160a01b0316116112b957600080fd5b6000846001600160801b0316116112cf57600080fd5b816112e1576111c48585856001611654565b6111ec8585856001611735565b600080856001600160a01b03161161130557600080fd5b6000846001600160801b03161161131b57600080fd5b8161132d576111c48585856000611735565b6111ec8585856000611654565b60006113478484846110cd565b90506000828061135357fe5b848609111561047957600019811061136a57600080fd5b6001019392505050565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa9250505080156113d457506040513d60208110156113cf57600080fd5b505160015b61144457816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d602081101561143b57600080fd5b50519050610d3f565b9050610d3f565b6000808581600286810b9088900b8161146057fe5b05905060008760020b12801561148757508560020b8760020b8161148057fe5b0760020b15155b1561149157600019015b8415611568576000806114a383611818565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d602081101561152e57600080fd5b505116801515975090508661154a57898360ff1686030261155d565b896115548261182a565b840360ff168603025b97505050505061163e565b60008061157783600101611818565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115d557600080fd5b505afa1580156115e9573d6000803e3d6000fd5b505050506040513d60208110156115ff57600080fd5b505116801515975090508661162157898360ff0360ff16866001010102611637565b898361162c836118ca565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b600081156116c75760006001600160a01b0384111561168a5761168584600160601b876001600160801b03166110cd565b6116a2565b6001600160801b038516606085901b816116a057fe5b045b90506116bf6116ba6001600160a01b038816836119b4565b6119c4565b9150506111ef565b60006001600160a01b038411156116f5576116f084600160601b876001600160801b031661133a565b61170c565b61170c606085901b6001600160801b038716611649565b905080866001600160a01b03161161172357600080fd5b6001600160a01b0386160390506111ef565b6000826117435750836111ef565b600160601b600160e01b03606085901b1682156117d1576001600160a01b0386168481029085828161177157fe5b0414156117a2578181018281106117a05761179683896001600160a01b03168361133a565b93505050506111ef565b505b6117c8826117c3878a6001600160a01b031686816117bc57fe5b04906119b4565b611649565b925050506111ef565b6001600160a01b038616848102908582816117e857fe5b041480156117f557508082115b6117fe57600080fd5b8082036117966116ba846001600160a01b038b168461133a565b60020b600881901d9161010090910790565b600080821161183857600080fd5b600160801b821061184b57608091821c91015b68010000000000000000821061186357604091821c91015b640100000000821061187757602091821c91015b62010000821061188957601091821c91015b610100821061189a57600891821c91015b601082106118aa57600491821c91015b600482106118ba57600291821c91015b60028210610d3f57600101919050565b60008082116118d857600080fd5b5060ff6001600160801b038216156118f357607f19016118fb565b608082901c91505b67ffffffffffffffff82161561191457603f190161191c565b604082901c91505b63ffffffff82161561193157601f1901611939565b602082901c91505b61ffff82161561194c57600f1901611954565b601082901c91505b60ff821615611966576007190161196e565b600882901c91505b600f8216156119805760031901611988565b600482901c91505b600382161561199a57600119016119a2565b600282901c91505b6001821615610d3f5760001901919050565b8082018281101561069e57600080fd5b806001600160a01b0381168114610d3f57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051606081018252600080825260208201819052918101919091529056fea26469706673582212201dc6bcc1f533379e2156bbe04e9433e7edb8e0c53cda76424533f0d444c3ddf564736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A9A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x90405D36 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD AND PUSH2 0x85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xDA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xEE DUP11 DUP11 DUP11 DUP11 PUSH2 0x343 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x11B JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x30C JUMPI PUSH2 0x128 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x14A SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x198 SWAP2 PUSH2 0x187 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x480 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x1FA JUMPI PUSH2 0x1CE DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x1F0 SWAP1 PUSH2 0x1E5 SWAP1 PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x688 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x235 JUMP JUMPDEST PUSH2 0x207 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x22F SWAP2 PUSH2 0x224 SWAP2 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2CB JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 PUSH2 0x271 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x6BA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x292 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x781 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x2B1 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x306 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x306 JUMPI PUSH2 0x2F9 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x837 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xF5 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x325 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x332 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34E PUSH2 0x1A16 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359 DUP9 PUSH2 0xB56 JUMP JUMPDEST SWAP1 POP PUSH2 0x36A DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xC04 JUMP JUMPDEST PUSH2 0x373 DUP9 PUSH2 0xCD5 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD DUP11 PUSH2 0xD44 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E7 DUP8 DUP8 DUP8 DUP8 PUSH2 0xD7F JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x408 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x41E JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x41E JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x427 DUP4 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x454 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x46A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x474 JUMPI DUP3 PUSH2 0x476 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x505 JUMPI PUSH1 0x0 PUSH2 0x4B9 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x10CD JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x4D2 JUMPI PUSH2 0x4CD DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x4DF DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x11F7 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x4F0 JUMPI DUP11 SWAP7 POP PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x4FC DUP13 DUP12 DUP4 DUP7 PUSH2 0x12A2 JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x54F JUMP JUMPDEST DUP2 PUSH2 0x51C JUMPI PUSH2 0x517 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x529 JUMP JUMPDEST PUSH2 0x529 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x117C JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x53D JUMPI DUP10 SWAP6 POP PUSH2 0x54F JUMP JUMPDEST PUSH2 0x54C DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x12EE JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x5B2 JUMPI DUP1 DUP1 ISZERO PUSH2 0x56E JUMPI POP DUP2 JUMPDEST PUSH2 0x584 JUMPI PUSH2 0x57F DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x586 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x593 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5A9 JUMPI PUSH2 0x5A4 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x5FC JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x5BC JUMPI POP DUP2 JUMPDEST PUSH2 0x5D2 JUMPI PUSH2 0x5CD DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x5E1 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5F7 JUMPI PUSH2 0x5F2 DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x5F9 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x618 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x637 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x646 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x663 JUMP JUMPDEST PUSH2 0x660 DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x133A JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x722 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x7E6 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x7E1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x69E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x873 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x8A8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x93C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x946 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0xB47 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB2B DUP3 PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xB40 JUMPI DUP2 PUSH2 0xB42 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0xB49 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB5E PUSH2 0x1A44 JUMP JUMPDEST PUSH2 0xB67 DUP3 PUSH2 0x1374 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0xBDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0xC4D JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0xC48 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0xC7B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0xC7B JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0xCCF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD8E DUP7 DUP7 DUP7 DUP7 PUSH2 0x144B JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0xDB2 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0xDBA JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0xE0C JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0xE1E JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0xE52 JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0xE71 JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0xE90 JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0xEAF JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0xECE JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0xEED JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0xF0C JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0xF2C JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0xF4C JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0xF6C JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0xF8C JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0xFAC JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0xFCC JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0xFEC JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x100C JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x102D JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x104D JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x106C JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1089 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x10A4 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x10A0 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x10B8 JUMPI PUSH1 0x1 PUSH2 0x10BB JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1103 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x10F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x479 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x110F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x119C JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x11C9 JUMPI PUSH2 0x11C4 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x10CD JUMP JUMPDEST PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x11EC DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x133A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1217 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1271 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1264 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10CD JUMP JUMPDEST DUP2 PUSH2 0x126B JUMPI INVALID JUMPDEST DIV PUSH2 0x1297 JUMP JUMPDEST PUSH2 0x1297 PUSH2 0x1288 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x133A JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1649 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x12B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x12CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x12E1 JUMPI PUSH2 0x11C4 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1654 JUMP JUMPDEST PUSH2 0x11EC DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x131B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x132D JUMPI PUSH2 0x11C4 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x11EC DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1654 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1347 DUP5 DUP5 DUP5 PUSH2 0x10CD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x1353 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13D4 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x1444 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1425 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0xD3F JUMP JUMPDEST SWAP1 POP PUSH2 0xD3F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x1460 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1487 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1480 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1491 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x1568 JUMPI PUSH1 0x0 DUP1 PUSH2 0x14A3 DUP4 PUSH2 0x1818 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1518 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x154A JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x155D JUMP JUMPDEST DUP10 PUSH2 0x1554 DUP3 PUSH2 0x182A JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x163E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1577 DUP4 PUSH1 0x1 ADD PUSH2 0x1818 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x1621 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x1637 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x162C DUP4 PUSH2 0x18CA JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x16C7 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x168A JUMPI PUSH2 0x1685 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x10CD JUMP JUMPDEST PUSH2 0x16A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x16A0 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x16BF PUSH2 0x16BA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x19B4 JUMP JUMPDEST PUSH2 0x19C4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x16F5 JUMPI PUSH2 0x16F0 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x133A JUMP JUMPDEST PUSH2 0x170C JUMP JUMPDEST PUSH2 0x170C PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x1649 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1743 JUMPI POP DUP4 PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x17D1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x1771 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x17A2 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x17A0 JUMPI PUSH2 0x1796 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x133A JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x11EF JUMP JUMPDEST POP JUMPDEST PUSH2 0x17C8 DUP3 PUSH2 0x17C3 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x17BC JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x19B4 JUMP JUMPDEST PUSH2 0x1649 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x17E8 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x17F5 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x17FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x1796 PUSH2 0x16BA DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1838 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x184B JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x1863 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x1877 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x1889 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x189A JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x18AA JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x18BA JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xD3F JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x18D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x18F3 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x18FB JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x1914 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x191C JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x1931 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x194C JUMPI PUSH1 0xF NOT ADD PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x1966 JUMPI PUSH1 0x7 NOT ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x1980 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x199A JUMPI PUSH1 0x1 NOT ADD PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xD3F JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SAR 0xC6 0xBC 0xC1 CREATE2 CALLER CALLDATACOPY SWAP15 0x21 JUMP 0xBB 0xE0 0x4E SWAP5 CALLER 0xE7 0xED 0xB8 0xE0 0xC5 EXTCODECOPY 0xDA PUSH23 0x424533F0D444C3DDF564736F6C63430007060033000000 ","sourceMap":"149:1870:24:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c806390405d3614610030575b600080fd5b61006c6004803603608081101561004657600080fd5b506001600160a01b03813581169160208101351515916040820135916060013516610085565b6040805192835260208301919091528051918290030190f35b600080836100da576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806100ee8a8a8a8a610343565b9250925092505b80511580159061011b5750866001600160a01b031681604001516001600160a01b031614155b1561030c576101286119da565b60408201516001600160a01b03168152606082015161014a908c90868d6103d6565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b60208401529083015161019891610187908d908c610433565b6080850151855161ffff8816610480565b60c085015260a084015260808301526001600160a01b0316604083015284156101fa576101ce8160c00151826080015101610672565b825103825260a08101516101f0906101e590610672565b602084015190610688565b6020830152610235565b6102078160a00151610672565b825101825260c0810151608082015161022f916102249101610672565b6020840151906106a4565b60208301525b80606001516001600160a01b031682604001516001600160a01b031614156102cb578060400151156102a25760006102718c83602001516106ba565b5050505050509150508a15610284576000035b610292836080015182610781565b6001600160801b03166080840152505b896102b15780602001516102ba565b60018160200151035b600290810b900b6060830152610306565b80600001516001600160a01b031682604001516001600160a01b031614610306576102f98260400151610837565b600290810b900b60608301525b506100f5565b8315158915151461032557602081015181518903610332565b8060000151880381602001515b909b909a5098505050505050505050565b60008061034e611a16565b600061035988610b56565b905061036a87868360000151610c04565b61037388610cd5565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b81526020016103bd8a610d44565b6001600160801b03168152509150509450945094915050565b60008060006103e787878787610d7f565b9093509150620d89e719600284900b121561040857620d89e719925061041e565b620d89e8600284900b131561041e57620d89e892505b61042783610d9b565b90509450945094915050565b60008361045457816001600160a01b0316836001600160a01b03161161046a565b816001600160a01b0316836001600160a01b0316105b6104745782610476565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906105055760006104b98989620f42400362ffffff16620f42406110cd565b9050826104d2576104cd8c8c8c600161117c565b6104df565b6104df8b8d8c60016111f7565b95508581106104f0578a96506104ff565b6104fc8c8b83866112a2565b96505b5061054f565b8161051c576105178b8b8b60006111f7565b610529565b6105298a8c8b600061117c565b935083886000031061053d5789955061054f565b61054c8b8a8a600003856112ee565b95505b6001600160a01b038a81169087161482156105b25780801561056e5750815b6105845761057f878d8c60016111f7565b610586565b855b9550808015610593575081155b6105a9576105a4878d8c600061117c565b6105ab565b845b94506105fc565b8080156105bc5750815b6105d2576105cd8c888c600161117c565b6105d4565b855b95508080156105e1575081155b6105f7576105f28c888c60006111f7565b6105f9565b845b94505b8115801561060c57508860000385115b15610618578860000394505b81801561063757508a6001600160a01b0316876001600160a01b031614155b15610646578589039350610663565b610660868962ffffff168a620f42400362ffffff1661133a565b93505b50505095509550955095915050565b6000600160ff1b821061068457600080fd5b5090565b8082038281131560008312151461069e57600080fd5b92915050565b8181018281121560008312151461069e57600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d61010081101561073957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b12156107e657826001600160801b03168260000384039150816001600160801b0316106107e1576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b61069e565b826001600160801b03168284019150816001600160801b0316101561069e576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610873575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6108a8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061093c57607f810383901c9150610946565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610b4757886001600160a01b0316610b2b82610d9b565b6001600160a01b03161115610b405781610b42565b805b610b49565b815b9998505050505050505050565b610b5e611a44565b610b6782611374565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610bb357600080fd5b505afa158015610bc7573d6000803e3d6000fd5b505050506040513d60e0811015610bdd57600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b600083610c4d57816001600160a01b0316836001600160a01b0316118015610c48575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b610c7b565b816001600160a01b0316836001600160a01b0316108015610c7b57506401000276a36001600160a01b038416115b905080610ccf576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6020811015610d3a57600080fd5b505190505b919050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b600080610d8e8686868661144b565b9150915094509492505050565b60008060008360020b12610db2578260020b610dba565b8260020b6000035b9050620d89e8811115610df8576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610e0c57600160801b610e1e565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610e52576ffff97272373d413259a46990580e213a0260801c5b6004821615610e71576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610e90576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610eaf576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610ece576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610eed576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610f0c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610f2c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610f4c576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610f6c576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610f8c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610fac576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610fcc576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610fec576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561100c576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561102d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561104d576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561106c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611089576b048a170391f7dc42444e8fa20260801c5b60008460020b13156110a45780600019816110a057fe5b0490505b6401000000008106156110b85760016110bb565b60005b60ff16602082901c0192505050919050565b600080806000198587098686029250828110908390030390508061110357600084116110f857600080fd5b508290049050610479565b80841161110f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b0316111561119c579293925b816111c9576111c4836001600160801b03168686036001600160a01b0316600160601b6110cd565b6111ec565b6111ec836001600160801b03168686036001600160a01b0316600160601b61133a565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611217579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661124157600080fd5b8361127157866001600160a01b03166112648383896001600160a01b03166110cd565b8161126b57fe5b04611297565b6112976112888383896001600160a01b031661133a565b886001600160a01b0316611649565b979650505050505050565b600080856001600160a01b0316116112b957600080fd5b6000846001600160801b0316116112cf57600080fd5b816112e1576111c48585856001611654565b6111ec8585856001611735565b600080856001600160a01b03161161130557600080fd5b6000846001600160801b03161161131b57600080fd5b8161132d576111c48585856000611735565b6111ec8585856000611654565b60006113478484846110cd565b90506000828061135357fe5b848609111561047957600019811061136a57600080fd5b6001019392505050565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa9250505080156113d457506040513d60208110156113cf57600080fd5b505160015b61144457816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d602081101561143b57600080fd5b50519050610d3f565b9050610d3f565b6000808581600286810b9088900b8161146057fe5b05905060008760020b12801561148757508560020b8760020b8161148057fe5b0760020b15155b1561149157600019015b8415611568576000806114a383611818565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d602081101561152e57600080fd5b505116801515975090508661154a57898360ff1686030261155d565b896115548261182a565b840360ff168603025b97505050505061163e565b60008061157783600101611818565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115d557600080fd5b505afa1580156115e9573d6000803e3d6000fd5b505050506040513d60208110156115ff57600080fd5b505116801515975090508661162157898360ff0360ff16866001010102611637565b898361162c836118ca565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b600081156116c75760006001600160a01b0384111561168a5761168584600160601b876001600160801b03166110cd565b6116a2565b6001600160801b038516606085901b816116a057fe5b045b90506116bf6116ba6001600160a01b038816836119b4565b6119c4565b9150506111ef565b60006001600160a01b038411156116f5576116f084600160601b876001600160801b031661133a565b61170c565b61170c606085901b6001600160801b038716611649565b905080866001600160a01b03161161172357600080fd5b6001600160a01b0386160390506111ef565b6000826117435750836111ef565b600160601b600160e01b03606085901b1682156117d1576001600160a01b0386168481029085828161177157fe5b0414156117a2578181018281106117a05761179683896001600160a01b03168361133a565b93505050506111ef565b505b6117c8826117c3878a6001600160a01b031686816117bc57fe5b04906119b4565b611649565b925050506111ef565b6001600160a01b038616848102908582816117e857fe5b041480156117f557508082115b6117fe57600080fd5b8082036117966116ba846001600160a01b038b168461133a565b60020b600881901d9161010090910790565b600080821161183857600080fd5b600160801b821061184b57608091821c91015b68010000000000000000821061186357604091821c91015b640100000000821061187757602091821c91015b62010000821061188957601091821c91015b610100821061189a57600891821c91015b601082106118aa57600491821c91015b600482106118ba57600291821c91015b60028210610d3f57600101919050565b60008082116118d857600080fd5b5060ff6001600160801b038216156118f357607f19016118fb565b608082901c91505b67ffffffffffffffff82161561191457603f190161191c565b604082901c91505b63ffffffff82161561193157601f1901611939565b602082901c91505b61ffff82161561194c57600f1901611954565b601082901c91505b60ff821615611966576007190161196e565b600882901c91505b600f8216156119805760031901611988565b600482901c91505b600382161561199a57600119016119a2565b600282901c91505b6001821615610d3f5760001901919050565b8082018281101561069e57600080fd5b806001600160a01b0381168114610d3f57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051606081018252600080825260208201819052918101919091529056fea26469706673582212201dc6bcc1f533379e2156bbe04e9433e7edb8e0c53cda76424533f0d444c3ddf564736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x90405D36 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD AND PUSH2 0x85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xDA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xEE DUP11 DUP11 DUP11 DUP11 PUSH2 0x343 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x11B JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x30C JUMPI PUSH2 0x128 PUSH2 0x19DA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x14A SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x198 SWAP2 PUSH2 0x187 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x480 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x1FA JUMPI PUSH2 0x1CE DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x1F0 SWAP1 PUSH2 0x1E5 SWAP1 PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x688 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x235 JUMP JUMPDEST PUSH2 0x207 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0x672 JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x22F SWAP2 PUSH2 0x224 SWAP2 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2CB JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 PUSH2 0x271 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x6BA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x292 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x781 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x2B1 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x306 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x306 JUMPI PUSH2 0x2F9 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x837 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xF5 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x325 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x332 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34E PUSH2 0x1A16 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359 DUP9 PUSH2 0xB56 JUMP JUMPDEST SWAP1 POP PUSH2 0x36A DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xC04 JUMP JUMPDEST PUSH2 0x373 DUP9 PUSH2 0xCD5 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3BD DUP11 PUSH2 0xD44 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E7 DUP8 DUP8 DUP8 DUP8 PUSH2 0xD7F JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x408 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x41E JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x41E JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x427 DUP4 PUSH2 0xD9B JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x454 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x46A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x474 JUMPI DUP3 PUSH2 0x476 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x505 JUMPI PUSH1 0x0 PUSH2 0x4B9 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x10CD JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x4D2 JUMPI PUSH2 0x4CD DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x4DF DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x11F7 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x4F0 JUMPI DUP11 SWAP7 POP PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x4FC DUP13 DUP12 DUP4 DUP7 PUSH2 0x12A2 JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x54F JUMP JUMPDEST DUP2 PUSH2 0x51C JUMPI PUSH2 0x517 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x529 JUMP JUMPDEST PUSH2 0x529 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x117C JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x53D JUMPI DUP10 SWAP6 POP PUSH2 0x54F JUMP JUMPDEST PUSH2 0x54C DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x12EE JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x5B2 JUMPI DUP1 DUP1 ISZERO PUSH2 0x56E JUMPI POP DUP2 JUMPDEST PUSH2 0x584 JUMPI PUSH2 0x57F DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x586 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x593 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5A9 JUMPI PUSH2 0x5A4 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x5FC JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x5BC JUMPI POP DUP2 JUMPDEST PUSH2 0x5D2 JUMPI PUSH2 0x5CD DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x5E1 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x5F7 JUMPI PUSH2 0x5F2 DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x11F7 JUMP JUMPDEST PUSH2 0x5F9 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x618 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x637 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x646 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x663 JUMP JUMPDEST PUSH2 0x660 DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x133A JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x722 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x7E6 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x7E1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x69E JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x873 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x8A8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x93C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x946 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0xB47 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB2B DUP3 PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xB40 JUMPI DUP2 PUSH2 0xB42 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0xB49 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB5E PUSH2 0x1A44 JUMP JUMPDEST PUSH2 0xB67 DUP3 PUSH2 0x1374 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0xBDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0xC4D JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0xC48 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0xC7B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0xC7B JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0xCCF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD8E DUP7 DUP7 DUP7 DUP7 PUSH2 0x144B JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0xDB2 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0xDBA JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0xE0C JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0xE1E JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0xE52 JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0xE71 JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0xE90 JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0xEAF JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0xECE JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0xEED JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0xF0C JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0xF2C JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0xF4C JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0xF6C JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0xF8C JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0xFAC JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0xFCC JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0xFEC JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x100C JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x102D JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x104D JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x106C JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1089 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x10A4 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x10A0 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x10B8 JUMPI PUSH1 0x1 PUSH2 0x10BB JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1103 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x10F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x479 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x110F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x119C JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x11C9 JUMPI PUSH2 0x11C4 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x10CD JUMP JUMPDEST PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x11EC DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x133A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1217 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1271 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1264 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10CD JUMP JUMPDEST DUP2 PUSH2 0x126B JUMPI INVALID JUMPDEST DIV PUSH2 0x1297 JUMP JUMPDEST PUSH2 0x1297 PUSH2 0x1288 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x133A JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1649 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x12B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x12CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x12E1 JUMPI PUSH2 0x11C4 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1654 JUMP JUMPDEST PUSH2 0x11EC DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x131B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x132D JUMPI PUSH2 0x11C4 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x11EC DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x1654 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1347 DUP5 DUP5 DUP5 PUSH2 0x10CD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x1353 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x479 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13D4 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x1444 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1425 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x143B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0xD3F JUMP JUMPDEST SWAP1 POP PUSH2 0xD3F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x1460 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1487 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1480 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1491 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x1568 JUMPI PUSH1 0x0 DUP1 PUSH2 0x14A3 DUP4 PUSH2 0x1818 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1518 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x154A JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x155D JUMP JUMPDEST DUP10 PUSH2 0x1554 DUP3 PUSH2 0x182A JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x163E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1577 DUP4 PUSH1 0x1 ADD PUSH2 0x1818 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x1621 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x1637 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x162C DUP4 PUSH2 0x18CA JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x16C7 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x168A JUMPI PUSH2 0x1685 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x10CD JUMP JUMPDEST PUSH2 0x16A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x16A0 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x16BF PUSH2 0x16BA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x19B4 JUMP JUMPDEST PUSH2 0x19C4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x16F5 JUMPI PUSH2 0x16F0 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x133A JUMP JUMPDEST PUSH2 0x170C JUMP JUMPDEST PUSH2 0x170C PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x1649 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1743 JUMPI POP DUP4 PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x17D1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x1771 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x17A2 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x17A0 JUMPI PUSH2 0x1796 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x133A JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x11EF JUMP JUMPDEST POP JUMPDEST PUSH2 0x17C8 DUP3 PUSH2 0x17C3 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x17BC JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x19B4 JUMP JUMPDEST PUSH2 0x1649 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x17E8 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x17F5 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x17FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x1796 PUSH2 0x16BA DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1838 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x184B JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x1863 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x1877 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x1889 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x189A JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x18AA JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x18BA JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xD3F JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x18D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x18F3 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x18FB JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x1914 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x191C JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x1931 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x1939 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x194C JUMPI PUSH1 0xF NOT ADD PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x1966 JUMPI PUSH1 0x7 NOT ADD PUSH2 0x196E JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x1980 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x1988 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x199A JUMPI PUSH1 0x1 NOT ADD PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xD3F JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SAR 0xC6 0xBC 0xC1 CREATE2 CALLER CALLDATACOPY SWAP15 0x21 JUMP 0xBB 0xE0 0x4E SWAP5 CALLER 0xE7 0xED 0xB8 0xE0 0xC5 EXTCODECOPY 0xDA PUSH23 0x424533F0D444C3DDF564736F6C63430007060033000000 ","sourceMap":"149:1870:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;702:3284:28;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;702:3284:28;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;873:14;;923:20;915:63;;;;;-1:-1:-1;;;915:63:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;988:15;1006:19;;;;988:15;;1093:131;1119:11;1144:10;1006:15;1197:17;1093:12;:131::i;:::-;1035:189;;;;;;1350:2396;1357:30;;:35;;;;:78;;;1418:17;-1:-1:-1;;;;;1396:39:28;:5;:18;;;-1:-1:-1;;;;;1396:39:28;;;1357:78;1350:2396;;;1451:28;;:::i;:::-;1518:18;;;;-1:-1:-1;;;;;1493:43:28;;;1684:10;;;;1610:155;;1655:11;;1712;1741:10;1610:27;:155::i;:::-;-1:-1:-1;;;;;1551:214:28;1585:21;;;1551:214;;;;;;1567:16;;;;1551:214;;;;;;;;;;;1552:13;;;1551:214;2010:18;;;;1968:269;;2046:75;;2068:10;;2103:17;2046:21;:75::i;:::-;2139:15;;;;2172:30;;1968:269;;;:24;:269::i;:::-;1950:14;;;1898:339;1934:14;;;1898:339;1919:13;;;1898:339;-1:-1:-1;;;;;1898:339:28;1899:18;;;1898:339;2251:434;;;;2319:43;2336:4;:14;;;2320:4;:13;;;:30;2319:41;:43::i;:::-;2285:77;;;;;2432:14;;;;2405:53;;2432:25;;:23;:25::i;:::-;2405:22;;;;;:26;:53::i;:::-;2380:22;;;:78;2251:434;;;2531:25;:4;:14;;;:23;:25::i;:::-;2497:59;;;;;2643:14;;;;2627:13;;;;2599:71;;2626:43;;2627:30;2626:41;:43::i;:::-;2599:22;;;;;:26;:71::i;:::-;2574:22;;;:96;2251:434;2779:4;:21;;;-1:-1:-1;;;;;2757:43:28;:5;:18;;;-1:-1:-1;;;;;2757:43:28;;2753:983;;;2895:4;:16;;;2891:485;;;2937:19;2966:36;2975:11;2988:4;:13;;;2966:8;:36::i;:::-;2935:67;;;;;;;;;3200:10;3196:68;;;3251:13;;3196:68;3304:53;3327:5;:15;;;3344:12;3304:22;:53::i;:::-;-1:-1:-1;;;;;3286:71:28;:15;;;:71;-1:-1:-1;2891:485:28;3406:10;:46;;3439:4;:13;;;3406:46;;;3435:1;3419:4;:13;;;:17;3406:46;3393:59;;;;;;:10;;;:59;2753:983;;;3499:4;:22;;;-1:-1:-1;;;;;3477:44:28;:5;:18;;;-1:-1:-1;;;;;3477:44:28;;3473:263;;3674:47;3702:5;:18;;;3674:27;:47::i;:::-;3661:60;;;;;;:10;;;:60;3473:263;1350:2396;;;;3791:10;3777:24;;:10;:24;;;:202;;3906:22;;;;3948:30;;3930:48;;3777:202;;;3835:5;:30;;;3817:15;:48;3867:5;:22;;;3777:202;3756:223;;;;-1:-1:-1;702:3284:28;-1:-1:-1;;;;;;;;;702:3284:28:o;3992:692::-;4164:8;4174:10;4186:22;;:::i;:::-;4220:21;4244:31;4263:11;4244:18;:31::i;:::-;4220:55;;4285:78;4318:10;4330:17;4349:2;:13;;;4285:32;:78::i;:::-;4378:27;4393:11;4378:14;:27::i;:::-;4373:32;;4421:2;:6;;;4415:12;;4445:232;;;;;;;;4495:15;4445:232;;;;4633:1;4445:232;;;;4588:2;:13;;;-1:-1:-1;;;;;4445:232:28;;;;;4654:2;:12;;;4445:232;;;;;;4535:25;4548:11;4535:12;:25::i;:::-;-1:-1:-1;;;;;4445:232:28;;;;4437:240;;3992:692;;;;;;;;;:::o;5128:725::-;5290:14;5306:16;5324:24;5386:69;5419:4;5425;5431:11;5444:10;5386:32;:69::i;:::-;5360:95;;-1:-1:-1;5360:95:28;-1:-1:-1;;;5578:28:28;;;;;5574:163;;;-1:-1:-1;;5620:28:28;;5574:163;;;644:9:17;5667:28:28;;;;;5663:74;;;644:9:17;;-1:-1:-1;5663:74:28;5809:37;5837:8;5809:27;:37::i;:::-;5790:56;;5128:725;;;;;;;;:::o;5859:336::-;6013:7;6040:10;:84;;6107:17;-1:-1:-1;;;;;6090:34:28;:16;-1:-1:-1;;;;;6090:34:28;;6040:84;;;6070:17;-1:-1:-1;;;;;6053:34:28;:16;-1:-1:-1;;;;;6053:34:28;;6040:84;6039:149;;6172:16;6039:149;;;6140:17;6039:149;6032:156;;5859:336;;;;;;:::o;1391:3239:16:-;1638:24;;;;-1:-1:-1;;;;;1797:41:16;;;;;;;;1863:20;;;;;;1894:1354;;1921:30;1954:61;1978:15;2002:7;1996:3;:13;1954:61;;2011:3;1954:15;:61::i;:::-;1921:94;;2040:10;:222;;2175:87;2205:19;2226:18;2246:9;2257:4;2175:29;:87::i;:::-;2040:222;;;2069:87;2099:18;2119:19;2140:9;2151:4;2069:29;:87::i;:::-;2029:233;;2306:8;2280:22;:34;2276:336;;2335:18;2316:37;;2276:336;;;2407:205;2468:19;2509:9;2540:22;2584:10;2407:39;:205::i;:::-;2388:224;;2276:336;1894:1354;;;;2655:10;:224;;2791:88;2821:19;2842:18;2862:9;2873:5;2791:29;:88::i;:::-;2655:224;;;2684:88;2714:18;2734:19;2755:9;2766:5;2684:29;:88::i;:::-;2643:236;;2926:9;2906:15;2905:16;;2897:38;2893:344;;2956:18;2937:37;;2893:344;;;3028:209;3090:19;3131:9;3171:15;3170:16;;3209:10;3028:40;:209::i;:::-;3009:228;;2893:344;-1:-1:-1;;;;;3269:38:16;;;;;;;3358:732;;;;3399:3;:14;;;;;3406:7;3399:14;:145;;3459:85;3489:16;3507:19;3528:9;3539:4;3459:29;:85::i;:::-;3399:145;;;3432:8;3399:145;3388:156;;3570:3;:15;;;;;3578:7;3577:8;3570:15;:148;;3632:86;3662:16;3680:19;3701:9;3712:5;3632:29;:86::i;:::-;3570:148;;;3604:9;3570:148;3558:160;;3358:732;;;3760:3;:14;;;;;3767:7;3760:14;:145;;3820:85;3850:19;3871:16;3889:9;3900:4;3820:29;:85::i;:::-;3760:145;;;3793:8;3760:145;3749:156;;3931:3;:15;;;;;3939:7;3938:8;3931:15;:148;;3993:86;4023:19;4044:16;4062:9;4073:5;3993:29;:86::i;:::-;3931:148;;;3965:9;3931:148;3919:160;;3358:732;4180:7;4179:8;:49;;;;;4212:15;4211:16;;4191:9;:37;4179:49;4175:117;;;4265:15;4264:16;;4244:37;;4175:117;4306:7;:49;;;;;4337:18;-1:-1:-1;;;;;4317:38:16;:16;-1:-1:-1;;;;;4317:38:16;;;4306:49;4302:322;;;4503:8;4484:15;4476:35;4464:47;;4302:322;;;4554:59;4580:8;4590:7;4554:59;;4605:7;4599:3;:13;4554:59;;:25;:59::i;:::-;4542:71;;4302:322;1391:3239;;;;;;;;;;;;;:::o;924:121:14:-;976:8;-1:-1:-1;;;1004:1:14;:10;996:19;;;;;;-1:-1:-1;1036:1:14;924:121::o;1573:120:13:-;1662:5;;;1657:16;;;;1629:8;1678:6;;;1657:28;1649:37;;;;;;1573:120;;;;:::o;1276:::-;1365:5;;;1360:16;;;;1332:8;1381:6;;;1360:28;1352:37;;;;;1505:512:24;1648:22;1684:21;1719:28;1761;1803:25;1842:32;1888:24;1926:16;1993:4;-1:-1:-1;;;;;1974:30:24;;2005:4;1974:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1505:512:24;;;;;;;;;;;:::o;383:236:12:-;445:9;474:1;470;:5;;;466:147;;;523:1;-1:-1:-1;;;;;499:25:12;517:1;516:2;;504:1;:15;500:19;;;-1:-1:-1;;;;;499:25:12;;491:40;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;;;;466:147;;;594:1;-1:-1:-1;;;;;570:25:12;587:1;575;:14;571:18;;;-1:-1:-1;;;;;570:25:12;;;562:40;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;;;4361:4281:17;4434:10;824;-1:-1:-1;;;;;4563:30:17;;;;;;:63;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;4597:29:17;;;4563:63;4555:77;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;;;;-1:-1:-1;;;;;4683:2:17;4658:27;;;;-1:-1:-1;;;;;4788:41:17;;4785:1;4781:49;4878:9;;;4951:18;4945:25;;4942:1;4938:33;5019:9;;;5092:10;5086:17;;5083:1;5079:25;5152:9;;;5225:6;5219:13;;5216:1;5212:21;5281:9;;;5354:4;5348:11;;5345:1;5341:19;;;5408:9;;;5481:3;5475:10;;5472:1;5468:18;5534:9;;;5601:10;;;5598:1;5594:18;;;5660:9;;;;5720:10;;;4991;;5124;;;5253;;;5380;5506;;;5632;5750;5791:3;5784:10;;5780:79;;5816:3;5810;:9;5800:5;:20;;5796:24;;5780:79;;;5855:3;5849;:9;5839:5;:20;;5835:24;;5780:79;5958:9;;;5953:3;5949:19;;;5990:11;;;;6062:9;;;;6127;;6118:19;;;6159:11;;;6231:9;6296;;6287:19;;;6328:11;;;6400:9;6465;;6456:19;;;6497:11;;;6569:9;6634;;6625:19;;;6666:11;;;6738:9;6803;;6794:19;;;6835:11;;;6907:9;6972;;6963:19;;;7004:11;;;7076:9;7141;;7132:19;;;7173:11;;;7245:9;7310;;7301:19;;;7342:11;;;7414:9;7479;;7470:19;;;7511:11;;;7583:9;7648;;7639:19;;;7680:11;;;7752:9;7817;;7808:19;;;7849:11;;;7921:9;7986;;7977:19;;;8018:11;;;;8090:9;;;;8155;;8146:19;;;;;5958:9;-1:-1:-1;;5886:17:17;;5908:2;5885:25;6033:10;;;;;;;6023:21;6202:10;;;;;;;6192:21;;;;6371:10;;;;;;;6361:21;;;;6540:10;;;;;;;6530:21;;;;6709:10;;;;;;;6699:21;;;;6878:10;;;;;;;6868:21;;;;7047:10;;;;;;;7037:21;7216:10;;;;;;;7206:21;7385:10;;;;;;;7375:21;7554:10;;;;;;;7544:21;7723:10;;;;;;;7713:21;7892:10;;;;;;;7882:21;8061:10;;;;;;;8051:21;8230:10;;;;;;;8220:21;8292:24;8284:32;;-1:-1:-1;;8368:53:17;;5900:3;8367:62;;;;8478:39;8462:55;;8461:64;;8544:17;;;;;;;;;:91;;8604:12;-1:-1:-1;;;;;8574:42:17;:26;8593:6;8574:18;:26::i;:::-;-1:-1:-1;;;;;8574:42:17;;;:61;;8628:7;8574:61;;;8619:6;8574:61;8544:91;;;8564:7;8544:91;8537:98;4361:4281;-1:-1:-1;;;;;;;;;4361:4281:17:o;504:261:24:-;592:21;;:::i;:::-;634:27;656:4;634:21;:27::i;:::-;625:2;:6;;:36;;;;;;;;;;;732:4;-1:-1:-1;;;;;713:43:24;;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;713:45:24;;;;;;;671:87;;;;;;687:12;;;671:87;;;;-1:-1:-1;;;;;671:87:24;;;672:2;504:261;-1:-1:-1;504:261:24:o;4690:432:28:-;4848:18;4869:10;:182;;4997:10;-1:-1:-1;;;;;4980:27:28;:14;-1:-1:-1;;;;;4980:27:28;;:71;;;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;5011:40:28;;;4980:71;4869:182;;;4911:10;-1:-1:-1;;;;;4894:27:28;:14;-1:-1:-1;;;;;4894:27:28;;:71;;;;-1:-1:-1;824:10:17;-1:-1:-1;;;;;4925:40:28;;;4894:71;4848:203;;5069:13;5061:54;;;;;-1:-1:-1;;;5061:54:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:432;;;;:::o;771:153:24:-;855:5;898:4;-1:-1:-1;;;;;879:36:24;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;879:38:24;;-1:-1:-1;771:153:24;;;;:::o;930:151::-;1012:7;1057:4;-1:-1:-1;;;;;1038:34:24;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1087:412;1268:10;1280:16;1327:165;1388:11;1417:4;1439:11;1468:10;1327:43;:165::i;:::-;1308:184;;;;1087:412;;;;;;;:::o;1362:2580:17:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;-1:-1:-1;644:9:17;1550:28;;;1542:42;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;;;;1595:13;1621:3;1611:13;;:93;;-1:-1:-1;;;1611:93:17;;;1632:34;1611:93;1595:109;;;-1:-1:-1;1728:3:17;1718:13;;:18;1714:83;;1755:34;1747:42;1794:3;1746:51;1714:83;1821:3;1811:13;;:18;1807:83;;1848:34;1840:42;1887:3;1839:51;1807:83;1914:3;1904:13;;:18;1900:83;;1941:34;1933:42;1980:3;1932:51;1900:83;2007:4;1997:14;;:19;1993:84;;2035:34;2027:42;2074:3;2026:51;1993:84;2101:4;2091:14;;:19;2087:84;;2129:34;2121:42;2168:3;2120:51;2087:84;2195:4;2185:14;;:19;2181:84;;2223:34;2215:42;2262:3;2214:51;2181:84;2289:4;2279:14;;:19;2275:84;;2317:34;2309:42;2356:3;2308:51;2275:84;2383:5;2373:15;;:20;2369:85;;2412:34;2404:42;2451:3;2403:51;2369:85;2478:5;2468:15;;:20;2464:85;;2507:34;2499:42;2546:3;2498:51;2464:85;2573:5;2563:15;;:20;2559:85;;2602:34;2594:42;2641:3;2593:51;2559:85;2668:5;2658:15;;:20;2654:85;;2697:34;2689:42;2736:3;2688:51;2654:85;2763:6;2753:16;;:21;2749:86;;2793:34;2785:42;2832:3;2784:51;2749:86;2859:6;2849:16;;:21;2845:86;;2889:34;2881:42;2928:3;2880:51;2845:86;2955:6;2945:16;;:21;2941:86;;2985:34;2977:42;3024:3;2976:51;2941:86;3051:6;3041:16;;:21;3037:86;;3081:34;3073:42;3120:3;3072:51;3037:86;3147:7;3137:17;;:22;3133:86;;3178:33;3170:41;3216:3;3169:50;3133:86;3243:7;3233:17;;:22;3229:85;;3274:32;3266:40;3311:3;3265:49;3229:85;3338:7;3328:17;;:22;3324:83;;3369:30;3361:38;3404:3;3360:47;3324:83;3431:7;3421:17;;:22;3417:78;;3462:25;3454:33;3492:3;3453:42;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;-1:-1:-1;;3528:25:17;;;;;;3520:33;;3506:47;3912:7;3903:5;:17;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:11:-;861:14;;;-1:-1:-1;;1368:1:11;1365;1358:20;1400:9;;;;-1:-1:-1;1451:13:11;;;1435:14;;;;1431:34;;-1:-1:-1;1547:10:11;1543:179;;1595:1;1581:11;:15;1573:24;;;;;;-1:-1:-1;1648:23:11;;;;-1:-1:-1;1698:13:11;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2560:12;2575;;;:26;;2695:22;;;;;3498:1;3479;:15;;3478:21;;3725:17;;;3721:21;;3714:28;3783:17;;;3779:21;;3772:28;3842:17;;;3838:21;;3831:28;3901:17;;;3897:21;;3890:28;3960:17;;;3956:21;;3949:28;4020:17;;;4016:21;;;4009:28;3067:12;;;;3063:23;;;3088:1;3059:31;2337:20;;;2326:32;;;3118:12;;;;2380:21;;;;2823:16;;;;3109:21;;;;4484:11;;;;;-1:-1:-1;;749:3776:11;;;;;:::o;8727:532:15:-;8892:15;8939:13;-1:-1:-1;;;;;8923:29:15;:13;-1:-1:-1;;;;;8923:29:15;;8919:98;;;8988:13;;9003;8919:98;9047:7;:205;;9177:75;9193:9;-1:-1:-1;;;;;9177:75:15;9220:13;9204;:29;-1:-1:-1;;;;;9177:75:15;-1:-1:-1;;;9177:15:15;:75::i;:::-;9047:205;;;9073:85;9099:9;-1:-1:-1;;;;;9073:85:15;9126:13;9110;:29;-1:-1:-1;;;;;9073:85:15;-1:-1:-1;;;9073:25:15;:85::i;:::-;9028:224;;8727:532;;;;;;;:::o;7493:779::-;7658:15;7705:13;-1:-1:-1;;;;;7689:29:15;:13;-1:-1:-1;;;;;7689:29:15;;7685:98;;;7754:13;;7769;7685:98;-1:-1:-1;;;;;;;309:2:10;7815:45:15;;;;-1:-1:-1;;;;;7891:29:15;;;7870:50;;;7939:17;;7931:26;;;;;;7987:7;:278;;8252:13;-1:-1:-1;;;;;8195:70:15;:54;8211:10;8223;8235:13;-1:-1:-1;;;;;8195:54:15;:15;:54::i;:::-;:70;;;;;;7987:278;;;8013:163;8059:64;8085:10;8097;8109:13;-1:-1:-1;;;;;8059:64:15;:25;:64::i;:::-;8145:13;-1:-1:-1;;;;;8013:163:15;:24;:163::i;:::-;7968:297;7493:779;-1:-1:-1;;;;;;;7493:779:15:o;5299:550::-;5467:16;5514:1;5503:8;-1:-1:-1;;;;;5503:12:15;;5495:21;;;;;;5546:1;5534:9;-1:-1:-1;;;;;5534:13:15;;5526:22;;;;;;5644:10;:198;;5766:76;5806:8;5816:9;5827:8;5837:4;5766:39;:76::i;5644:198::-;5673:74;5711:8;5721:9;5732:8;5742:4;5673:37;:74::i;6395:550::-;6565:16;6612:1;6601:8;-1:-1:-1;;;;;6601:12:15;;6593:21;;;;;;6644:1;6632:9;-1:-1:-1;;;;;6632:13:15;;6624:22;;;;;;6736:10;:202;;6862:76;6900:8;6910:9;6921;6932:5;6862:37;:76::i;6736:202::-;6765:78;6805:8;6815:9;6826;6837:5;6765:39;:78::i;4807:315:11:-;4929:14;4964:25;4971:1;4974;4977:11;4964:6;:25::i;:::-;4955:34;;5031:1;5016:11;5003:25;;;;;5013:1;5010;5003:25;:29;4999:117;;;-1:-1:-1;;5056:6:11;:26;5048:35;;;;;;5097:8;;4807:315;;;;;:::o;203:295:24:-;285:6;326:4;-1:-1:-1;;;;;307:35:24;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;307:37:24;;;303:189;;469:4;-1:-1:-1;;;;;450:28:24;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;450:30:24;;-1:-1:-1;436:45:24;;303:189;397:6;-1:-1:-1;383:21:24;;1696:1991:33;1861:10;;1946:11;1861:10;1987:18;;;;;;;;;;;;;;1968:37;;2026:1;2019:4;:8;;;:35;;;;;2038:11;2031:18;;:4;:18;;;;;;;;:23;;;;2019:35;2015:53;;;-1:-1:-1;;2056:12:33;2015:53;2118:3;2114:1567;;;2138:13;2153:12;2169:20;2178:10;2169:8;:20::i;:::-;2349:24;;;-1:-1:-1;;;2349:24:33;;2306:1;2349:24;;;;;;;;;2137:52;;-1:-1:-1;2137:52:33;;-1:-1:-1;2306:11:33;;;;2285:33;;-1:-1:-1;;2285:33:33;;2270:12;;2285:33;;-1:-1:-1;;;;;2349:15:33;;;;;:24;;;;;;;;;;;;;;:15;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2349:24:33;:31;2527:11;;;;-1:-1:-1;2349:31:33;-1:-1:-1;2527:11:33;2669:170;;2828:11;2817:6;2811:13;;2798:10;:26;2797:42;2669:170;;;2767:11;2728:34;2755:6;2728:26;:34::i;:::-;2719:6;:43;2713:50;;2700:10;:63;2699:79;2669:170;2662:177;;2114:1567;;;;;;;2968:13;2983:12;2999:24;3008:10;3021:1;3008:14;2999:8;:24::i;:::-;2967:56;;;;3095:12;3128:1;3118:6;3113:11;;:1;:11;;3112:17;3110:20;3095:35;;3144:14;3188:4;3161;-1:-1:-1;;;;;3161:15:33;;3177:7;3161:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3161:24:33;:31;3331:11;;;;-1:-1:-1;3161:31:33;-1:-1:-1;3331:11:33;3473:197;;3659:11;3648:6;3630:15;:24;3624:31;;3607:10;3620:1;3607:14;:48;3606:64;3473:197;;;3576:11;3565:6;3527:35;3555:6;3527:27;:35::i;:::-;:44;3521:51;;3504:10;3517:1;3504:14;:68;3503:84;3473:197;3466:204;;2114:1567;;;;;1696:1991;;;;;;;;;:::o;492:165:18:-;613:9;;;627;;624:16;;609:32;;590:61::o;3597:1153:15:-;3770:7;3947:3;3943:801;;;3966:16;-1:-1:-1;;;;;4023:27:15;;;:180;;4151:52;4167:6;-1:-1:-1;;;4193:9:15;-1:-1:-1;;;;;4151:52:15;:15;:52::i;:::-;4023:180;;;-1:-1:-1;;;;;4077:47:15;;309:2:10;4078:33:15;;;4077:47;;;;;;4023:180;3966:255;-1:-1:-1;4243:43:15;:31;-1:-1:-1;;;;;4243:17:15;;3966:255;4243:21;:31::i;:::-;:41;:43::i;:::-;4236:50;;;;;3943:801;4317:16;-1:-1:-1;;;;;4374:27:15;;;:213;;4525:62;4551:6;-1:-1:-1;;;4577:9:15;-1:-1:-1;;;;;4525:62:15;:25;:62::i;:::-;4374:213;;;4428:70;309:2:10;4453:33:15;;;-1:-1:-1;;;;;4428:70:15;;:24;:70::i;:::-;4317:288;;4639:8;4628;-1:-1:-1;;;;;4628:19:15;;4620:28;;;;;;-1:-1:-1;;;;;4713:19:15;;;;-1:-1:-1;4698:35:15;;1405:1366;1576:7;1711:11;1707:32;;-1:-1:-1;1731:8:15;1724:15;;1707:32;-1:-1:-1;;;;;;;309:2:10;1770:45:15;;;;1826:939;;;;-1:-1:-1;;;;;1882:50:15;;1893:17;;;;1914:6;1893:17;1914:6;1882:38;;;;;:50;1878:323;;;1974:20;;;2016:25;;;2012:174;;2125:60;2151:10;2163:8;-1:-1:-1;;;;;2125:60:15;2173:11;2125:25;:60::i;:::-;2110:76;;;;;;;2012:174;1878:323;;2230:73;2255:10;2267:35;2295:6;2281:8;-1:-1:-1;;;;;2268:21:15;:10;:21;;;;;;;2267:27;:35::i;:::-;2230:24;:73::i;:::-;2215:89;;;;;;1826:939;-1:-1:-1;;;;;2530:50:15;;2541:17;;;;2562:6;2541:17;2562:6;2530:38;;;;;:50;:74;;;;;2597:7;2584:10;:20;2530:74;2522:83;;;;;;2641:20;;;2682:72;:60;2641:10;-1:-1:-1;;;;;2682:60:15;;2641:20;2682:25;:60::i;775:160:33:-;882:9;;890:1;882:9;;;;924:3;917:10;;;;775:160::o;671:731:8:-;733:7;764:1;760;:5;752:14;;;;;;-1:-1:-1;;;781:1:8;:40;777:102;;843:3;837:9;;;;860:8;777:102;897:19;892:1;:24;888:84;;938:2;932:8;;;;954:7;888:84;990:11;985:1;:16;981:76;;1023:2;1017:8;;;;1039:7;981:76;1075:7;1070:1;:12;1066:72;;1104:2;1098:8;;;;1120:7;1066:72;1156:5;1151:1;:10;1147:68;;1183:1;1177:7;;;;1198:6;1147:68;1233:4;1228:1;:9;1224:67;;1259:1;1253:7;;;;1274:6;1224:67;1309:3;1304:1;:8;1300:66;;1334:1;1328:7;;;;1349:6;1300:66;1384:3;1379:1;:8;1375:20;;1394:1;1389:6;671:731;;;:::o;1893:894::-;1956:7;1987:1;1983;:5;1975:14;;;;;;-1:-1:-1;2004:3:8;-1:-1:-1;;;;;2021:21:8;;:25;2017:104;;-1:-1:-1;;2062:8:8;2017:104;;;2107:3;2101:9;;;;;2017:104;2138:16;2134:20;;:24;2130:101;;-1:-1:-1;;2174:7:8;2130:101;;;2218:2;2212:8;;;;;2130:101;2248:16;2244:20;;:24;2240:101;;-1:-1:-1;;2284:7:8;2240:101;;;2328:2;2322:8;;;;;2240:101;2358:16;2354:20;;:24;2350:101;;-1:-1:-1;;2394:7:8;2350:101;;;2438:2;2432:8;;;;;2350:101;2468:15;2464:19;;:23;2460:98;;-1:-1:-1;;2503:6:8;2460:98;;;2546:1;2540:7;;;;;2460:98;2575:3;2571:7;;:11;2567:86;;-1:-1:-1;;2598:6:8;2567:86;;;2641:1;2635:7;;;;;2567:86;2670:3;2666:7;;:11;2662:86;;-1:-1:-1;;2693:6:8;2662:86;;;2736:1;2730:7;;;;;2662:86;2765:3;2761:7;;:11;2757:23;;-1:-1:-1;;2774:6:8;1893:894;;;:::o;435:111:13:-;527:5;;;522:16;;;;514:25;;;;;357:111:14;459:1;-1:-1:-1;;;;;439:21:14;;;;431:30;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1362000","executionCost":"1417","totalCost":"1363417"},"external":{"quote(address,bool,int256,uint160)":"infinite"},"internal":{"_tryGetPoolCurrentFee(address)":"infinite","getLiquidity(address)":"infinite","getPoolGlobalState(address)":"infinite","getTickSpacing(address)":"infinite","getTicks(address,int24)":"infinite","nextInitializedTickWithinOneWord(address,int24,int24,bool)":"infinite"}},"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniV3QuoterCore.sol\":\"UniV3QuoterCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV3QuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"./base/UniV3likeQuoterCore.sol\\\";\\nimport \\\"./libraries/TickBitmap.sol\\\";\\n\\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\\n    function _tryGetPoolCurrentFee(\\n        address pool\\n    ) internal view returns (uint16) {\\n        try IUniswapV3likePool(pool).currentFee() returns (uint24 result) {\\n            return uint16(result);\\n        } catch {\\n            return uint16(IUniswapV3likePool(pool).fee());\\n        }\\n    }\\n\\n    function getPoolGlobalState(\\n        address pool\\n    ) internal view override returns (GlobalState memory gs) {\\n        gs.fee = _tryGetPoolCurrentFee(pool);\\n        (gs.startPrice, gs.startTick, , , , , ) = IUniswapV3likePool(pool)\\n            .slot0();\\n    }\\n\\n    function getTickSpacing(\\n        address pool\\n    ) internal view override returns (int24) {\\n        return IUniswapV3likePool(pool).tickSpacing();\\n    }\\n\\n    function getLiquidity(\\n        address pool\\n    ) internal view override returns (uint128) {\\n        return IUniswapV3likePool(pool).liquidity();\\n    }\\n\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view override returns (int24 next, bool initialized) {\\n        return\\n            TickBitmap.nextInitializedTickWithinOneWord(\\n                poolAddress,\\n                tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n    }\\n\\n    function getTicks(\\n        address pool,\\n        int24 tick\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        )\\n    {\\n        return IUniswapV3likePool(pool).ticks(tick);\\n    }\\n}\\n\",\"keccak256\":\"0x558a10ddfe6bb718eadf82efceac70e8d4572196f89f1335aa32c9ba4da2afb0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3likePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IUniswapV3likePool is IUniswapV3Pool {\\n    // Ramses Exchange use this one instead of fee()\\n    function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x838f4eea881ae8762a698047a8e04191e1388272ef7c477e870c39e5e59d72e7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\nimport '../interfaces/IUniswapV3likePool.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3likePool pool = IUniswapV3likePool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x3eabb9b7e185e901ac1d43bf8225533620cb18ce89fdeecba73b35bebdf15db8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/UniswapStaticQuoter.sol":{"UniswapStaticQuoter":{"abi":[{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"}],"name":"decodePath","outputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint8","name":"poolType","type":"uint8"},{"internalType":"uint8","name":"feePercent","type":"uint8"},{"internalType":"uint8","name":"maxPercent","type":"uint8"}],"internalType":"struct UniswapStaticQuoter.Route[]","name":"","type":"tuple[]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint8","name":"feePercent","type":"uint8"},{"internalType":"uint8","name":"maxPercent","type":"uint8"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"getAmountInV2","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"getAmountInV3","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint8","name":"feePercent","type":"uint8"},{"internalType":"uint8","name":"maxPercent","type":"uint8"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOutV2","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOutV3","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50612c49806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c806377cd49e41161005b57806377cd49e4146100fb57806390405d361461010e57806397de0a841461012f578063c25ddce01461014257610087565b8062614b2e1461008c5780632d0f9a30146100b557806353201a4c146100d55780636e95d3d8146100e8575b600080fd5b61009f61009a366004612a4b565b610162565b6040516100ac9190612b6d565b60405180910390f35b6100c86100c33660046127ca565b6102f6565b6040516100ac9190612bbf565b6100c86100e336600461281a565b6104b2565b6100c86100f63660046127ca565b6106d2565b61009f610109366004612a4b565b61087b565b61012161011c366004612892565b610a07565b6040516100ac929190612bb1565b6100c861013d36600461281a565b610cc5565b610155610150366004612a18565b610ed1565b6040516100ac9190612adc565b606060008380602001905181019061017a91906128e8565b90506000815167ffffffffffffffff8111801561019657600080fd5b506040519080825280602002602001820160405280156101c0578160200160208202803683370190505b508251909150600019015b8281815181106101d757fe5b60200260200101516060015160ff16600014156102765761026f8382815181106101fd57fe5b60200260200101516000015184838151811061021557fe5b60200260200101516020015185848151811061022d57fe5b60200260200101516040015186858151811061024557fe5b60200260200101516080015187868151811061025d57fe5b602002602001015160a001518a6104b2565b94506102ca565b6102c783828151811061028557fe5b60200260200101516000015184838151811061029d57fe5b6020026020010151602001518584815181106102b557fe5b602002602001015160400151886106d2565b94505b848282815181106102d757fe5b6020908102919091010152600019016101cb565b509150505b92915050565b60008281806001600160a01b0380881690891610610315578688610318565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039791906127ae565b6001600160a01b031614158061042f5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042391906127ae565b6001600160a01b031614155b1561044057600093505050506104aa565b6001600160a01b038088169089161060008061048a89846104608b610eef565b8661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b6401000276a4610a07565b915091508261049c57816000036104a1565b806000035b96505050505050505b949350505050565b60008481806001600160a01b03808a16908b16106104d157888a6104d4565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906127ae565b6001600160a01b03161415806105eb5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df91906127ae565b6001600160a01b031614155b156105fc57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b0316106106aa5782846106ad565b83835b915091506106be8983838e8e610f05565b9750505050505050505b9695505050505050565b60008281806001600160a01b03808816908916106106f15786886106f4565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906127ae565b6001600160a01b031614158061080b5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906127ae565b6001600160a01b031614155b1561081c57600093505050506104aa565b6001600160a01b038088169089161060008061085e898461083c8b610eef565b6000038661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b915091508261086d57806104a1565b509998505050505050505050565b606060008380602001905181019061089391906128e8565b90506000815167ffffffffffffffff811180156108af57600080fd5b506040519080825280602002602001820160405280156108d9578160200160208202803683370190505b50905060005b82518110156102eb578281815181106108f457fe5b60200260200101516060015160ff16600014156109935761098c83828151811061091a57fe5b60200260200101516000015184838151811061093257fe5b60200260200101516020015185848151811061094a57fe5b60200260200101516040015186858151811061096257fe5b60200260200101516080015187868151811061097a57fe5b602002602001015160a001518a610cc5565b94506109e7565b6109e48382815181106109a257fe5b6020026020010151600001518483815181106109ba57fe5b6020026020010151602001518584815181106109d257fe5b602002602001015160400151886102f6565b94505b848282815181106109f457fe5b60209081029190910101526001016108df565b60008083610a5c576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b6000808513908080610a708a8a8a8a610f7f565b9250925092505b805115801590610a9d5750866001600160a01b031681604001516001600160a01b031614155b15610c8e57610aaa612692565b60408201516001600160a01b031681526060820151610acc908c90868d611012565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b602084015290830151610b1a91610b09908d908c61106f565b6080850151855161ffff88166110bc565b60c085015260a084015260808301526001600160a01b031660408301528415610b7c57610b508160c00151826080015101610eef565b825103825260a0810151610b7290610b6790610eef565b6020840151906112ae565b6020830152610bb7565b610b898160a00151610eef565b825101825260c08101516080820151610bb191610ba69101610eef565b6020840151906112c4565b60208301525b80606001516001600160a01b031682604001516001600160a01b03161415610c4d57806040015115610c24576000610bf38c83602001516112da565b5050505050509150508a15610c06576000035b610c148360800151826113a1565b6001600160801b03166080840152505b89610c33578060200151610c3c565b60018160200151035b600290810b900b6060830152610c88565b80600001516001600160a01b031682604001516001600160a01b031614610c8857610c7b8260400151611457565b600290810b900b60608301525b50610a77565b83151589151514610ca757602081015181518903610cb4565b8060000151880381602001515b909b909a5098505050505050505050565b60008481806001600160a01b03808a16908b1610610ce457888a610ce7565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906127ae565b6001600160a01b0316141580610dfe5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df291906127ae565b6001600160a01b031614155b15610e0f57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b031610610ebd578284610ec0565b83835b915091506106be8983838e8e611776565b606081806020019051810190610ee791906128e8565b90505b919050565b6000600160ff1b8210610f0157600080fd5b5090565b600085610f1457506000610f76565b841580610f1f575083155b15610f2c57506000610f76565b6000610f4560ff8416610f3f888a6117ee565b906117ee565b90506000610f5a60ff8616610f3f888b611812565b9050610f716001828481610f6a57fe5b0490611822565b925050505b95945050505050565b600080610f8a6126ce565b6000610f9588611832565b9050610fa6878683600001516118e0565b610faf886119b1565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b8152602001610ff98a611a1e565b6001600160801b03168152509150509450945094915050565b600080600061102387878787611a59565b9093509150620d89e719600284900b121561104457620d89e719925061105a565b620d89e8600284900b131561105a57620d89e892505b61106383611a75565b90509450945094915050565b60008361109057816001600160a01b0316836001600160a01b0316116110a6565b816001600160a01b0316836001600160a01b0316105b6110b057826110b2565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906111415760006110f58989620f42400362ffffff16620f4240611da7565b90508261110e576111098c8c8c6001611e56565b61111b565b61111b8b8d8c6001611ec6565b955085811061112c578a965061113b565b6111388c8b8386611f71565b96505b5061118b565b81611158576111538b8b8b6000611ec6565b611165565b6111658a8c8b6000611e56565b93508388600003106111795789955061118b565b6111888b8a8a60000385611fbd565b95505b6001600160a01b038a81169087161482156111ee578080156111aa5750815b6111c0576111bb878d8c6001611ec6565b6111c2565b855b95508080156111cf575081155b6111e5576111e0878d8c6000611e56565b6111e7565b845b9450611238565b8080156111f85750815b61120e576112098c888c6001611e56565b611210565b855b955080801561121d575081155b6112335761122e8c888c6000611ec6565b611235565b845b94505b8115801561124857508860000385115b15611254578860000394505b81801561127357508a6001600160a01b0316876001600160a01b031614155b1561128257858903935061129f565b61129c868962ffffff168a620f42400362ffffff16612009565b93505b50505095509550955095915050565b808203828113156000831215146102f057600080fd5b818101828112156000831215146102f057600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d61010081101561135957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b121561140657826001600160801b03168260000384039150816001600160801b031610611401576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6102f0565b826001600160801b03168284019150816001600160801b031610156102f0576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590611493575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6114c8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061155c57607f810383901c9150611566565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461176757886001600160a01b031661174b82611a75565b6001600160a01b031611156117605781611762565b805b611769565b815b9998505050505050505050565b60008561178557506000610f76565b841580611790575083155b1561179d57506000610f76565b60006117ac8760ff86166117ee565b905060006117ba82876117ee565b905060006117d5836117cf8a60ff89166117ee565b90611822565b90508082816117e057fe5b049998505050505050505050565b60008215806118095750508181028183828161180657fe5b04145b6102f057600080fd5b808203828111156102f057600080fd5b808201828110156102f057600080fd5b61183a6126fc565b61184382612043565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d60e08110156118b957600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361192957816001600160a01b0316836001600160a01b0316118015611924575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b611957565b816001600160a01b0316836001600160a01b031610801561195757506401000276a36001600160a01b038416115b9050806119ab576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d6020811015611a1657600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b600080611a688686868661211a565b9150915094509492505050565b60008060008360020b12611a8c578260020b611a94565b8260020b6000035b9050620d89e8811115611ad2576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216611ae657600160801b611af8565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611b2c576ffff97272373d413259a46990580e213a0260801c5b6004821615611b4b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611b6a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611b89576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611ba8576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611bc7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611be6576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611c06576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611c26576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611c46576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611c66576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611c86576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611ca6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611cc6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611ce6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611d07576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611d27576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611d46576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611d63576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611d7e578060001981611d7a57fe5b0490505b640100000000810615611d92576001611d95565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611ddd5760008411611dd257600080fd5b5082900490506110b5565b808411611de957600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b03161115611e76579293925b81611ea357611e9e836001600160801b03168686036001600160a01b0316600160601b611da7565b610f76565b610f76836001600160801b03168686036001600160a01b0316600160601b612009565b6000836001600160a01b0316856001600160a01b03161115611ee6579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716611f1057600080fd5b83611f4057866001600160a01b0316611f338383896001600160a01b0316611da7565b81611f3a57fe5b04611f66565b611f66611f578383896001600160a01b0316612009565b886001600160a01b0316612318565b979650505050505050565b600080856001600160a01b031611611f8857600080fd5b6000846001600160801b031611611f9e57600080fd5b81611fb057611e9e8585856001612323565b610f768585856001612404565b600080856001600160a01b031611611fd457600080fd5b6000846001600160801b031611611fea57600080fd5b81611ffc57611e9e8585856000612404565b610f768585856000612323565b6000612016848484611da7565b90506000828061202257fe5b84860911156110b557600019811061203957600080fd5b6001019392505050565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207e57600080fd5b505afa9250505080156120a357506040513d602081101561209e57600080fd5b505160015b61211357816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506040513d602081101561210a57600080fd5b50519050610eea565b9050610eea565b6000808581600286810b9088900b8161212f57fe5b05905060008760020b12801561215657508560020b8760020b8161214f57fe5b0760020b15155b1561216057600019015b841561223757600080612172836124e0565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d60208110156121fd57600080fd5b505116801515975090508661221957898360ff1686030261222c565b89612223826124f2565b840360ff168603025b97505050505061230d565b600080612246836001016124e0565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156122a457600080fd5b505afa1580156122b8573d6000803e3d6000fd5b505050506040513d60208110156122ce57600080fd5b50511680151597509050866122f057898360ff0360ff16866001010102612306565b89836122fb83612592565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b600081156123965760006001600160a01b038411156123595761235484600160601b876001600160801b0316611da7565b612371565b6001600160801b038516606085901b8161236f57fe5b045b905061238e6123896001600160a01b03881683611822565b61267c565b9150506104aa565b60006001600160a01b038411156123c4576123bf84600160601b876001600160801b0316612009565b6123db565b6123db606085901b6001600160801b038716612318565b905080866001600160a01b0316116123f257600080fd5b6001600160a01b0386160390506104aa565b6000826124125750836104aa565b600160601b600160e01b03606085901b168215612499576001600160a01b0386168481029085828161244057fe5b0414156124715781810182811061246f5761246583896001600160a01b031683612009565b93505050506104aa565b505b6124908261248b878a6001600160a01b03168681610f6a57fe5b612318565b925050506104aa565b6001600160a01b038616848102908582816124b057fe5b041480156124bd57508082115b6124c657600080fd5b808203612465612389846001600160a01b038b1684612009565b60020b600881901d9161010090910790565b600080821161250057600080fd5b600160801b821061251357608091821c91015b68010000000000000000821061252b57604091821c91015b640100000000821061253f57602091821c91015b62010000821061255157601091821c91015b610100821061256257600891821c91015b6010821061257257600491821c91015b6004821061258257600291821c91015b60028210610eea57600101919050565b60008082116125a057600080fd5b5060ff6001600160801b038216156125bb57607f19016125c3565b608082901c91505b67ffffffffffffffff8216156125dc57603f19016125e4565b604082901c91505b63ffffffff8216156125f957601f1901612601565b602082901c91505b61ffff82161561261457600f190161261c565b601082901c91505b60ff82161561262e5760071901612636565b600882901c91505b600f8216156126485760031901612650565b600482901c91505b6003821615612662576001190161266a565b600282901c91505b6001821615610eea5760001901919050565b806001600160a01b0381168114610eea57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b8051610eea81612bec565b600082601f830112612737578081fd5b813567ffffffffffffffff81111561274b57fe5b61275e601f8201601f1916602001612bc8565b818152846020838601011115612772578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b0381168114610eea57600080fd5b8051610eea81612c04565b6000602082840312156127bf578081fd5b81516110b581612bec565b600080600080608085870312156127df578283fd5b84356127ea81612bec565b935060208501356127fa81612bec565b9250604085013561280a81612bec565b9396929550929360600135925050565b60008060008060008060c08789031215612832578182fd5b863561283d81612bec565b9550602087013561284d81612bec565b9450604087013561285d81612bec565b9350606087013561286d81612c04565b9250608087013561287d81612c04565b8092505060a087013590509295509295509295565b600080600080608085870312156128a7578384fd5b84356128b281612bec565b9350602085013580151581146128c6578384fd5b92506040850135915060608501356128dd81612bec565b939692955090935050565b600060208083850312156128fa578182fd5b825167ffffffffffffffff80821115612911578384fd5b818501915085601f830112612924578384fd5b81518181111561293057fe5b61293d8485830201612bc8565b8181528481019084860160c0808502870188018b101561295b578889fd5b8896505b84871015612a095780828c031215612975578889fd5b60408051828101818110898211171561298a57fe5b8252835161299781612bec565b81526129a4848b0161271c565b8a8201526129b382850161271c565b82820152606091506129c68285016127a3565b82820152608091506129d98285016127a3565b8282015260a091506129ec8285016127a3565b91810191909152845260019690960195928701929081019061295f565b50909998505050505050505050565b600060208284031215612a29578081fd5b813567ffffffffffffffff811115612a3f578182fd5b6104aa84828501612727565b60008060408385031215612a5d578182fd5b823567ffffffffffffffff811115612a73578283fd5b612a7f85828601612727565b95602094909401359450505050565b600080600060608486031215612aa2578081fd5b612aab8461278c565b9250612ab96020850161278c565b9150604084015163ffffffff81168114612ad1578182fd5b809150509250925092565b602080825282518282018190526000919060409081850190868401855b82811015612b6057815180516001600160a01b0390811686528782015181168887015286820151168686015260608082015160ff9081169187019190915260808083015182169087015260a091820151169085015260c09093019290850190600101612af9565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ba557835183529284019291840191600101612b89565b50909695505050505050565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612be457fe5b604052919050565b6001600160a01b0381168114612c0157600080fd5b50565b60ff81168114612c0157600080fdfea26469706673582212204672e4ae9d3e67292e5e63e4051c0cc5e8a100a65759e9ead813edcdef8a3f1b64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C49 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77CD49E4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x77CD49E4 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x97DE0A84 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xC25DDCE0 EQ PUSH2 0x142 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH3 0x614B2E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x2D0F9A30 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x53201A4C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x6E95D3D8 EQ PUSH2 0xE8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2B6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2BBF JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x2892 JUMP JUMPDEST PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP3 SWAP2 SWAP1 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0xCC5 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A18 JUMP JUMPDEST PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2ADC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 NOT ADD JUMPDEST DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x276 JUMPI PUSH2 0x26F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x215 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x245 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x25D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0x4B2 JUMP JUMPDEST SWAP5 POP PUSH2 0x2CA JUMP JUMPDEST PUSH2 0x2C7 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x285 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x6D2 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT ADD PUSH2 0x1CB JUMP JUMPDEST POP SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x315 JUMPI DUP7 DUP9 PUSH2 0x318 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x397 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x42F JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x423 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x48A DUP10 DUP5 PUSH2 0x460 DUP12 PUSH2 0xEEF JUMP JUMPDEST DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0xA07 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x49C JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x4A1 JUMP JUMPDEST DUP1 PUSH1 0x0 SUB JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0x4D1 JUMPI DUP9 DUP11 PUSH2 0x4D4 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x553 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x5EB JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x670 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x6AA JUMPI DUP3 DUP5 PUSH2 0x6AD JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0xF05 JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x6F1 JUMPI DUP7 DUP9 PUSH2 0x6F4 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x773 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x80B JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x85E DUP10 DUP5 PUSH2 0x83C DUP12 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x0 SUB DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x86D JUMPI DUP1 PUSH2 0x4A1 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x893 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x8AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2EB JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x993 JUMPI PUSH2 0x98C DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x91A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x932 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x94A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x962 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x97A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0xCC5 JUMP JUMPDEST SWAP5 POP PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x9E4 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x9BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x2F6 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xA5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xA70 DUP11 DUP11 DUP11 DUP11 PUSH2 0xF7F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA9D JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xC8E JUMPI PUSH2 0xAAA PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xACC SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x1012 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0xB1A SWAP2 PUSH2 0xB09 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x106F JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x10BC JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0xB7C JUMPI PUSH2 0xB50 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xB72 SWAP1 PUSH2 0xB67 SWAP1 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0xB89 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xBB1 SWAP2 PUSH2 0xBA6 SWAP2 ADD PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xC4D JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0xC24 JUMPI PUSH1 0x0 PUSH2 0xBF3 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x12DA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0xC06 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0xC14 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0xC33 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xC88 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC88 JUMPI PUSH2 0xC7B DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xA77 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0xCA7 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0xCB4 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0xCE4 JUMPI DUP9 DUP11 PUSH2 0xCE7 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0xDFE JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF2 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE83 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0xEBD JUMPI DUP3 DUP5 PUSH2 0xEC0 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0x1776 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xEE7 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0xF01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xF14 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0xF1F JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF2C JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF45 PUSH1 0xFF DUP5 AND PUSH2 0xF3F DUP9 DUP11 PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF5A PUSH1 0xFF DUP7 AND PUSH2 0xF3F DUP9 DUP12 PUSH2 0x1812 JUMP JUMPDEST SWAP1 POP PUSH2 0xF71 PUSH1 0x1 DUP3 DUP5 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF8A PUSH2 0x26CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP9 PUSH2 0x1832 JUMP JUMPDEST SWAP1 POP PUSH2 0xFA6 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xFAF DUP9 PUSH2 0x19B1 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF9 DUP11 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1023 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1A59 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x1044 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x105A JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x105A JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x1063 DUP4 PUSH2 0x1A75 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1090 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x10A6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x10B0 JUMPI DUP3 PUSH2 0x10B2 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x1141 JUMPI PUSH1 0x0 PUSH2 0x10F5 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x110E JUMPI PUSH2 0x1109 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x111B JUMP JUMPDEST PUSH2 0x111B DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x112C JUMPI DUP11 SWAP7 POP PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1138 DUP13 DUP12 DUP4 DUP7 PUSH2 0x1F71 JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x118B JUMP JUMPDEST DUP2 PUSH2 0x1158 JUMPI PUSH2 0x1153 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1165 JUMP JUMPDEST PUSH2 0x1165 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x1179 JUMPI DUP10 SWAP6 POP PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1188 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1FBD JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x11EE JUMPI DUP1 DUP1 ISZERO PUSH2 0x11AA JUMPI POP DUP2 JUMPDEST PUSH2 0x11C0 JUMPI PUSH2 0x11BB DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x11CF JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x11E5 JUMPI PUSH2 0x11E0 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x11E7 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x1238 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x11F8 JUMPI POP DUP2 JUMPDEST PUSH2 0x120E JUMPI PUSH2 0x1209 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x121D JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x1233 JUMPI PUSH2 0x122E DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1235 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x1248 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x1254 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1273 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1282 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x129F JUMP JUMPDEST PUSH2 0x129C DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1342 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x1359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1406 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x1401 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x1493 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x14C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x155C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x1566 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1767 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x174B DUP3 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1760 JUMPI DUP2 PUSH2 0x1762 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x1769 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0x1785 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0x1790 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x179D JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AC DUP8 PUSH1 0xFF DUP7 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17BA DUP3 DUP8 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17D5 DUP4 PUSH2 0x17CF DUP11 PUSH1 0xFF DUP10 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x17E0 JUMPI INVALID JUMPDEST DIV SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1809 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x1806 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x183A PUSH2 0x26FC JUMP JUMPDEST PUSH2 0x1843 DUP3 PUSH2 0x2043 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x188F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x18B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1929 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1924 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x1957 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x1957 JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x19AB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A68 DUP7 DUP7 DUP7 DUP7 PUSH2 0x211A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1A8C JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1A94 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1AE6 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1AF8 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x1B2C JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1B4B JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x1B6A JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x1B89 JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x1BA8 JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x1BC7 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1BE6 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1C06 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1C26 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1C46 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x1C66 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1C86 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1CA6 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1CC6 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1CE6 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1D07 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1D27 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1D46 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1D63 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1D7E JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x1D7A JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1D92 JUMPI PUSH1 0x1 PUSH2 0x1D95 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1DDD JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1DD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x10B5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1DE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1E76 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1EA3 JUMPI PUSH2 0x1E9E DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF76 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1EE6 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1F40 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F33 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST DUP2 PUSH2 0x1F3A JUMPI INVALID JUMPDEST DIV PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1F66 PUSH2 0x1F57 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2318 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FB0 JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2323 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2404 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FFC JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2323 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2016 DUP5 DUP5 DUP5 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x2022 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x2039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x207E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x20A3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x209E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x2113 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x212F JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x2156 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x214F JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2160 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x2237 JUMPI PUSH1 0x0 DUP1 PUSH2 0x2172 DUP4 PUSH2 0x24E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x2219 JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x222C JUMP JUMPDEST DUP10 PUSH2 0x2223 DUP3 PUSH2 0x24F2 JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2246 DUP4 PUSH1 0x1 ADD PUSH2 0x24E0 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x22CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x22F0 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x2306 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x22FB DUP4 PUSH2 0x2592 JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x2396 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x2359 JUMPI PUSH2 0x2354 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x2371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x236F JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x238E PUSH2 0x2389 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x267C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x23C4 JUMPI PUSH2 0x23BF DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST PUSH2 0x23DB JUMP JUMPDEST PUSH2 0x23DB PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x2318 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x23F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2412 JUMPI POP DUP4 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x2499 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x2440 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x2471 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x246F JUMPI PUSH2 0x2465 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST POP JUMPDEST PUSH2 0x2490 DUP3 PUSH2 0x248B DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST PUSH2 0x2318 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x24B0 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x24BD JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x24C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x2465 PUSH2 0x2389 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x2513 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x252B JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x253F JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x2551 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x2562 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x2572 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x2582 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xEEA JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x25A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x25BB JUMPI PUSH1 0x7F NOT ADD PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x25DC JUMPI PUSH1 0x3F NOT ADD PUSH2 0x25E4 JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x25F9 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x2601 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x2614 JUMPI PUSH1 0xF NOT ADD PUSH2 0x261C JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x262E JUMPI PUSH1 0x7 NOT ADD PUSH2 0x2636 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x2648 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x2650 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x2662 JUMPI PUSH1 0x1 NOT ADD PUSH2 0x266A JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xEEA JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2737 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x274B JUMPI INVALID JUMPDEST PUSH2 0x275E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2772 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2C04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10B5 DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27DF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x27EA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x27FA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x280A DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2832 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x283D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x284D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x285D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x286D DUP2 PUSH2 0x2C04 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x287D DUP2 PUSH2 0x2C04 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28A7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x28B2 DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x28C6 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x28DD DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28FA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2911 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2924 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2930 JUMPI INVALID JUMPDEST PUSH2 0x293D DUP5 DUP6 DUP4 MUL ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD PUSH1 0xC0 DUP1 DUP6 MUL DUP8 ADD DUP9 ADD DUP12 LT ISZERO PUSH2 0x295B JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x2A09 JUMPI DUP1 DUP3 DUP13 SUB SLT ISZERO PUSH2 0x2975 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT DUP10 DUP3 GT OR ISZERO PUSH2 0x298A JUMPI INVALID JUMPDEST DUP3 MSTORE DUP4 MLOAD PUSH2 0x2997 DUP2 PUSH2 0x2BEC JUMP JUMPDEST DUP2 MSTORE PUSH2 0x29A4 DUP5 DUP12 ADD PUSH2 0x271C JUMP JUMPDEST DUP11 DUP3 ADD MSTORE PUSH2 0x29B3 DUP3 DUP6 ADD PUSH2 0x271C JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 POP PUSH2 0x29C6 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x80 SWAP2 POP PUSH2 0x29D9 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 POP PUSH2 0x29EC DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP8 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x295F JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A29 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A3F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4AA DUP5 DUP3 DUP6 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A5D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A73 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2A7F DUP6 DUP3 DUP7 ADD PUSH2 0x2727 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2AAB DUP5 PUSH2 0x278C JUMP JUMPDEST SWAP3 POP PUSH2 0x2AB9 PUSH1 0x20 DUP6 ADD PUSH2 0x278C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AD1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2B60 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE DUP8 DUP3 ADD MLOAD DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD AND DUP7 DUP7 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP2 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP3 AND SWAP1 DUP8 ADD MSTORE PUSH1 0xA0 SWAP2 DUP3 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AF9 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2BA5 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B89 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BE4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID PUSH19 0xE4AE9D3E67292E5E63E4051C0CC5E8A100A657 MSIZE 0xE9 0xEA 0xD8 SGT 0xED 0xCD 0xEF DUP11 EXTCODEHASH SHL PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"191:7311:25:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9463:34","statements":[{"nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:80:34","statements":[{"nodeType":"YulAssignment","src":"86:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:34"},"nodeType":"YulFunctionCall","src":"95:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:34"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"144:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"117:26:34"},"nodeType":"YulFunctionCall","src":"117:33:34"},"nodeType":"YulExpressionStatement","src":"117:33:34"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:34","type":""}],"src":"14:142:34"},{"body":{"nodeType":"YulBlock","src":"215:488:34","statements":[{"body":{"nodeType":"YulBlock","src":"264:24:34","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"273:5:34"},{"name":"array","nodeType":"YulIdentifier","src":"280:5:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"266:6:34"},"nodeType":"YulFunctionCall","src":"266:20:34"},"nodeType":"YulExpressionStatement","src":"266:20:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"243:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"251:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:34"},"nodeType":"YulFunctionCall","src":"239:17:34"},{"name":"end","nodeType":"YulIdentifier","src":"258:3:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"235:3:34"},"nodeType":"YulFunctionCall","src":"235:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"228:6:34"},"nodeType":"YulFunctionCall","src":"228:35:34"},"nodeType":"YulIf","src":"225:2:34"},{"nodeType":"YulVariableDeclaration","src":"297:30:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"320:6:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"307:12:34"},"nodeType":"YulFunctionCall","src":"307:20:34"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"301:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"366:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"368:7:34"},"nodeType":"YulFunctionCall","src":"368:9:34"},"nodeType":"YulExpressionStatement","src":"368:9:34"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"342:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"346:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"339:2:34"},"nodeType":"YulFunctionCall","src":"339:26:34"},"nodeType":"YulIf","src":"336:2:34"},{"nodeType":"YulVariableDeclaration","src":"388:69:34","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"430:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"434:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"426:3:34"},"nodeType":"YulFunctionCall","src":"426:13:34"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"445:2:34","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"441:3:34"},"nodeType":"YulFunctionCall","src":"441:7:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"422:3:34"},"nodeType":"YulFunctionCall","src":"422:27:34"},{"kind":"number","nodeType":"YulLiteral","src":"451:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:34"},"nodeType":"YulFunctionCall","src":"418:38:34"}],"functionName":{"name":"allocateMemory","nodeType":"YulIdentifier","src":"403:14:34"},"nodeType":"YulFunctionCall","src":"403:54:34"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"392:7:34","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"473:7:34"},{"name":"_1","nodeType":"YulIdentifier","src":"482:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"466:6:34"},"nodeType":"YulFunctionCall","src":"466:19:34"},"nodeType":"YulExpressionStatement","src":"466:19:34"},{"body":{"nodeType":"YulBlock","src":"533:24:34","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"542:5:34"},{"name":"array","nodeType":"YulIdentifier","src":"549:5:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"535:6:34"},"nodeType":"YulFunctionCall","src":"535:20:34"},"nodeType":"YulExpressionStatement","src":"535:20:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"508:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"516:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"504:3:34"},"nodeType":"YulFunctionCall","src":"504:15:34"},{"kind":"number","nodeType":"YulLiteral","src":"521:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"500:3:34"},"nodeType":"YulFunctionCall","src":"500:26:34"},{"name":"end","nodeType":"YulIdentifier","src":"528:3:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"497:2:34"},"nodeType":"YulFunctionCall","src":"497:35:34"},"nodeType":"YulIf","src":"494:2:34"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"583:7:34"},{"kind":"number","nodeType":"YulLiteral","src":"592:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"579:3:34"},"nodeType":"YulFunctionCall","src":"579:18:34"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"603:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"611:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"599:3:34"},"nodeType":"YulFunctionCall","src":"599:17:34"},{"name":"_1","nodeType":"YulIdentifier","src":"618:2:34"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"566:12:34"},"nodeType":"YulFunctionCall","src":"566:55:34"},"nodeType":"YulExpressionStatement","src":"566:55:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"645:7:34"},{"name":"_1","nodeType":"YulIdentifier","src":"654:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"641:3:34"},"nodeType":"YulFunctionCall","src":"641:16:34"},{"kind":"number","nodeType":"YulLiteral","src":"659:4:34","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"637:3:34"},"nodeType":"YulFunctionCall","src":"637:27:34"},{"name":"array","nodeType":"YulIdentifier","src":"666:5:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"630:6:34"},"nodeType":"YulFunctionCall","src":"630:42:34"},"nodeType":"YulExpressionStatement","src":"630:42:34"},{"nodeType":"YulAssignment","src":"681:16:34","value":{"name":"array_1","nodeType":"YulIdentifier","src":"690:7:34"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"681:5:34"}]}]},"name":"abi_decode_t_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"189:6:34","type":""},{"name":"end","nodeType":"YulTypedName","src":"197:3:34","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"205:5:34","type":""}],"src":"161:542:34"},{"body":{"nodeType":"YulBlock","src":"770:128:34","statements":[{"nodeType":"YulAssignment","src":"780:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"795:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"789:5:34"},"nodeType":"YulFunctionCall","src":"789:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"780:5:34"}]},{"body":{"nodeType":"YulBlock","src":"876:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"885:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"888:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"878:6:34"},"nodeType":"YulFunctionCall","src":"878:12:34"},"nodeType":"YulExpressionStatement","src":"878:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"824:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"835:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"842:30:34","type":"","value":"0xffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"831:3:34"},"nodeType":"YulFunctionCall","src":"831:42:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"821:2:34"},"nodeType":"YulFunctionCall","src":"821:53:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"814:6:34"},"nodeType":"YulFunctionCall","src":"814:61:34"},"nodeType":"YulIf","src":"811:2:34"}]},"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"749:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"760:5:34","type":""}],"src":"708:190:34"},{"body":{"nodeType":"YulBlock","src":"963:78:34","statements":[{"nodeType":"YulAssignment","src":"973:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"988:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"982:5:34"},"nodeType":"YulFunctionCall","src":"982:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:34"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:34"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"1004:24:34"},"nodeType":"YulFunctionCall","src":"1004:31:34"},"nodeType":"YulExpressionStatement","src":"1004:31:34"}]},"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"942:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"953:5:34","type":""}],"src":"903:138:34"},{"body":{"nodeType":"YulBlock","src":"1127:182:34","statements":[{"body":{"nodeType":"YulBlock","src":"1173:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1182:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"1190:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1175:6:34"},"nodeType":"YulFunctionCall","src":"1175:22:34"},"nodeType":"YulExpressionStatement","src":"1175:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1148:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1157:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1144:3:34"},"nodeType":"YulFunctionCall","src":"1144:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1169:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1140:3:34"},"nodeType":"YulFunctionCall","src":"1140:32:34"},"nodeType":"YulIf","src":"1137:2:34"},{"nodeType":"YulVariableDeclaration","src":"1208:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1227:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1221:5:34"},"nodeType":"YulFunctionCall","src":"1221:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1212:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1273:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1246:26:34"},"nodeType":"YulFunctionCall","src":"1246:33:34"},"nodeType":"YulExpressionStatement","src":"1246:33:34"},{"nodeType":"YulAssignment","src":"1288:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1298:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1288:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1093:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1104:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1116:6:34","type":""}],"src":"1046:263:34"},{"body":{"nodeType":"YulBlock","src":"1435:493:34","statements":[{"body":{"nodeType":"YulBlock","src":"1482:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1491:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"1499:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1484:6:34"},"nodeType":"YulFunctionCall","src":"1484:22:34"},"nodeType":"YulExpressionStatement","src":"1484:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1456:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1465:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1452:3:34"},"nodeType":"YulFunctionCall","src":"1452:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1477:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1448:3:34"},"nodeType":"YulFunctionCall","src":"1448:33:34"},"nodeType":"YulIf","src":"1445:2:34"},{"nodeType":"YulVariableDeclaration","src":"1517:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1543:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1530:12:34"},"nodeType":"YulFunctionCall","src":"1530:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1521:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1589:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1562:26:34"},"nodeType":"YulFunctionCall","src":"1562:33:34"},"nodeType":"YulExpressionStatement","src":"1562:33:34"},{"nodeType":"YulAssignment","src":"1604:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1614:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1604:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1628:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1660:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1671:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1656:3:34"},"nodeType":"YulFunctionCall","src":"1656:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1643:12:34"},"nodeType":"YulFunctionCall","src":"1643:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1632:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1711:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1684:26:34"},"nodeType":"YulFunctionCall","src":"1684:35:34"},"nodeType":"YulExpressionStatement","src":"1684:35:34"},{"nodeType":"YulAssignment","src":"1728:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1738:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1728:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1754:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1786:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1797:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1782:3:34"},"nodeType":"YulFunctionCall","src":"1782:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1769:12:34"},"nodeType":"YulFunctionCall","src":"1769:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1758:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1837:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1810:26:34"},"nodeType":"YulFunctionCall","src":"1810:35:34"},"nodeType":"YulExpressionStatement","src":"1810:35:34"},{"nodeType":"YulAssignment","src":"1854:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1864:7:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1854:6:34"}]},{"nodeType":"YulAssignment","src":"1880:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1907:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1918:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1903:3:34"},"nodeType":"YulFunctionCall","src":"1903:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1890:12:34"},"nodeType":"YulFunctionCall","src":"1890:32:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1880:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1377:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1388:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1400:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1408:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1416:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1424:6:34","type":""}],"src":"1314:614:34"},{"body":{"nodeType":"YulBlock","src":"2084:743:34","statements":[{"body":{"nodeType":"YulBlock","src":"2131:26:34","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"2140:6:34"},{"name":"value4","nodeType":"YulIdentifier","src":"2148:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2133:6:34"},"nodeType":"YulFunctionCall","src":"2133:22:34"},"nodeType":"YulExpressionStatement","src":"2133:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2105:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"2114:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2101:3:34"},"nodeType":"YulFunctionCall","src":"2101:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"2126:3:34","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2097:3:34"},"nodeType":"YulFunctionCall","src":"2097:33:34"},"nodeType":"YulIf","src":"2094:2:34"},{"nodeType":"YulVariableDeclaration","src":"2166:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2192:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2179:12:34"},"nodeType":"YulFunctionCall","src":"2179:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2170:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2238:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2211:26:34"},"nodeType":"YulFunctionCall","src":"2211:33:34"},"nodeType":"YulExpressionStatement","src":"2211:33:34"},{"nodeType":"YulAssignment","src":"2253:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"2263:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2253:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2277:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2309:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2320:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2305:3:34"},"nodeType":"YulFunctionCall","src":"2305:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2292:12:34"},"nodeType":"YulFunctionCall","src":"2292:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2281:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2360:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2333:26:34"},"nodeType":"YulFunctionCall","src":"2333:35:34"},"nodeType":"YulExpressionStatement","src":"2333:35:34"},{"nodeType":"YulAssignment","src":"2377:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2387:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2377:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2403:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2435:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2446:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2431:3:34"},"nodeType":"YulFunctionCall","src":"2431:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2418:12:34"},"nodeType":"YulFunctionCall","src":"2418:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"2407:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"2486:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2459:26:34"},"nodeType":"YulFunctionCall","src":"2459:35:34"},"nodeType":"YulExpressionStatement","src":"2459:35:34"},{"nodeType":"YulAssignment","src":"2503:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"2513:7:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2503:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2529:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2561:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2572:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2557:3:34"},"nodeType":"YulFunctionCall","src":"2557:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2544:12:34"},"nodeType":"YulFunctionCall","src":"2544:32:34"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"2533:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"2610:7:34"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"2585:24:34"},"nodeType":"YulFunctionCall","src":"2585:33:34"},"nodeType":"YulExpressionStatement","src":"2585:33:34"},{"nodeType":"YulAssignment","src":"2627:17:34","value":{"name":"value_3","nodeType":"YulIdentifier","src":"2637:7:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2627:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2653:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2685:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2696:3:34","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2681:3:34"},"nodeType":"YulFunctionCall","src":"2681:19:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2668:12:34"},"nodeType":"YulFunctionCall","src":"2668:33:34"},"variables":[{"name":"value_4","nodeType":"YulTypedName","src":"2657:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_4","nodeType":"YulIdentifier","src":"2735:7:34"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"2710:24:34"},"nodeType":"YulFunctionCall","src":"2710:33:34"},"nodeType":"YulExpressionStatement","src":"2710:33:34"},{"nodeType":"YulAssignment","src":"2752:17:34","value":{"name":"value_4","nodeType":"YulIdentifier","src":"2762:7:34"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2752:6:34"}]},{"nodeType":"YulAssignment","src":"2778:43:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2805:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2816:3:34","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2801:3:34"},"nodeType":"YulFunctionCall","src":"2801:19:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2788:12:34"},"nodeType":"YulFunctionCall","src":"2788:33:34"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2778:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint8t_uint8t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2010:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2021:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2033:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2041:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2049:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2057:6:34","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2065:6:34","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2073:6:34","type":""}],"src":"1933:894:34"},{"body":{"nodeType":"YulBlock","src":"2949:532:34","statements":[{"body":{"nodeType":"YulBlock","src":"2996:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3005:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3013:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2998:6:34"},"nodeType":"YulFunctionCall","src":"2998:22:34"},"nodeType":"YulExpressionStatement","src":"2998:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2970:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"2979:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2966:3:34"},"nodeType":"YulFunctionCall","src":"2966:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"2991:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2962:3:34"},"nodeType":"YulFunctionCall","src":"2962:33:34"},"nodeType":"YulIf","src":"2959:2:34"},{"nodeType":"YulVariableDeclaration","src":"3031:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3057:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3044:12:34"},"nodeType":"YulFunctionCall","src":"3044:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3035:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3103:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3076:26:34"},"nodeType":"YulFunctionCall","src":"3076:33:34"},"nodeType":"YulExpressionStatement","src":"3076:33:34"},{"nodeType":"YulAssignment","src":"3118:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"3128:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3118:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"3142:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3174:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"3185:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3170:3:34"},"nodeType":"YulFunctionCall","src":"3170:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3157:12:34"},"nodeType":"YulFunctionCall","src":"3157:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3146:7:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3246:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3255:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"3263:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3248:6:34"},"nodeType":"YulFunctionCall","src":"3248:22:34"},"nodeType":"YulExpressionStatement","src":"3248:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3211:7:34"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3234:7:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3227:6:34"},"nodeType":"YulFunctionCall","src":"3227:15:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3220:6:34"},"nodeType":"YulFunctionCall","src":"3220:23:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3208:2:34"},"nodeType":"YulFunctionCall","src":"3208:36:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3201:6:34"},"nodeType":"YulFunctionCall","src":"3201:44:34"},"nodeType":"YulIf","src":"3198:2:34"},{"nodeType":"YulAssignment","src":"3281:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3291:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3281:6:34"}]},{"nodeType":"YulAssignment","src":"3307:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3334:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"3345:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3330:3:34"},"nodeType":"YulFunctionCall","src":"3330:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3317:12:34"},"nodeType":"YulFunctionCall","src":"3317:32:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3307:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"3358:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3390:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"3401:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3386:3:34"},"nodeType":"YulFunctionCall","src":"3386:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3373:12:34"},"nodeType":"YulFunctionCall","src":"3373:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"3362:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"3441:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3414:26:34"},"nodeType":"YulFunctionCall","src":"3414:35:34"},"nodeType":"YulExpressionStatement","src":"3414:35:34"},{"nodeType":"YulAssignment","src":"3458:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"3468:7:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3458:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_boolt_int256t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2891:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2902:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2914:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2922:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2930:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2938:6:34","type":""}],"src":"2832:649:34"},{"body":{"nodeType":"YulBlock","src":"3615:1773:34","statements":[{"nodeType":"YulVariableDeclaration","src":"3625:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"3635:2:34","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3629:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3682:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3691:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3699:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3684:6:34"},"nodeType":"YulFunctionCall","src":"3684:22:34"},"nodeType":"YulExpressionStatement","src":"3684:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3657:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"3666:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3653:3:34"},"nodeType":"YulFunctionCall","src":"3653:23:34"},{"name":"_1","nodeType":"YulIdentifier","src":"3678:2:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3649:3:34"},"nodeType":"YulFunctionCall","src":"3649:32:34"},"nodeType":"YulIf","src":"3646:2:34"},{"nodeType":"YulVariableDeclaration","src":"3717:30:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3737:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3731:5:34"},"nodeType":"YulFunctionCall","src":"3731:16:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3721:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3756:28:34","value":{"kind":"number","nodeType":"YulLiteral","src":"3766:18:34","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3760:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3811:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3820:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3828:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3813:6:34"},"nodeType":"YulFunctionCall","src":"3813:22:34"},"nodeType":"YulExpressionStatement","src":"3813:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3799:6:34"},{"name":"_2","nodeType":"YulIdentifier","src":"3807:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3796:2:34"},"nodeType":"YulFunctionCall","src":"3796:14:34"},"nodeType":"YulIf","src":"3793:2:34"},{"nodeType":"YulVariableDeclaration","src":"3846:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3860:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"3871:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3856:3:34"},"nodeType":"YulFunctionCall","src":"3856:22:34"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3850:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3926:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3935:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3943:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3928:6:34"},"nodeType":"YulFunctionCall","src":"3928:22:34"},"nodeType":"YulExpressionStatement","src":"3928:22:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3905:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"3909:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3901:3:34"},"nodeType":"YulFunctionCall","src":"3901:13:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3916:7:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3897:3:34"},"nodeType":"YulFunctionCall","src":"3897:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3890:6:34"},"nodeType":"YulFunctionCall","src":"3890:35:34"},"nodeType":"YulIf","src":"3887:2:34"},{"nodeType":"YulVariableDeclaration","src":"3961:19:34","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3977:2:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3971:5:34"},"nodeType":"YulFunctionCall","src":"3971:9:34"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3965:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4003:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"4005:7:34"},"nodeType":"YulFunctionCall","src":"4005:9:34"},"nodeType":"YulExpressionStatement","src":"4005:9:34"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"3995:2:34"},{"name":"_2","nodeType":"YulIdentifier","src":"3999:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3992:2:34"},"nodeType":"YulFunctionCall","src":"3992:10:34"},"nodeType":"YulIf","src":"3989:2:34"},{"nodeType":"YulVariableDeclaration","src":"4025:47:34","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4059:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4063:2:34"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4055:3:34"},"nodeType":"YulFunctionCall","src":"4055:11:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4068:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4051:3:34"},"nodeType":"YulFunctionCall","src":"4051:20:34"}],"functionName":{"name":"allocateMemory","nodeType":"YulIdentifier","src":"4036:14:34"},"nodeType":"YulFunctionCall","src":"4036:36:34"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4029:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4081:16:34","value":{"name":"dst","nodeType":"YulIdentifier","src":"4094:3:34"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"4085:5:34","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4113:3:34"},{"name":"_4","nodeType":"YulIdentifier","src":"4118:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4106:6:34"},"nodeType":"YulFunctionCall","src":"4106:15:34"},"nodeType":"YulExpressionStatement","src":"4106:15:34"},{"nodeType":"YulAssignment","src":"4130:19:34","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4141:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4146:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4137:3:34"},"nodeType":"YulFunctionCall","src":"4137:12:34"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4130:3:34"}]},{"nodeType":"YulVariableDeclaration","src":"4158:22:34","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4173:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4177:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4169:3:34"},"nodeType":"YulFunctionCall","src":"4169:11:34"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4162:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4189:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"4199:4:34","type":"","value":"0xc0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"4193:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4258:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4267:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4275:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4260:6:34"},"nodeType":"YulFunctionCall","src":"4260:22:34"},"nodeType":"YulExpressionStatement","src":"4260:22:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4226:2:34"},{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"4234:2:34"},{"name":"_5","nodeType":"YulIdentifier","src":"4238:2:34"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4230:3:34"},"nodeType":"YulFunctionCall","src":"4230:11:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4222:3:34"},"nodeType":"YulFunctionCall","src":"4222:20:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4244:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4218:3:34"},"nodeType":"YulFunctionCall","src":"4218:29:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4249:7:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4215:2:34"},"nodeType":"YulFunctionCall","src":"4215:42:34"},"nodeType":"YulIf","src":"4212:2:34"},{"nodeType":"YulVariableDeclaration","src":"4293:15:34","value":{"name":"value0","nodeType":"YulIdentifier","src":"4302:6:34"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4297:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4362:996:34","statements":[{"body":{"nodeType":"YulBlock","src":"4406:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4415:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4423:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4408:6:34"},"nodeType":"YulFunctionCall","src":"4408:22:34"},"nodeType":"YulExpressionStatement","src":"4408:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4387:7:34"},{"name":"src","nodeType":"YulIdentifier","src":"4396:3:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4383:3:34"},"nodeType":"YulFunctionCall","src":"4383:17:34"},{"name":"_5","nodeType":"YulIdentifier","src":"4402:2:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4379:3:34"},"nodeType":"YulFunctionCall","src":"4379:26:34"},"nodeType":"YulIf","src":"4376:2:34"},{"nodeType":"YulVariableDeclaration","src":"4445:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"4455:2:34","type":"","value":"64"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"4449:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4470:23:34","value":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"4490:2:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4484:5:34"},"nodeType":"YulFunctionCall","src":"4484:9:34"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4474:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4506:33:34","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4528:6:34"},{"name":"_5","nodeType":"YulIdentifier","src":"4536:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4524:3:34"},"nodeType":"YulFunctionCall","src":"4524:15:34"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4510:10:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4602:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"4604:7:34"},"nodeType":"YulFunctionCall","src":"4604:9:34"},"nodeType":"YulExpressionStatement","src":"4604:9:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4561:10:34"},{"name":"_2","nodeType":"YulIdentifier","src":"4573:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4558:2:34"},"nodeType":"YulFunctionCall","src":"4558:18:34"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4581:10:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4593:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4578:2:34"},"nodeType":"YulFunctionCall","src":"4578:22:34"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4555:2:34"},"nodeType":"YulFunctionCall","src":"4555:46:34"},"nodeType":"YulIf","src":"4552:2:34"},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"4635:2:34"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4639:10:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4628:6:34"},"nodeType":"YulFunctionCall","src":"4628:22:34"},"nodeType":"YulExpressionStatement","src":"4628:22:34"},{"nodeType":"YulVariableDeclaration","src":"4663:23:34","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4682:3:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4676:5:34"},"nodeType":"YulFunctionCall","src":"4676:10:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4667:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4726:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4699:26:34"},"nodeType":"YulFunctionCall","src":"4699:33:34"},"nodeType":"YulExpressionStatement","src":"4699:33:34"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4752:6:34"},{"name":"value","nodeType":"YulIdentifier","src":"4760:5:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4745:6:34"},"nodeType":"YulFunctionCall","src":"4745:21:34"},"nodeType":"YulExpressionStatement","src":"4745:21:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4790:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4798:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4786:3:34"},"nodeType":"YulFunctionCall","src":"4786:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4839:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"4844:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:34"},"nodeType":"YulFunctionCall","src":"4835:12:34"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"4803:31:34"},"nodeType":"YulFunctionCall","src":"4803:45:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4779:6:34"},"nodeType":"YulFunctionCall","src":"4779:70:34"},"nodeType":"YulExpressionStatement","src":"4779:70:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4873:6:34"},{"name":"_6","nodeType":"YulIdentifier","src":"4881:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4869:3:34"},"nodeType":"YulFunctionCall","src":"4869:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4922:3:34"},{"name":"_6","nodeType":"YulIdentifier","src":"4927:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4918:3:34"},"nodeType":"YulFunctionCall","src":"4918:12:34"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"4886:31:34"},"nodeType":"YulFunctionCall","src":"4886:45:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4862:6:34"},"nodeType":"YulFunctionCall","src":"4862:70:34"},"nodeType":"YulExpressionStatement","src":"4862:70:34"},{"nodeType":"YulVariableDeclaration","src":"4945:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"4955:2:34","type":"","value":"96"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"4949:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4981:6:34"},{"name":"_7","nodeType":"YulIdentifier","src":"4989:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4977:3:34"},"nodeType":"YulFunctionCall","src":"4977:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5028:3:34"},{"name":"_7","nodeType":"YulIdentifier","src":"5033:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5024:3:34"},"nodeType":"YulFunctionCall","src":"5024:12:34"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"4994:29:34"},"nodeType":"YulFunctionCall","src":"4994:43:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4970:6:34"},"nodeType":"YulFunctionCall","src":"4970:68:34"},"nodeType":"YulExpressionStatement","src":"4970:68:34"},{"nodeType":"YulVariableDeclaration","src":"5051:13:34","value":{"kind":"number","nodeType":"YulLiteral","src":"5061:3:34","type":"","value":"128"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"5055:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5088:6:34"},{"name":"_8","nodeType":"YulIdentifier","src":"5096:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:34"},"nodeType":"YulFunctionCall","src":"5084:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5135:3:34"},{"name":"_8","nodeType":"YulIdentifier","src":"5140:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5131:3:34"},"nodeType":"YulFunctionCall","src":"5131:12:34"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"5101:29:34"},"nodeType":"YulFunctionCall","src":"5101:43:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5077:6:34"},"nodeType":"YulFunctionCall","src":"5077:68:34"},"nodeType":"YulExpressionStatement","src":"5077:68:34"},{"nodeType":"YulVariableDeclaration","src":"5158:13:34","value":{"kind":"number","nodeType":"YulLiteral","src":"5168:3:34","type":"","value":"160"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"5162:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5195:6:34"},{"name":"_9","nodeType":"YulIdentifier","src":"5203:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5191:3:34"},"nodeType":"YulFunctionCall","src":"5191:15:34"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5242:3:34"},{"name":"_9","nodeType":"YulIdentifier","src":"5247:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5238:3:34"},"nodeType":"YulFunctionCall","src":"5238:12:34"}],"functionName":{"name":"abi_decode_t_uint8_fromMemory","nodeType":"YulIdentifier","src":"5208:29:34"},"nodeType":"YulFunctionCall","src":"5208:43:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5184:6:34"},"nodeType":"YulFunctionCall","src":"5184:68:34"},"nodeType":"YulExpressionStatement","src":"5184:68:34"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5272:3:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5277:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5265:6:34"},"nodeType":"YulFunctionCall","src":"5265:19:34"},"nodeType":"YulExpressionStatement","src":"5265:19:34"},{"nodeType":"YulAssignment","src":"5297:19:34","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5308:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"5313:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5304:3:34"},"nodeType":"YulFunctionCall","src":"5304:12:34"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5297:3:34"}]},{"nodeType":"YulAssignment","src":"5329:19:34","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5340:3:34"},{"name":"_5","nodeType":"YulIdentifier","src":"5345:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5336:3:34"},"nodeType":"YulFunctionCall","src":"5336:12:34"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5329:3:34"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4328:1:34"},{"name":"_4","nodeType":"YulIdentifier","src":"4331:2:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4325:2:34"},"nodeType":"YulFunctionCall","src":"4325:9:34"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4335:18:34","statements":[{"nodeType":"YulAssignment","src":"4337:14:34","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4346:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"4349:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4342:3:34"},"nodeType":"YulFunctionCall","src":"4342:9:34"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4337:1:34"}]}]},"pre":{"nodeType":"YulBlock","src":"4321:3:34","statements":[]},"src":"4317:1041:34"},{"nodeType":"YulAssignment","src":"5367:15:34","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5377:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5367:6:34"}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3581:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3592:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3604:6:34","type":""}],"src":"3486:1902:34"},{"body":{"nodeType":"YulBlock","src":"5472:263:34","statements":[{"body":{"nodeType":"YulBlock","src":"5518:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5527:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"5535:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5520:6:34"},"nodeType":"YulFunctionCall","src":"5520:22:34"},"nodeType":"YulExpressionStatement","src":"5520:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5493:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"5502:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5489:3:34"},"nodeType":"YulFunctionCall","src":"5489:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"5514:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5485:3:34"},"nodeType":"YulFunctionCall","src":"5485:32:34"},"nodeType":"YulIf","src":"5482:2:34"},{"nodeType":"YulVariableDeclaration","src":"5553:37:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5580:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5567:12:34"},"nodeType":"YulFunctionCall","src":"5567:23:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5557:6:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"5633:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5642:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"5650:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5635:6:34"},"nodeType":"YulFunctionCall","src":"5635:22:34"},"nodeType":"YulExpressionStatement","src":"5635:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5605:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"5613:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5602:2:34"},"nodeType":"YulFunctionCall","src":"5602:30:34"},"nodeType":"YulIf","src":"5599:2:34"},{"nodeType":"YulAssignment","src":"5668:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5701:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"5712:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5697:3:34"},"nodeType":"YulFunctionCall","src":"5697:22:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5721:7:34"}],"functionName":{"name":"abi_decode_t_bytes","nodeType":"YulIdentifier","src":"5678:18:34"},"nodeType":"YulFunctionCall","src":"5678:51:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5668:6:34"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5438:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5449:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5461:6:34","type":""}],"src":"5393:342:34"},{"body":{"nodeType":"YulBlock","src":"5836:314:34","statements":[{"body":{"nodeType":"YulBlock","src":"5882:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5891:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"5899:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5884:6:34"},"nodeType":"YulFunctionCall","src":"5884:22:34"},"nodeType":"YulExpressionStatement","src":"5884:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5857:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"5866:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5853:3:34"},"nodeType":"YulFunctionCall","src":"5853:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"5878:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5849:3:34"},"nodeType":"YulFunctionCall","src":"5849:32:34"},"nodeType":"YulIf","src":"5846:2:34"},{"nodeType":"YulVariableDeclaration","src":"5917:37:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5944:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5931:12:34"},"nodeType":"YulFunctionCall","src":"5931:23:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5921:6:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"5997:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6006:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"6014:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5999:6:34"},"nodeType":"YulFunctionCall","src":"5999:22:34"},"nodeType":"YulExpressionStatement","src":"5999:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5969:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"5977:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5966:2:34"},"nodeType":"YulFunctionCall","src":"5966:30:34"},"nodeType":"YulIf","src":"5963:2:34"},{"nodeType":"YulAssignment","src":"6032:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6065:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"6076:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6061:3:34"},"nodeType":"YulFunctionCall","src":"6061:22:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6085:7:34"}],"functionName":{"name":"abi_decode_t_bytes","nodeType":"YulIdentifier","src":"6042:18:34"},"nodeType":"YulFunctionCall","src":"6042:51:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6032:6:34"}]},{"nodeType":"YulAssignment","src":"6102:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6129:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"6140:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6125:3:34"},"nodeType":"YulFunctionCall","src":"6125:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6112:12:34"},"nodeType":"YulFunctionCall","src":"6112:32:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6102:6:34"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5794:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5805:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5817:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5825:6:34","type":""}],"src":"5740:410:34"},{"body":{"nodeType":"YulBlock","src":"6269:360:34","statements":[{"body":{"nodeType":"YulBlock","src":"6315:26:34","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6324:6:34"},{"name":"value2","nodeType":"YulIdentifier","src":"6332:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6317:6:34"},"nodeType":"YulFunctionCall","src":"6317:22:34"},"nodeType":"YulExpressionStatement","src":"6317:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6290:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"6299:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6286:3:34"},"nodeType":"YulFunctionCall","src":"6286:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"6311:2:34","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6282:3:34"},"nodeType":"YulFunctionCall","src":"6282:32:34"},"nodeType":"YulIf","src":"6279:2:34"},{"nodeType":"YulAssignment","src":"6350:52:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6392:9:34"}],"functionName":{"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulIdentifier","src":"6360:31:34"},"nodeType":"YulFunctionCall","src":"6360:42:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6350:6:34"}]},{"nodeType":"YulAssignment","src":"6411:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6457:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"6468:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6453:3:34"},"nodeType":"YulFunctionCall","src":"6453:18:34"}],"functionName":{"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulIdentifier","src":"6421:31:34"},"nodeType":"YulFunctionCall","src":"6421:51:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6411:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"6481:38:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6504:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"6515:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6500:3:34"},"nodeType":"YulFunctionCall","src":"6500:18:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6494:5:34"},"nodeType":"YulFunctionCall","src":"6494:25:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6485:5:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"6573:26:34","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6582:6:34"},{"name":"value2","nodeType":"YulIdentifier","src":"6590:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6575:6:34"},"nodeType":"YulFunctionCall","src":"6575:22:34"},"nodeType":"YulExpressionStatement","src":"6575:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6541:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6552:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"6559:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6548:3:34"},"nodeType":"YulFunctionCall","src":"6548:22:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6538:2:34"},"nodeType":"YulFunctionCall","src":"6538:33:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6531:6:34"},"nodeType":"YulFunctionCall","src":"6531:41:34"},"nodeType":"YulIf","src":"6528:2:34"},{"nodeType":"YulAssignment","src":"6608:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"6618:5:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6608:6:34"}]}]},"name":"abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6219:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6230:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6242:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6250:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6258:6:34","type":""}],"src":"6155:474:34"},{"body":{"nodeType":"YulBlock","src":"6831:1053:34","statements":[{"nodeType":"YulVariableDeclaration","src":"6841:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"6851:2:34","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6845:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6862:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6880:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"6891:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6876:3:34"},"nodeType":"YulFunctionCall","src":"6876:18:34"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6866:6:34","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6910:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"6921:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6903:6:34"},"nodeType":"YulFunctionCall","src":"6903:21:34"},"nodeType":"YulExpressionStatement","src":"6903:21:34"},{"nodeType":"YulVariableDeclaration","src":"6933:17:34","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"6944:6:34"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"6937:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6959:27:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6979:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6973:5:34"},"nodeType":"YulFunctionCall","src":"6973:13:34"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6963:6:34","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7002:6:34"},{"name":"length","nodeType":"YulIdentifier","src":"7010:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6995:6:34"},"nodeType":"YulFunctionCall","src":"6995:22:34"},"nodeType":"YulExpressionStatement","src":"6995:22:34"},{"nodeType":"YulVariableDeclaration","src":"7026:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7036:2:34","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7030:2:34","type":""}]},{"nodeType":"YulAssignment","src":"7047:25:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7058:9:34"},{"name":"_2","nodeType":"YulIdentifier","src":"7069:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7054:3:34"},"nodeType":"YulFunctionCall","src":"7054:18:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7047:3:34"}]},{"nodeType":"YulVariableDeclaration","src":"7081:29:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7099:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7107:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7095:3:34"},"nodeType":"YulFunctionCall","src":"7095:15:34"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7085:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7119:13:34","value":{"name":"tail","nodeType":"YulIdentifier","src":"7128:4:34"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7123:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"7190:668:34","statements":[{"nodeType":"YulVariableDeclaration","src":"7204:23:34","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7220:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7214:5:34"},"nodeType":"YulFunctionCall","src":"7214:13:34"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7208:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7240:29:34","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7258:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7263:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7254:3:34"},"nodeType":"YulFunctionCall","src":"7254:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"7267:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7250:3:34"},"nodeType":"YulFunctionCall","src":"7250:19:34"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7244:2:34","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7289:3:34"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7304:2:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7298:5:34"},"nodeType":"YulFunctionCall","src":"7298:9:34"},{"name":"_4","nodeType":"YulIdentifier","src":"7309:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7294:3:34"},"nodeType":"YulFunctionCall","src":"7294:18:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7282:6:34"},"nodeType":"YulFunctionCall","src":"7282:31:34"},"nodeType":"YulExpressionStatement","src":"7282:31:34"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7337:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7342:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7333:3:34"},"nodeType":"YulFunctionCall","src":"7333:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7361:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7365:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7357:3:34"},"nodeType":"YulFunctionCall","src":"7357:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7351:5:34"},"nodeType":"YulFunctionCall","src":"7351:18:34"},{"name":"_4","nodeType":"YulIdentifier","src":"7371:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7347:3:34"},"nodeType":"YulFunctionCall","src":"7347:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7326:6:34"},"nodeType":"YulFunctionCall","src":"7326:49:34"},"nodeType":"YulExpressionStatement","src":"7326:49:34"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7399:3:34"},{"name":"_2","nodeType":"YulIdentifier","src":"7404:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7395:3:34"},"nodeType":"YulFunctionCall","src":"7395:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7423:2:34"},{"name":"_2","nodeType":"YulIdentifier","src":"7427:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7419:3:34"},"nodeType":"YulFunctionCall","src":"7419:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7413:5:34"},"nodeType":"YulFunctionCall","src":"7413:18:34"},{"name":"_4","nodeType":"YulIdentifier","src":"7433:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7409:3:34"},"nodeType":"YulFunctionCall","src":"7409:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7388:6:34"},"nodeType":"YulFunctionCall","src":"7388:49:34"},"nodeType":"YulExpressionStatement","src":"7388:49:34"},{"nodeType":"YulVariableDeclaration","src":"7450:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7460:4:34","type":"","value":"0x60"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"7454:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7477:38:34","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7507:2:34"},{"name":"_5","nodeType":"YulIdentifier","src":"7511:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7503:3:34"},"nodeType":"YulFunctionCall","src":"7503:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7497:5:34"},"nodeType":"YulFunctionCall","src":"7497:18:34"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7481:12:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7528:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7538:4:34","type":"","value":"0xff"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"7532:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7566:3:34"},{"name":"_5","nodeType":"YulIdentifier","src":"7571:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7562:3:34"},"nodeType":"YulFunctionCall","src":"7562:12:34"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7580:12:34"},{"name":"_6","nodeType":"YulIdentifier","src":"7594:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7576:3:34"},"nodeType":"YulFunctionCall","src":"7576:21:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7555:6:34"},"nodeType":"YulFunctionCall","src":"7555:43:34"},"nodeType":"YulExpressionStatement","src":"7555:43:34"},{"nodeType":"YulVariableDeclaration","src":"7611:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7621:4:34","type":"","value":"0x80"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"7615:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7649:3:34"},{"name":"_7","nodeType":"YulIdentifier","src":"7654:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7645:3:34"},"nodeType":"YulFunctionCall","src":"7645:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7673:2:34"},{"name":"_7","nodeType":"YulIdentifier","src":"7677:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7669:3:34"},"nodeType":"YulFunctionCall","src":"7669:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7663:5:34"},"nodeType":"YulFunctionCall","src":"7663:18:34"},{"name":"_6","nodeType":"YulIdentifier","src":"7683:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7659:3:34"},"nodeType":"YulFunctionCall","src":"7659:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7638:6:34"},"nodeType":"YulFunctionCall","src":"7638:49:34"},"nodeType":"YulExpressionStatement","src":"7638:49:34"},{"nodeType":"YulVariableDeclaration","src":"7700:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"7710:4:34","type":"","value":"0xa0"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"7704:2:34","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7738:3:34"},{"name":"_8","nodeType":"YulIdentifier","src":"7743:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7734:3:34"},"nodeType":"YulFunctionCall","src":"7734:12:34"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7762:2:34"},{"name":"_8","nodeType":"YulIdentifier","src":"7766:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7758:3:34"},"nodeType":"YulFunctionCall","src":"7758:11:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7752:5:34"},"nodeType":"YulFunctionCall","src":"7752:18:34"},{"name":"_6","nodeType":"YulIdentifier","src":"7772:2:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7748:3:34"},"nodeType":"YulFunctionCall","src":"7748:27:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7727:6:34"},"nodeType":"YulFunctionCall","src":"7727:49:34"},"nodeType":"YulExpressionStatement","src":"7727:49:34"},{"nodeType":"YulAssignment","src":"7789:21:34","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7800:3:34"},{"kind":"number","nodeType":"YulLiteral","src":"7805:4:34","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7796:3:34"},"nodeType":"YulFunctionCall","src":"7796:14:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7789:3:34"}]},{"nodeType":"YulAssignment","src":"7823:25:34","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7837:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"7845:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7833:3:34"},"nodeType":"YulFunctionCall","src":"7833:15:34"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7823:6:34"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7152:1:34"},{"name":"length","nodeType":"YulIdentifier","src":"7155:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7149:2:34"},"nodeType":"YulFunctionCall","src":"7149:13:34"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7163:18:34","statements":[{"nodeType":"YulAssignment","src":"7165:14:34","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7174:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"7177:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7170:3:34"},"nodeType":"YulFunctionCall","src":"7170:9:34"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7165:1:34"}]}]},"pre":{"nodeType":"YulBlock","src":"7145:3:34","statements":[]},"src":"7141:717:34"},{"nodeType":"YulAssignment","src":"7867:11:34","value":{"name":"pos","nodeType":"YulIdentifier","src":"7875:3:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7867:4:34"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6800:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6811:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6822:4:34","type":""}],"src":"6634:1250:34"},{"body":{"nodeType":"YulBlock","src":"8040:484:34","statements":[{"nodeType":"YulVariableDeclaration","src":"8050:12:34","value":{"kind":"number","nodeType":"YulLiteral","src":"8060:2:34","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8054:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8071:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8089:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8100:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8085:3:34"},"nodeType":"YulFunctionCall","src":"8085:18:34"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8075:6:34","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8119:9:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8130:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8112:6:34"},"nodeType":"YulFunctionCall","src":"8112:21:34"},"nodeType":"YulExpressionStatement","src":"8112:21:34"},{"nodeType":"YulVariableDeclaration","src":"8142:17:34","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"8153:6:34"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"8146:3:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8168:27:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8188:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8182:5:34"},"nodeType":"YulFunctionCall","src":"8182:13:34"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8172:6:34","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8211:6:34"},{"name":"length","nodeType":"YulIdentifier","src":"8219:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8204:6:34"},"nodeType":"YulFunctionCall","src":"8204:22:34"},"nodeType":"YulExpressionStatement","src":"8204:22:34"},{"nodeType":"YulAssignment","src":"8235:25:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8246:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8257:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8242:3:34"},"nodeType":"YulFunctionCall","src":"8242:18:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8235:3:34"}]},{"nodeType":"YulVariableDeclaration","src":"8269:29:34","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8287:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8295:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8283:3:34"},"nodeType":"YulFunctionCall","src":"8283:15:34"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8273:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8307:13:34","value":{"name":"tail","nodeType":"YulIdentifier","src":"8316:4:34"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8311:1:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"8378:120:34","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8399:3:34"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8410:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8404:5:34"},"nodeType":"YulFunctionCall","src":"8404:13:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8392:6:34"},"nodeType":"YulFunctionCall","src":"8392:26:34"},"nodeType":"YulExpressionStatement","src":"8392:26:34"},{"nodeType":"YulAssignment","src":"8431:19:34","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8442:3:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8447:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8438:3:34"},"nodeType":"YulFunctionCall","src":"8438:12:34"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8431:3:34"}]},{"nodeType":"YulAssignment","src":"8463:25:34","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8477:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"8485:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:34"},"nodeType":"YulFunctionCall","src":"8473:15:34"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8463:6:34"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8340:1:34"},{"name":"length","nodeType":"YulIdentifier","src":"8343:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8337:2:34"},"nodeType":"YulFunctionCall","src":"8337:13:34"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8351:18:34","statements":[{"nodeType":"YulAssignment","src":"8353:14:34","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8362:1:34"},{"kind":"number","nodeType":"YulLiteral","src":"8365:1:34","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8358:3:34"},"nodeType":"YulFunctionCall","src":"8358:9:34"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8353:1:34"}]}]},"pre":{"nodeType":"YulBlock","src":"8333:3:34","statements":[]},"src":"8329:169:34"},{"nodeType":"YulAssignment","src":"8507:11:34","value":{"name":"pos","nodeType":"YulIdentifier","src":"8515:3:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8507:4:34"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8009:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8020:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8031:4:34","type":""}],"src":"7889:635:34"},{"body":{"nodeType":"YulBlock","src":"8654:119:34","statements":[{"nodeType":"YulAssignment","src":"8664:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8676:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8687:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8672:3:34"},"nodeType":"YulFunctionCall","src":"8672:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8664:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8706:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"8717:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8699:6:34"},"nodeType":"YulFunctionCall","src":"8699:25:34"},"nodeType":"YulExpressionStatement","src":"8699:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8744:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8755:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8740:3:34"},"nodeType":"YulFunctionCall","src":"8740:18:34"},{"name":"value1","nodeType":"YulIdentifier","src":"8760:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8733:6:34"},"nodeType":"YulFunctionCall","src":"8733:34:34"},"nodeType":"YulExpressionStatement","src":"8733:34:34"}]},"name":"abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8615:9:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8626:6:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8634:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8645:4:34","type":""}],"src":"8529:244:34"},{"body":{"nodeType":"YulBlock","src":"8879:76:34","statements":[{"nodeType":"YulAssignment","src":"8889:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8901:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"8912:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8897:3:34"},"nodeType":"YulFunctionCall","src":"8897:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8889:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8931:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"8942:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8924:6:34"},"nodeType":"YulFunctionCall","src":"8924:25:34"},"nodeType":"YulExpressionStatement","src":"8924:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8848:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8859:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8870:4:34","type":""}],"src":"8778:177:34"},{"body":{"nodeType":"YulBlock","src":"9004:198:34","statements":[{"nodeType":"YulAssignment","src":"9014:19:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9030:2:34","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9024:5:34"},"nodeType":"YulFunctionCall","src":"9024:9:34"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9014:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"9042:35:34","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9064:6:34"},{"name":"size","nodeType":"YulIdentifier","src":"9072:4:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9060:3:34"},"nodeType":"YulFunctionCall","src":"9060:17:34"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"9046:10:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"9152:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"9154:7:34"},"nodeType":"YulFunctionCall","src":"9154:9:34"},"nodeType":"YulExpressionStatement","src":"9154:9:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9095:10:34"},{"kind":"number","nodeType":"YulLiteral","src":"9107:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9092:2:34"},"nodeType":"YulFunctionCall","src":"9092:34:34"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9131:10:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9143:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9128:2:34"},"nodeType":"YulFunctionCall","src":"9128:22:34"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9089:2:34"},"nodeType":"YulFunctionCall","src":"9089:62:34"},"nodeType":"YulIf","src":"9086:2:34"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9181:2:34","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9185:10:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9174:6:34"},"nodeType":"YulFunctionCall","src":"9174:22:34"},"nodeType":"YulExpressionStatement","src":"9174:22:34"}]},"name":"allocateMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"8984:4:34","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8993:6:34","type":""}],"src":"8960:242:34"},{"body":{"nodeType":"YulBlock","src":"9254:86:34","statements":[{"body":{"nodeType":"YulBlock","src":"9318:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9327:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9330:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9320:6:34"},"nodeType":"YulFunctionCall","src":"9320:12:34"},"nodeType":"YulExpressionStatement","src":"9320:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9277:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9288:5:34"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9303:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9308:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9299:3:34"},"nodeType":"YulFunctionCall","src":"9299:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"9312:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9295:3:34"},"nodeType":"YulFunctionCall","src":"9295:19:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9284:3:34"},"nodeType":"YulFunctionCall","src":"9284:31:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9274:2:34"},"nodeType":"YulFunctionCall","src":"9274:42:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9267:6:34"},"nodeType":"YulFunctionCall","src":"9267:50:34"},"nodeType":"YulIf","src":"9264:2:34"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9243:5:34","type":""}],"src":"9207:133:34"},{"body":{"nodeType":"YulBlock","src":"9390:71:34","statements":[{"body":{"nodeType":"YulBlock","src":"9439:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9448:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9451:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9441:6:34"},"nodeType":"YulFunctionCall","src":"9441:12:34"},"nodeType":"YulExpressionStatement","src":"9441:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9413:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9424:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"9431:4:34","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9420:3:34"},"nodeType":"YulFunctionCall","src":"9420:16:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9410:2:34"},"nodeType":"YulFunctionCall","src":"9410:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9403:6:34"},"nodeType":"YulFunctionCall","src":"9403:35:34"},"nodeType":"YulIf","src":"9400:2:34"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9379:5:34","type":""}],"src":"9345:116:34"}]},"contents":"{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { invalid() }\n        let array_1 := allocateMemory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_t_uint112_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_t_uint8(value)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint8t_uint8t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_t_uint8(value_3)\n        value3 := value_3\n        let value_4 := calldataload(add(headStart, 128))\n        validator_revert_t_uint8(value_4)\n        value4 := value_4\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_addresst_boolt_int256t_uint160(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(value1, value1) }\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_2)\n        value3 := value_2\n    }\n    function abi_decode_tuple_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value0, value0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { invalid() }\n        let dst := allocateMemory(add(mul(_4, _1), _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let src := add(_3, _1)\n        let _5 := 0xc0\n        if gt(add(add(_3, mul(_4, _5)), _1), dataEnd) { revert(value0, value0) }\n        let i := value0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            if slt(sub(dataEnd, src), _5) { revert(value0, value0) }\n            let _6 := 64\n            let memPtr := mload(_6)\n            let newFreePtr := add(memPtr, _5)\n            if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { invalid() }\n            mstore(_6, newFreePtr)\n            let value := mload(src)\n            validator_revert_t_address(value)\n            mstore(memPtr, value)\n            mstore(add(memPtr, _1), abi_decode_t_address_fromMemory(add(src, _1)))\n            mstore(add(memPtr, _6), abi_decode_t_address_fromMemory(add(src, _6)))\n            let _7 := 96\n            mstore(add(memPtr, _7), abi_decode_t_uint8_fromMemory(add(src, _7)))\n            let _8 := 128\n            mstore(add(memPtr, _8), abi_decode_t_uint8_fromMemory(add(src, _8)))\n            let _9 := 160\n            mstore(add(memPtr, _9), abi_decode_t_uint8_fromMemory(add(src, _9)))\n            mstore(dst, memPtr)\n            dst := add(dst, _1)\n            src := add(src, _5)\n        }\n        value0 := dst_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_uint112_fromMemory(headStart)\n        value1 := abi_decode_t_uint112_fromMemory(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(value2, value2) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Route_$4471_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            let _4 := sub(shl(160, 1), 1)\n            mstore(pos, and(mload(_3), _4))\n            mstore(add(pos, _1), and(mload(add(_3, _1)), _4))\n            mstore(add(pos, _2), and(mload(add(_3, _2)), _4))\n            let _5 := 0x60\n            let memberValue0 := mload(add(_3, _5))\n            let _6 := 0xff\n            mstore(add(pos, _5), and(memberValue0, _6))\n            let _7 := 0x80\n            mstore(add(pos, _7), and(mload(add(_3, _7)), _6))\n            let _8 := 0xa0\n            mstore(add(pos, _8), and(mload(add(_3, _8)), _6))\n            pos := add(pos, 0xc0)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_t_uint8(value)\n    {\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c806377cd49e41161005b57806377cd49e4146100fb57806390405d361461010e57806397de0a841461012f578063c25ddce01461014257610087565b8062614b2e1461008c5780632d0f9a30146100b557806353201a4c146100d55780636e95d3d8146100e8575b600080fd5b61009f61009a366004612a4b565b610162565b6040516100ac9190612b6d565b60405180910390f35b6100c86100c33660046127ca565b6102f6565b6040516100ac9190612bbf565b6100c86100e336600461281a565b6104b2565b6100c86100f63660046127ca565b6106d2565b61009f610109366004612a4b565b61087b565b61012161011c366004612892565b610a07565b6040516100ac929190612bb1565b6100c861013d36600461281a565b610cc5565b610155610150366004612a18565b610ed1565b6040516100ac9190612adc565b606060008380602001905181019061017a91906128e8565b90506000815167ffffffffffffffff8111801561019657600080fd5b506040519080825280602002602001820160405280156101c0578160200160208202803683370190505b508251909150600019015b8281815181106101d757fe5b60200260200101516060015160ff16600014156102765761026f8382815181106101fd57fe5b60200260200101516000015184838151811061021557fe5b60200260200101516020015185848151811061022d57fe5b60200260200101516040015186858151811061024557fe5b60200260200101516080015187868151811061025d57fe5b602002602001015160a001518a6104b2565b94506102ca565b6102c783828151811061028557fe5b60200260200101516000015184838151811061029d57fe5b6020026020010151602001518584815181106102b557fe5b602002602001015160400151886106d2565b94505b848282815181106102d757fe5b6020908102919091010152600019016101cb565b509150505b92915050565b60008281806001600160a01b0380881690891610610315578688610318565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039791906127ae565b6001600160a01b031614158061042f5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042391906127ae565b6001600160a01b031614155b1561044057600093505050506104aa565b6001600160a01b038088169089161060008061048a89846104608b610eef565b8661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b6401000276a4610a07565b915091508261049c57816000036104a1565b806000035b96505050505050505b949350505050565b60008481806001600160a01b03808a16908b16106104d157888a6104d4565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906127ae565b6001600160a01b03161415806105eb5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df91906127ae565b6001600160a01b031614155b156105fc57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b0316106106aa5782846106ad565b83835b915091506106be8983838e8e610f05565b9750505050505050505b9695505050505050565b60008281806001600160a01b03808816908916106106f15786886106f4565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906127ae565b6001600160a01b031614158061080b5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906127ae565b6001600160a01b031614155b1561081c57600093505050506104aa565b6001600160a01b038088169089161060008061085e898461083c8b610eef565b6000038661047f5773fffd8963efd1fc6a506488495d951d5263988d2561011c565b915091508261086d57806104a1565b509998505050505050505050565b606060008380602001905181019061089391906128e8565b90506000815167ffffffffffffffff811180156108af57600080fd5b506040519080825280602002602001820160405280156108d9578160200160208202803683370190505b50905060005b82518110156102eb578281815181106108f457fe5b60200260200101516060015160ff16600014156109935761098c83828151811061091a57fe5b60200260200101516000015184838151811061093257fe5b60200260200101516020015185848151811061094a57fe5b60200260200101516040015186858151811061096257fe5b60200260200101516080015187868151811061097a57fe5b602002602001015160a001518a610cc5565b94506109e7565b6109e48382815181106109a257fe5b6020026020010151600001518483815181106109ba57fe5b6020026020010151602001518584815181106109d257fe5b602002602001015160400151886102f6565b94505b848282815181106109f457fe5b60209081029190910101526001016108df565b60008083610a5c576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b6000808513908080610a708a8a8a8a610f7f565b9250925092505b805115801590610a9d5750866001600160a01b031681604001516001600160a01b031614155b15610c8e57610aaa612692565b60408201516001600160a01b031681526060820151610acc908c90868d611012565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b602084015290830151610b1a91610b09908d908c61106f565b6080850151855161ffff88166110bc565b60c085015260a084015260808301526001600160a01b031660408301528415610b7c57610b508160c00151826080015101610eef565b825103825260a0810151610b7290610b6790610eef565b6020840151906112ae565b6020830152610bb7565b610b898160a00151610eef565b825101825260c08101516080820151610bb191610ba69101610eef565b6020840151906112c4565b60208301525b80606001516001600160a01b031682604001516001600160a01b03161415610c4d57806040015115610c24576000610bf38c83602001516112da565b5050505050509150508a15610c06576000035b610c148360800151826113a1565b6001600160801b03166080840152505b89610c33578060200151610c3c565b60018160200151035b600290810b900b6060830152610c88565b80600001516001600160a01b031682604001516001600160a01b031614610c8857610c7b8260400151611457565b600290810b900b60608301525b50610a77565b83151589151514610ca757602081015181518903610cb4565b8060000151880381602001515b909b909a5098505050505050505050565b60008481806001600160a01b03808a16908b1610610ce457888a610ce7565b89895b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906127ae565b6001600160a01b0316141580610dfe5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df291906127ae565b6001600160a01b031614155b15610e0f57600093505050506106c8565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612a8e565b506001600160701b031691506001600160701b031691506000808c6001600160a01b03168e6001600160a01b031610610ebd578284610ec0565b83835b915091506106be8983838e8e611776565b606081806020019051810190610ee791906128e8565b90505b919050565b6000600160ff1b8210610f0157600080fd5b5090565b600085610f1457506000610f76565b841580610f1f575083155b15610f2c57506000610f76565b6000610f4560ff8416610f3f888a6117ee565b906117ee565b90506000610f5a60ff8616610f3f888b611812565b9050610f716001828481610f6a57fe5b0490611822565b925050505b95945050505050565b600080610f8a6126ce565b6000610f9588611832565b9050610fa6878683600001516118e0565b610faf886119b1565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b8152602001610ff98a611a1e565b6001600160801b03168152509150509450945094915050565b600080600061102387878787611a59565b9093509150620d89e719600284900b121561104457620d89e719925061105a565b620d89e8600284900b131561105a57620d89e892505b61106383611a75565b90509450945094915050565b60008361109057816001600160a01b0316836001600160a01b0316116110a6565b816001600160a01b0316836001600160a01b0316105b6110b057826110b2565b815b90505b9392505050565b60008080806001600160a01b03808916908a1610158187128015906111415760006110f58989620f42400362ffffff16620f4240611da7565b90508261110e576111098c8c8c6001611e56565b61111b565b61111b8b8d8c6001611ec6565b955085811061112c578a965061113b565b6111388c8b8386611f71565b96505b5061118b565b81611158576111538b8b8b6000611ec6565b611165565b6111658a8c8b6000611e56565b93508388600003106111795789955061118b565b6111888b8a8a60000385611fbd565b95505b6001600160a01b038a81169087161482156111ee578080156111aa5750815b6111c0576111bb878d8c6001611ec6565b6111c2565b855b95508080156111cf575081155b6111e5576111e0878d8c6000611e56565b6111e7565b845b9450611238565b8080156111f85750815b61120e576112098c888c6001611e56565b611210565b855b955080801561121d575081155b6112335761122e8c888c6000611ec6565b611235565b845b94505b8115801561124857508860000385115b15611254578860000394505b81801561127357508a6001600160a01b0316876001600160a01b031614155b1561128257858903935061129f565b61129c868962ffffff168a620f42400362ffffff16612009565b93505b50505095509550955095915050565b808203828113156000831215146102f057600080fd5b818101828112156000831215146102f057600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d61010081101561135957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b121561140657826001600160801b03168260000384039150816001600160801b031610611401576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6102f0565b826001600160801b03168284019150816001600160801b031610156102f0576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590611493575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6114c8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061155c57607f810383901c9150611566565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461176757886001600160a01b031661174b82611a75565b6001600160a01b031611156117605781611762565b805b611769565b815b9998505050505050505050565b60008561178557506000610f76565b841580611790575083155b1561179d57506000610f76565b60006117ac8760ff86166117ee565b905060006117ba82876117ee565b905060006117d5836117cf8a60ff89166117ee565b90611822565b90508082816117e057fe5b049998505050505050505050565b60008215806118095750508181028183828161180657fe5b04145b6102f057600080fd5b808203828111156102f057600080fd5b808201828110156102f057600080fd5b61183a6126fc565b61184382612043565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d60e08110156118b957600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361192957816001600160a01b0316836001600160a01b0316118015611924575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b611957565b816001600160a01b0316836001600160a01b031610801561195757506401000276a36001600160a01b038416115b9050806119ab576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d6020811015611a1657600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ec57600080fd5b600080611a688686868661211a565b9150915094509492505050565b60008060008360020b12611a8c578260020b611a94565b8260020b6000035b9050620d89e8811115611ad2576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216611ae657600160801b611af8565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611b2c576ffff97272373d413259a46990580e213a0260801c5b6004821615611b4b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611b6a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611b89576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611ba8576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611bc7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611be6576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611c06576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611c26576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611c46576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611c66576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611c86576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611ca6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611cc6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611ce6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611d07576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611d27576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611d46576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611d63576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611d7e578060001981611d7a57fe5b0490505b640100000000810615611d92576001611d95565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611ddd5760008411611dd257600080fd5b5082900490506110b5565b808411611de957600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b03161115611e76579293925b81611ea357611e9e836001600160801b03168686036001600160a01b0316600160601b611da7565b610f76565b610f76836001600160801b03168686036001600160a01b0316600160601b612009565b6000836001600160a01b0316856001600160a01b03161115611ee6579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716611f1057600080fd5b83611f4057866001600160a01b0316611f338383896001600160a01b0316611da7565b81611f3a57fe5b04611f66565b611f66611f578383896001600160a01b0316612009565b886001600160a01b0316612318565b979650505050505050565b600080856001600160a01b031611611f8857600080fd5b6000846001600160801b031611611f9e57600080fd5b81611fb057611e9e8585856001612323565b610f768585856001612404565b600080856001600160a01b031611611fd457600080fd5b6000846001600160801b031611611fea57600080fd5b81611ffc57611e9e8585856000612404565b610f768585856000612323565b6000612016848484611da7565b90506000828061202257fe5b84860911156110b557600019811061203957600080fd5b6001019392505050565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207e57600080fd5b505afa9250505080156120a357506040513d602081101561209e57600080fd5b505160015b61211357816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506040513d602081101561210a57600080fd5b50519050610eea565b9050610eea565b6000808581600286810b9088900b8161212f57fe5b05905060008760020b12801561215657508560020b8760020b8161214f57fe5b0760020b15155b1561216057600019015b841561223757600080612172836124e0565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d60208110156121fd57600080fd5b505116801515975090508661221957898360ff1686030261222c565b89612223826124f2565b840360ff168603025b97505050505061230d565b600080612246836001016124e0565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156122a457600080fd5b505afa1580156122b8573d6000803e3d6000fd5b505050506040513d60208110156122ce57600080fd5b50511680151597509050866122f057898360ff0360ff16866001010102612306565b89836122fb83612592565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b600081156123965760006001600160a01b038411156123595761235484600160601b876001600160801b0316611da7565b612371565b6001600160801b038516606085901b8161236f57fe5b045b905061238e6123896001600160a01b03881683611822565b61267c565b9150506104aa565b60006001600160a01b038411156123c4576123bf84600160601b876001600160801b0316612009565b6123db565b6123db606085901b6001600160801b038716612318565b905080866001600160a01b0316116123f257600080fd5b6001600160a01b0386160390506104aa565b6000826124125750836104aa565b600160601b600160e01b03606085901b168215612499576001600160a01b0386168481029085828161244057fe5b0414156124715781810182811061246f5761246583896001600160a01b031683612009565b93505050506104aa565b505b6124908261248b878a6001600160a01b03168681610f6a57fe5b612318565b925050506104aa565b6001600160a01b038616848102908582816124b057fe5b041480156124bd57508082115b6124c657600080fd5b808203612465612389846001600160a01b038b1684612009565b60020b600881901d9161010090910790565b600080821161250057600080fd5b600160801b821061251357608091821c91015b68010000000000000000821061252b57604091821c91015b640100000000821061253f57602091821c91015b62010000821061255157601091821c91015b610100821061256257600891821c91015b6010821061257257600491821c91015b6004821061258257600291821c91015b60028210610eea57600101919050565b60008082116125a057600080fd5b5060ff6001600160801b038216156125bb57607f19016125c3565b608082901c91505b67ffffffffffffffff8216156125dc57603f19016125e4565b604082901c91505b63ffffffff8216156125f957601f1901612601565b602082901c91505b61ffff82161561261457600f190161261c565b601082901c91505b60ff82161561262e5760071901612636565b600882901c91505b600f8216156126485760031901612650565b600482901c91505b6003821615612662576001190161266a565b600282901c91505b6001821615610eea5760001901919050565b806001600160a01b0381168114610eea57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b8051610eea81612bec565b600082601f830112612737578081fd5b813567ffffffffffffffff81111561274b57fe5b61275e601f8201601f1916602001612bc8565b818152846020838601011115612772578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b0381168114610eea57600080fd5b8051610eea81612c04565b6000602082840312156127bf578081fd5b81516110b581612bec565b600080600080608085870312156127df578283fd5b84356127ea81612bec565b935060208501356127fa81612bec565b9250604085013561280a81612bec565b9396929550929360600135925050565b60008060008060008060c08789031215612832578182fd5b863561283d81612bec565b9550602087013561284d81612bec565b9450604087013561285d81612bec565b9350606087013561286d81612c04565b9250608087013561287d81612c04565b8092505060a087013590509295509295509295565b600080600080608085870312156128a7578384fd5b84356128b281612bec565b9350602085013580151581146128c6578384fd5b92506040850135915060608501356128dd81612bec565b939692955090935050565b600060208083850312156128fa578182fd5b825167ffffffffffffffff80821115612911578384fd5b818501915085601f830112612924578384fd5b81518181111561293057fe5b61293d8485830201612bc8565b8181528481019084860160c0808502870188018b101561295b578889fd5b8896505b84871015612a095780828c031215612975578889fd5b60408051828101818110898211171561298a57fe5b8252835161299781612bec565b81526129a4848b0161271c565b8a8201526129b382850161271c565b82820152606091506129c68285016127a3565b82820152608091506129d98285016127a3565b8282015260a091506129ec8285016127a3565b91810191909152845260019690960195928701929081019061295f565b50909998505050505050505050565b600060208284031215612a29578081fd5b813567ffffffffffffffff811115612a3f578182fd5b6104aa84828501612727565b60008060408385031215612a5d578182fd5b823567ffffffffffffffff811115612a73578283fd5b612a7f85828601612727565b95602094909401359450505050565b600080600060608486031215612aa2578081fd5b612aab8461278c565b9250612ab96020850161278c565b9150604084015163ffffffff81168114612ad1578182fd5b809150509250925092565b602080825282518282018190526000919060409081850190868401855b82811015612b6057815180516001600160a01b0390811686528782015181168887015286820151168686015260608082015160ff9081169187019190915260808083015182169087015260a091820151169085015260c09093019290850190600101612af9565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612ba557835183529284019291840191600101612b89565b50909695505050505050565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612be457fe5b604052919050565b6001600160a01b0381168114612c0157600080fd5b50565b60ff81168114612c0157600080fdfea26469706673582212204672e4ae9d3e67292e5e63e4051c0cc5e8a100a65759e9ead813edcdef8a3f1b64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77CD49E4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x77CD49E4 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x97DE0A84 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xC25DDCE0 EQ PUSH2 0x142 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH3 0x614B2E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x2D0F9A30 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x53201A4C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x6E95D3D8 EQ PUSH2 0xE8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2B6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x2F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2BBF JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x27CA JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A4B JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x2892 JUMP JUMPDEST PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP3 SWAP2 SWAP1 PUSH2 0x2BB1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x281A JUMP JUMPDEST PUSH2 0xCC5 JUMP JUMPDEST PUSH2 0x155 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A18 JUMP JUMPDEST PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x2ADC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP3 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 NOT ADD JUMPDEST DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x276 JUMPI PUSH2 0x26F DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x215 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x245 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x25D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0x4B2 JUMP JUMPDEST SWAP5 POP PUSH2 0x2CA JUMP JUMPDEST PUSH2 0x2C7 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x285 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x6D2 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT ADD PUSH2 0x1CB JUMP JUMPDEST POP SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x315 JUMPI DUP7 DUP9 PUSH2 0x318 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x397 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x42F JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x423 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x48A DUP10 DUP5 PUSH2 0x460 DUP12 PUSH2 0xEEF JUMP JUMPDEST DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0xA07 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x49C JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x4A1 JUMP JUMPDEST DUP1 PUSH1 0x0 SUB JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0x4D1 JUMPI DUP9 DUP11 PUSH2 0x4D4 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x553 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x5EB JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x5FC JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x64C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x670 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x6AA JUMPI DUP3 DUP5 PUSH2 0x6AD JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0xF05 JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH2 0x6F1 JUMPI DUP7 DUP9 PUSH2 0x6F4 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x773 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x80B JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x81C JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND LT PUSH1 0x0 DUP1 PUSH2 0x85E DUP10 DUP5 PUSH2 0x83C DUP12 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x0 SUB DUP7 PUSH2 0x47F JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x11C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x86D JUMPI DUP1 PUSH2 0x4A1 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x893 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x8AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2EB JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x993 JUMPI PUSH2 0x98C DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x91A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x932 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x94A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x962 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x97A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 PUSH2 0xCC5 JUMP JUMPDEST SWAP5 POP PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x9E4 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x9BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP9 PUSH2 0x2F6 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xA5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0xA70 DUP11 DUP11 DUP11 DUP11 PUSH2 0xF7F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA9D JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xC8E JUMPI PUSH2 0xAAA PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xACC SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0x1012 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0xB1A SWAP2 PUSH2 0xB09 SWAP1 DUP14 SWAP1 DUP13 PUSH2 0x106F JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0x10BC JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0xB7C JUMPI PUSH2 0xB50 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xB72 SWAP1 PUSH2 0xB67 SWAP1 PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xBB7 JUMP JUMPDEST PUSH2 0xB89 DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0xEEF JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xBB1 SWAP2 PUSH2 0xBA6 SWAP2 ADD PUSH2 0xEEF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xC4D JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0xC24 JUMPI PUSH1 0x0 PUSH2 0xBF3 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x12DA JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0xC06 JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0xC14 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0x13A1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0xC33 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0xC3C JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xC88 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC88 JUMPI PUSH2 0xC7B DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0xA77 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0xCA7 JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0xCB4 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP1 DUP12 AND LT PUSH2 0xCE4 JUMPI DUP9 DUP11 PUSH2 0xCE7 JUMP JUMPDEST DUP10 DUP10 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0xDFE JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF2 SWAP2 SWAP1 PUSH2 0x27AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE83 SWAP2 SWAP1 PUSH2 0x2A8E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0xEBD JUMPI DUP3 DUP5 PUSH2 0xEC0 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6BE DUP10 DUP4 DUP4 DUP15 DUP15 PUSH2 0x1776 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xEE7 SWAP2 SWAP1 PUSH2 0x28E8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0xF01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xF14 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0xF1F JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF2C JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF45 PUSH1 0xFF DUP5 AND PUSH2 0xF3F DUP9 DUP11 PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF5A PUSH1 0xFF DUP7 AND PUSH2 0xF3F DUP9 DUP12 PUSH2 0x1812 JUMP JUMPDEST SWAP1 POP PUSH2 0xF71 PUSH1 0x1 DUP3 DUP5 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF8A PUSH2 0x26CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF95 DUP9 PUSH2 0x1832 JUMP JUMPDEST SWAP1 POP PUSH2 0xFA6 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xFAF DUP9 PUSH2 0x19B1 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF9 DUP11 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1023 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1A59 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0x1044 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0x105A JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x105A JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0x1063 DUP4 PUSH2 0x1A75 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1090 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x10A6 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0x10B0 JUMPI DUP3 PUSH2 0x10B2 JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x1141 JUMPI PUSH1 0x0 PUSH2 0x10F5 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x110E JUMPI PUSH2 0x1109 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x111B JUMP JUMPDEST PUSH2 0x111B DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0x112C JUMPI DUP11 SWAP7 POP PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1138 DUP13 DUP12 DUP4 DUP7 PUSH2 0x1F71 JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0x118B JUMP JUMPDEST DUP2 PUSH2 0x1158 JUMPI PUSH2 0x1153 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1165 JUMP JUMPDEST PUSH2 0x1165 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0x1179 JUMPI DUP10 SWAP6 POP PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1188 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1FBD JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0x11EE JUMPI DUP1 DUP1 ISZERO PUSH2 0x11AA JUMPI POP DUP2 JUMPDEST PUSH2 0x11C0 JUMPI PUSH2 0x11BB DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x11CF JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x11E5 JUMPI PUSH2 0x11E0 DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x11E7 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0x1238 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x11F8 JUMPI POP DUP2 JUMPDEST PUSH2 0x120E JUMPI PUSH2 0x1209 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x1E56 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0x121D JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0x1233 JUMPI PUSH2 0x122E DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1EC6 JUMP JUMPDEST PUSH2 0x1235 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x1248 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0x1254 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1273 JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1282 JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0x129F JUMP JUMPDEST PUSH2 0x129C DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1342 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x1359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1406 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x1401 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0x1493 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0x14C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x155C JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x1566 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1767 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x174B DUP3 PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1760 JUMPI DUP2 PUSH2 0x1762 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x1769 JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0x1785 JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST DUP5 ISZERO DUP1 PUSH2 0x1790 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x179D JUMPI POP PUSH1 0x0 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AC DUP8 PUSH1 0xFF DUP7 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17BA DUP3 DUP8 PUSH2 0x17EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17D5 DUP4 PUSH2 0x17CF DUP11 PUSH1 0xFF DUP10 AND PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x1822 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x17E0 JUMPI INVALID JUMPDEST DIV SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x1809 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x1806 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x183A PUSH2 0x26FC JUMP JUMPDEST PUSH2 0x1843 DUP3 PUSH2 0x2043 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x188F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x18B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1929 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1924 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x1957 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x1957 JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x19AB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A00 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A68 DUP7 DUP7 DUP7 DUP7 PUSH2 0x211A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1A8C JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1A94 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x1AE6 JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1AF8 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x1B2C JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1B4B JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x1B6A JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x1B89 JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x1BA8 JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x1BC7 JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1BE6 JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1C06 JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1C26 JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1C46 JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x1C66 JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1C86 JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1CA6 JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1CC6 JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1CE6 JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1D07 JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1D27 JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1D46 JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1D63 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1D7E JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x1D7A JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1D92 JUMPI PUSH1 0x1 PUSH2 0x1D95 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1DDD JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1DD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x10B5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1DE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1E76 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1EA3 JUMPI PUSH2 0x1E9E DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0xF76 JUMP JUMPDEST PUSH2 0xF76 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1EE6 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1F40 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F33 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST DUP2 PUSH2 0x1F3A JUMPI INVALID JUMPDEST DIV PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1F66 PUSH2 0x1F57 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2318 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1F88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FB0 JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2323 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2404 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1FFC JUMPI PUSH2 0x1E9E DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0xF76 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2323 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2016 DUP5 DUP5 DUP5 PUSH2 0x1DA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x2022 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x2039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x207E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x20A3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x209E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x2113 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST SWAP1 POP PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x212F JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x2156 JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x214F JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2160 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x2237 JUMPI PUSH1 0x0 DUP1 PUSH2 0x2172 DUP4 PUSH2 0x24E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x2219 JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x222C JUMP JUMPDEST DUP10 PUSH2 0x2223 DUP3 PUSH2 0x24F2 JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2246 DUP4 PUSH1 0x1 ADD PUSH2 0x24E0 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x22CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x22F0 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x2306 JUMP JUMPDEST DUP10 DUP4 PUSH2 0x22FB DUP4 PUSH2 0x2592 JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x2396 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x2359 JUMPI PUSH2 0x2354 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x2371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x236F JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x238E PUSH2 0x2389 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x267C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x23C4 JUMPI PUSH2 0x23BF DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2009 JUMP JUMPDEST PUSH2 0x23DB JUMP JUMPDEST PUSH2 0x23DB PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x2318 JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x23F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2412 JUMPI POP DUP4 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x2499 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x2440 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x2471 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x246F JUMPI PUSH2 0x2465 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x2009 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x4AA JUMP JUMPDEST POP JUMPDEST PUSH2 0x2490 DUP3 PUSH2 0x248B DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0xF6A JUMPI INVALID JUMPDEST PUSH2 0x2318 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x24B0 JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x24BD JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x24C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x2465 PUSH2 0x2389 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x2009 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x2513 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x252B JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x253F JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x2551 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x2562 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x2572 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x2582 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0xEEA JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x25A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x25BB JUMPI PUSH1 0x7F NOT ADD PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x25DC JUMPI PUSH1 0x3F NOT ADD PUSH2 0x25E4 JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x25F9 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x2601 JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x2614 JUMPI PUSH1 0xF NOT ADD PUSH2 0x261C JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x262E JUMPI PUSH1 0x7 NOT ADD PUSH2 0x2636 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x2648 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x2650 JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x2662 JUMPI PUSH1 0x1 NOT ADD PUSH2 0x266A JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0xEEA JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2737 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x274B JUMPI INVALID JUMPDEST PUSH2 0x275E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2772 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xEEA DUP2 PUSH2 0x2C04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x10B5 DUP2 PUSH2 0x2BEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27DF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x27EA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x27FA DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x280A DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2832 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x283D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x284D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x285D DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x286D DUP2 PUSH2 0x2C04 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x287D DUP2 PUSH2 0x2C04 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28A7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x28B2 DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x28C6 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x28DD DUP2 PUSH2 0x2BEC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28FA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2911 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2924 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2930 JUMPI INVALID JUMPDEST PUSH2 0x293D DUP5 DUP6 DUP4 MUL ADD PUSH2 0x2BC8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD PUSH1 0xC0 DUP1 DUP6 MUL DUP8 ADD DUP9 ADD DUP12 LT ISZERO PUSH2 0x295B JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x2A09 JUMPI DUP1 DUP3 DUP13 SUB SLT ISZERO PUSH2 0x2975 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT DUP10 DUP3 GT OR ISZERO PUSH2 0x298A JUMPI INVALID JUMPDEST DUP3 MSTORE DUP4 MLOAD PUSH2 0x2997 DUP2 PUSH2 0x2BEC JUMP JUMPDEST DUP2 MSTORE PUSH2 0x29A4 DUP5 DUP12 ADD PUSH2 0x271C JUMP JUMPDEST DUP11 DUP3 ADD MSTORE PUSH2 0x29B3 DUP3 DUP6 ADD PUSH2 0x271C JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 POP PUSH2 0x29C6 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0x80 SWAP2 POP PUSH2 0x29D9 DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 POP PUSH2 0x29EC DUP3 DUP6 ADD PUSH2 0x27A3 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP8 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x295F JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A29 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A3F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4AA DUP5 DUP3 DUP6 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A5D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A73 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2A7F DUP6 DUP3 DUP7 ADD PUSH2 0x2727 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AA2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2AAB DUP5 PUSH2 0x278C JUMP JUMPDEST SWAP3 POP PUSH2 0x2AB9 PUSH1 0x20 DUP6 ADD PUSH2 0x278C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AD1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2B60 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE DUP8 DUP3 ADD MLOAD DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD AND DUP7 DUP7 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD PUSH1 0xFF SWAP1 DUP2 AND SWAP2 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP3 AND SWAP1 DUP8 ADD MSTORE PUSH1 0xA0 SWAP2 DUP3 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AF9 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2BA5 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B89 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BE4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID PUSH19 0xE4AE9D3E67292E5E63E4051C0CC5E8A100A657 MSIZE 0xE9 0xEA 0xD8 SGT 0xED 0xCD 0xEF DUP11 EXTCODEHASH SHL PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"191:7311:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6508:992;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3582:865;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2663:913::-;;;;;;:::i;:::-;;:::i;4453:859::-;;;;;;:::i;:::-;;:::i;5509:993::-;;;;;;:::i;:::-;;:::i;702:3284:28:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1742:915:25:-;;;;;;:::i;:::-;;:::i;384:143::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6508:992::-;6607:16;6635:21;6670:4;6659:27;;;;;;;;;;;;:::i;:::-;6635:51;;6696:26;6739:6;:13;6725:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6725:28:25;-1:-1:-1;6780:13:25;;6696:57;;-1:-1:-1;;;6780:17:25;6763:704;6830:6;6837:1;6830:9;;;;;;;;;;;;;;:18;;;:23;;6852:1;6830:23;6826:595;;;6904:258;6939:6;6946:1;6939:9;;;;;;;;;;;;;;:17;;;6978:6;6985:1;6978:9;;;;;;;;;;;;;;:18;;;7018:6;7025:1;7018:9;;;;;;;;;;;;;;:14;;;7054:6;7061:1;7054:9;;;;;;;;;;;;;;:20;;;7096:6;7103:1;7096:9;;;;;;;;;;;;;;:20;;;7138:6;6904:13;:258::i;:::-;6895:267;;6826:595;;;7232:174;7267:6;7274:1;7267:9;;;;;;;;;;;;;;:17;;;7306:6;7313:1;7306:9;;;;;;;;;;;;;;:18;;;7346:6;7353:1;7346:9;;;;;;;;;;;;;;:14;;;7382:6;7232:13;:174::i;:::-;7223:183;;6826:595;7450:6;7435:9;7445:1;7435:12;;;;;;;;;;;;;;;;;:21;-1:-1:-1;;6807:3:25;6763:704;;;-1:-1:-1;7484:9:25;-1:-1:-1;;6508:992:25;;;;;:::o;3582:865::-;3732:17;3808:4;3732:17;;-1:-1:-1;;;;;3858:18:25;;;;;;;:86;;3926:8;3936:7;3858:86;;;3892:7;3901:8;3858:86;3823:121;;;;4000:6;-1:-1:-1;;;;;3981:25:25;:6;-1:-1:-1;;;;;3981:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3981:25:25;;;:54;;;;4029:6;-1:-1:-1;;;;;4010:25:25;:6;-1:-1:-1;;;;;4010:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4010:25:25;;;3981:54;3977:93;;;4058:1;4051:8;;;;;;;3977:93;-1:-1:-1;;;;;4098:18:25;;;;;;;4080:15;;4161:206;4180:4;4098:18;4222:19;:8;:17;:19::i;:::-;4255:10;:102;;4330:27;4255:102;;;4284:27;4161:5;:206::i;:::-;4126:241;;;;4390:10;:50;;4432:7;4431:8;;4390:50;;;4412:7;4411:8;;4390:50;4378:62;;3582:865;;;;;;;;;;;;;:::o;2663:913::-;2865:16;2932:4;2865:16;;-1:-1:-1;;;;;2982:18:25;;;;;;;:86;;3050:8;3060:7;2982:86;;;3016:7;3025:8;2982:86;2947:121;;;;3124:6;-1:-1:-1;;;;;3105:25:25;:6;-1:-1:-1;;;;;3105:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3105:25:25;;;:54;;;;3153:6;-1:-1:-1;;;;;3134:25:25;:6;-1:-1:-1;;;;;3134:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3134:25:25;;;3105:54;3101:93;;;3182:1;3175:8;;;;;;;3101:93;3205:16;3223;3245:6;-1:-1:-1;;;;;3245:18:25;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3204:61;-1:-1:-1;;;;;3204:61:25;;;-1:-1:-1;;;;;3204:61:25;;;3276:17;3295:18;3327:8;-1:-1:-1;;;;;3317:18:25;:7;-1:-1:-1;;;;;3317:18:25;;:88;;3386:8;3396;3317:88;;;3351:8;3361;3317:88;3275:130;;;;3427:142;3455:9;3478;3501:10;3525;3549;3427:14;:142::i;:::-;3416:153;;2663:913;;;;;;;;;;;;;;;;:::o;4453:859::-;4603:16;4678:4;4603:16;;-1:-1:-1;;;;;4728:18:25;;;;;;;:86;;4796:8;4806:7;4728:86;;;4762:7;4771:8;4728:86;4693:121;;;;4870:6;-1:-1:-1;;;;;4851:25:25;:6;-1:-1:-1;;;;;4851:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4851:25:25;;;:54;;;;4899:6;-1:-1:-1;;;;;4880:25:25;:6;-1:-1:-1;;;;;4880:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4880:25:25;;;4851:54;4847:93;;;4928:1;4921:8;;;;;;;4847:93;-1:-1:-1;;;;;4968:18:25;;;;;;;4950:15;;5031:208;5050:4;4968:18;5093:20;:9;:18;:20::i;:::-;5092:21;;5127:10;:102;;5202:27;5127:102;;5031:208;4996:243;;;;5257:10;:48;;5297:7;5257:48;;;-1:-1:-1;5278:7:25;4453:859;-1:-1:-1;;;;;;;;;4453:859:25:o;5509:993::-;5609:16;5637:21;5672:4;5661:27;;;;;;;;;;;;:::i;:::-;5637:51;;5698:27;5742:6;:13;5728:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5728:28:25;;5698:58;;5771:9;5766:702;5790:6;:13;5786:1;:17;5766:702;;;5828:6;5835:1;5828:9;;;;;;;;;;;;;;:18;;;:23;;5850:1;5828:23;5824:597;;;5902:259;5938:6;5945:1;5938:9;;;;;;;;;;;;;;:17;;;5977:6;5984:1;5977:9;;;;;;;;;;;;;;:18;;;6017:6;6024:1;6017:9;;;;;;;;;;;;;;:14;;;6053:6;6060:1;6053:9;;;;;;;;;;;;;;:20;;;6095:6;6102:1;6095:9;;;;;;;;;;;;;;:20;;;6137:6;5902:14;:259::i;:::-;5893:268;;5824:597;;;6231:175;6267:6;6274:1;6267:9;;;;;;;;;;;;;;:17;;;6306:6;6313:1;6306:9;;;;;;;;;;;;;;:18;;;6346:6;6353:1;6346:9;;;;;;;;;;;;;;:14;;;6382:6;6231:14;:175::i;:::-;6222:184;;5824:597;6451:6;6435:10;6446:1;6435:13;;;;;;;;;;;;;;;;;:22;5805:3;;5766:702;;702:3284:28;873:14;;923:20;915:63;;;;;-1:-1:-1;;;915:63:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;988:15;1006:19;;;;988:15;;1093:131;1119:11;1144:10;1006:15;1197:17;1093:12;:131::i;:::-;1035:189;;;;;;1350:2396;1357:30;;:35;;;;:78;;;1418:17;-1:-1:-1;;;;;1396:39:28;:5;:18;;;-1:-1:-1;;;;;1396:39:28;;;1357:78;1350:2396;;;1451:28;;:::i;:::-;1518:18;;;;-1:-1:-1;;;;;1493:43:28;;;1684:10;;;;1610:155;;1655:11;;1712;1741:10;1610:27;:155::i;:::-;-1:-1:-1;;;;;1551:214:28;1585:21;;;1551:214;;;;;;1567:16;;;;1551:214;;;;;;;;;;;1552:13;;;1551:214;2010:18;;;;1968:269;;2046:75;;2068:10;;2103:17;2046:21;:75::i;:::-;2139:15;;;;2172:30;;1968:269;;;:24;:269::i;:::-;1950:14;;;1898:339;1934:14;;;1898:339;1919:13;;;1898:339;-1:-1:-1;;;;;1898:339:28;1899:18;;;1898:339;2251:434;;;;2319:43;2336:4;:14;;;2320:4;:13;;;:30;2319:41;:43::i;:::-;2285:77;;;;;2432:14;;;;2405:53;;2432:25;;:23;:25::i;:::-;2405:22;;;;;:26;:53::i;:::-;2380:22;;;:78;2251:434;;;2531:25;:4;:14;;;:23;:25::i;:::-;2497:59;;;;;2643:14;;;;2627:13;;;;2599:71;;2626:43;;2627:30;2626:41;:43::i;:::-;2599:22;;;;;:26;:71::i;:::-;2574:22;;;:96;2251:434;2779:4;:21;;;-1:-1:-1;;;;;2757:43:28;:5;:18;;;-1:-1:-1;;;;;2757:43:28;;2753:983;;;2895:4;:16;;;2891:485;;;2937:19;2966:36;2975:11;2988:4;:13;;;2966:8;:36::i;:::-;2935:67;;;;;;;;;3200:10;3196:68;;;3251:13;;3196:68;3304:53;3327:5;:15;;;3344:12;3304:22;:53::i;:::-;-1:-1:-1;;;;;3286:71:28;:15;;;:71;-1:-1:-1;2891:485:28;3406:10;:46;;3439:4;:13;;;3406:46;;;3435:1;3419:4;:13;;;:17;3406:46;3393:59;;;;;;:10;;;:59;2753:983;;;3499:4;:22;;;-1:-1:-1;;;;;3477:44:28;:5;:18;;;-1:-1:-1;;;;;3477:44:28;;3473:263;;3674:47;3702:5;:18;;;3674:27;:47::i;:::-;3661:60;;;;;;:10;;;:60;3473:263;1350:2396;;;;3791:10;3777:24;;:10;:24;;;:202;;3906:22;;;;3948:30;;3930:48;;3777:202;;;3835:5;:30;;;3817:15;:48;3867:5;:22;;;3777:202;3756:223;;;;-1:-1:-1;702:3284:28;-1:-1:-1;;;;;;;;;702:3284:28:o;1742:915:25:-;1944:17;2012:4;1944:17;;-1:-1:-1;;;;;2062:18:25;;;;;;;:86;;2130:8;2140:7;2062:86;;;2096:7;2105:8;2062:86;2027:121;;;;2204:6;-1:-1:-1;;;;;2185:25:25;:6;-1:-1:-1;;;;;2185:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2185:25:25;;;:54;;;;2233:6;-1:-1:-1;;;;;2214:25:25;:6;-1:-1:-1;;;;;2214:13:25;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2214:25:25;;;2185:54;2181:93;;;2262:1;2255:8;;;;;;;2181:93;2285:16;2303;2325:6;-1:-1:-1;;;;;2325:18:25;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2284:61;-1:-1:-1;;;;;2284:61:25;;;-1:-1:-1;;;;;2284:61:25;;;2356:17;2375:18;2407:8;-1:-1:-1;;;;;2397:18:25;:7;-1:-1:-1;;;;;2397:18:25;;:88;;2466:8;2476;2397:88;;;2431:8;2441;2397:88;2355:130;;;;2508:142;2537:8;2559:9;2582:10;2606;2630;2508:15;:142::i;384:143::-;460:14;504:4;493:27;;;;;;;;;;;;:::i;:::-;486:34;;384:143;;;;:::o;924:121:14:-;976:8;-1:-1:-1;;;1004:1:14;:10;996:19;;;;;;-1:-1:-1;1036:1:14;924:121::o;1161:575:25:-;1348:16;1418:14;1414:28;;-1:-1:-1;1441:1:25;1434:8;;1414:28;1490:14;;;:33;;-1:-1:-1;1508:15:25;;1490:33;1486:47;;;-1:-1:-1;1532:1:25;1525:8;;1486:47;1543:17;1563:40;;;;:24;:9;1577;1563:13;:24::i;:::-;:28;;:40::i;:::-;1543:60;-1:-1:-1;1613:19:25;1635:41;;;;:25;:10;1650:9;1635:14;:25::i;:41::-;1613:63;;1697:32;1727:1;1710:11;1698:9;:23;;;;;;;1697:29;:32::i;:::-;1686:43;;1161:575;;;;;;;;;;:::o;3992:692:28:-;4164:8;4174:10;4186:22;;:::i;:::-;4220:21;4244:31;4263:11;4244:18;:31::i;:::-;4220:55;;4285:78;4318:10;4330:17;4349:2;:13;;;4285:32;:78::i;:::-;4378:27;4393:11;4378:14;:27::i;:::-;4373:32;;4421:2;:6;;;4415:12;;4445:232;;;;;;;;4495:15;4445:232;;;;4633:1;4445:232;;;;4588:2;:13;;;-1:-1:-1;;;;;4445:232:28;;;;;4654:2;:12;;;4445:232;;;;;;4535:25;4548:11;4535:12;:25::i;:::-;-1:-1:-1;;;;;4445:232:28;;;;4437:240;;3992:692;;;;;;;;;:::o;5128:725::-;5290:14;5306:16;5324:24;5386:69;5419:4;5425;5431:11;5444:10;5386:32;:69::i;:::-;5360:95;;-1:-1:-1;5360:95:28;-1:-1:-1;;;5578:28:28;;;;;5574:163;;;-1:-1:-1;;5620:28:28;;5574:163;;;644:9:17;5667:28:28;;;;;5663:74;;;644:9:17;;-1:-1:-1;5663:74:28;5809:37;5837:8;5809:27;:37::i;:::-;5790:56;;5128:725;;;;;;;;:::o;5859:336::-;6013:7;6040:10;:84;;6107:17;-1:-1:-1;;;;;6090:34:28;:16;-1:-1:-1;;;;;6090:34:28;;6040:84;;;6070:17;-1:-1:-1;;;;;6053:34:28;:16;-1:-1:-1;;;;;6053:34:28;;6040:84;6039:149;;6172:16;6039:149;;;6140:17;6039:149;6032:156;;5859:336;;;;;;:::o;1391:3239:16:-;1638:24;;;;-1:-1:-1;;;;;1797:41:16;;;;;;;;1863:20;;;;;;1894:1354;;1921:30;1954:61;1978:15;2002:7;1996:3;:13;1954:61;;2011:3;1954:15;:61::i;:::-;1921:94;;2040:10;:222;;2175:87;2205:19;2226:18;2246:9;2257:4;2175:29;:87::i;:::-;2040:222;;;2069:87;2099:18;2119:19;2140:9;2151:4;2069:29;:87::i;:::-;2029:233;;2306:8;2280:22;:34;2276:336;;2335:18;2316:37;;2276:336;;;2407:205;2468:19;2509:9;2540:22;2584:10;2407:39;:205::i;:::-;2388:224;;2276:336;1894:1354;;;;2655:10;:224;;2791:88;2821:19;2842:18;2862:9;2873:5;2791:29;:88::i;:::-;2655:224;;;2684:88;2714:18;2734:19;2755:9;2766:5;2684:29;:88::i;:::-;2643:236;;2926:9;2906:15;2905:16;;2897:38;2893:344;;2956:18;2937:37;;2893:344;;;3028:209;3090:19;3131:9;3171:15;3170:16;;3209:10;3028:40;:209::i;:::-;3009:228;;2893:344;-1:-1:-1;;;;;3269:38:16;;;;;;;3358:732;;;;3399:3;:14;;;;;3406:7;3399:14;:145;;3459:85;3489:16;3507:19;3528:9;3539:4;3459:29;:85::i;:::-;3399:145;;;3432:8;3399:145;3388:156;;3570:3;:15;;;;;3578:7;3577:8;3570:15;:148;;3632:86;3662:16;3680:19;3701:9;3712:5;3632:29;:86::i;:::-;3570:148;;;3604:9;3570:148;3558:160;;3358:732;;;3760:3;:14;;;;;3767:7;3760:14;:145;;3820:85;3850:19;3871:16;3889:9;3900:4;3820:29;:85::i;:::-;3760:145;;;3793:8;3760:145;3749:156;;3931:3;:15;;;;;3939:7;3938:8;3931:15;:148;;3993:86;4023:19;4044:16;4062:9;4073:5;3993:29;:86::i;:::-;3931:148;;;3965:9;3931:148;3919:160;;3358:732;4180:7;4179:8;:49;;;;;4212:15;4211:16;;4191:9;:37;4179:49;4175:117;;;4265:15;4264:16;;4244:37;;4175:117;4306:7;:49;;;;;4337:18;-1:-1:-1;;;;;4317:38:16;:16;-1:-1:-1;;;;;4317:38:16;;;4306:49;4302:322;;;4503:8;4484:15;4476:35;4464:47;;4302:322;;;4554:59;4580:8;4590:7;4554:59;;4605:7;4599:3;:13;4554:59;;:25;:59::i;:::-;4542:71;;4302:322;1391:3239;;;;;;;;;;;;;:::o;1573:120:13:-;1662:5;;;1657:16;;;;1629:8;1678:6;;;1657:28;1649:37;;;;;1276:120;1365:5;;;1360:16;;;;1332:8;1381:6;;;1360:28;1352:37;;;;;1505:512:24;1648:22;1684:21;1719:28;1761;1803:25;1842:32;1888:24;1926:16;1993:4;-1:-1:-1;;;;;1974:30:24;;2005:4;1974:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1505:512:24;;;;;;;;;;;:::o;383:236:12:-;445:9;474:1;470;:5;;;466:147;;;523:1;-1:-1:-1;;;;;499:25:12;517:1;516:2;;504:1;:15;500:19;;;-1:-1:-1;;;;;499:25:12;;491:40;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;;;;466:147;;;594:1;-1:-1:-1;;;;;570:25:12;587:1;575;:14;571:18;;;-1:-1:-1;;;;;570:25:12;;;562:40;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;;;4361:4281:17;4434:10;824;-1:-1:-1;;;;;4563:30:17;;;;;;:63;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;4597:29:17;;;4563:63;4555:77;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;;;;-1:-1:-1;;;;;4683:2:17;4658:27;;;;-1:-1:-1;;;;;4788:41:17;;4785:1;4781:49;4878:9;;;4951:18;4945:25;;4942:1;4938:33;5019:9;;;5092:10;5086:17;;5083:1;5079:25;5152:9;;;5225:6;5219:13;;5216:1;5212:21;5281:9;;;5354:4;5348:11;;5345:1;5341:19;;;5408:9;;;5481:3;5475:10;;5472:1;5468:18;5534:9;;;5601:10;;;5598:1;5594:18;;;5660:9;;;;5720:10;;;4991;;5124;;;5253;;;5380;5506;;;5632;5750;5791:3;5784:10;;5780:79;;5816:3;5810;:9;5800:5;:20;;5796:24;;5780:79;;;5855:3;5849;:9;5839:5;:20;;5835:24;;5780:79;5958:9;;;5953:3;5949:19;;;5990:11;;;;6062:9;;;;6127;;6118:19;;;6159:11;;;6231:9;6296;;6287:19;;;6328:11;;;6400:9;6465;;6456:19;;;6497:11;;;6569:9;6634;;6625:19;;;6666:11;;;6738:9;6803;;6794:19;;;6835:11;;;6907:9;6972;;6963:19;;;7004:11;;;7076:9;7141;;7132:19;;;7173:11;;;7245:9;7310;;7301:19;;;7342:11;;;7414:9;7479;;7470:19;;;7511:11;;;7583:9;7648;;7639:19;;;7680:11;;;7752:9;7817;;7808:19;;;7849:11;;;7921:9;7986;;7977:19;;;8018:11;;;;8090:9;;;;8155;;8146:19;;;;;5958:9;-1:-1:-1;;5886:17:17;;5908:2;5885:25;6033:10;;;;;;;6023:21;6202:10;;;;;;;6192:21;;;;6371:10;;;;;;;6361:21;;;;6540:10;;;;;;;6530:21;;;;6709:10;;;;;;;6699:21;;;;6878:10;;;;;;;6868:21;;;;7047:10;;;;;;;7037:21;7216:10;;;;;;;7206:21;7385:10;;;;;;;7375:21;7554:10;;;;;;;7544:21;7723:10;;;;;;;7713:21;7892:10;;;;;;;7882:21;8061:10;;;;;;;8051:21;8230:10;;;;;;;8220:21;8292:24;8284:32;;-1:-1:-1;;8368:53:17;;5900:3;8367:62;;;;8478:39;8462:55;;8461:64;;8544:17;;;;;;;;;:91;;8604:12;-1:-1:-1;;;;;8574:42:17;:26;8593:6;8574:18;:26::i;:::-;-1:-1:-1;;;;;8574:42:17;;;:61;;8628:7;8574:61;;;8619:6;8574:61;8544:91;;;8564:7;8544:91;8537:98;4361:4281;-1:-1:-1;;;;;;;;;4361:4281:17:o;533:622:25:-;720:17;790:13;786:27;;-1:-1:-1;812:1:25;805:8;;786:27;861:14;;;:33;;-1:-1:-1;879:15:25;;861:33;857:47;;;-1:-1:-1;903:1:25;896:8;;857:47;914:23;940:24;:8;:24;;;:12;:24::i;:::-;914:50;-1:-1:-1;974:17:25;994:31;914:50;1014:10;994:19;:31::i;:::-;974:51;-1:-1:-1;1035:19:25;1057:46;1087:15;1057:25;:9;:25;;;:13;:25::i;:::-;:29;;:46::i;:::-;1035:68;;1137:11;1125:9;:23;;;;;;;533:622;-1:-1:-1;;;;;;;;;533:622:25:o;986:125:13:-;1044:9;1073:6;;;:30;;-1:-1:-1;;1088:5:13;;;1102:1;1097;1088:5;1097:1;1083:15;;;;;:20;1073:30;1065:39;;;;;710:111;802:5;;;797:16;;;;789:25;;;;;435:111;527:5;;;522:16;;;;514:25;;;;;504:261:24;592:21;;:::i;:::-;634:27;656:4;634:21;:27::i;:::-;625:2;:6;;:36;;;;;;;;;;;732:4;-1:-1:-1;;;;;713:43:24;;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;713:45:24;;;;;;;671:87;;;;;;687:12;;;671:87;;;;-1:-1:-1;;;;;671:87:24;;;672:2;504:261;-1:-1:-1;504:261:24:o;4690:432:28:-;4848:18;4869:10;:182;;4997:10;-1:-1:-1;;;;;4980:27:28;:14;-1:-1:-1;;;;;4980:27:28;;:71;;;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;5011:40:28;;;4980:71;4869:182;;;4911:10;-1:-1:-1;;;;;4894:27:28;:14;-1:-1:-1;;;;;4894:27:28;;:71;;;;-1:-1:-1;824:10:17;-1:-1:-1;;;;;4925:40:28;;;4894:71;4848:203;;5069:13;5061:54;;;;;-1:-1:-1;;;5061:54:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:432;;;;:::o;771:153:24:-;855:5;898:4;-1:-1:-1;;;;;879:36:24;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;879:38:24;;771:153;-1:-1:-1;;771:153:24:o;930:151::-;1012:7;1057:4;-1:-1:-1;;;;;1038:34:24;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1087:412;1268:10;1280:16;1327:165;1388:11;1417:4;1439:11;1468:10;1327:43;:165::i;:::-;1308:184;;;;1087:412;;;;;;;:::o;1362:2580:17:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;-1:-1:-1;644:9:17;1550:28;;;1542:42;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;;;;1595:13;1621:3;1611:13;;:93;;-1:-1:-1;;;1611:93:17;;;1632:34;1611:93;1595:109;;;-1:-1:-1;1728:3:17;1718:13;;:18;1714:83;;1755:34;1747:42;1794:3;1746:51;1714:83;1821:3;1811:13;;:18;1807:83;;1848:34;1840:42;1887:3;1839:51;1807:83;1914:3;1904:13;;:18;1900:83;;1941:34;1933:42;1980:3;1932:51;1900:83;2007:4;1997:14;;:19;1993:84;;2035:34;2027:42;2074:3;2026:51;1993:84;2101:4;2091:14;;:19;2087:84;;2129:34;2121:42;2168:3;2120:51;2087:84;2195:4;2185:14;;:19;2181:84;;2223:34;2215:42;2262:3;2214:51;2181:84;2289:4;2279:14;;:19;2275:84;;2317:34;2309:42;2356:3;2308:51;2275:84;2383:5;2373:15;;:20;2369:85;;2412:34;2404:42;2451:3;2403:51;2369:85;2478:5;2468:15;;:20;2464:85;;2507:34;2499:42;2546:3;2498:51;2464:85;2573:5;2563:15;;:20;2559:85;;2602:34;2594:42;2641:3;2593:51;2559:85;2668:5;2658:15;;:20;2654:85;;2697:34;2689:42;2736:3;2688:51;2654:85;2763:6;2753:16;;:21;2749:86;;2793:34;2785:42;2832:3;2784:51;2749:86;2859:6;2849:16;;:21;2845:86;;2889:34;2881:42;2928:3;2880:51;2845:86;2955:6;2945:16;;:21;2941:86;;2985:34;2977:42;3024:3;2976:51;2941:86;3051:6;3041:16;;:21;3037:86;;3081:34;3073:42;3120:3;3072:51;3037:86;3147:7;3137:17;;:22;3133:86;;3178:33;3170:41;3216:3;3169:50;3133:86;3243:7;3233:17;;:22;3229:85;;3274:32;3266:40;3311:3;3265:49;3229:85;3338:7;3328:17;;:22;3324:83;;3369:30;3361:38;3404:3;3360:47;3324:83;3431:7;3421:17;;:22;3417:78;;3462:25;3454:33;3492:3;3453:42;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;-1:-1:-1;;3528:25:17;;;;;;3520:33;;3506:47;3912:7;3903:5;:17;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:11:-;861:14;;;-1:-1:-1;;1368:1:11;1365;1358:20;1400:9;;;;-1:-1:-1;1451:13:11;;;1435:14;;;;1431:34;;-1:-1:-1;1547:10:11;1543:179;;1595:1;1581:11;:15;1573:24;;;;;;-1:-1:-1;1648:23:11;;;;-1:-1:-1;1698:13:11;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2560:12;2575;;;:26;;2695:22;;;;;3498:1;3479;:15;;3478:21;;3725:17;;;3721:21;;3714:28;3783:17;;;3779:21;;3772:28;3842:17;;;3838:21;;3831:28;3901:17;;;3897:21;;3890:28;3960:17;;;3956:21;;3949:28;4020:17;;;4016:21;;;4009:28;3067:12;;;;3063:23;;;3088:1;3059:31;2337:20;;;2326:32;;;3118:12;;;;2380:21;;;;2823:16;;;;3109:21;;;;4484:11;;;;;-1:-1:-1;;749:3776:11;;;;;:::o;8727:532:15:-;8892:15;8939:13;-1:-1:-1;;;;;8923:29:15;:13;-1:-1:-1;;;;;8923:29:15;;8919:98;;;8988:13;;9003;8919:98;9047:7;:205;;9177:75;9193:9;-1:-1:-1;;;;;9177:75:15;9220:13;9204;:29;-1:-1:-1;;;;;9177:75:15;-1:-1:-1;;;9177:15:15;:75::i;:::-;9047:205;;;9073:85;9099:9;-1:-1:-1;;;;;9073:85:15;9126:13;9110;:29;-1:-1:-1;;;;;9073:85:15;-1:-1:-1;;;9073:25:15;:85::i;7493:779::-;7658:15;7705:13;-1:-1:-1;;;;;7689:29:15;:13;-1:-1:-1;;;;;7689:29:15;;7685:98;;;7754:13;;7769;7685:98;-1:-1:-1;;;;;;;309:2:10;7815:45:15;;;;-1:-1:-1;;;;;7891:29:15;;;7870:50;;;7939:17;;7931:26;;;;;;7987:7;:278;;8252:13;-1:-1:-1;;;;;8195:70:15;:54;8211:10;8223;8235:13;-1:-1:-1;;;;;8195:54:15;:15;:54::i;:::-;:70;;;;;;7987:278;;;8013:163;8059:64;8085:10;8097;8109:13;-1:-1:-1;;;;;8059:64:15;:25;:64::i;:::-;8145:13;-1:-1:-1;;;;;8013:163:15;:24;:163::i;:::-;7968:297;7493:779;-1:-1:-1;;;;;;;7493:779:15:o;5299:550::-;5467:16;5514:1;5503:8;-1:-1:-1;;;;;5503:12:15;;5495:21;;;;;;5546:1;5534:9;-1:-1:-1;;;;;5534:13:15;;5526:22;;;;;;5644:10;:198;;5766:76;5806:8;5816:9;5827:8;5837:4;5766:39;:76::i;5644:198::-;5673:74;5711:8;5721:9;5732:8;5742:4;5673:37;:74::i;6395:550::-;6565:16;6612:1;6601:8;-1:-1:-1;;;;;6601:12:15;;6593:21;;;;;;6644:1;6632:9;-1:-1:-1;;;;;6632:13:15;;6624:22;;;;;;6736:10;:202;;6862:76;6900:8;6910:9;6921;6932:5;6862:37;:76::i;6736:202::-;6765:78;6805:8;6815:9;6826;6837:5;6765:39;:78::i;4807:315:11:-;4929:14;4964:25;4971:1;4974;4977:11;4964:6;:25::i;:::-;4955:34;;5031:1;5016:11;5003:25;;;;;5013:1;5010;5003:25;:29;4999:117;;;-1:-1:-1;;5056:6:11;:26;5048:35;;;;;;5097:8;;4807:315;;;;;:::o;203:295:24:-;285:6;326:4;-1:-1:-1;;;;;307:35:24;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;307:37:24;;;303:189;;469:4;-1:-1:-1;;;;;450:28:24;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;450:30:24;;-1:-1:-1;436:45:24;;303:189;397:6;-1:-1:-1;383:21:24;;1696:1991:33;1861:10;;1946:11;1861:10;1987:18;;;;;;;;;;;;;;1968:37;;2026:1;2019:4;:8;;;:35;;;;;2038:11;2031:18;;:4;:18;;;;;;;;:23;;;;2019:35;2015:53;;;-1:-1:-1;;2056:12:33;2015:53;2118:3;2114:1567;;;2138:13;2153:12;2169:20;2178:10;2169:8;:20::i;:::-;2349:24;;;-1:-1:-1;;;2349:24:33;;2306:1;2349:24;;;;;;;;;2137:52;;-1:-1:-1;2137:52:33;;-1:-1:-1;2306:11:33;;;;2285:33;;-1:-1:-1;;2285:33:33;;2270:12;;2285:33;;-1:-1:-1;;;;;2349:15:33;;;;;:24;;;;;;;;;;;;;;:15;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2349:24:33;:31;2527:11;;;;-1:-1:-1;2349:31:33;-1:-1:-1;2527:11:33;2669:170;;2828:11;2817:6;2811:13;;2798:10;:26;2797:42;2669:170;;;2767:11;2728:34;2755:6;2728:26;:34::i;:::-;2719:6;:43;2713:50;;2700:10;:63;2699:79;2669:170;2662:177;;2114:1567;;;;;;;2968:13;2983:12;2999:24;3008:10;3021:1;3008:14;2999:8;:24::i;:::-;2967:56;;;;3095:12;3128:1;3118:6;3113:11;;:1;:11;;3112:17;3110:20;3095:35;;3144:14;3188:4;3161;-1:-1:-1;;;;;3161:15:33;;3177:7;3161:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3161:24:33;:31;3331:11;;;;-1:-1:-1;3161:31:33;-1:-1:-1;3331:11:33;3473:197;;3659:11;3648:6;3630:15;:24;3624:31;;3607:10;3620:1;3607:14;:48;3606:64;3473:197;;;3576:11;3565:6;3527:35;3555:6;3527:27;:35::i;:::-;:44;3521:51;;3504:10;3517:1;3504:14;:68;3503:84;3473:197;3466:204;;2114:1567;;;;;1696:1991;;;;;;;;;:::o;492:165:18:-;613:9;;;627;;624:16;;609:32;;590:61::o;3597:1153:15:-;3770:7;3947:3;3943:801;;;3966:16;-1:-1:-1;;;;;4023:27:15;;;:180;;4151:52;4167:6;-1:-1:-1;;;4193:9:15;-1:-1:-1;;;;;4151:52:15;:15;:52::i;:::-;4023:180;;;-1:-1:-1;;;;;4077:47:15;;309:2:10;4078:33:15;;;4077:47;;;;;;4023:180;3966:255;-1:-1:-1;4243:43:15;:31;-1:-1:-1;;;;;4243:17:15;;3966:255;4243:21;:31::i;:::-;:41;:43::i;:::-;4236:50;;;;;3943:801;4317:16;-1:-1:-1;;;;;4374:27:15;;;:213;;4525:62;4551:6;-1:-1:-1;;;4577:9:15;-1:-1:-1;;;;;4525:62:15;:25;:62::i;:::-;4374:213;;;4428:70;309:2:10;4453:33:15;;;-1:-1:-1;;;;;4428:70:15;;:24;:70::i;:::-;4317:288;;4639:8;4628;-1:-1:-1;;;;;4628:19:15;;4620:28;;;;;;-1:-1:-1;;;;;4713:19:15;;;;-1:-1:-1;4698:35:15;;1405:1366;1576:7;1711:11;1707:32;;-1:-1:-1;1731:8:15;1724:15;;1707:32;-1:-1:-1;;;;;;;309:2:10;1770:45:15;;;;1826:939;;;;-1:-1:-1;;;;;1882:50:15;;1893:17;;;;1914:6;1893:17;1914:6;1882:38;;;;;:50;1878:323;;;1974:20;;;2016:25;;;2012:174;;2125:60;2151:10;2163:8;-1:-1:-1;;;;;2125:60:15;2173:11;2125:25;:60::i;:::-;2110:76;;;;;;;2012:174;1878:323;;2230:73;2255:10;2267:35;2295:6;2281:8;-1:-1:-1;;;;;2268:21:15;:10;:21;;;;2267:35;2230:24;:73::i;:::-;2215:89;;;;;;1826:939;-1:-1:-1;;;;;2530:50:15;;2541:17;;;;2562:6;2541:17;2562:6;2530:38;;;;;:50;:74;;;;;2597:7;2584:10;:20;2530:74;2522:83;;;;;;2641:20;;;2682:72;:60;2641:10;-1:-1:-1;;;;;2682:60:15;;2641:20;2682:25;:60::i;775:160:33:-;882:9;;890:1;882:9;;;;924:3;917:10;;;;775:160::o;671:731:8:-;733:7;764:1;760;:5;752:14;;;;;;-1:-1:-1;;;781:1:8;:40;777:102;;843:3;837:9;;;;860:8;777:102;897:19;892:1;:24;888:84;;938:2;932:8;;;;954:7;888:84;990:11;985:1;:16;981:76;;1023:2;1017:8;;;;1039:7;981:76;1075:7;1070:1;:12;1066:72;;1104:2;1098:8;;;;1120:7;1066:72;1156:5;1151:1;:10;1147:68;;1183:1;1177:7;;;;1198:6;1147:68;1233:4;1228:1;:9;1224:67;;1259:1;1253:7;;;;1274:6;1224:67;1309:3;1304:1;:8;1300:66;;1334:1;1328:7;;;;1349:6;1300:66;1384:3;1379:1;:8;1375:20;;1394:1;1389:6;671:731;;;:::o;1893:894::-;1956:7;1987:1;1983;:5;1975:14;;;;;;-1:-1:-1;2004:3:8;-1:-1:-1;;;;;2021:21:8;;:25;2017:104;;-1:-1:-1;;2062:8:8;2017:104;;;2107:3;2101:9;;;;;2017:104;2138:16;2134:20;;:24;2130:101;;-1:-1:-1;;2174:7:8;2130:101;;;2218:2;2212:8;;;;;2130:101;2248:16;2244:20;;:24;2240:101;;-1:-1:-1;;2284:7:8;2240:101;;;2328:2;2322:8;;;;;2240:101;2358:16;2354:20;;:24;2350:101;;-1:-1:-1;;2394:7:8;2350:101;;;2438:2;2432:8;;;;;2350:101;2468:15;2464:19;;:23;2460:98;;-1:-1:-1;;2503:6:8;2460:98;;;2546:1;2540:7;;;;;2460:98;2575:3;2571:7;;:11;2567:86;;-1:-1:-1;;2598:6:8;2567:86;;;2641:1;2635:7;;;;;2567:86;2670:3;2666:7;;:11;2662:86;;-1:-1:-1;;2693:6:8;2662:86;;;2736:1;2730:7;;;;;2662:86;2765:3;2761:7;;:11;2757:23;;-1:-1:-1;;2774:6:8;1893:894;;;:::o;357:111:14:-;459:1;-1:-1:-1;;;;;439:21:14;;;;431:30;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:142:34:-;95:13;;117:33;95:13;117:33;:::i;161:542::-;;258:3;251:4;243:6;239:17;235:27;225:2;;280:5;273;266:20;225:2;320:6;307:20;346:18;342:2;339:26;336:2;;;368:9;336:2;403:54;445:2;426:13;;-1:-1:-1;;422:27:34;451:4;418:38;403:54;:::i;:::-;482:2;473:7;466:19;528:3;521:4;516:2;508:6;504:15;500:26;497:35;494:2;;;549:5;542;535:20;494:2;618;611:4;603:6;599:17;592:4;583:7;579:18;566:55;641:16;;;659:4;637:27;630:42;;;;645:7;215:488;-1:-1:-1;;215:488:34:o;708:190::-;789:13;;-1:-1:-1;;;;;831:42:34;;821:53;;811:2;;888:1;885;878:12;903:138;982:13;;1004:31;982:13;1004:31;:::i;1046:263::-;;1169:2;1157:9;1148:7;1144:23;1140:32;1137:2;;;1190:6;1182;1175:22;1137:2;1227:9;1221:16;1246:33;1273:5;1246:33;:::i;1314:614::-;;;;;1477:3;1465:9;1456:7;1452:23;1448:33;1445:2;;;1499:6;1491;1484:22;1445:2;1543:9;1530:23;1562:33;1589:5;1562:33;:::i;:::-;1614:5;-1:-1:-1;1671:2:34;1656:18;;1643:32;1684:35;1643:32;1684:35;:::i;:::-;1738:7;-1:-1:-1;1797:2:34;1782:18;;1769:32;1810:35;1769:32;1810:35;:::i;:::-;1435:493;;;;-1:-1:-1;1864:7:34;;1918:2;1903:18;1890:32;;-1:-1:-1;;1435:493:34:o;1933:894::-;;;;;;;2126:3;2114:9;2105:7;2101:23;2097:33;2094:2;;;2148:6;2140;2133:22;2094:2;2192:9;2179:23;2211:33;2238:5;2211:33;:::i;:::-;2263:5;-1:-1:-1;2320:2:34;2305:18;;2292:32;2333:35;2292:32;2333:35;:::i;:::-;2387:7;-1:-1:-1;2446:2:34;2431:18;;2418:32;2459:35;2418:32;2459:35;:::i;:::-;2513:7;-1:-1:-1;2572:2:34;2557:18;;2544:32;2585:33;2544:32;2585:33;:::i;:::-;2637:7;-1:-1:-1;2696:3:34;2681:19;;2668:33;2710;2668;2710;:::i;:::-;2762:7;2752:17;;;2816:3;2805:9;2801:19;2788:33;2778:43;;2084:743;;;;;;;;:::o;2832:649::-;;;;;2991:3;2979:9;2970:7;2966:23;2962:33;2959:2;;;3013:6;3005;2998:22;2959:2;3057:9;3044:23;3076:33;3103:5;3076:33;:::i;:::-;3128:5;-1:-1:-1;3185:2:34;3170:18;;3157:32;3227:15;;3220:23;3208:36;;3198:2;;3263:6;3255;3248:22;3198:2;3291:7;-1:-1:-1;3345:2:34;3330:18;;3317:32;;-1:-1:-1;3401:2:34;3386:18;;3373:32;3414:35;3373:32;3414:35;:::i;:::-;2949:532;;;;-1:-1:-1;2949:532:34;;-1:-1:-1;;2949:532:34:o;3486:1902::-;;3635:2;3678;3666:9;3657:7;3653:23;3649:32;3646:2;;;3699:6;3691;3684:22;3646:2;3737:9;3731:16;3766:18;3807:2;3799:6;3796:14;3793:2;;;3828:6;3820;3813:22;3793:2;3871:6;3860:9;3856:22;3846:32;;3916:7;3909:4;3905:2;3901:13;3897:27;3887:2;;3943:6;3935;3928:22;3887:2;3977;3971:9;3999:2;3995;3992:10;3989:2;;;4005:9;3989:2;4036:36;4068:2;4063;4059;4055:11;4051:20;4036:36;:::i;:::-;4106:15;;;4137:12;;;;4169:11;;;4199:4;4230:11;;;4222:20;;4218:29;;4215:42;-1:-1:-1;4212:2:34;;;4275:6;4267;4260:22;4212:2;4302:6;4293:15;;4317:1041;4331:2;4328:1;4325:9;4317:1041;;;4402:2;4396:3;4387:7;4383:17;4379:26;4376:2;;;4423:6;4415;4408:22;4376:2;4455;4490;4484:9;4536:2;4528:6;4524:15;4593:6;4581:10;4578:22;4573:2;4561:10;4558:18;4555:46;4552:2;;;4604:9;4552:2;4628:22;;4676:10;;4699:33;4676:10;4699:33;:::i;:::-;4745:21;;4803:45;4835:12;;;4803:45;:::i;:::-;4798:2;4790:6;4786:15;4779:70;4886:45;4927:2;4922:3;4918:12;4886:45;:::i;:::-;4881:2;4873:6;4869:15;4862:70;4955:2;4945:12;;4994:43;5033:2;5028:3;5024:12;4994:43;:::i;:::-;4989:2;4981:6;4977:15;4970:68;5061:3;5051:13;;5101:43;5140:2;5135:3;5131:12;5101:43;:::i;:::-;5096:2;5088:6;5084:15;5077:68;5168:3;5158:13;;5208:43;5247:2;5242:3;5238:12;5208:43;:::i;:::-;5191:15;;;5184:68;;;;5265:19;;4349:1;4342:9;;;;;5304:12;;;;5336;;;;4317:1041;;;-1:-1:-1;5377:5:34;;3615:1773;-1:-1:-1;;;;;;;;;3615:1773:34:o;5393:342::-;;5514:2;5502:9;5493:7;5489:23;5485:32;5482:2;;;5535:6;5527;5520:22;5482:2;5580:9;5567:23;5613:18;5605:6;5602:30;5599:2;;;5650:6;5642;5635:22;5599:2;5678:51;5721:7;5712:6;5701:9;5697:22;5678:51;:::i;5740:410::-;;;5878:2;5866:9;5857:7;5853:23;5849:32;5846:2;;;5899:6;5891;5884:22;5846:2;5944:9;5931:23;5977:18;5969:6;5966:30;5963:2;;;6014:6;6006;5999:22;5963:2;6042:51;6085:7;6076:6;6065:9;6061:22;6042:51;:::i;:::-;6032:61;6140:2;6125:18;;;;6112:32;;-1:-1:-1;;;;5836:314:34:o;6155:474::-;;;;6311:2;6299:9;6290:7;6286:23;6282:32;6279:2;;;6332:6;6324;6317:22;6279:2;6360:42;6392:9;6360:42;:::i;:::-;6350:52;;6421:51;6468:2;6457:9;6453:18;6421:51;:::i;:::-;6411:61;;6515:2;6504:9;6500:18;6494:25;6559:10;6552:5;6548:22;6541:5;6538:33;6528:2;;6590:6;6582;6575:22;6528:2;6618:5;6608:15;;;6269:360;;;;;:::o;6634:1250::-;6851:2;6903:21;;;6973:13;;6876:18;;;6995:22;;;6634:1250;;6851:2;7036;;7054:18;;;;7095:15;;;6634:1250;7141:717;7155:6;7152:1;7149:13;7141:717;;;7214:13;;7298:9;;-1:-1:-1;;;;;7294:18:34;;;7282:31;;7357:11;;;7351:18;7347:27;;7333:12;;;7326:49;7419:11;;;7413:18;7409:27;7395:12;;;7388:49;7460:4;7503:11;;;7497:18;7538:4;7576:21;;;7562:12;;;7555:43;;;;7621:4;7669:11;;;7663:18;7659:27;;7645:12;;;7638:49;7258:3;7758:11;;;7752:18;7748:27;7734:12;;;7727:49;7805:4;7796:14;;;;7833:15;;;;7267:1;7170:9;7141:717;;;-1:-1:-1;7875:3:34;;6831:1053;-1:-1:-1;;;;;;;6831:1053:34:o;7889:635::-;8060:2;8112:21;;;8182:13;;8085:18;;;8204:22;;;7889:635;;8060:2;8283:15;;;;8257:2;8242:18;;;7889:635;8329:169;8343:6;8340:1;8337:13;8329:169;;;8404:13;;8392:26;;8473:15;;;;8438:12;;;;8365:1;8358:9;8329:169;;;-1:-1:-1;8515:3:34;;8040:484;-1:-1:-1;;;;;;8040:484:34:o;8529:244::-;8699:25;;;8755:2;8740:18;;8733:34;8687:2;8672:18;;8654:119::o;8778:177::-;8924:25;;;8912:2;8897:18;;8879:76::o;8960:242::-;9030:2;9024:9;9060:17;;;9107:18;9092:34;;9128:22;;;9089:62;9086:2;;;9154:9;9086:2;9181;9174:22;9004:198;;-1:-1:-1;9004:198:34:o;9207:133::-;-1:-1:-1;;;;;9284:31:34;;9274:42;;9264:2;;9330:1;9327;9320:12;9264:2;9254:86;:::o;9345:116::-;9431:4;9424:5;9420:16;9413:5;9410:27;9400:2;;9451:1;9448;9441:12"},"gasEstimates":{"creation":{"codeDepositCost":"2267400","executionCost":"2427","totalCost":"2269827"},"external":{"decodePath(bytes)":"infinite","getAmountIn(bytes,uint256)":"infinite","getAmountInV2(address,address,address,uint8,uint8,uint256)":"infinite","getAmountInV3(address,address,address,uint256)":"infinite","getAmountOut(bytes,uint256)":"infinite","getAmountOutV2(address,address,address,uint8,uint8,uint256)":"infinite","getAmountOutV3(address,address,address,uint256)":"infinite","quote(address,bool,int256,uint160)":"infinite"},"internal":{"_getAmountInV2(uint256,uint256,uint256,uint8,uint8)":"infinite","_getAmountOutV2(uint256,uint256,uint256,uint8,uint8)":"infinite"}},"methodIdentifiers":{"decodePath(bytes)":"c25ddce0","getAmountIn(bytes,uint256)":"00614b2e","getAmountInV2(address,address,address,uint8,uint8,uint256)":"53201a4c","getAmountInV3(address,address,address,uint256)":"6e95d3d8","getAmountOut(bytes,uint256)":"77cd49e4","getAmountOutV2(address,address,address,uint8,uint8,uint256)":"97de0a84","getAmountOutV3(address,address,address,uint256)":"2d0f9a30","quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"decodePath\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercent\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapStaticQuoter.Route[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountInV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountInV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapStaticQuoter.sol\":\"UniswapStaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV3QuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"./base/UniV3likeQuoterCore.sol\\\";\\nimport \\\"./libraries/TickBitmap.sol\\\";\\n\\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\\n    function _tryGetPoolCurrentFee(\\n        address pool\\n    ) internal view returns (uint16) {\\n        try IUniswapV3likePool(pool).currentFee() returns (uint24 result) {\\n            return uint16(result);\\n        } catch {\\n            return uint16(IUniswapV3likePool(pool).fee());\\n        }\\n    }\\n\\n    function getPoolGlobalState(\\n        address pool\\n    ) internal view override returns (GlobalState memory gs) {\\n        gs.fee = _tryGetPoolCurrentFee(pool);\\n        (gs.startPrice, gs.startTick, , , , , ) = IUniswapV3likePool(pool)\\n            .slot0();\\n    }\\n\\n    function getTickSpacing(\\n        address pool\\n    ) internal view override returns (int24) {\\n        return IUniswapV3likePool(pool).tickSpacing();\\n    }\\n\\n    function getLiquidity(\\n        address pool\\n    ) internal view override returns (uint128) {\\n        return IUniswapV3likePool(pool).liquidity();\\n    }\\n\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view override returns (int24 next, bool initialized) {\\n        return\\n            TickBitmap.nextInitializedTickWithinOneWord(\\n                poolAddress,\\n                tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n    }\\n\\n    function getTicks(\\n        address pool,\\n        int24 tick\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        )\\n    {\\n        return IUniswapV3likePool(pool).ticks(tick);\\n    }\\n}\\n\",\"keccak256\":\"0x558a10ddfe6bb718eadf82efceac70e8d4572196f89f1335aa32c9ba4da2afb0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapStaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./UniV3QuoterCore.sol\\\";\\n\\ncontract UniswapStaticQuoter is UniV3QuoterCore {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function decodePath(\\n        bytes memory path\\n    ) external pure returns (Route[] memory) {\\n        return abi.decode(path, (Route[]));\\n    }\\n\\n    function _getAmountOutV2(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint8 feePercent,\\n        uint8 maxPercent\\n    ) internal pure returns (uint256 amountOut) {\\n        // INSUFFICIENT_INPUT_AMOUNT\\n        if (amountIn == 0) return 0;\\n        // INSUFFICIENT_LIQUIDITY\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 amountInWithFee = amountIn.mul(feePercent);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(maxPercent).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function _getAmountInV2(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint8 feePercent,\\n        uint8 maxPercent\\n    ) internal pure returns (uint256 amountIn) {\\n        // INSUFFICIENT_OUTPUT_AMOUNT\\n        if (amountOut == 0) return 0;\\n        // INSUFFICIENT_LIQUIDITY\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 numerator = reserveIn.mul(amountOut).mul(maxPercent);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(feePercent);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    function getAmountOutV2(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint8 feePercent,\\n        uint8 maxPercent,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\\n            return 0;\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        amountOut = _getAmountOutV2(\\n            amountIn,\\n            reserveIn,\\n            reserveOut,\\n            feePercent,\\n            maxPercent\\n        );\\n    }\\n\\n    function getAmountInV2(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint8 feePercent,\\n        uint8 maxPercent,\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn) {\\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\\n            return 0;\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1, ) = v2pair.getReserves();\\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        amountIn = _getAmountInV2(\\n            amountOut,\\n            reserveIn,\\n            reserveOut,\\n            feePercent,\\n            maxPercent\\n        );\\n    }\\n\\n    function getAmountOutV3(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\\n            return 0;\\n        }\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n        (int256 amount0, int256 amount1) = quote(\\n            pool,\\n            zeroForOne,\\n            amountIn.toInt256(),\\n            zeroForOne\\n                ? TickMath.MIN_SQRT_RATIO + 1\\n                : TickMath.MAX_SQRT_RATIO - 1\\n        );\\n\\n        amountOut = zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function getAmountInV3(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn) {\\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\\n        (address token0, address token1) = tokenIn < tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\\n            return 0;\\n        }\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n        (int256 amount0, int256 amount1) = quote(\\n            pool,\\n            zeroForOne,\\n            -amountOut.toInt256(),\\n            zeroForOne\\n                ? TickMath.MIN_SQRT_RATIO + 1\\n                : TickMath.MAX_SQRT_RATIO - 1\\n        );\\n\\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\\n    }\\n\\n    struct Route {\\n        address tokenIn;\\n        address tokenOut;\\n        address pool;\\n        uint8 poolType; // 0: v2, 1: v3\\n        uint8 feePercent;\\n        uint8 maxPercent;\\n    }\\n\\n    function getAmountOut(\\n        bytes memory path,\\n        uint256 amount\\n    ) public view returns (uint256[] memory) {\\n        Route[] memory routes = abi.decode(path, (Route[]));\\n        uint256[] memory amountOuts = new uint256[](routes.length);\\n        for (uint256 i = 0; i < routes.length; i++) {\\n            if (routes[i].poolType == 0) {\\n                // v2\\n                amount = getAmountOutV2(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    routes[i].feePercent,\\n                    routes[i].maxPercent,\\n                    amount\\n                );\\n            } else {\\n                // v3\\n                amount = getAmountOutV3(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    amount\\n                );\\n            }\\n\\n            amountOuts[i] = amount;\\n        }\\n\\n        return amountOuts;\\n    }\\n\\n    function getAmountIn(\\n        bytes memory path,\\n        uint256 amount\\n    ) public view returns (uint256[] memory) {\\n        Route[] memory routes = abi.decode(path, (Route[]));\\n        uint256[] memory amountIns = new uint256[](routes.length);\\n        for (uint256 i = routes.length - 1; i >= 0; i--) {\\n            if (routes[i].poolType == 0) {\\n                // v2\\n                amount = getAmountInV2(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    routes[i].feePercent,\\n                    routes[i].maxPercent,\\n                    amount\\n                );\\n            } else {\\n                // v3\\n                amount = getAmountInV3(\\n                    routes[i].tokenIn,\\n                    routes[i].tokenOut,\\n                    routes[i].pool,\\n                    amount\\n                );\\n            }\\n\\n            amountIns[i] = amount;\\n        }\\n\\n        return amountIns;\\n    }\\n}\\n\",\"keccak256\":\"0x383504e38c7f5cbe35629381fb9d1927e8f7926fd053e0c0b62629e61238592b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3likePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IUniswapV3likePool is IUniswapV3Pool {\\n    // Ramses Exchange use this one instead of fee()\\n    function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x838f4eea881ae8762a698047a8e04191e1388272ef7c477e870c39e5e59d72e7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\nimport '../interfaces/IUniswapV3likePool.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3likePool pool = IUniswapV3likePool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x3eabb9b7e185e901ac1d43bf8225533620cb18ce89fdeecba73b35bebdf15db8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/UniswapV2StaticQuoter.sol":{"UniswapV2StaticQuoter":{"abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:326:34","statements":[{"nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:229:34","statements":[{"body":{"nodeType":"YulBlock","src":"141:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"150:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"158:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:34"},"nodeType":"YulFunctionCall","src":"143:22:34"},"nodeType":"YulExpressionStatement","src":"143:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:34"},"nodeType":"YulFunctionCall","src":"112:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:34"},"nodeType":"YulFunctionCall","src":"108:32:34"},"nodeType":"YulIf","src":"105:2:34"},{"nodeType":"YulVariableDeclaration","src":"176:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"195:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"189:5:34"},"nodeType":"YulFunctionCall","src":"189:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"180:5:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"268:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"277:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"285:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"270:6:34"},"nodeType":"YulFunctionCall","src":"270:22:34"},"nodeType":"YulExpressionStatement","src":"270:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"227:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"238:5:34"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"253:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"258:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"249:3:34"},"nodeType":"YulFunctionCall","src":"249:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"262:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"245:3:34"},"nodeType":"YulFunctionCall","src":"245:19:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"234:3:34"},"nodeType":"YulFunctionCall","src":"234:31:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"224:2:34"},"nodeType":"YulFunctionCall","src":"224:42:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"217:6:34"},"nodeType":"YulFunctionCall","src":"217:50:34"},"nodeType":"YulIf","src":"214:2:34"},{"nodeType":"YulAssignment","src":"303:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"313:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"303:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:34","type":""}],"src":"14:310:34"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b5060405161078838038061078883398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6106fe61008a600039506106fe6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d7176ca91461003b578063ec27830914610064575b600080fd5b61004e610049366004610609565b610077565b60405161005b91906106a7565b60405180910390f35b61004e610072366004610609565b610293565b60008281806001600160a01b0380881690891611610096578688610099565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156100e057600080fd5b505afa1580156100f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011891906105ed565b6001600160a01b03161415806101b05750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561016c57600080fd5b505afa158015610180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a491906105ed565b6001600160a01b031614155b156101c1576000935050505061028b565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101fd57600080fd5b505afa158015610211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102359190610659565b506001600160701b031691506001600160701b031691506000808a6001600160a01b03168c6001600160a01b03161161026f578284610272565b83835b9150915061028189838361049d565b9750505050505050505b949350505050565b60008281806001600160a01b03808816908916116102b25786886102b5565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156102fc57600080fd5b505afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033491906105ed565b6001600160a01b03161415806103cc5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561038857600080fd5b505afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c091906105ed565b6001600160a01b031614155b156103dd576000935050505061028b565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610659565b506001600160701b031691506001600160701b031691506000808a6001600160a01b03168c6001600160a01b03161161048b57828461048e565b83835b91509150610281898383610513565b6000836104ac5750600061050c565b8215806104b7575081155b156104c45750600061050c565b60006104d2856103e5610587565b905060006104e08285610587565b905060006104fa836104f4886103e8610587565b906105b1565b905080828161050557fe5b0493505050505b9392505050565b6000836105225750600061050c565b82158061052d575081155b1561053a5750600061050c565b60006105526103e861054c8688610587565b90610587565b905060006105666103e561054c86896105c1565b905061057d600182848161057657fe5b04906105b1565b9695505050505050565b60008215806105a25750508181028183828161059f57fe5b04145b6105ab57600080fd5b92915050565b808201828110156105ab57600080fd5b808203828111156105ab57600080fd5b80516001600160701b03811681146105e857600080fd5b919050565b6000602082840312156105fe578081fd5b815161050c816106b0565b6000806000806080858703121561061e578283fd5b8435610629816106b0565b93506020850135610639816106b0565b92506040850135610649816106b0565b9396929550929360600135925050565b60008060006060848603121561066d578283fd5b610676846105d1565b9250610684602085016105d1565b9150604084015163ffffffff8116811461069c578182fd5b809150509250925092565b90815260200190565b6001600160a01b03811681146106c557600080fd5b5056fea2646970667358221220a763acf5bbb21bfd328d30998cec011bb364081862ddf489061186484b0a4fda64736f6c63430007060033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x788 CODESIZE SUB DUP1 PUSH2 0x788 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x44 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE PUSH2 0x72 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x55 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6B JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x6FE PUSH2 0x8A PUSH1 0x0 CODECOPY POP PUSH2 0x6FE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD7176CA9 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xEC278309 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x609 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x609 JUMP JUMPDEST PUSH2 0x293 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x96 JUMPI DUP7 DUP9 PUSH2 0x99 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x1B0 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x180 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x28B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x211 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x26F JUMPI DUP3 DUP5 PUSH2 0x272 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x281 DUP10 DUP4 DUP4 PUSH2 0x49D JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x2B2 JUMPI DUP7 DUP9 PUSH2 0x2B5 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x310 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x3CC JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C0 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x28B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x42D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x451 SWAP2 SWAP1 PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x48B JUMPI DUP3 DUP5 PUSH2 0x48E JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x281 DUP10 DUP4 DUP4 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4AC JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x4B7 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x4C4 JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D2 DUP6 PUSH2 0x3E5 PUSH2 0x587 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4E0 DUP3 DUP6 PUSH2 0x587 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4FA DUP4 PUSH2 0x4F4 DUP9 PUSH2 0x3E8 PUSH2 0x587 JUMP JUMPDEST SWAP1 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x505 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x522 JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x52D JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x53A JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x552 PUSH2 0x3E8 PUSH2 0x54C DUP7 DUP9 PUSH2 0x587 JUMP JUMPDEST SWAP1 PUSH2 0x587 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x566 PUSH2 0x3E5 PUSH2 0x54C DUP7 DUP10 PUSH2 0x5C1 JUMP JUMPDEST SWAP1 POP PUSH2 0x57D PUSH1 0x1 DUP3 DUP5 DUP2 PUSH2 0x576 JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x5B1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x5A2 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x59F JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5FE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x50C DUP2 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x61E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x629 DUP2 PUSH2 0x6B0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x639 DUP2 PUSH2 0x6B0 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x649 DUP2 PUSH2 0x6B0 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x66D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x676 DUP5 PUSH2 0x5D1 JUMP JUMPDEST SWAP3 POP PUSH2 0x684 PUSH1 0x20 DUP6 ADD PUSH2 0x5D1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x69C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 PUSH4 0xACF5BBB2 SHL REVERT ORIGIN DUP14 ADDRESS SWAP10 DUP13 0xEC ADD SHL 0xB3 PUSH5 0x81862DDF4 DUP10 MOD GT DUP7 0x48 0x4B EXP 0x4F 0xDA PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"224:2788:26:-:0;;;332:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;372:18;;-1:-1:-1;;;;;;372:18:26;;;224:2788;;14:310:34;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:34;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:34:o;:::-;224:2788:26;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1892:34","statements":[{"nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nodeType":"YulBlock","src":"76:128:34","statements":[{"nodeType":"YulAssignment","src":"86:22:34","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"101:6:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"95:5:34"},"nodeType":"YulFunctionCall","src":"95:13:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"86:5:34"}]},{"body":{"nodeType":"YulBlock","src":"182:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"191:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"194:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"184:6:34"},"nodeType":"YulFunctionCall","src":"184:12:34"},"nodeType":"YulExpressionStatement","src":"184:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"130:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"141:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"148:30:34","type":"","value":"0xffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"137:3:34"},"nodeType":"YulFunctionCall","src":"137:42:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"127:2:34"},"nodeType":"YulFunctionCall","src":"127:53:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"120:6:34"},"nodeType":"YulFunctionCall","src":"120:61:34"},"nodeType":"YulIf","src":"117:2:34"}]},"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"55:6:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"66:5:34","type":""}],"src":"14:190:34"},{"body":{"nodeType":"YulBlock","src":"290:182:34","statements":[{"body":{"nodeType":"YulBlock","src":"336:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"345:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"353:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"338:6:34"},"nodeType":"YulFunctionCall","src":"338:22:34"},"nodeType":"YulExpressionStatement","src":"338:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"311:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"320:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"307:3:34"},"nodeType":"YulFunctionCall","src":"307:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"332:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"303:3:34"},"nodeType":"YulFunctionCall","src":"303:32:34"},"nodeType":"YulIf","src":"300:2:34"},{"nodeType":"YulVariableDeclaration","src":"371:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"390:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"384:5:34"},"nodeType":"YulFunctionCall","src":"384:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"375:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"409:26:34"},"nodeType":"YulFunctionCall","src":"409:33:34"},"nodeType":"YulExpressionStatement","src":"409:33:34"},{"nodeType":"YulAssignment","src":"451:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"461:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"451:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"256:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"267:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"279:6:34","type":""}],"src":"209:263:34"},{"body":{"nodeType":"YulBlock","src":"598:493:34","statements":[{"body":{"nodeType":"YulBlock","src":"645:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"654:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"662:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"647:6:34"},"nodeType":"YulFunctionCall","src":"647:22:34"},"nodeType":"YulExpressionStatement","src":"647:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"619:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"628:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"615:3:34"},"nodeType":"YulFunctionCall","src":"615:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"640:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"611:3:34"},"nodeType":"YulFunctionCall","src":"611:33:34"},"nodeType":"YulIf","src":"608:2:34"},{"nodeType":"YulVariableDeclaration","src":"680:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"706:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"693:12:34"},"nodeType":"YulFunctionCall","src":"693:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"684:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"752:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"725:26:34"},"nodeType":"YulFunctionCall","src":"725:33:34"},"nodeType":"YulExpressionStatement","src":"725:33:34"},{"nodeType":"YulAssignment","src":"767:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"777:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"767:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"791:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"823:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"834:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"819:3:34"},"nodeType":"YulFunctionCall","src":"819:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"806:12:34"},"nodeType":"YulFunctionCall","src":"806:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"795:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"874:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"847:26:34"},"nodeType":"YulFunctionCall","src":"847:35:34"},"nodeType":"YulExpressionStatement","src":"847:35:34"},{"nodeType":"YulAssignment","src":"891:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"901:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"891:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"917:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"949:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"960:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:34"},"nodeType":"YulFunctionCall","src":"945:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"932:12:34"},"nodeType":"YulFunctionCall","src":"932:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"921:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1000:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"973:26:34"},"nodeType":"YulFunctionCall","src":"973:35:34"},"nodeType":"YulExpressionStatement","src":"973:35:34"},{"nodeType":"YulAssignment","src":"1017:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1027:7:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1017:6:34"}]},{"nodeType":"YulAssignment","src":"1043:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1070:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1081:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:34"},"nodeType":"YulFunctionCall","src":"1066:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1053:12:34"},"nodeType":"YulFunctionCall","src":"1053:32:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1043:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"540:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"551:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"563:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"571:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"579:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"587:6:34","type":""}],"src":"477:614:34"},{"body":{"nodeType":"YulBlock","src":"1210:360:34","statements":[{"body":{"nodeType":"YulBlock","src":"1256:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1265:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"1273:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1258:6:34"},"nodeType":"YulFunctionCall","src":"1258:22:34"},"nodeType":"YulExpressionStatement","src":"1258:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1231:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1240:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1227:3:34"},"nodeType":"YulFunctionCall","src":"1227:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1252:2:34","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1223:3:34"},"nodeType":"YulFunctionCall","src":"1223:32:34"},"nodeType":"YulIf","src":"1220:2:34"},{"nodeType":"YulAssignment","src":"1291:52:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1333:9:34"}],"functionName":{"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulIdentifier","src":"1301:31:34"},"nodeType":"YulFunctionCall","src":"1301:42:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1291:6:34"}]},{"nodeType":"YulAssignment","src":"1352:61:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1398:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1409:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1394:3:34"},"nodeType":"YulFunctionCall","src":"1394:18:34"}],"functionName":{"name":"abi_decode_t_uint112_fromMemory","nodeType":"YulIdentifier","src":"1362:31:34"},"nodeType":"YulFunctionCall","src":"1362:51:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1352:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1422:38:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1445:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1456:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1441:3:34"},"nodeType":"YulFunctionCall","src":"1441:18:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1435:5:34"},"nodeType":"YulFunctionCall","src":"1435:25:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1426:5:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"1514:26:34","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1523:6:34"},{"name":"value2","nodeType":"YulIdentifier","src":"1531:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1516:6:34"},"nodeType":"YulFunctionCall","src":"1516:22:34"},"nodeType":"YulExpressionStatement","src":"1516:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1482:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1493:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"1500:10:34","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1489:3:34"},"nodeType":"YulFunctionCall","src":"1489:22:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1479:2:34"},"nodeType":"YulFunctionCall","src":"1479:33:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1472:6:34"},"nodeType":"YulFunctionCall","src":"1472:41:34"},"nodeType":"YulIf","src":"1469:2:34"},{"nodeType":"YulAssignment","src":"1549:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1559:5:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1549:6:34"}]}]},"name":"abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1160:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1171:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1183:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1191:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1199:6:34","type":""}],"src":"1096:474:34"},{"body":{"nodeType":"YulBlock","src":"1676:76:34","statements":[{"nodeType":"YulAssignment","src":"1686:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1698:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1709:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1694:3:34"},"nodeType":"YulFunctionCall","src":"1694:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1686:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1728:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"1739:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1721:6:34"},"nodeType":"YulFunctionCall","src":"1721:25:34"},"nodeType":"YulExpressionStatement","src":"1721:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1645:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1656:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1667:4:34","type":""}],"src":"1575:177:34"},{"body":{"nodeType":"YulBlock","src":"1804:86:34","statements":[{"body":{"nodeType":"YulBlock","src":"1868:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1880:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1870:6:34"},"nodeType":"YulFunctionCall","src":"1870:12:34"},"nodeType":"YulExpressionStatement","src":"1870:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1827:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1838:5:34"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1853:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1858:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1849:3:34"},"nodeType":"YulFunctionCall","src":"1849:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"1862:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1845:3:34"},"nodeType":"YulFunctionCall","src":"1845:19:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1834:3:34"},"nodeType":"YulFunctionCall","src":"1834:31:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1824:2:34"},"nodeType":"YulFunctionCall","src":"1824:42:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1817:6:34"},"nodeType":"YulFunctionCall","src":"1817:50:34"},"nodeType":"YulIf","src":"1814:2:34"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1793:5:34","type":""}],"src":"1757:133:34"}]},"contents":"{\n    { }\n    function abi_decode_t_uint112_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_t_uint112_fromMemory(headStart)\n        value1 := abi_decode_t_uint112_fromMemory(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(value2, value2) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c8063d7176ca91461003b578063ec27830914610064575b600080fd5b61004e610049366004610609565b610077565b60405161005b91906106a7565b60405180910390f35b61004e610072366004610609565b610293565b60008281806001600160a01b0380881690891611610096578688610099565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156100e057600080fd5b505afa1580156100f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011891906105ed565b6001600160a01b03161415806101b05750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561016c57600080fd5b505afa158015610180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a491906105ed565b6001600160a01b031614155b156101c1576000935050505061028b565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101fd57600080fd5b505afa158015610211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102359190610659565b506001600160701b031691506001600160701b031691506000808a6001600160a01b03168c6001600160a01b03161161026f578284610272565b83835b9150915061028189838361049d565b9750505050505050505b949350505050565b60008281806001600160a01b03808816908916116102b25786886102b5565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156102fc57600080fd5b505afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033491906105ed565b6001600160a01b03161415806103cc5750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561038857600080fd5b505afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c091906105ed565b6001600160a01b031614155b156103dd576000935050505061028b565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610659565b506001600160701b031691506001600160701b031691506000808a6001600160a01b03168c6001600160a01b03161161048b57828461048e565b83835b91509150610281898383610513565b6000836104ac5750600061050c565b8215806104b7575081155b156104c45750600061050c565b60006104d2856103e5610587565b905060006104e08285610587565b905060006104fa836104f4886103e8610587565b906105b1565b905080828161050557fe5b0493505050505b9392505050565b6000836105225750600061050c565b82158061052d575081155b1561053a5750600061050c565b60006105526103e861054c8688610587565b90610587565b905060006105666103e561054c86896105c1565b905061057d600182848161057657fe5b04906105b1565b9695505050505050565b60008215806105a25750508181028183828161059f57fe5b04145b6105ab57600080fd5b92915050565b808201828110156105ab57600080fd5b808203828111156105ab57600080fd5b80516001600160701b03811681146105e857600080fd5b919050565b6000602082840312156105fe578081fd5b815161050c816106b0565b6000806000806080858703121561061e578283fd5b8435610629816106b0565b93506020850135610639816106b0565b92506040850135610649816106b0565b9396929550929360600135925050565b60008060006060848603121561066d578283fd5b610676846105d1565b9250610684602085016105d1565b9150604084015163ffffffff8116811461069c578182fd5b809150509250925092565b90815260200190565b6001600160a01b03811681146106c557600080fd5b5056fea2646970667358221220a763acf5bbb21bfd328d30998cec011bb364081862ddf489061186484b0a4fda64736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD7176CA9 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xEC278309 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x609 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x609 JUMP JUMPDEST PUSH2 0x293 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x96 JUMPI DUP7 DUP9 PUSH2 0x99 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x1B0 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x180 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x28B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x211 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x26F JUMPI DUP3 DUP5 PUSH2 0x272 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x281 DUP10 DUP4 DUP4 PUSH2 0x49D JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x2B2 JUMPI DUP7 DUP9 PUSH2 0x2B5 JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x310 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x3CC JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C0 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x28B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x42D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x451 SWAP2 SWAP1 PUSH2 0x659 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x48B JUMPI DUP3 DUP5 PUSH2 0x48E JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x281 DUP10 DUP4 DUP4 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4AC JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x4B7 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x4C4 JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D2 DUP6 PUSH2 0x3E5 PUSH2 0x587 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4E0 DUP3 DUP6 PUSH2 0x587 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4FA DUP4 PUSH2 0x4F4 DUP9 PUSH2 0x3E8 PUSH2 0x587 JUMP JUMPDEST SWAP1 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x505 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x522 JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x52D JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x53A JUMPI POP PUSH1 0x0 PUSH2 0x50C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x552 PUSH2 0x3E8 PUSH2 0x54C DUP7 DUP9 PUSH2 0x587 JUMP JUMPDEST SWAP1 PUSH2 0x587 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x566 PUSH2 0x3E5 PUSH2 0x54C DUP7 DUP10 PUSH2 0x5C1 JUMP JUMPDEST SWAP1 POP PUSH2 0x57D PUSH1 0x1 DUP3 DUP5 DUP2 PUSH2 0x576 JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x5B1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x5A2 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x59F JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5FE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x50C DUP2 PUSH2 0x6B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x61E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x629 DUP2 PUSH2 0x6B0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x639 DUP2 PUSH2 0x6B0 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x649 DUP2 PUSH2 0x6B0 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x66D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x676 DUP5 PUSH2 0x5D1 JUMP JUMPDEST SWAP3 POP PUSH2 0x684 PUSH1 0x20 DUP6 ADD PUSH2 0x5D1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x69C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 PUSH4 0xACF5BBB2 SHL REVERT ORIGIN DUP14 ADDRESS SWAP10 DUP13 0xEC ADD SHL 0xB3 PUSH5 0x81862DDF4 DUP10 MOD GT DUP7 0x48 0x4B EXP 0x4F 0xDA PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"224:2788:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1478:764;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2248:762;;;;;;:::i;:::-;;:::i;1478:764::-;1626:17;1694:4;1626:17;;-1:-1:-1;;;;;1744:18:26;;;;;;;:86;;1812:8;1822:7;1744:86;;;1778:7;1787:8;1744:86;1709:121;;;;1886:6;-1:-1:-1;;;;;1867:25:26;:6;-1:-1:-1;;;;;1867:13:26;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1867:25:26;;;:54;;;;1915:6;-1:-1:-1;;;;;1896:25:26;:6;-1:-1:-1;;;;;1896:13:26;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1896:25:26;;;1867:54;1863:93;;;1944:1;1937:8;;;;;;;1863:93;1967:16;1985;2006:6;-1:-1:-1;;;;;2006:18:26;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1966:60;-1:-1:-1;;;;;1966:60:26;;;-1:-1:-1;;;;;1966:60:26;;;2037:17;2056:18;2088:8;-1:-1:-1;;;;;2078:18:26;:7;-1:-1:-1;;;;;2078:18:26;;:88;;2147:8;2157;2078:88;;;2112:8;2122;2078:88;2036:130;;;;2189:46;2203:8;2213:9;2224:10;2189:13;:46::i;:::-;2177:58;;1478:764;;;;;;;;;;;;;;:::o;2248:762::-;2396:16;2463:4;2396:16;;-1:-1:-1;;;;;2513:18:26;;;;;;;:86;;2581:8;2591:7;2513:86;;;2547:7;2556:8;2513:86;2478:121;;;;2655:6;-1:-1:-1;;;;;2636:25:26;:6;-1:-1:-1;;;;;2636:13:26;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2636:25:26;;;:54;;;;2684:6;-1:-1:-1;;;;;2665:25:26;:6;-1:-1:-1;;;;;2665:13:26;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2665:25:26;;;2636:54;2632:93;;;2713:1;2706:8;;;;;;;2632:93;2736:16;2754;2775:6;-1:-1:-1;;;;;2775:18:26;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2735:60;-1:-1:-1;;;;;2735:60:26;;;-1:-1:-1;;;;;2735:60:26;;;2806:17;2825:18;2857:8;-1:-1:-1;;;;;2847:18:26;:7;-1:-1:-1;;;;;2847:18:26;;:88;;2916:8;2926;2847:88;;;2881:8;2891;2847:88;2805:130;;;;2957:46;2970:9;2981;2992:10;2957:12;:46::i;403:555::-;536:17;606:13;602:27;;-1:-1:-1;628:1:26;621:8;;602:27;677:14;;;:33;;-1:-1:-1;695:15:26;;677:33;673:47;;;-1:-1:-1;719:1:26;712:8;;673:47;730:23;756:17;:8;769:3;756:12;:17::i;:::-;730:43;-1:-1:-1;783:17:26;803:31;730:43;823:10;803:19;:31::i;:::-;783:51;-1:-1:-1;844:19:26;866:40;890:15;866:19;:9;880:4;866:13;:19::i;:::-;:23;;:40::i;:::-;844:62;;940:11;928:9;:23;;;;;;916:35;;403:555;;;;;;;;;:::o;964:508::-;1097:16;1167:14;1163:28;;-1:-1:-1;1190:1:26;1183:8;;1163:28;1239:14;;;:33;;-1:-1:-1;1257:15:26;;1239:33;1235:47;;;-1:-1:-1;1281:1:26;1274:8;;1235:47;1292:17;1312:34;1341:4;1312:24;:9;1326;1312:13;:24::i;:::-;:28;;:34::i;:::-;1292:54;-1:-1:-1;1356:19:26;1378:34;1408:3;1378:25;:10;1393:9;1378:14;:25::i;:34::-;1356:56;;1433:32;1463:1;1446:11;1434:9;:23;;;;;;;1433:29;:32::i;:::-;1422:43;964:508;-1:-1:-1;;;;;;964:508:26:o;986:125:13:-;1044:9;1073:6;;;:30;;-1:-1:-1;;1088:5:13;;;1102:1;1097;1088:5;1097:1;1083:15;;;;;:20;1073:30;1065:39;;;;;;986:125;;;;:::o;435:111::-;527:5;;;522:16;;;;514:25;;;;;710:111;802:5;;;797:16;;;;789:25;;;;;14:190:34;95:13;;-1:-1:-1;;;;;137:42:34;;127:53;;117:2;;194:1;191;184:12;117:2;76:128;;;:::o;209:263::-;;332:2;320:9;311:7;307:23;303:32;300:2;;;353:6;345;338:22;300:2;390:9;384:16;409:33;436:5;409:33;:::i;477:614::-;;;;;640:3;628:9;619:7;615:23;611:33;608:2;;;662:6;654;647:22;608:2;706:9;693:23;725:33;752:5;725:33;:::i;:::-;777:5;-1:-1:-1;834:2:34;819:18;;806:32;847:35;806:32;847:35;:::i;:::-;901:7;-1:-1:-1;960:2:34;945:18;;932:32;973:35;932:32;973:35;:::i;:::-;598:493;;;;-1:-1:-1;1027:7:34;;1081:2;1066:18;1053:32;;-1:-1:-1;;598:493:34:o;1096:474::-;;;;1252:2;1240:9;1231:7;1227:23;1223:32;1220:2;;;1273:6;1265;1258:22;1220:2;1301:42;1333:9;1301:42;:::i;:::-;1291:52;;1362:51;1409:2;1398:9;1394:18;1362:51;:::i;:::-;1352:61;;1456:2;1445:9;1441:18;1435:25;1500:10;1493:5;1489:22;1482:5;1479:33;1469:2;;1531:6;1523;1516:22;1469:2;1559:5;1549:15;;;1210:360;;;;;:::o;1575:177::-;1721:25;;;1709:2;1694:18;;1676:76::o;1757:133::-;-1:-1:-1;;;;;1834:31:34;;1824:42;;1814:2;;1880:1;1877;1870:12;1814:2;1804:86;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"358000","executionCost":"infinite","totalCost":"infinite"},"external":{"getAmountIn(address,address,address,uint256)":"infinite","getAmountOut(address,address,address,uint256)":"infinite"},"internal":{"_getAmountIn(uint256,uint256,uint256)":"infinite","_getAmountOut(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{"getAmountIn(address,address,address,uint256)":"ec278309","getAmountOut(address,address,address,uint256)":"d7176ca9"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2StaticQuoter.sol\":\"UniswapV2StaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapV2StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\\\";\\n\\ncontract UniswapV2StaticQuoter {\\n    using LowGasSafeMath for uint256;\\n\\n    address immutable factory;\\n\\n    constructor(address _factory) {\\n        factory = _factory;\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        // INSUFFICIENT_INPUT_AMOUNT\\n        if (amountIn == 0) return 0;\\n        // INSUFFICIENT_LIQUIDITY\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        // INSUFFICIENT_OUTPUT_AMOUNT\\n        if (amountOut == 0) return 0;\\n        // INSUFFICIENT_LIQUIDITY\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\\n        (address token0, address token1) = tokenIn > tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\\n            return 0;\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1,) = v2pair.getReserves();\\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn > tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        amountOut = _getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    function getAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn) {\\n        IUniswapV2Pair v2pair = IUniswapV2Pair(pool);\\n        (address token0, address token1) = tokenIn > tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v2pair.token0() != token0 || v2pair.token1() != token1) {\\n            return 0;\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1,) = v2pair.getReserves();\\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn > tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        amountIn = _getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n}\\n\",\"keccak256\":\"0x37c840496cead69214c5754dca501248f28b94a8a1761f3dd57ede2ce5719fa5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/UniswapV3StaticQuoter.sol":{"UniswapV3StaticQuoter":{"abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},{"internalType":"bytes32","name":"_initCodeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"quoteExactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"quoteExactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"quoteExactInput(bytes,uint256)":{"params":{"amountIn":"The amount of the first token to swap","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountOut":"The amount of the last token that would be received"}},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountOut":"The amount of `tokenOut` that would be received"}},"quoteExactOutput(bytes,uint256)":{"params":{"amountOut":"The amount of the last token that would be received","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountIn":"The amount of the first token to swap"}},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountIn":"The amount of `tokenIn` that would be needed"}}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:387:34","statements":[{"nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nodeType":"YulBlock","src":"112:273:34","statements":[{"body":{"nodeType":"YulBlock","src":"158:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"167:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"175:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"160:6:34"},"nodeType":"YulFunctionCall","src":"160:22:34"},"nodeType":"YulExpressionStatement","src":"160:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"133:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"142:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"129:3:34"},"nodeType":"YulFunctionCall","src":"129:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"154:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"125:3:34"},"nodeType":"YulFunctionCall","src":"125:32:34"},"nodeType":"YulIf","src":"122:2:34"},{"nodeType":"YulVariableDeclaration","src":"193:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"212:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"206:5:34"},"nodeType":"YulFunctionCall","src":"206:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"197:5:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"285:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"294:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"302:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"287:6:34"},"nodeType":"YulFunctionCall","src":"287:22:34"},"nodeType":"YulExpressionStatement","src":"287:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"244:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"255:5:34"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"270:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"275:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"266:3:34"},"nodeType":"YulFunctionCall","src":"266:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"279:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"262:3:34"},"nodeType":"YulFunctionCall","src":"262:19:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"251:3:34"},"nodeType":"YulFunctionCall","src":"251:31:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"241:2:34"},"nodeType":"YulFunctionCall","src":"241:42:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"234:6:34"},"nodeType":"YulFunctionCall","src":"234:50:34"},"nodeType":"YulIf","src":"231:2:34"},{"nodeType":"YulAssignment","src":"320:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"330:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"320:6:34"}]},{"nodeType":"YulAssignment","src":"344:35:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"364:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"375:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"360:3:34"},"nodeType":"YulFunctionCall","src":"360:18:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"354:5:34"},"nodeType":"YulFunctionCall","src":"354:25:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"344:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"70:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"81:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"93:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"101:6:34","type":""}],"src":"14:371:34"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_addresst_bytes32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b506040516200292538038062002925833981016040819052620000349162000050565b60609190911b6001600160601b03191660805260a0526200008a565b6000806040838503121562000063578182fd5b82516001600160a01b03811681146200007a578283fd5b6020939093015192949293505050565b60805160601c60a051612874620000b1600039806112d05250806112af52506128746000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c6a5026a1161005b578063c6a5026a146100df578063cdca1753146100f2578063d7176ca914610105578063ec278309146101185761007d565b80632f80bb1d1461008257806390405d36146100ab578063bd21704a146100cc575b600080fd5b610095610090366004612715565b61012b565b6040516100a291906127e8565b60405180910390f35b6100be6100b93660046126bf565b6101cb565b6040516100a29291906127da565b6100956100da3660046127a3565b610489565b6100956100ed3660046127a3565b610534565b610095610100366004612715565b6105b1565b61009561011336600461266f565b61063b565b61009561012636600461266f565b61084a565b60005b600080600061013c86610a4b565b9250925092506101926040518060a00160405280846001600160a01b03168152602001856001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b0316815250610489565b945061019d86610a7c565b156101b2576101ab86610a84565b95506101bd565b8493505050506101c5565b50505061012e565b92915050565b60008083610220576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806102348a8a8a8a610a9b565b9250925092505b8051158015906102615750866001600160a01b031681604001516001600160a01b031614155b156104525761026e61253d565b60408201516001600160a01b031681526060820151610290908c90868d610b2e565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b6020840152908301516102de916102cd908d908c610b8b565b6080850151855161ffff8816610bd8565b60c085015260a084015260808301526001600160a01b031660408301528415610340576103148160c00151826080015101610dca565b825103825260a08101516103369061032b90610dca565b602084015190610de0565b602083015261037b565b61034d8160a00151610dca565b825101825260c081015160808201516103759161036a9101610dca565b602084015190610df6565b60208301525b80606001516001600160a01b031682604001516001600160a01b03161415610411578060400151156103e85760006103b78c8360200151610e0c565b5050505050509150508a156103ca576000035b6103d8836080015182610ed3565b6001600160801b03166080840152505b896103f7578060200151610400565b60018160200151035b600290810b900b606083015261044c565b80600001516001600160a01b031682604001516001600160a01b03161461044c5761043f8260400151610f89565b600290810b900b60608301525b5061023b565b8315158915151461046b57602081015181518903610478565b8060000151880381602001515b909b909a5098505050505050505050565b6020810151815160608301516000926001600160a01b03808216908416109284926104b492906112a8565b905060008061051783856104cb8960400151610dca565b60000389608001516001600160a01b03166000146104ed5789608001516100b9565b8761050c5773fffd8963efd1fc6a506488495d951d5263988d256100b9565b6401000276a46101cb565b91509150836105265780610528565b815b9450505050505b919050565b6020810151815160608301516000926001600160a01b038082169084161092849261055f92906112a8565b905060008061059383856105768960400151610dca565b60808a01516001600160a01b0316156104ed5789608001516100b9565b91509150836105a55781600003610528565b60000395945050505050565b60005b60008060006105c286610a4b565b9250925092506106186040518060a00160405280856001600160a01b03168152602001846001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b0316815250610534565b945061062386610a7c565b156101b25761063186610a84565b95505050506105b4565b60008281806001600160a01b038088169089161161065a57868861065d565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190612653565b6001600160a01b03161415806107745750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190612653565b6001600160a01b031614155b156107855760009350505050610842565b61083c6040518060a001604052808a6001600160a01b03168152602001896001600160a01b03168152602001878152602001856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f057600080fd5b505afa158015610804573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082891906127be565b62ffffff1681526000602090910152610534565b93505050505b949350505050565b60008281806001600160a01b038088169089161161086957868861086c565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190612653565b6001600160a01b03161415806109835750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190612653565b6001600160a01b031614155b156109945760009350505050610842565b61083c6040518060a001604052808a6001600160a01b03168152602001896001600160a01b03168152602001878152602001856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3791906127be565b62ffffff1681526000602090910152610489565b60008080610a5984826112ff565b9250610a668460146113af565b9050610a738460176112ff565b91509193909250565b516042111590565b80516060906101c590839060179060161901611456565b600080610aa6612579565b6000610ab1886115a7565b9050610ac287868360000151611655565b610acb88611726565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b8152602001610b158a611793565b6001600160801b03168152509150509450945094915050565b6000806000610b3f878787876117ce565b9093509150620d89e719600284900b1215610b6057620d89e7199250610b76565b620d89e8600284900b1315610b7657620d89e892505b610b7f836117ea565b90509450945094915050565b600083610bac57816001600160a01b0316836001600160a01b031611610bc2565b816001600160a01b0316836001600160a01b0316105b610bcc5782610bce565b815b90505b9392505050565b60008080806001600160a01b03808916908a161015818712801590610c5d576000610c118989620f42400362ffffff16620f4240611b1c565b905082610c2a57610c258c8c8c6001611bcb565b610c37565b610c378b8d8c6001611c44565b9550858110610c48578a9650610c57565b610c548c8b8386611cef565b96505b50610ca7565b81610c7457610c6f8b8b8b6000611c44565b610c81565b610c818a8c8b6000611bcb565b9350838860000310610c9557899550610ca7565b610ca48b8a8a60000385611d3b565b95505b6001600160a01b038a8116908716148215610d0a57808015610cc65750815b610cdc57610cd7878d8c6001611c44565b610cde565b855b9550808015610ceb575081155b610d0157610cfc878d8c6000611bcb565b610d03565b845b9450610d54565b808015610d145750815b610d2a57610d258c888c6001611bcb565b610d2c565b855b9550808015610d39575081155b610d4f57610d4a8c888c6000611c44565b610d51565b845b94505b81158015610d6457508860000385115b15610d70578860000394505b818015610d8f57508a6001600160a01b0316876001600160a01b031614155b15610d9e578589039350610dbb565b610db8868962ffffff168a620f42400362ffffff16611d87565b93505b50505095509550955095915050565b6000600160ff1b8210610ddc57600080fd5b5090565b808203828113156000831215146101c557600080fd5b818101828112156000831215146101c557600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b158015610e6057600080fd5b505afa158015610e74573d6000803e3d6000fd5b505050506040513d610100811015610e8b57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b1215610f3857826001600160801b03168260000384039150816001600160801b031610610f33576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6101c5565b826001600160801b03168284019150816001600160801b031610156101c5576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610fc5575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b610ffa576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061108e57607f810383901c9150611098565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461129957886001600160a01b031661127d826117ea565b6001600160a01b031611156112925781611294565b805b61129b565b815b9998505050505050505050565b6000610bce7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006112fa878787611dc1565b611e17565b60008182601401101561134e576040805162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b604482015290519081900360640190fd5b816014018351101561139f576040805162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015290519081900360640190fd5b500160200151600160601b900490565b6000818260030110156113fd576040805162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015290519081900360640190fd5b816003018351101561144d576040805162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015290519081900360640190fd5b50016003015190565b60608182601f0110156114a1576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b8282840110156114e9576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b81830184511015611535576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b606082158015611554576040519150600082526020820160405261159e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561158d578051835260209283019201611575565b5050858452601f01601f1916604052505b50949350505050565b6115af6125a7565b6115b882611ed7565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d60e081101561162e57600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361169e57816001600160a01b0316836001600160a01b0316118015611699575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b6116cc565b816001600160a01b0316836001600160a01b03161080156116cc57506401000276a36001600160a01b038416115b905080611720576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176157600080fd5b505afa158015611775573d6000803e3d6000fd5b505050506040513d602081101561178b57600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561176157600080fd5b6000806117dd86868686611fae565b9150915094509492505050565b60008060008360020b12611801578260020b611809565b8260020b6000035b9050620d89e8811115611847576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b60006001821661185b57600160801b61186d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156118a1576ffff97272373d413259a46990580e213a0260801c5b60048216156118c0576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156118df576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156118fe576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561191d576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561193c576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561195b576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561197b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561199b576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156119bb576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156119db576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156119fb576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611a1b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611a3b576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611a5b576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611a7c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611a9c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611abb576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611ad8576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611af3578060001981611aef57fe5b0490505b640100000000810615611b07576001611b0a565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611b525760008411611b4757600080fd5b508290049050610bd1565b808411611b5e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b03161115611beb579293925b81611c1857611c13836001600160801b03168686036001600160a01b0316600160601b611b1c565b611c3b565b611c3b836001600160801b03168686036001600160a01b0316600160601b611d87565b95945050505050565b6000836001600160a01b0316856001600160a01b03161115611c64579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716611c8e57600080fd5b83611cbe57866001600160a01b0316611cb18383896001600160a01b0316611b1c565b81611cb857fe5b04611ce4565b611ce4611cd58383896001600160a01b0316611d87565b886001600160a01b03166121ac565b979650505050505050565b600080856001600160a01b031611611d0657600080fd5b6000846001600160801b031611611d1c57600080fd5b81611d2e57611c1385858560016121b7565b611c3b8585856001612298565b600080856001600160a01b031611611d5257600080fd5b6000846001600160801b031611611d6857600080fd5b81611d7a57611c138585856000612298565b611c3b85858560006121b7565b6000611d94848484611b1c565b905060008280611da057fe5b8486091115610bd1576000198110611db757600080fd5b6001019392505050565b611dc96125a7565b826001600160a01b0316846001600160a01b03161115611de7579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610611e3f57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015295901b6bffffffffffffffffffffffff191660a183015260b582019490945260d5808201939093528151808203909301835260f5019052805191012090565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1257600080fd5b505afa925050508015611f3757506040513d6020811015611f3257600080fd5b505160015b611fa757816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7457600080fd5b505afa158015611f88573d6000803e3d6000fd5b505050506040513d6020811015611f9e57600080fd5b5051905061052f565b905061052f565b6000808581600286810b9088900b81611fc357fe5b05905060008760020b128015611fea57508560020b8760020b81611fe357fe5b0760020b15155b15611ff457600019015b84156120cb576000806120068361237b565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d602081101561209157600080fd5b50511680151597509050866120ad57898360ff168603026120c0565b896120b78261238d565b840360ff168603025b9750505050506121a1565b6000806120da8360010161237b565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d602081101561216257600080fd5b505116801515975090508661218457898360ff0360ff1686600101010261219a565b898361218f8361242d565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b6000811561222a5760006001600160a01b038411156121ed576121e884600160601b876001600160801b0316611b1c565b612205565b6001600160801b038516606085901b8161220357fe5b045b905061222261221d6001600160a01b03881683612517565b612527565b915050610842565b60006001600160a01b038411156122585761225384600160601b876001600160801b0316611d87565b61226f565b61226f606085901b6001600160801b0387166121ac565b905080866001600160a01b03161161228657600080fd5b6001600160a01b038616039050610842565b6000826122a6575083610842565b600160601b600160e01b03606085901b168215612334576001600160a01b038616848102908582816122d457fe5b04141561230557818101828110612303576122f983896001600160a01b031683611d87565b9350505050610842565b505b61232b82612326878a6001600160a01b0316868161231f57fe5b0490612517565b6121ac565b92505050610842565b6001600160a01b0386168481029085828161234b57fe5b0414801561235857508082115b61236157600080fd5b8082036122f961221d846001600160a01b038b1684611d87565b60020b600881901d9161010090910790565b600080821161239b57600080fd5b600160801b82106123ae57608091821c91015b6801000000000000000082106123c657604091821c91015b64010000000082106123da57602091821c91015b6201000082106123ec57601091821c91015b61010082106123fd57600891821c91015b6010821061240d57600491821c91015b6004821061241d57600291821c91015b6002821061052f57600101919050565b600080821161243b57600080fd5b5060ff6001600160801b0382161561245657607f190161245e565b608082901c91505b67ffffffffffffffff82161561247757603f190161247f565b604082901c91505b63ffffffff82161561249457601f190161249c565b602082901c91505b61ffff8216156124af57600f19016124b7565b601082901c91505b60ff8216156124c957600719016124d1565b600882901c91505b600f8216156124e357600319016124eb565b600482901c91505b60038216156124fd5760011901612505565b600282901c91505b600182161561052f5760001901919050565b808201828110156101c557600080fd5b806001600160a01b038116811461052f57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b600060a082840312156125d8578081fd5b60405160a0810181811067ffffffffffffffff821117156125f557fe5b604052905080823561260681612815565b8152602083013561261681612815565b60208201526040838101359082015260608301356126338161282d565b6060820152608083013561264681612815565b6080919091015292915050565b600060208284031215612664578081fd5b8151610bd181612815565b60008060008060808587031215612684578283fd5b843561268f81612815565b9350602085013561269f81612815565b925060408501356126af81612815565b9396929550929360600135925050565b600080600080608085870312156126d4578384fd5b84356126df81612815565b9350602085013580151581146126f3578384fd5b925060408501359150606085013561270a81612815565b939692955090935050565b60008060408385031215612727578182fd5b823567ffffffffffffffff8082111561273e578384fd5b818501915085601f830112612751578384fd5b813560208282111561275f57fe5b612771601f8301601f191682016127f1565b92508183528781838601011115612786578586fd5b818185018285013790820181019490945295939092013593505050565b600060a082840312156127b4578081fd5b610bd183836125c7565b6000602082840312156127cf578081fd5b8151610bd18161282d565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561280d57fe5b604052919050565b6001600160a01b038116811461282a57600080fd5b50565b62ffffff8116811461282a57600080fdfea264697066735822122096d04d9a10386f11dc56fe0d94ad95c631adf8cd438ca0c2ae84c810c63bf20064736f6c63430007060033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2925 CODESIZE SUB DUP1 PUSH3 0x2925 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x50 JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH3 0x8A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x63 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x7A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH2 0x2874 PUSH3 0xB1 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x12D0 MSTORE POP DUP1 PUSH2 0x12AF MSTORE POP PUSH2 0x2874 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC6A5026A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC6A5026A EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0xD7176CA9 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0xEC278309 EQ PUSH2 0x118 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0xBD21704A EQ PUSH2 0xCC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x27E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26BF JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP3 SWAP2 SWAP1 PUSH2 0x27DA JUMP JUMPDEST PUSH2 0x95 PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x27A3 JUMP JUMPDEST PUSH2 0x489 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x27A3 JUMP JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH2 0x95 PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x84A JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x13C DUP7 PUSH2 0xA4B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x192 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x489 JUMP JUMPDEST SWAP5 POP PUSH2 0x19D DUP7 PUSH2 0xA7C JUMP JUMPDEST ISZERO PUSH2 0x1B2 JUMPI PUSH2 0x1AB DUP7 PUSH2 0xA84 JUMP JUMPDEST SWAP6 POP PUSH2 0x1BD JUMP JUMPDEST DUP5 SWAP4 POP POP POP POP PUSH2 0x1C5 JUMP JUMPDEST POP POP POP PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x220 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0x234 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA9B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x261 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x452 JUMPI PUSH2 0x26E PUSH2 0x253D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x290 SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0xB2E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x2DE SWAP2 PUSH2 0x2CD SWAP1 DUP14 SWAP1 DUP13 PUSH2 0xB8B JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x340 JUMPI PUSH2 0x314 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0xDCA JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x336 SWAP1 PUSH2 0x32B SWAP1 PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0xDE0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x37B JUMP JUMPDEST PUSH2 0x34D DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0xDCA JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x375 SWAP2 PUSH2 0x36A SWAP2 ADD PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x411 JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 PUSH2 0x3B7 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xE0C JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x3D8 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x3F7 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x400 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x44C JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x44C JUMPI PUSH2 0x43F DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0x23B JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x46B JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x478 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x4B4 SWAP3 SWAP1 PUSH2 0x12A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x517 DUP4 DUP6 PUSH2 0x4CB DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x0 SUB DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 EQ PUSH2 0x4ED JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0xB9 JUMP JUMPDEST DUP8 PUSH2 0x50C JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0xB9 JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0x1CB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x526 JUMPI DUP1 PUSH2 0x528 JUMP JUMPDEST DUP2 JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x55F SWAP3 SWAP1 PUSH2 0x12A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x593 DUP4 DUP6 PUSH2 0x576 DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x4ED JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0xB9 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x5A5 JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x528 JUMP JUMPDEST PUSH1 0x0 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5C2 DUP7 PUSH2 0xA4B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x618 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x534 JUMP JUMPDEST SWAP5 POP PUSH2 0x623 DUP7 PUSH2 0xA7C JUMP JUMPDEST ISZERO PUSH2 0x1B2 JUMPI PUSH2 0x631 DUP7 PUSH2 0xA84 JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x65A JUMPI DUP7 DUP9 PUSH2 0x65D JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DC SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x774 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x744 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x768 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x842 JUMP JUMPDEST PUSH2 0x83C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x804 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x828 SWAP2 SWAP1 PUSH2 0x27BE JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x534 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x869 JUMPI DUP7 DUP9 PUSH2 0x86C JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8EB SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x983 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x953 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x977 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x994 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x842 JUMP JUMPDEST PUSH2 0x83C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA37 SWAP2 SWAP1 PUSH2 0x27BE JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x489 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0xA59 DUP5 DUP3 PUSH2 0x12FF JUMP JUMPDEST SWAP3 POP PUSH2 0xA66 DUP5 PUSH1 0x14 PUSH2 0x13AF JUMP JUMPDEST SWAP1 POP PUSH2 0xA73 DUP5 PUSH1 0x17 PUSH2 0x12FF JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x1C5 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0x1456 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAA6 PUSH2 0x2579 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB1 DUP9 PUSH2 0x15A7 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC2 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1655 JUMP JUMPDEST PUSH2 0xACB DUP9 PUSH2 0x1726 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB15 DUP11 PUSH2 0x1793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB3F DUP8 DUP8 DUP8 DUP8 PUSH2 0x17CE JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0xB60 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0xB76 JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0xB76 JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0xB7F DUP4 PUSH2 0x17EA JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0xBAC JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0xBC2 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0xBCC JUMPI DUP3 PUSH2 0xBCE JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0xC5D JUMPI PUSH1 0x0 PUSH2 0xC11 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0xC2A JUMPI PUSH2 0xC25 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x1BCB JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0xC37 DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1C44 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0xC48 JUMPI DUP11 SWAP7 POP PUSH2 0xC57 JUMP JUMPDEST PUSH2 0xC54 DUP13 DUP12 DUP4 DUP7 PUSH2 0x1CEF JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0xCA7 JUMP JUMPDEST DUP2 PUSH2 0xC74 JUMPI PUSH2 0xC6F DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1C44 JUMP JUMPDEST PUSH2 0xC81 JUMP JUMPDEST PUSH2 0xC81 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x1BCB JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0xC95 JUMPI DUP10 SWAP6 POP PUSH2 0xCA7 JUMP JUMPDEST PUSH2 0xCA4 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1D3B JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0xD0A JUMPI DUP1 DUP1 ISZERO PUSH2 0xCC6 JUMPI POP DUP2 JUMPDEST PUSH2 0xCDC JUMPI PUSH2 0xCD7 DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1C44 JUMP JUMPDEST PUSH2 0xCDE JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0xCEB JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0xD01 JUMPI PUSH2 0xCFC DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x1BCB JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0xD54 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0xD14 JUMPI POP DUP2 JUMPDEST PUSH2 0xD2A JUMPI PUSH2 0xD25 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x1BCB JUMP JUMPDEST PUSH2 0xD2C JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0xD39 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0xD4F JUMPI PUSH2 0xD4A DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1C44 JUMP JUMPDEST PUSH2 0xD51 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0xD64 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0xD70 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xD8F JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD9E JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0xDBB JUMP JUMPDEST PUSH2 0xDB8 DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x1D87 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0xDDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xE8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0xF38 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0xF33 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1C5 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0xFC5 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0xFFA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x108E JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x1098 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1299 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x127D DUP3 PUSH2 0x17EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1292 JUMPI DUP2 PUSH2 0x1294 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x129B JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBCE PUSH32 0x0 PUSH32 0x0 PUSH2 0x12FA DUP8 DUP8 DUP8 PUSH2 0x1DC1 JUMP JUMPDEST PUSH2 0x1E17 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x134E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x139F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x13FD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x144D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x14A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x14E9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x1535 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1554 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x159E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x158D JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1575 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x15AF PUSH2 0x25A7 JUMP JUMPDEST PUSH2 0x15B8 DUP3 PUSH2 0x1ED7 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1618 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x162E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x169E JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1699 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x16CC JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x16CC JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x1720 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1775 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x178B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x17DD DUP7 DUP7 DUP7 DUP7 PUSH2 0x1FAE JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1801 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1809 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1847 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x185B JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x186D JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x18A1 JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x18C0 JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x18DF JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x18FE JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x191D JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x193C JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x195B JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x197B JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x199B JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x19BB JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x19DB JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x19FB JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1A1B JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1A3B JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1A5B JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1A7C JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1A9C JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1ABB JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1AD8 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1AF3 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x1AEF JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1B07 JUMPI PUSH1 0x1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1B52 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1B47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0xBD1 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1B5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1BEB JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1C18 JUMPI PUSH2 0x1C13 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1C3B JUMP JUMPDEST PUSH2 0x1C3B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1D87 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1C64 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1C8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1CBE JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CB1 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B1C JUMP JUMPDEST DUP2 PUSH2 0x1CB8 JUMPI INVALID JUMPDEST DIV PUSH2 0x1CE4 JUMP JUMPDEST PUSH2 0x1CE4 PUSH2 0x1CD5 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D87 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x21AC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1D06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1D1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1D2E JUMPI PUSH2 0x1C13 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x21B7 JUMP JUMPDEST PUSH2 0x1C3B DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2298 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1D52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1D68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1D7A JUMPI PUSH2 0x1C13 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2298 JUMP JUMPDEST PUSH2 0x1C3B DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x21B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D94 DUP5 DUP5 DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x1DA0 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x1DB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1DC9 PUSH2 0x25A7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1DE7 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x1E3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP6 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xD5 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP4 ADD DUP4 MSTORE PUSH1 0xF5 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F37 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x1FA7 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x52F JUMP JUMPDEST SWAP1 POP PUSH2 0x52F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x1FC3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1FEA JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1FE3 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1FF4 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x20CB JUMPI PUSH1 0x0 DUP1 PUSH2 0x2006 DUP4 PUSH2 0x237B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x207B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2091 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x20AD JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x20C0 JUMP JUMPDEST DUP10 PUSH2 0x20B7 DUP3 PUSH2 0x238D JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x21A1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20DA DUP4 PUSH1 0x1 ADD PUSH2 0x237B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x214C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x2184 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x219A JUMP JUMPDEST DUP10 DUP4 PUSH2 0x218F DUP4 PUSH2 0x242D JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x222A JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x21ED JUMPI PUSH2 0x21E8 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x2203 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x2222 PUSH2 0x221D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x2517 JUMP JUMPDEST PUSH2 0x2527 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x2258 JUMPI PUSH2 0x2253 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x226F JUMP JUMPDEST PUSH2 0x226F PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x21AC JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x2286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x22A6 JUMPI POP DUP4 PUSH2 0x842 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x2334 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x22D4 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x2305 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x2303 JUMPI PUSH2 0x22F9 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1D87 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x842 JUMP JUMPDEST POP JUMPDEST PUSH2 0x232B DUP3 PUSH2 0x2326 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x231F JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x2517 JUMP JUMPDEST PUSH2 0x21AC JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x842 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x234B JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x2358 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x2361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x22F9 PUSH2 0x221D DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x239B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x23AE JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x23C6 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x23DA JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x23EC JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x23FD JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x240D JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x241D JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x52F JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x2456 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x245E JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x2477 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x247F JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x2494 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x249C JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x24AF JUMPI PUSH1 0xF NOT ADD PUSH2 0x24B7 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x24C9 JUMPI PUSH1 0x7 NOT ADD PUSH2 0x24D1 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x24E3 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x24FD JUMPI PUSH1 0x1 NOT ADD PUSH2 0x2505 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25D8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x25F5 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP3 CALLDATALOAD PUSH2 0x2606 DUP2 PUSH2 0x2815 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2616 DUP2 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH2 0x2633 DUP2 PUSH2 0x282D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH2 0x2646 DUP2 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x80 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2664 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBD1 DUP2 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2684 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x268F DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x269F DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x26D4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x26DF DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x26F3 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x270A DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2727 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x273E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2751 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x275F JUMPI INVALID JUMPDEST PUSH2 0x2771 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH2 0x27F1 JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP8 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2786 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP2 DUP2 DUP6 ADD DUP3 DUP6 ADD CALLDATACOPY SWAP1 DUP3 ADD DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SWAP4 SWAP1 SWAP3 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27B4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xBD1 DUP4 DUP4 PUSH2 0x25C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27CF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBD1 DUP2 PUSH2 0x282D JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x280D JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x282A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x282A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xD0 0x4D SWAP11 LT CODESIZE PUSH16 0x11DC56FE0D94AD95C631ADF8CD438CA0 0xC2 0xAE DUP5 0xC8 LT 0xC6 EXTCODESIZE CALLCODE STOP PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"358:5859:27:-:0;;;671:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;734:18;;;;;-1:-1:-1;;;;;;734:18:27;;;762:28;;358:5859;;14:371:34;;;154:2;142:9;133:7;129:23;125:32;122:2;;;175:6;167;160:22;122:2;206:16;;-1:-1:-1;;;;;251:31:34;;241:42;;231:2;;302:6;294;287:22;231:2;375;360:18;;;;354:25;330:5;;354:25;;-1:-1:-1;;;112:273:34:o;:::-;358:5859:27;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5204:34","statements":[{"nodeType":"YulBlock","src":"6:3:34","statements":[]},{"body":{"nodeType":"YulBlock","src":"101:906:34","statements":[{"body":{"nodeType":"YulBlock","src":"145:24:34","statements":[{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"154:5:34"},{"name":"value","nodeType":"YulIdentifier","src":"161:5:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"147:6:34"},"nodeType":"YulFunctionCall","src":"147:20:34"},"nodeType":"YulExpressionStatement","src":"147:20:34"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"122:3:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"127:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:34"},"nodeType":"YulFunctionCall","src":"118:19:34"},{"kind":"number","nodeType":"YulLiteral","src":"139:4:34","type":"","value":"0xa0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"114:3:34"},"nodeType":"YulFunctionCall","src":"114:30:34"},"nodeType":"YulIf","src":"111:2:34"},{"nodeType":"YulVariableDeclaration","src":"178:23:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:2:34","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"192:5:34"},"nodeType":"YulFunctionCall","src":"192:9:34"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"182:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"210:35:34","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"232:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"240:4:34","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"228:3:34"},"nodeType":"YulFunctionCall","src":"228:17:34"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"214:10:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"320:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"322:7:34"},"nodeType":"YulFunctionCall","src":"322:9:34"},"nodeType":"YulExpressionStatement","src":"322:9:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"263:10:34"},{"kind":"number","nodeType":"YulLiteral","src":"275:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"260:2:34"},"nodeType":"YulFunctionCall","src":"260:34:34"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"299:10:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"311:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"296:2:34"},"nodeType":"YulFunctionCall","src":"296:22:34"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"257:2:34"},"nodeType":"YulFunctionCall","src":"257:62:34"},"nodeType":"YulIf","src":"254:2:34"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:2:34","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"353:10:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"342:6:34"},"nodeType":"YulFunctionCall","src":"342:22:34"},"nodeType":"YulExpressionStatement","src":"342:22:34"},{"nodeType":"YulAssignment","src":"373:15:34","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"382:6:34"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"373:5:34"}]},{"nodeType":"YulVariableDeclaration","src":"397:38:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"412:12:34"},"nodeType":"YulFunctionCall","src":"412:23:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"401:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"471:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"444:26:34"},"nodeType":"YulFunctionCall","src":"444:35:34"},"nodeType":"YulExpressionStatement","src":"444:35:34"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"495:6:34"},{"name":"value_1","nodeType":"YulIdentifier","src":"503:7:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"488:6:34"},"nodeType":"YulFunctionCall","src":"488:23:34"},"nodeType":"YulExpressionStatement","src":"488:23:34"},{"nodeType":"YulVariableDeclaration","src":"520:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"552:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"563:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"548:3:34"},"nodeType":"YulFunctionCall","src":"548:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"535:12:34"},"nodeType":"YulFunctionCall","src":"535:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"524:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"603:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"576:26:34"},"nodeType":"YulFunctionCall","src":"576:35:34"},"nodeType":"YulExpressionStatement","src":"576:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"631:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"639:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"627:3:34"},"nodeType":"YulFunctionCall","src":"627:15:34"},{"name":"value_2","nodeType":"YulIdentifier","src":"644:7:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"620:6:34"},"nodeType":"YulFunctionCall","src":"620:32:34"},"nodeType":"YulExpressionStatement","src":"620:32:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"672:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"680:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"668:3:34"},"nodeType":"YulFunctionCall","src":"668:15:34"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"702:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"713:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"698:3:34"},"nodeType":"YulFunctionCall","src":"698:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:34"},"nodeType":"YulFunctionCall","src":"685:32:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"661:6:34"},"nodeType":"YulFunctionCall","src":"661:57:34"},"nodeType":"YulExpressionStatement","src":"661:57:34"},{"nodeType":"YulVariableDeclaration","src":"727:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"759:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"770:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"755:3:34"},"nodeType":"YulFunctionCall","src":"755:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"742:12:34"},"nodeType":"YulFunctionCall","src":"742:32:34"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"731:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"809:7:34"}],"functionName":{"name":"validator_revert_t_uint24","nodeType":"YulIdentifier","src":"783:25:34"},"nodeType":"YulFunctionCall","src":"783:34:34"},"nodeType":"YulExpressionStatement","src":"783:34:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"837:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"845:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"833:3:34"},"nodeType":"YulFunctionCall","src":"833:15:34"},{"name":"value_3","nodeType":"YulIdentifier","src":"850:7:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"826:6:34"},"nodeType":"YulFunctionCall","src":"826:32:34"},"nodeType":"YulExpressionStatement","src":"826:32:34"},{"nodeType":"YulVariableDeclaration","src":"867:48:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"899:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"910:3:34","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"895:3:34"},"nodeType":"YulFunctionCall","src":"895:19:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"882:12:34"},"nodeType":"YulFunctionCall","src":"882:33:34"},"variables":[{"name":"value_4","nodeType":"YulTypedName","src":"871:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_4","nodeType":"YulIdentifier","src":"951:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"924:26:34"},"nodeType":"YulFunctionCall","src":"924:35:34"},"nodeType":"YulExpressionStatement","src":"924:35:34"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"979:6:34"},{"kind":"number","nodeType":"YulLiteral","src":"987:3:34","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:34"},"nodeType":"YulFunctionCall","src":"975:16:34"},{"name":"value_4","nodeType":"YulIdentifier","src":"993:7:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"968:6:34"},"nodeType":"YulFunctionCall","src":"968:33:34"},"nodeType":"YulExpressionStatement","src":"968:33:34"}]},"name":"abi_decode_t_struct$_QuoteExactInputSingleParams","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"72:9:34","type":""},{"name":"end","nodeType":"YulTypedName","src":"83:3:34","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"91:5:34","type":""}],"src":"14:993:34"},{"body":{"nodeType":"YulBlock","src":"1093:182:34","statements":[{"body":{"nodeType":"YulBlock","src":"1139:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1148:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"1156:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1141:6:34"},"nodeType":"YulFunctionCall","src":"1141:22:34"},"nodeType":"YulExpressionStatement","src":"1141:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1114:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1123:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1110:3:34"},"nodeType":"YulFunctionCall","src":"1110:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1135:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1106:3:34"},"nodeType":"YulFunctionCall","src":"1106:32:34"},"nodeType":"YulIf","src":"1103:2:34"},{"nodeType":"YulVariableDeclaration","src":"1174:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1193:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1187:5:34"},"nodeType":"YulFunctionCall","src":"1187:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1178:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1239:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1212:26:34"},"nodeType":"YulFunctionCall","src":"1212:33:34"},"nodeType":"YulExpressionStatement","src":"1212:33:34"},{"nodeType":"YulAssignment","src":"1254:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1264:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1254:6:34"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1059:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1070:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1082:6:34","type":""}],"src":"1012:263:34"},{"body":{"nodeType":"YulBlock","src":"1401:493:34","statements":[{"body":{"nodeType":"YulBlock","src":"1448:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1457:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"1465:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1450:6:34"},"nodeType":"YulFunctionCall","src":"1450:22:34"},"nodeType":"YulExpressionStatement","src":"1450:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1422:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"1431:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1418:3:34"},"nodeType":"YulFunctionCall","src":"1418:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"1443:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1414:3:34"},"nodeType":"YulFunctionCall","src":"1414:33:34"},"nodeType":"YulIf","src":"1411:2:34"},{"nodeType":"YulVariableDeclaration","src":"1483:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1509:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1496:12:34"},"nodeType":"YulFunctionCall","src":"1496:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1487:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1555:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1528:26:34"},"nodeType":"YulFunctionCall","src":"1528:33:34"},"nodeType":"YulExpressionStatement","src":"1528:33:34"},{"nodeType":"YulAssignment","src":"1570:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"1580:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1570:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1594:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1637:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1622:3:34"},"nodeType":"YulFunctionCall","src":"1622:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1609:12:34"},"nodeType":"YulFunctionCall","src":"1609:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1598:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1677:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1650:26:34"},"nodeType":"YulFunctionCall","src":"1650:35:34"},"nodeType":"YulExpressionStatement","src":"1650:35:34"},{"nodeType":"YulAssignment","src":"1694:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1704:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1694:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"1720:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1752:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1763:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1748:3:34"},"nodeType":"YulFunctionCall","src":"1748:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1735:12:34"},"nodeType":"YulFunctionCall","src":"1735:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"1724:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"1803:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1776:26:34"},"nodeType":"YulFunctionCall","src":"1776:35:34"},"nodeType":"YulExpressionStatement","src":"1776:35:34"},{"nodeType":"YulAssignment","src":"1820:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"1830:7:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1820:6:34"}]},{"nodeType":"YulAssignment","src":"1846:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1873:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"1884:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1869:3:34"},"nodeType":"YulFunctionCall","src":"1869:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1856:12:34"},"nodeType":"YulFunctionCall","src":"1856:32:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1846:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1343:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1354:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1366:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1374:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1382:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1390:6:34","type":""}],"src":"1280:614:34"},{"body":{"nodeType":"YulBlock","src":"2016:532:34","statements":[{"body":{"nodeType":"YulBlock","src":"2063:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2072:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"2080:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2065:6:34"},"nodeType":"YulFunctionCall","src":"2065:22:34"},"nodeType":"YulExpressionStatement","src":"2065:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2037:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"2046:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2033:3:34"},"nodeType":"YulFunctionCall","src":"2033:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"2058:3:34","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2029:3:34"},"nodeType":"YulFunctionCall","src":"2029:33:34"},"nodeType":"YulIf","src":"2026:2:34"},{"nodeType":"YulVariableDeclaration","src":"2098:36:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2124:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2111:12:34"},"nodeType":"YulFunctionCall","src":"2111:23:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2102:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2170:5:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2143:26:34"},"nodeType":"YulFunctionCall","src":"2143:33:34"},"nodeType":"YulExpressionStatement","src":"2143:33:34"},{"nodeType":"YulAssignment","src":"2185:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"2195:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2185:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2209:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2241:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2252:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2237:3:34"},"nodeType":"YulFunctionCall","src":"2237:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2224:12:34"},"nodeType":"YulFunctionCall","src":"2224:32:34"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2213:7:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"2313:26:34","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2322:6:34"},{"name":"value1","nodeType":"YulIdentifier","src":"2330:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2315:6:34"},"nodeType":"YulFunctionCall","src":"2315:22:34"},"nodeType":"YulExpressionStatement","src":"2315:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2278:7:34"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2301:7:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2294:6:34"},"nodeType":"YulFunctionCall","src":"2294:15:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2287:6:34"},"nodeType":"YulFunctionCall","src":"2287:23:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2275:2:34"},"nodeType":"YulFunctionCall","src":"2275:36:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2268:6:34"},"nodeType":"YulFunctionCall","src":"2268:44:34"},"nodeType":"YulIf","src":"2265:2:34"},{"nodeType":"YulAssignment","src":"2348:17:34","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2358:7:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2348:6:34"}]},{"nodeType":"YulAssignment","src":"2374:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2401:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2412:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2397:3:34"},"nodeType":"YulFunctionCall","src":"2397:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2384:12:34"},"nodeType":"YulFunctionCall","src":"2384:32:34"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2374:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"2425:47:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2457:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"2468:2:34","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2453:3:34"},"nodeType":"YulFunctionCall","src":"2453:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2440:12:34"},"nodeType":"YulFunctionCall","src":"2440:32:34"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"2429:7:34","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"2508:7:34"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2481:26:34"},"nodeType":"YulFunctionCall","src":"2481:35:34"},"nodeType":"YulExpressionStatement","src":"2481:35:34"},{"nodeType":"YulAssignment","src":"2525:17:34","value":{"name":"value_2","nodeType":"YulIdentifier","src":"2535:7:34"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2525:6:34"}]}]},"name":"abi_decode_tuple_t_addresst_boolt_int256t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1958:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1969:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1981:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1989:6:34","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1997:6:34","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2005:6:34","type":""}],"src":"1899:649:34"},{"body":{"nodeType":"YulBlock","src":"2649:772:34","statements":[{"body":{"nodeType":"YulBlock","src":"2695:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2704:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"2712:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2697:6:34"},"nodeType":"YulFunctionCall","src":"2697:22:34"},"nodeType":"YulExpressionStatement","src":"2697:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2670:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"2679:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2666:3:34"},"nodeType":"YulFunctionCall","src":"2666:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"2691:2:34","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2662:3:34"},"nodeType":"YulFunctionCall","src":"2662:32:34"},"nodeType":"YulIf","src":"2659:2:34"},{"nodeType":"YulVariableDeclaration","src":"2730:37:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2757:9:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2744:12:34"},"nodeType":"YulFunctionCall","src":"2744:23:34"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2734:6:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2776:28:34","value":{"kind":"number","nodeType":"YulLiteral","src":"2786:18:34","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2780:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"2831:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2840:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"2848:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2833:6:34"},"nodeType":"YulFunctionCall","src":"2833:22:34"},"nodeType":"YulExpressionStatement","src":"2833:22:34"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2819:6:34"},{"name":"_1","nodeType":"YulIdentifier","src":"2827:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2816:2:34"},"nodeType":"YulFunctionCall","src":"2816:14:34"},"nodeType":"YulIf","src":"2813:2:34"},{"nodeType":"YulVariableDeclaration","src":"2866:32:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2880:9:34"},{"name":"offset","nodeType":"YulIdentifier","src":"2891:6:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2876:3:34"},"nodeType":"YulFunctionCall","src":"2876:22:34"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2870:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"2946:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2955:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"2963:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2948:6:34"},"nodeType":"YulFunctionCall","src":"2948:22:34"},"nodeType":"YulExpressionStatement","src":"2948:22:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2925:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"2929:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2921:3:34"},"nodeType":"YulFunctionCall","src":"2921:13:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2936:7:34"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2917:3:34"},"nodeType":"YulFunctionCall","src":"2917:27:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2910:6:34"},"nodeType":"YulFunctionCall","src":"2910:35:34"},"nodeType":"YulIf","src":"2907:2:34"},{"nodeType":"YulVariableDeclaration","src":"2981:26:34","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3004:2:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2991:12:34"},"nodeType":"YulFunctionCall","src":"2991:16:34"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2985:2:34","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3016:14:34","value":{"kind":"number","nodeType":"YulLiteral","src":"3026:4:34","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3020:2:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"3053:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"3055:7:34"},"nodeType":"YulFunctionCall","src":"3055:9:34"},"nodeType":"YulExpressionStatement","src":"3055:9:34"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3045:2:34"},{"name":"_1","nodeType":"YulIdentifier","src":"3049:2:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3042:2:34"},"nodeType":"YulFunctionCall","src":"3042:10:34"},"nodeType":"YulIf","src":"3039:2:34"},{"nodeType":"YulVariableDeclaration","src":"3075:65:34","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3115:2:34"},{"kind":"number","nodeType":"YulLiteral","src":"3119:4:34","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3111:3:34"},"nodeType":"YulFunctionCall","src":"3111:13:34"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3130:2:34","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3126:3:34"},"nodeType":"YulFunctionCall","src":"3126:7:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3107:3:34"},"nodeType":"YulFunctionCall","src":"3107:27:34"},{"name":"_4","nodeType":"YulIdentifier","src":"3136:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3103:3:34"},"nodeType":"YulFunctionCall","src":"3103:36:34"}],"functionName":{"name":"allocateMemory","nodeType":"YulIdentifier","src":"3088:14:34"},"nodeType":"YulFunctionCall","src":"3088:52:34"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"3079:5:34","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3156:5:34"},{"name":"_3","nodeType":"YulIdentifier","src":"3163:2:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3149:6:34"},"nodeType":"YulFunctionCall","src":"3149:17:34"},"nodeType":"YulExpressionStatement","src":"3149:17:34"},{"body":{"nodeType":"YulBlock","src":"3212:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3221:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3229:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3214:6:34"},"nodeType":"YulFunctionCall","src":"3214:22:34"},"nodeType":"YulExpressionStatement","src":"3214:22:34"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3189:2:34"},{"name":"_3","nodeType":"YulIdentifier","src":"3193:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3185:3:34"},"nodeType":"YulFunctionCall","src":"3185:11:34"},{"name":"_4","nodeType":"YulIdentifier","src":"3198:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3181:3:34"},"nodeType":"YulFunctionCall","src":"3181:20:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3203:7:34"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3178:2:34"},"nodeType":"YulFunctionCall","src":"3178:33:34"},"nodeType":"YulIf","src":"3175:2:34"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:34"},{"name":"_4","nodeType":"YulIdentifier","src":"3271:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:34"},"nodeType":"YulFunctionCall","src":"3260:14:34"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3280:2:34"},{"name":"_4","nodeType":"YulIdentifier","src":"3284:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3276:3:34"},"nodeType":"YulFunctionCall","src":"3276:11:34"},{"name":"_3","nodeType":"YulIdentifier","src":"3289:2:34"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3247:12:34"},"nodeType":"YulFunctionCall","src":"3247:45:34"},"nodeType":"YulExpressionStatement","src":"3247:45:34"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3316:5:34"},{"name":"_3","nodeType":"YulIdentifier","src":"3323:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3312:3:34"},"nodeType":"YulFunctionCall","src":"3312:14:34"},{"name":"_4","nodeType":"YulIdentifier","src":"3328:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3308:3:34"},"nodeType":"YulFunctionCall","src":"3308:23:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3333:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3301:6:34"},"nodeType":"YulFunctionCall","src":"3301:39:34"},"nodeType":"YulExpressionStatement","src":"3301:39:34"},{"nodeType":"YulAssignment","src":"3349:15:34","value":{"name":"array","nodeType":"YulIdentifier","src":"3359:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3349:6:34"}]},{"nodeType":"YulAssignment","src":"3373:42:34","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3400:9:34"},{"name":"_4","nodeType":"YulIdentifier","src":"3411:2:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3396:3:34"},"nodeType":"YulFunctionCall","src":"3396:18:34"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3383:12:34"},"nodeType":"YulFunctionCall","src":"3383:32:34"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3373:6:34"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2607:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2618:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2630:6:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2638:6:34","type":""}],"src":"2553:868:34"},{"body":{"nodeType":"YulBlock","src":"3541:166:34","statements":[{"body":{"nodeType":"YulBlock","src":"3588:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3597:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3605:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3590:6:34"},"nodeType":"YulFunctionCall","src":"3590:22:34"},"nodeType":"YulExpressionStatement","src":"3590:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3562:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"3571:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3558:3:34"},"nodeType":"YulFunctionCall","src":"3558:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"3583:3:34","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3554:3:34"},"nodeType":"YulFunctionCall","src":"3554:33:34"},"nodeType":"YulIf","src":"3551:2:34"},{"nodeType":"YulAssignment","src":"3623:78:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3682:9:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3693:7:34"}],"functionName":{"name":"abi_decode_t_struct$_QuoteExactInputSingleParams","nodeType":"YulIdentifier","src":"3633:48:34"},"nodeType":"YulFunctionCall","src":"3633:68:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3623:6:34"}]}]},"name":"abi_decode_tuple_t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3507:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3518:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3530:6:34","type":""}],"src":"3426:281:34"},{"body":{"nodeType":"YulBlock","src":"3828:166:34","statements":[{"body":{"nodeType":"YulBlock","src":"3875:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3884:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"3892:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3877:6:34"},"nodeType":"YulFunctionCall","src":"3877:22:34"},"nodeType":"YulExpressionStatement","src":"3877:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3849:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"3858:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3845:3:34"},"nodeType":"YulFunctionCall","src":"3845:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"3870:3:34","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3841:3:34"},"nodeType":"YulFunctionCall","src":"3841:33:34"},"nodeType":"YulIf","src":"3838:2:34"},{"nodeType":"YulAssignment","src":"3910:78:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3969:9:34"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3980:7:34"}],"functionName":{"name":"abi_decode_t_struct$_QuoteExactInputSingleParams","nodeType":"YulIdentifier","src":"3920:48:34"},"nodeType":"YulFunctionCall","src":"3920:68:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3910:6:34"}]}]},"name":"abi_decode_tuple_t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3794:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3805:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3817:6:34","type":""}],"src":"3712:282:34"},{"body":{"nodeType":"YulBlock","src":"4079:181:34","statements":[{"body":{"nodeType":"YulBlock","src":"4125:26:34","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4134:6:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4142:6:34"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4127:6:34"},"nodeType":"YulFunctionCall","src":"4127:22:34"},"nodeType":"YulExpressionStatement","src":"4127:22:34"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4100:7:34"},{"name":"headStart","nodeType":"YulIdentifier","src":"4109:9:34"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4096:3:34"},"nodeType":"YulFunctionCall","src":"4096:23:34"},{"kind":"number","nodeType":"YulLiteral","src":"4121:2:34","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4092:3:34"},"nodeType":"YulFunctionCall","src":"4092:32:34"},"nodeType":"YulIf","src":"4089:2:34"},{"nodeType":"YulVariableDeclaration","src":"4160:29:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4179:9:34"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4173:5:34"},"nodeType":"YulFunctionCall","src":"4173:16:34"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4164:5:34","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4224:5:34"}],"functionName":{"name":"validator_revert_t_uint24","nodeType":"YulIdentifier","src":"4198:25:34"},"nodeType":"YulFunctionCall","src":"4198:32:34"},"nodeType":"YulExpressionStatement","src":"4198:32:34"},{"nodeType":"YulAssignment","src":"4239:15:34","value":{"name":"value","nodeType":"YulIdentifier","src":"4249:5:34"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4239:6:34"}]}]},"name":"abi_decode_tuple_t_uint24_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4045:9:34","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4056:7:34","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4068:6:34","type":""}],"src":"3999:261:34"},{"body":{"nodeType":"YulBlock","src":"4390:119:34","statements":[{"nodeType":"YulAssignment","src":"4400:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4412:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:34","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4408:3:34"},"nodeType":"YulFunctionCall","src":"4408:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4400:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4442:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4453:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:34"},"nodeType":"YulFunctionCall","src":"4435:25:34"},"nodeType":"YulExpressionStatement","src":"4435:25:34"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4480:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"4491:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4476:3:34"},"nodeType":"YulFunctionCall","src":"4476:18:34"},{"name":"value1","nodeType":"YulIdentifier","src":"4496:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4469:6:34"},"nodeType":"YulFunctionCall","src":"4469:34:34"},"nodeType":"YulExpressionStatement","src":"4469:34:34"}]},"name":"abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4351:9:34","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4362:6:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4370:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4381:4:34","type":""}],"src":"4265:244:34"},{"body":{"nodeType":"YulBlock","src":"4615:76:34","statements":[{"nodeType":"YulAssignment","src":"4625:26:34","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4637:9:34"},{"kind":"number","nodeType":"YulLiteral","src":"4648:2:34","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4633:3:34"},"nodeType":"YulFunctionCall","src":"4633:18:34"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4625:4:34"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4667:9:34"},{"name":"value0","nodeType":"YulIdentifier","src":"4678:6:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4660:6:34"},"nodeType":"YulFunctionCall","src":"4660:25:34"},"nodeType":"YulExpressionStatement","src":"4660:25:34"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4584:9:34","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4595:6:34","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4606:4:34","type":""}],"src":"4514:177:34"},{"body":{"nodeType":"YulBlock","src":"4740:198:34","statements":[{"nodeType":"YulAssignment","src":"4750:19:34","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4766:2:34","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4760:5:34"},"nodeType":"YulFunctionCall","src":"4760:9:34"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4750:6:34"}]},{"nodeType":"YulVariableDeclaration","src":"4778:35:34","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4800:6:34"},{"name":"size","nodeType":"YulIdentifier","src":"4808:4:34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4796:3:34"},"nodeType":"YulFunctionCall","src":"4796:17:34"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4782:10:34","type":""}]},{"body":{"nodeType":"YulBlock","src":"4888:13:34","statements":[{"expression":{"arguments":[],"functionName":{"name":"invalid","nodeType":"YulIdentifier","src":"4890:7:34"},"nodeType":"YulFunctionCall","src":"4890:9:34"},"nodeType":"YulExpressionStatement","src":"4890:9:34"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4831:10:34"},{"kind":"number","nodeType":"YulLiteral","src":"4843:18:34","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4828:2:34"},"nodeType":"YulFunctionCall","src":"4828:34:34"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4867:10:34"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4879:6:34"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4864:2:34"},"nodeType":"YulFunctionCall","src":"4864:22:34"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4825:2:34"},"nodeType":"YulFunctionCall","src":"4825:62:34"},"nodeType":"YulIf","src":"4822:2:34"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4917:2:34","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4921:10:34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4910:6:34"},"nodeType":"YulFunctionCall","src":"4910:22:34"},"nodeType":"YulExpressionStatement","src":"4910:22:34"}]},"name":"allocateMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"4720:4:34","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4729:6:34","type":""}],"src":"4696:242:34"},{"body":{"nodeType":"YulBlock","src":"4990:86:34","statements":[{"body":{"nodeType":"YulBlock","src":"5054:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5063:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5066:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5056:6:34"},"nodeType":"YulFunctionCall","src":"5056:12:34"},"nodeType":"YulExpressionStatement","src":"5056:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5013:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5024:5:34"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5039:3:34","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5044:1:34","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5035:3:34"},"nodeType":"YulFunctionCall","src":"5035:11:34"},{"kind":"number","nodeType":"YulLiteral","src":"5048:1:34","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5031:3:34"},"nodeType":"YulFunctionCall","src":"5031:19:34"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5020:3:34"},"nodeType":"YulFunctionCall","src":"5020:31:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5010:2:34"},"nodeType":"YulFunctionCall","src":"5010:42:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5003:6:34"},"nodeType":"YulFunctionCall","src":"5003:50:34"},"nodeType":"YulIf","src":"5000:2:34"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4979:5:34","type":""}],"src":"4943:133:34"},{"body":{"nodeType":"YulBlock","src":"5127:75:34","statements":[{"body":{"nodeType":"YulBlock","src":"5180:16:34","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5189:1:34","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5192:1:34","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5182:6:34"},"nodeType":"YulFunctionCall","src":"5182:12:34"},"nodeType":"YulExpressionStatement","src":"5182:12:34"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5150:5:34"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5161:5:34"},{"kind":"number","nodeType":"YulLiteral","src":"5168:8:34","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5157:3:34"},"nodeType":"YulFunctionCall","src":"5157:20:34"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5147:2:34"},"nodeType":"YulFunctionCall","src":"5147:31:34"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5140:6:34"},"nodeType":"YulFunctionCall","src":"5140:39:34"},"nodeType":"YulIf","src":"5137:2:34"}]},"name":"validator_revert_t_uint24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5116:5:34","type":""}],"src":"5081:121:34"}]},"contents":"{\n    { }\n    function abi_decode_t_struct$_QuoteExactInputSingleParams(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0xa0) { revert(value, value) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xa0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        value := memPtr\n        let value_1 := calldataload(headStart)\n        validator_revert_t_address(value_1)\n        mstore(memPtr, value_1)\n        let value_2 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_2)\n        mstore(add(memPtr, 32), value_2)\n        mstore(add(memPtr, 64), calldataload(add(headStart, 64)))\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_t_uint24(value_3)\n        mstore(add(memPtr, 96), value_3)\n        let value_4 := calldataload(add(headStart, 128))\n        validator_revert_t_address(value_4)\n        mstore(add(memPtr, 128), value_4)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_boolt_int256t_uint160(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(value1, value1) }\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_2)\n        value3 := value_2\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { invalid() }\n        let array := allocateMemory(add(and(add(_3, 0x1f), not(31)), _4))\n        mstore(array, _3)\n        if gt(add(add(_2, _3), _4), dataEnd) { revert(value0, value0) }\n        calldatacopy(add(array, _4), add(_2, _4), _3)\n        mstore(add(add(array, _3), _4), value0)\n        value0 := array\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_decode_tuple_t_struct$_QuoteExactInputSingleParams_$6023_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_QuoteExactInputSingleParams(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_QuoteExactOutputSingleParams_$6052_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_QuoteExactInputSingleParams(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_uint24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_uint24(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_int256_t_int256__to_t_int256_t_int256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_t_uint24(value)\n    {\n        if iszero(eq(value, and(value, 0xffffff))) { revert(0, 0) }\n    }\n}","id":34,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"5020":[{"length":32,"start":4783}],"5022":[{"length":32,"start":4816}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c6a5026a1161005b578063c6a5026a146100df578063cdca1753146100f2578063d7176ca914610105578063ec278309146101185761007d565b80632f80bb1d1461008257806390405d36146100ab578063bd21704a146100cc575b600080fd5b610095610090366004612715565b61012b565b6040516100a291906127e8565b60405180910390f35b6100be6100b93660046126bf565b6101cb565b6040516100a29291906127da565b6100956100da3660046127a3565b610489565b6100956100ed3660046127a3565b610534565b610095610100366004612715565b6105b1565b61009561011336600461266f565b61063b565b61009561012636600461266f565b61084a565b60005b600080600061013c86610a4b565b9250925092506101926040518060a00160405280846001600160a01b03168152602001856001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b0316815250610489565b945061019d86610a7c565b156101b2576101ab86610a84565b95506101bd565b8493505050506101c5565b50505061012e565b92915050565b60008083610220576040805162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b60008085139080806102348a8a8a8a610a9b565b9250925092505b8051158015906102615750866001600160a01b031681604001516001600160a01b031614155b156104525761026e61253d565b60408201516001600160a01b031681526060820151610290908c90868d610b2e565b6001600160a01b031660608401819052901515604080850191909152600292830b90920b6020840152908301516102de916102cd908d908c610b8b565b6080850151855161ffff8816610bd8565b60c085015260a084015260808301526001600160a01b031660408301528415610340576103148160c00151826080015101610dca565b825103825260a08101516103369061032b90610dca565b602084015190610de0565b602083015261037b565b61034d8160a00151610dca565b825101825260c081015160808201516103759161036a9101610dca565b602084015190610df6565b60208301525b80606001516001600160a01b031682604001516001600160a01b03161415610411578060400151156103e85760006103b78c8360200151610e0c565b5050505050509150508a156103ca576000035b6103d8836080015182610ed3565b6001600160801b03166080840152505b896103f7578060200151610400565b60018160200151035b600290810b900b606083015261044c565b80600001516001600160a01b031682604001516001600160a01b03161461044c5761043f8260400151610f89565b600290810b900b60608301525b5061023b565b8315158915151461046b57602081015181518903610478565b8060000151880381602001515b909b909a5098505050505050505050565b6020810151815160608301516000926001600160a01b03808216908416109284926104b492906112a8565b905060008061051783856104cb8960400151610dca565b60000389608001516001600160a01b03166000146104ed5789608001516100b9565b8761050c5773fffd8963efd1fc6a506488495d951d5263988d256100b9565b6401000276a46101cb565b91509150836105265780610528565b815b9450505050505b919050565b6020810151815160608301516000926001600160a01b038082169084161092849261055f92906112a8565b905060008061059383856105768960400151610dca565b60808a01516001600160a01b0316156104ed5789608001516100b9565b91509150836105a55781600003610528565b60000395945050505050565b60005b60008060006105c286610a4b565b9250925092506106186040518060a00160405280856001600160a01b03168152602001846001600160a01b031681526020018781526020018362ffffff16815260200160006001600160a01b0316815250610534565b945061062386610a7c565b156101b25761063186610a84565b95505050506105b4565b60008281806001600160a01b038088169089161161065a57868861065d565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190612653565b6001600160a01b03161415806107745750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190612653565b6001600160a01b031614155b156107855760009350505050610842565b61083c6040518060a001604052808a6001600160a01b03168152602001896001600160a01b03168152602001878152602001856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f057600080fd5b505afa158015610804573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082891906127be565b62ffffff1681526000602090910152610534565b93505050505b949350505050565b60008281806001600160a01b038088169089161161086957868861086c565b87875b91509150816001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190612653565b6001600160a01b03161415806109835750806001600160a01b0316836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190612653565b6001600160a01b031614155b156109945760009350505050610842565b61083c6040518060a001604052808a6001600160a01b03168152602001896001600160a01b03168152602001878152602001856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3791906127be565b62ffffff1681526000602090910152610489565b60008080610a5984826112ff565b9250610a668460146113af565b9050610a738460176112ff565b91509193909250565b516042111590565b80516060906101c590839060179060161901611456565b600080610aa6612579565b6000610ab1886115a7565b9050610ac287868360000151611655565b610acb88611726565b9350806040015192506040518060a001604052808781526020016000815260200182600001516001600160a01b03168152602001826020015160020b8152602001610b158a611793565b6001600160801b03168152509150509450945094915050565b6000806000610b3f878787876117ce565b9093509150620d89e719600284900b1215610b6057620d89e7199250610b76565b620d89e8600284900b1315610b7657620d89e892505b610b7f836117ea565b90509450945094915050565b600083610bac57816001600160a01b0316836001600160a01b031611610bc2565b816001600160a01b0316836001600160a01b0316105b610bcc5782610bce565b815b90505b9392505050565b60008080806001600160a01b03808916908a161015818712801590610c5d576000610c118989620f42400362ffffff16620f4240611b1c565b905082610c2a57610c258c8c8c6001611bcb565b610c37565b610c378b8d8c6001611c44565b9550858110610c48578a9650610c57565b610c548c8b8386611cef565b96505b50610ca7565b81610c7457610c6f8b8b8b6000611c44565b610c81565b610c818a8c8b6000611bcb565b9350838860000310610c9557899550610ca7565b610ca48b8a8a60000385611d3b565b95505b6001600160a01b038a8116908716148215610d0a57808015610cc65750815b610cdc57610cd7878d8c6001611c44565b610cde565b855b9550808015610ceb575081155b610d0157610cfc878d8c6000611bcb565b610d03565b845b9450610d54565b808015610d145750815b610d2a57610d258c888c6001611bcb565b610d2c565b855b9550808015610d39575081155b610d4f57610d4a8c888c6000611c44565b610d51565b845b94505b81158015610d6457508860000385115b15610d70578860000394505b818015610d8f57508a6001600160a01b0316876001600160a01b031614155b15610d9e578589039350610dbb565b610db8868962ffffff168a620f42400362ffffff16611d87565b93505b50505095509550955095915050565b6000600160ff1b8210610ddc57600080fd5b5090565b808203828113156000831215146101c557600080fd5b818101828112156000831215146101c557600080fd5b600080600080600080600080896001600160a01b031663f30dba938a6040518263ffffffff1660e01b8152600401808260020b81526020019150506101006040518083038186803b158015610e6057600080fd5b505afa158015610e74573d6000803e3d6000fd5b505050506040513d610100811015610e8b57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959e50939c50919a5098509650945090925090509295985092959890939650565b60008082600f0b1215610f3857826001600160801b03168260000384039150816001600160801b031610610f33576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b6101c5565b826001600160801b03168284019150816001600160801b031610156101c5576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b60006401000276a36001600160a01b03831610801590610fc5575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b610ffa576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061108e57607f810383901c9150611098565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461129957886001600160a01b031661127d826117ea565b6001600160a01b031611156112925781611294565b805b61129b565b815b9998505050505050505050565b6000610bce7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006112fa878787611dc1565b611e17565b60008182601401101561134e576040805162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b604482015290519081900360640190fd5b816014018351101561139f576040805162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015290519081900360640190fd5b500160200151600160601b900490565b6000818260030110156113fd576040805162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015290519081900360640190fd5b816003018351101561144d576040805162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015290519081900360640190fd5b50016003015190565b60608182601f0110156114a1576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b8282840110156114e9576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b81830184511015611535576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b606082158015611554576040519150600082526020820160405261159e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561158d578051835260209283019201611575565b5050858452601f01601f1916604052505b50949350505050565b6115af6125a7565b6115b882611ed7565b816040019061ffff16908161ffff1681525050816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d60e081101561162e57600080fd5b508051602091820151600290810b900b918301919091526001600160a01b03168152919050565b60008361169e57816001600160a01b0316836001600160a01b0316118015611699575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038416105b6116cc565b816001600160a01b0316836001600160a01b03161080156116cc57506401000276a36001600160a01b038416115b905080611720576040805162461bcd60e51b815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176157600080fd5b505afa158015611775573d6000803e3d6000fd5b505050506040513d602081101561178b57600080fd5b505192915050565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561176157600080fd5b6000806117dd86868686611fae565b9150915094509492505050565b60008060008360020b12611801578260020b611809565b8260020b6000035b9050620d89e8811115611847576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b60006001821661185b57600160801b61186d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156118a1576ffff97272373d413259a46990580e213a0260801c5b60048216156118c0576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156118df576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156118fe576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561191d576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561193c576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561195b576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561197b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561199b576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156119bb576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156119db576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156119fb576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611a1b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611a3b576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611a5b576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611a7c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611a9c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611abb576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611ad8576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611af3578060001981611aef57fe5b0490505b640100000000810615611b07576001611b0a565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080611b525760008411611b4757600080fd5b508290049050610bd1565b808411611b5e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000836001600160a01b0316856001600160a01b03161115611beb579293925b81611c1857611c13836001600160801b03168686036001600160a01b0316600160601b611b1c565b611c3b565b611c3b836001600160801b03168686036001600160a01b0316600160601b611d87565b95945050505050565b6000836001600160a01b0316856001600160a01b03161115611c64579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716611c8e57600080fd5b83611cbe57866001600160a01b0316611cb18383896001600160a01b0316611b1c565b81611cb857fe5b04611ce4565b611ce4611cd58383896001600160a01b0316611d87565b886001600160a01b03166121ac565b979650505050505050565b600080856001600160a01b031611611d0657600080fd5b6000846001600160801b031611611d1c57600080fd5b81611d2e57611c1385858560016121b7565b611c3b8585856001612298565b600080856001600160a01b031611611d5257600080fd5b6000846001600160801b031611611d6857600080fd5b81611d7a57611c138585856000612298565b611c3b85858560006121b7565b6000611d94848484611b1c565b905060008280611da057fe5b8486091115610bd1576000198110611db757600080fd5b6001019392505050565b611dc96125a7565b826001600160a01b0316846001600160a01b03161115611de7579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610611e3f57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015295901b6bffffffffffffffffffffffff191660a183015260b582019490945260d5808201939093528151808203909301835260f5019052805191012090565b6000816001600160a01b031663da3c300d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1257600080fd5b505afa925050508015611f3757506040513d6020811015611f3257600080fd5b505160015b611fa757816001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7457600080fd5b505afa158015611f88573d6000803e3d6000fd5b505050506040513d6020811015611f9e57600080fd5b5051905061052f565b905061052f565b6000808581600286810b9088900b81611fc357fe5b05905060008760020b128015611fea57508560020b8760020b81611fe357fe5b0760020b15155b15611ff457600019015b84156120cb576000806120068361237b565b6040805163299ce14b60e11b8152600184810b6004830152915193955091935060ff84161b8001600019019160009183916001600160a01b03891691635339c296916024808301926020929190829003018186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d602081101561209157600080fd5b50511680151597509050866120ad57898360ff168603026120c0565b896120b78261238d565b840360ff168603025b9750505050506121a1565b6000806120da8360010161237b565b91509150600060018260ff166001901b03199050600081866001600160a01b0316635339c296866040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d602081101561216257600080fd5b505116801515975090508661218457898360ff0360ff1686600101010261219a565b898361218f8361242d565b0360ff168660010101025b9750505050505b505094509492505050565b808204910615150190565b6000811561222a5760006001600160a01b038411156121ed576121e884600160601b876001600160801b0316611b1c565b612205565b6001600160801b038516606085901b8161220357fe5b045b905061222261221d6001600160a01b03881683612517565b612527565b915050610842565b60006001600160a01b038411156122585761225384600160601b876001600160801b0316611d87565b61226f565b61226f606085901b6001600160801b0387166121ac565b905080866001600160a01b03161161228657600080fd5b6001600160a01b038616039050610842565b6000826122a6575083610842565b600160601b600160e01b03606085901b168215612334576001600160a01b038616848102908582816122d457fe5b04141561230557818101828110612303576122f983896001600160a01b031683611d87565b9350505050610842565b505b61232b82612326878a6001600160a01b0316868161231f57fe5b0490612517565b6121ac565b92505050610842565b6001600160a01b0386168481029085828161234b57fe5b0414801561235857508082115b61236157600080fd5b8082036122f961221d846001600160a01b038b1684611d87565b60020b600881901d9161010090910790565b600080821161239b57600080fd5b600160801b82106123ae57608091821c91015b6801000000000000000082106123c657604091821c91015b64010000000082106123da57602091821c91015b6201000082106123ec57601091821c91015b61010082106123fd57600891821c91015b6010821061240d57600491821c91015b6004821061241d57600291821c91015b6002821061052f57600101919050565b600080821161243b57600080fd5b5060ff6001600160801b0382161561245657607f190161245e565b608082901c91505b67ffffffffffffffff82161561247757603f190161247f565b604082901c91505b63ffffffff82161561249457601f190161249c565b602082901c91505b61ffff8216156124af57600f19016124b7565b601082901c91505b60ff8216156124c957600719016124d1565b600882901c91505b600f8216156124e357600319016124eb565b600482901c91505b60038216156124fd5760011901612505565b600282901c91505b600182161561052f5760001901919050565b808201828110156101c557600080fd5b806001600160a01b038116811461052f57600080fd5b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b604080516060810182526000808252602082018190529181019190915290565b600060a082840312156125d8578081fd5b60405160a0810181811067ffffffffffffffff821117156125f557fe5b604052905080823561260681612815565b8152602083013561261681612815565b60208201526040838101359082015260608301356126338161282d565b6060820152608083013561264681612815565b6080919091015292915050565b600060208284031215612664578081fd5b8151610bd181612815565b60008060008060808587031215612684578283fd5b843561268f81612815565b9350602085013561269f81612815565b925060408501356126af81612815565b9396929550929360600135925050565b600080600080608085870312156126d4578384fd5b84356126df81612815565b9350602085013580151581146126f3578384fd5b925060408501359150606085013561270a81612815565b939692955090935050565b60008060408385031215612727578182fd5b823567ffffffffffffffff8082111561273e578384fd5b818501915085601f830112612751578384fd5b813560208282111561275f57fe5b612771601f8301601f191682016127f1565b92508183528781838601011115612786578586fd5b818185018285013790820181019490945295939092013593505050565b600060a082840312156127b4578081fd5b610bd183836125c7565b6000602082840312156127cf578081fd5b8151610bd18161282d565b918252602082015260400190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561280d57fe5b604052919050565b6001600160a01b038116811461282a57600080fd5b50565b62ffffff8116811461282a57600080fdfea264697066735822122096d04d9a10386f11dc56fe0d94ad95c631adf8cd438ca0c2ae84c810c63bf20064736f6c63430007060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC6A5026A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC6A5026A EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0xD7176CA9 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0xEC278309 EQ PUSH2 0x118 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x90405D36 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0xBD21704A EQ PUSH2 0xCC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x27E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26BF JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP3 SWAP2 SWAP1 PUSH2 0x27DA JUMP JUMPDEST PUSH2 0x95 PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x27A3 JUMP JUMPDEST PUSH2 0x489 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x27A3 JUMP JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x2715 JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH2 0x95 PUSH2 0x126 CALLDATASIZE PUSH1 0x4 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x84A JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x13C DUP7 PUSH2 0xA4B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x192 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x489 JUMP JUMPDEST SWAP5 POP PUSH2 0x19D DUP7 PUSH2 0xA7C JUMP JUMPDEST ISZERO PUSH2 0x1B2 JUMPI PUSH2 0x1AB DUP7 PUSH2 0xA84 JUMP JUMPDEST SWAP6 POP PUSH2 0x1BD JUMP JUMPDEST DUP5 SWAP4 POP POP POP POP PUSH2 0x1C5 JUMP JUMPDEST POP POP POP PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x220 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616D6F756E745370656369666965642063616E6E6F74206265207A65726F0000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT SWAP1 DUP1 DUP1 PUSH2 0x234 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA9B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x261 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x452 JUMPI PUSH2 0x26E PUSH2 0x253D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x290 SWAP1 DUP13 SWAP1 DUP7 DUP14 PUSH2 0xB2E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP5 ADD DUP2 SWAP1 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP3 DUP4 SIGNEXTEND SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH2 0x2DE SWAP2 PUSH2 0x2CD SWAP1 DUP14 SWAP1 DUP13 PUSH2 0xB8B JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD DUP6 MLOAD PUSH2 0xFFFF DUP9 AND PUSH2 0xBD8 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 ISZERO PUSH2 0x340 JUMPI PUSH2 0x314 DUP2 PUSH1 0xC0 ADD MLOAD DUP3 PUSH1 0x80 ADD MLOAD ADD PUSH2 0xDCA JUMP JUMPDEST DUP3 MLOAD SUB DUP3 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x336 SWAP1 PUSH2 0x32B SWAP1 PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0xDE0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x37B JUMP JUMPDEST PUSH2 0x34D DUP2 PUSH1 0xA0 ADD MLOAD PUSH2 0xDCA JUMP JUMPDEST DUP3 MLOAD ADD DUP3 MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x375 SWAP2 PUSH2 0x36A SWAP2 ADD PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 PUSH2 0xDF6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x411 JUMPI DUP1 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x0 PUSH2 0x3B7 DUP13 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xE0C JUMP JUMPDEST POP POP POP POP POP POP SWAP2 POP POP DUP11 ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 SUB JUMPDEST PUSH2 0x3D8 DUP4 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x80 DUP5 ADD MSTORE POP JUMPDEST DUP10 PUSH2 0x3F7 JUMPI DUP1 PUSH1 0x20 ADD MLOAD PUSH2 0x400 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD SUB JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x44C JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x44C JUMPI PUSH2 0x43F DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP PUSH2 0x23B JUMP JUMPDEST DUP4 ISZERO ISZERO DUP10 ISZERO ISZERO EQ PUSH2 0x46B JUMPI PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD DUP10 SUB PUSH2 0x478 JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP9 SUB DUP2 PUSH1 0x20 ADD MLOAD JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x4B4 SWAP3 SWAP1 PUSH2 0x12A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x517 DUP4 DUP6 PUSH2 0x4CB DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x0 SUB DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 EQ PUSH2 0x4ED JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0xB9 JUMP JUMPDEST DUP8 PUSH2 0x50C JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0xB9 JUMP JUMPDEST PUSH5 0x1000276A4 PUSH2 0x1CB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x526 JUMPI DUP1 PUSH2 0x528 JUMP JUMPDEST DUP2 JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP5 AND LT SWAP3 DUP5 SWAP3 PUSH2 0x55F SWAP3 SWAP1 PUSH2 0x12A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x593 DUP4 DUP6 PUSH2 0x576 DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0xDCA JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x4ED JUMPI DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0xB9 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH2 0x5A5 JUMPI DUP2 PUSH1 0x0 SUB PUSH2 0x528 JUMP JUMPDEST PUSH1 0x0 SUB SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x5C2 DUP7 PUSH2 0xA4B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x618 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x534 JUMP JUMPDEST SWAP5 POP PUSH2 0x623 DUP7 PUSH2 0xA7C JUMP JUMPDEST ISZERO PUSH2 0x1B2 JUMPI PUSH2 0x631 DUP7 PUSH2 0xA84 JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x5B4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x65A JUMPI DUP7 DUP9 PUSH2 0x65D JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DC SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x774 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x744 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x768 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x842 JUMP JUMPDEST PUSH2 0x83C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x804 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x828 SWAP2 SWAP1 PUSH2 0x27BE JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x534 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP1 DUP10 AND GT PUSH2 0x869 JUMPI DUP7 DUP9 PUSH2 0x86C JUMP JUMPDEST DUP8 DUP8 JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8EB SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x983 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x953 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x977 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x994 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x842 JUMP JUMPDEST PUSH2 0x83C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA37 SWAP2 SWAP1 PUSH2 0x27BE JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x489 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0xA59 DUP5 DUP3 PUSH2 0x12FF JUMP JUMPDEST SWAP3 POP PUSH2 0xA66 DUP5 PUSH1 0x14 PUSH2 0x13AF JUMP JUMPDEST SWAP1 POP PUSH2 0xA73 DUP5 PUSH1 0x17 PUSH2 0x12FF JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x1C5 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0x1456 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAA6 PUSH2 0x2579 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB1 DUP9 PUSH2 0x15A7 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC2 DUP8 DUP7 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1655 JUMP JUMPDEST PUSH2 0xACB DUP9 PUSH2 0x1726 JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0x40 ADD MLOAD SWAP3 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB15 DUP11 PUSH2 0x1793 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB3F DUP8 DUP8 DUP8 DUP8 PUSH2 0x17CE JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH3 0xD89E7 NOT PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SLT ISZERO PUSH2 0xB60 JUMPI PUSH3 0xD89E7 NOT SWAP3 POP PUSH2 0xB76 JUMP JUMPDEST PUSH3 0xD89E8 PUSH1 0x2 DUP5 SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0xB76 JUMPI PUSH3 0xD89E8 SWAP3 POP JUMPDEST PUSH2 0xB7F DUP4 PUSH2 0x17EA JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0xBAC JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0xBC2 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT JUMPDEST PUSH2 0xBCC JUMPI DUP3 PUSH2 0xBCE JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP1 DUP11 AND LT ISZERO DUP2 DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0xC5D JUMPI PUSH1 0x0 PUSH2 0xC11 DUP10 DUP10 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH3 0xF4240 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0xC2A JUMPI PUSH2 0xC25 DUP13 DUP13 DUP13 PUSH1 0x1 PUSH2 0x1BCB JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0xC37 DUP12 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1C44 JUMP JUMPDEST SWAP6 POP DUP6 DUP2 LT PUSH2 0xC48 JUMPI DUP11 SWAP7 POP PUSH2 0xC57 JUMP JUMPDEST PUSH2 0xC54 DUP13 DUP12 DUP4 DUP7 PUSH2 0x1CEF JUMP JUMPDEST SWAP7 POP JUMPDEST POP PUSH2 0xCA7 JUMP JUMPDEST DUP2 PUSH2 0xC74 JUMPI PUSH2 0xC6F DUP12 DUP12 DUP12 PUSH1 0x0 PUSH2 0x1C44 JUMP JUMPDEST PUSH2 0xC81 JUMP JUMPDEST PUSH2 0xC81 DUP11 DUP13 DUP12 PUSH1 0x0 PUSH2 0x1BCB JUMP JUMPDEST SWAP4 POP DUP4 DUP9 PUSH1 0x0 SUB LT PUSH2 0xC95 JUMPI DUP10 SWAP6 POP PUSH2 0xCA7 JUMP JUMPDEST PUSH2 0xCA4 DUP12 DUP11 DUP11 PUSH1 0x0 SUB DUP6 PUSH2 0x1D3B JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP1 DUP8 AND EQ DUP3 ISZERO PUSH2 0xD0A JUMPI DUP1 DUP1 ISZERO PUSH2 0xCC6 JUMPI POP DUP2 JUMPDEST PUSH2 0xCDC JUMPI PUSH2 0xCD7 DUP8 DUP14 DUP13 PUSH1 0x1 PUSH2 0x1C44 JUMP JUMPDEST PUSH2 0xCDE JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0xCEB JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0xD01 JUMPI PUSH2 0xCFC DUP8 DUP14 DUP13 PUSH1 0x0 PUSH2 0x1BCB JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP PUSH2 0xD54 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 0xD14 JUMPI POP DUP2 JUMPDEST PUSH2 0xD2A JUMPI PUSH2 0xD25 DUP13 DUP9 DUP13 PUSH1 0x1 PUSH2 0x1BCB JUMP JUMPDEST PUSH2 0xD2C JUMP JUMPDEST DUP6 JUMPDEST SWAP6 POP DUP1 DUP1 ISZERO PUSH2 0xD39 JUMPI POP DUP2 ISZERO JUMPDEST PUSH2 0xD4F JUMPI PUSH2 0xD4A DUP13 DUP9 DUP13 PUSH1 0x0 PUSH2 0x1C44 JUMP JUMPDEST PUSH2 0xD51 JUMP JUMPDEST DUP5 JUMPDEST SWAP5 POP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0xD64 JUMPI POP DUP9 PUSH1 0x0 SUB DUP6 GT JUMPDEST ISZERO PUSH2 0xD70 JUMPI DUP9 PUSH1 0x0 SUB SWAP5 POP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xD8F JUMPI POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD9E JUMPI DUP6 DUP10 SUB SWAP4 POP PUSH2 0xDBB JUMP JUMPDEST PUSH2 0xDB8 DUP7 DUP10 PUSH3 0xFFFFFF AND DUP11 PUSH3 0xF4240 SUB PUSH3 0xFFFFFF AND PUSH2 0x1D87 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0xDDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF30DBA93 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x100 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xE8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP15 POP SWAP4 SWAP13 POP SWAP2 SWAP11 POP SWAP9 POP SWAP7 POP SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0xF38 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x0 SUB DUP5 SUB SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0xF33 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C53 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1C5 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 DUP5 ADD SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x4C41 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT DUP1 ISZERO SWAP1 PUSH2 0xFC5 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND LT JUMPDEST PUSH2 0xFFA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0xF9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB PUSH1 0x20 DUP4 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 GT PUSH1 0x7 SHL DUP2 DUP2 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH1 0x6 SHL SWAP1 DUP2 SHR PUSH4 0xFFFFFFFF DUP2 GT PUSH1 0x5 SHL SWAP1 DUP2 SHR PUSH2 0xFFFF DUP2 GT PUSH1 0x4 SHL SWAP1 DUP2 SHR PUSH1 0xFF DUP2 GT PUSH1 0x3 SWAP1 DUP2 SHL SWAP2 DUP3 SHR PUSH1 0xF DUP2 GT PUSH1 0x2 SHL SWAP1 DUP2 SHR SWAP2 DUP3 GT PUSH1 0x1 SWAP1 DUP2 SHL SWAP3 DUP4 SHR SWAP8 SWAP1 DUP9 GT SWAP7 OR SWAP1 SWAP5 OR SWAP1 SWAP3 OR OR SWAP1 SWAP2 OR OR OR PUSH1 0x80 DUP2 LT PUSH2 0x108E JUMPI PUSH1 0x7F DUP2 SUB DUP4 SWAP1 SHR SWAP2 POP PUSH2 0x1098 JUMP JUMPDEST DUP1 PUSH1 0x7F SUB DUP4 SWAP1 SHL SWAP2 POP JUMPDEST SWAP1 DUP1 MUL PUSH1 0x7F DUP2 DUP2 SHR PUSH1 0xFF DUP4 DUP2 SHR SWAP2 SWAP1 SWAP2 SHR DUP1 MUL DUP1 DUP4 SHR DUP2 DUP4 SHR SHR DUP1 MUL DUP1 DUP5 SHR DUP2 DUP5 SHR SHR DUP1 MUL DUP1 DUP6 SHR DUP2 DUP6 SHR SHR DUP1 MUL DUP1 DUP7 SHR DUP2 DUP7 SHR SHR DUP1 MUL DUP1 DUP8 SHR DUP2 DUP8 SHR SHR DUP1 MUL DUP1 DUP9 SHR DUP2 DUP9 SHR SHR DUP1 MUL DUP1 DUP10 SHR DUP2 DUP10 SHR SHR DUP1 MUL DUP1 DUP11 SHR DUP2 DUP11 SHR SHR DUP1 MUL DUP1 DUP12 SHR DUP2 DUP12 SHR SHR DUP1 MUL DUP1 DUP13 SHR DUP2 DUP13 SHR SHR DUP1 MUL DUP1 DUP14 SHR DUP2 DUP14 SHR SHR DUP1 MUL DUP1 DUP15 SHR SWAP13 DUP2 SWAP1 SHR SWAP13 SWAP1 SWAP13 SHR DUP1 MUL SWAP13 DUP14 SWAP1 SHR SWAP15 SWAP14 PUSH1 0x7F NOT DUP16 ADD PUSH1 0x40 SHL PUSH1 0xC0 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x8000000000000000 AND OR PUSH1 0xC1 SWAP12 SWAP1 SWAP12 SHR PUSH8 0x4000000000000000 AND SWAP11 SWAP1 SWAP11 OR PUSH1 0xC2 SWAP10 SWAP1 SWAP10 SHR PUSH8 0x2000000000000000 AND SWAP9 SWAP1 SWAP9 OR PUSH1 0xC3 SWAP8 SWAP1 SWAP8 SHR PUSH8 0x1000000000000000 AND SWAP7 SWAP1 SWAP7 OR PUSH1 0xC4 SWAP6 SWAP1 SWAP6 SHR PUSH8 0x800000000000000 AND SWAP5 SWAP1 SWAP5 OR PUSH1 0xC5 SWAP4 SWAP1 SWAP4 SHR PUSH8 0x400000000000000 AND SWAP3 SWAP1 SWAP3 OR PUSH1 0xC6 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x200000000000000 AND OR PUSH1 0xC7 SWAP2 SWAP1 SWAP2 SHR PUSH8 0x100000000000000 AND OR PUSH1 0xC8 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x80000000000000 AND OR PUSH1 0xC9 SWAP2 SWAP1 SWAP2 SHR PUSH7 0x40000000000000 AND OR PUSH1 0xCA SWAP2 SWAP1 SWAP2 SHR PUSH7 0x20000000000000 AND OR PUSH1 0xCB SWAP2 SWAP1 SWAP2 SHR PUSH7 0x10000000000000 AND OR PUSH1 0xCC SWAP2 SWAP1 SWAP2 SHR PUSH7 0x8000000000000 AND OR PUSH1 0xCD SWAP2 SWAP1 SWAP2 SHR PUSH7 0x4000000000000 AND OR PUSH10 0x3627A301D71055774C85 DUP2 MUL PUSH16 0x28F6481AB7F045A5AF012A19D003AA9 NOT DUP2 ADD PUSH1 0x80 SWAP1 DUP2 SAR SWAP1 PUSH16 0xDB2DF09E81959A81455E260799A0632F DUP4 ADD SWAP1 SAR PUSH1 0x2 DUP2 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND EQ PUSH2 0x1299 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x127D DUP3 PUSH2 0x17EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1292 JUMPI DUP2 PUSH2 0x1294 JUMP JUMPDEST DUP1 JUMPDEST PUSH2 0x129B JUMP JUMPDEST DUP2 JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBCE PUSH32 0x0 PUSH32 0x0 PUSH2 0x12FA DUP8 DUP8 DUP8 PUSH2 0x1DC1 JUMP JUMPDEST PUSH2 0x1E17 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x134E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x139F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x13FD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x144D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x14A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x14E9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x1535 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1554 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x159E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x158D JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1575 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x15AF PUSH2 0x25A7 JUMP JUMPDEST PUSH2 0x15B8 DUP3 PUSH2 0x1ED7 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 DUP2 PUSH2 0xFFFF AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1618 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x162E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x2 SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x169E JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0x1699 JUMPI POP PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D26 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND LT JUMPDEST PUSH2 0x16CC JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP1 ISZERO PUSH2 0x16CC JUMPI POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND GT JUMPDEST SWAP1 POP DUP1 PUSH2 0x1720 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7371727450726963654C696D6974206F7574206F6620626F756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0C93A7C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1775 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x178B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1A686502 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x17DD DUP7 DUP7 DUP7 DUP7 PUSH2 0x1FAE JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1801 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x1809 JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x1847 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH2 0x185B JUMPI PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x186D JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x18A1 JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x18C0 JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x18DF JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x18FE JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x191D JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x193C JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x195B JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x197B JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x199B JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x19BB JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x19DB JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x19FB JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1A1B JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1A3B JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1A5B JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1A7C JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1A9C JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1ABB JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1AD8 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1AF3 JUMPI DUP1 PUSH1 0x0 NOT DUP2 PUSH2 0x1AEF JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH5 0x100000000 DUP2 MOD ISZERO PUSH2 0x1B07 JUMPI PUSH1 0x1 PUSH2 0x1B0A JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP7 DUP7 MUL SWAP3 POP DUP3 DUP2 LT SWAP1 DUP4 SWAP1 SUB SUB SWAP1 POP DUP1 PUSH2 0x1B52 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1B47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0xBD1 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1B5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1BEB JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 PUSH2 0x1C18 JUMPI PUSH2 0x1C13 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1C3B JUMP JUMPDEST PUSH2 0x1C3B DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP7 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1D87 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1C64 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP7 SUB DUP2 AND SWAP1 DUP8 AND PUSH2 0x1C8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x1CBE JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CB1 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B1C JUMP JUMPDEST DUP2 PUSH2 0x1CB8 JUMPI INVALID JUMPDEST DIV PUSH2 0x1CE4 JUMP JUMPDEST PUSH2 0x1CE4 PUSH2 0x1CD5 DUP4 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1D87 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x21AC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1D06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1D1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1D2E JUMPI PUSH2 0x1C13 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x21B7 JUMP JUMPDEST PUSH2 0x1C3B DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x2298 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1D52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0x1D68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH2 0x1D7A JUMPI PUSH2 0x1C13 DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x2298 JUMP JUMPDEST PUSH2 0x1C3B DUP6 DUP6 DUP6 PUSH1 0x0 PUSH2 0x21B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D94 DUP5 DUP5 DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x1DA0 JUMPI INVALID JUMPDEST DUP5 DUP7 MULMOD GT ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x0 NOT DUP2 LT PUSH2 0x1DB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1DC9 PUSH2 0x25A7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1DE7 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x1E3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP6 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xD5 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP4 ADD DUP4 MSTORE PUSH1 0xF5 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDA3C300D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F37 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x1FA7 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH2 0x52F JUMP JUMPDEST SWAP1 POP PUSH2 0x52F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 PUSH1 0x2 DUP7 DUP2 SIGNEXTEND SWAP1 DUP9 SWAP1 SIGNEXTEND DUP2 PUSH2 0x1FC3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x2 SIGNEXTEND SLT DUP1 ISZERO PUSH2 0x1FEA JUMPI POP DUP6 PUSH1 0x2 SIGNEXTEND DUP8 PUSH1 0x2 SIGNEXTEND DUP2 PUSH2 0x1FE3 JUMPI INVALID JUMPDEST SMOD PUSH1 0x2 SIGNEXTEND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1FF4 JUMPI PUSH1 0x0 NOT ADD JUMPDEST DUP5 ISZERO PUSH2 0x20CB JUMPI PUSH1 0x0 DUP1 PUSH2 0x2006 DUP4 PUSH2 0x237B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x299CE14B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 DUP5 DUP2 SIGNEXTEND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0xFF DUP5 AND SHL DUP1 ADD PUSH1 0x0 NOT ADD SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0x5339C296 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2067 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x207B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2091 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x20AD JUMPI DUP10 DUP4 PUSH1 0xFF AND DUP7 SUB MUL PUSH2 0x20C0 JUMP JUMPDEST DUP10 PUSH2 0x20B7 DUP3 PUSH2 0x238D JUMP JUMPDEST DUP5 SUB PUSH1 0xFF AND DUP7 SUB MUL JUMPDEST SWAP8 POP POP POP POP POP PUSH2 0x21A1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20DA DUP4 PUSH1 0x1 ADD PUSH2 0x237B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 DUP3 PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SUB NOT SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5339C296 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x214C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD AND DUP1 ISZERO ISZERO SWAP8 POP SWAP1 POP DUP7 PUSH2 0x2184 JUMPI DUP10 DUP4 PUSH1 0xFF SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL PUSH2 0x219A JUMP JUMPDEST DUP10 DUP4 PUSH2 0x218F DUP4 PUSH2 0x242D JUMP JUMPDEST SUB PUSH1 0xFF AND DUP7 PUSH1 0x1 ADD ADD MUL JUMPDEST SWAP8 POP POP POP POP POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 DIV SWAP2 MOD ISZERO ISZERO ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x222A JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x21ED JUMPI PUSH2 0x21E8 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH1 0x60 DUP6 SWAP1 SHL DUP2 PUSH2 0x2203 JUMPI INVALID JUMPDEST DIV JUMPDEST SWAP1 POP PUSH2 0x2222 PUSH2 0x221D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 PUSH2 0x2517 JUMP JUMPDEST PUSH2 0x2527 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 GT ISZERO PUSH2 0x2258 JUMPI PUSH2 0x2253 DUP5 PUSH1 0x1 PUSH1 0x60 SHL DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x1D87 JUMP JUMPDEST PUSH2 0x226F JUMP JUMPDEST PUSH2 0x226F PUSH1 0x60 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP8 AND PUSH2 0x21AC JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x2286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB SWAP1 POP PUSH2 0x842 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x22A6 JUMPI POP DUP4 PUSH2 0x842 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x60 DUP6 SWAP1 SHL AND DUP3 ISZERO PUSH2 0x2334 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x22D4 JUMPI INVALID JUMPDEST DIV EQ ISZERO PUSH2 0x2305 JUMPI DUP2 DUP2 ADD DUP3 DUP2 LT PUSH2 0x2303 JUMPI PUSH2 0x22F9 DUP4 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1D87 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x842 JUMP JUMPDEST POP JUMPDEST PUSH2 0x232B DUP3 PUSH2 0x2326 DUP8 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP2 PUSH2 0x231F JUMPI INVALID JUMPDEST DIV SWAP1 PUSH2 0x2517 JUMP JUMPDEST PUSH2 0x21AC JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x842 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 DUP2 MUL SWAP1 DUP6 DUP3 DUP2 PUSH2 0x234B JUMPI INVALID JUMPDEST DIV EQ DUP1 ISZERO PUSH2 0x2358 JUMPI POP DUP1 DUP3 GT JUMPDEST PUSH2 0x2361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x22F9 PUSH2 0x221D DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x8 DUP2 SWAP1 SAR SWAP2 PUSH2 0x100 SWAP1 SWAP2 SMOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x239B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x23AE JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x23C6 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x23DA JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x23EC JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x23FD JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x240D JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x241D JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x52F JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 AND ISZERO PUSH2 0x2456 JUMPI PUSH1 0x7F NOT ADD PUSH2 0x245E JUMP JUMPDEST PUSH1 0x80 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND ISZERO PUSH2 0x2477 JUMPI PUSH1 0x3F NOT ADD PUSH2 0x247F JUMP JUMPDEST PUSH1 0x40 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND ISZERO PUSH2 0x2494 JUMPI PUSH1 0x1F NOT ADD PUSH2 0x249C JUMP JUMPDEST PUSH1 0x20 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH2 0xFFFF DUP3 AND ISZERO PUSH2 0x24AF JUMPI PUSH1 0xF NOT ADD PUSH2 0x24B7 JUMP JUMPDEST PUSH1 0x10 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xFF DUP3 AND ISZERO PUSH2 0x24C9 JUMPI PUSH1 0x7 NOT ADD PUSH2 0x24D1 JUMP JUMPDEST PUSH1 0x8 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0xF DUP3 AND ISZERO PUSH2 0x24E3 JUMPI PUSH1 0x3 NOT ADD PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x4 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x3 DUP3 AND ISZERO PUSH2 0x24FD JUMPI PUSH1 0x1 NOT ADD PUSH2 0x2505 JUMP JUMPDEST PUSH1 0x2 DUP3 SWAP1 SHR SWAP2 POP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25D8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x25F5 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP3 CALLDATALOAD PUSH2 0x2606 DUP2 PUSH2 0x2815 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2616 DUP2 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH2 0x2633 DUP2 PUSH2 0x282D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH2 0x2646 DUP2 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x80 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2664 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBD1 DUP2 PUSH2 0x2815 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2684 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x268F DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x269F DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x26D4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x26DF DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x26F3 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x270A DUP2 PUSH2 0x2815 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2727 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x273E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2751 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x275F JUMPI INVALID JUMPDEST PUSH2 0x2771 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH2 0x27F1 JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP8 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x2786 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP2 DUP2 DUP6 ADD DUP3 DUP6 ADD CALLDATACOPY SWAP1 DUP3 ADD DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SWAP4 SWAP1 SWAP3 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27B4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xBD1 DUP4 DUP4 PUSH2 0x25C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27CF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBD1 DUP2 PUSH2 0x282D JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x280D JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x282A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x282A JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xD0 0x4D SWAP11 LT CODESIZE PUSH16 0x11DC56FE0D94AD95C631ADF8CD438CA0 0xC2 0xAE DUP5 0xC8 LT 0xC6 EXTCODESIZE CALLCODE STOP PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"358:5859:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3757:883;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;702:3284:28;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2932:819:27:-;;;;;;:::i;:::-;;:::i;1220:821::-;;;;;;:::i;:::-;;:::i;2047:879::-;;;;;;:::i;:::-;;:::i;4646:782::-;;;;;;:::i;:::-;;:::i;5434:781::-;;;;;;:::i;:::-;;:::i;3757:883::-;3873:16;3901:733;3929:16;3947:15;3964:10;3978:39;:4;:37;:39::i;:::-;3928:89;;;;;;4123:291;4163:237;;;;;;;;4223:7;-1:-1:-1;;;;;4163:237:27;;;;;4262:8;-1:-1:-1;;;;;4163:237:27;;;;;4330:9;4163:237;;;;4297:3;4163:237;;;;;;4380:1;-1:-1:-1;;;;;4163:237:27;;;;4123:22;:291::i;:::-;4111:303;;4488:23;:4;:21;:23::i;:::-;4484:140;;;4538:16;:4;:14;:16::i;:::-;4531:23;;4484:140;;;4600:9;4593:16;;;;;;;4484:140;3901:733;;;;;;3757:883;;;;:::o;702:3284:28:-;873:14;;923:20;915:63;;;;;-1:-1:-1;;;915:63:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;988:15;1006:19;;;;988:15;;1093:131;1119:11;1144:10;1006:15;1197:17;1093:12;:131::i;:::-;1035:189;;;;;;1350:2396;1357:30;;:35;;;;:78;;;1418:17;-1:-1:-1;;;;;1396:39:28;:5;:18;;;-1:-1:-1;;;;;1396:39:28;;;1357:78;1350:2396;;;1451:28;;:::i;:::-;1518:18;;;;-1:-1:-1;;;;;1493:43:28;;;1684:10;;;;1610:155;;1655:11;;1712;1741:10;1610:27;:155::i;:::-;-1:-1:-1;;;;;1551:214:28;1585:21;;;1551:214;;;;;;1567:16;;;;1551:214;;;;;;;;;;;1552:13;;;1551:214;2010:18;;;;1968:269;;2046:75;;2068:10;;2103:17;2046:21;:75::i;:::-;2139:15;;;;2172:30;;1968:269;;;:24;:269::i;:::-;1950:14;;;1898:339;1934:14;;;1898:339;1919:13;;;1898:339;-1:-1:-1;;;;;1898:339:28;1899:18;;;1898:339;2251:434;;;;2319:43;2336:4;:14;;;2320:4;:13;;;:30;2319:41;:43::i;:::-;2285:77;;;;;2432:14;;;;2405:53;;2432:25;;:23;:25::i;:::-;2405:22;;;;;:26;:53::i;:::-;2380:22;;;:78;2251:434;;;2531:25;:4;:14;;;:23;:25::i;:::-;2497:59;;;;;2643:14;;;;2627:13;;;;2599:71;;2626:43;;2627:30;2626:41;:43::i;:::-;2599:22;;;;;:26;:71::i;:::-;2574:22;;;:96;2251:434;2779:4;:21;;;-1:-1:-1;;;;;2757:43:28;:5;:18;;;-1:-1:-1;;;;;2757:43:28;;2753:983;;;2895:4;:16;;;2891:485;;;2937:19;2966:36;2975:11;2988:4;:13;;;2966:8;:36::i;:::-;2935:67;;;;;;;;;3200:10;3196:68;;;3251:13;;3196:68;3304:53;3327:5;:15;;;3344:12;3304:22;:53::i;:::-;-1:-1:-1;;;;;3286:71:28;:15;;;:71;-1:-1:-1;2891:485:28;3406:10;:46;;3439:4;:13;;;3406:46;;;3435:1;3419:4;:13;;;:17;3406:46;3393:59;;;;;;:10;;;:59;2753:983;;;3499:4;:22;;;-1:-1:-1;;;;;3477:44:28;:5;:18;;;-1:-1:-1;;;;;3477:44:28;;3473:263;;3674:47;3702:5;:18;;;3674:27;:47::i;:::-;3661:60;;;;;;:10;;;:60;3473:263;1350:2396;;;;3791:10;3777:24;;:10;:24;;;:202;;3906:22;;;;3948:30;;3930:48;;3777:202;;;3835:5;:30;;;3817:15;:48;3867:5;:22;;;3777:202;3756:223;;;;-1:-1:-1;702:3284:28;-1:-1:-1;;;;;;;;;702:3284:28:o;2932:819:27:-;3115:15;;;;3098:14;;3244:10;;;;3052:16;;-1:-1:-1;;;;;3098:32:27;;;;;;;;3052:16;;3166:98;;3115:15;3166:7;:98::i;:::-;3140:124;;3276:14;3292;3310:368;3337:4;3356:10;3381:24;:6;:13;;;:22;:24::i;:::-;3380:25;;3419:6;:24;;;-1:-1:-1;;;;;3419:29:27;3447:1;3419:29;:249;;3644:6;:24;;;3419:249;;;3489:10;:118;;3580:27;3489:118;;;3526:27;3310:5;:368::i;:::-;3275:403;;;;3696:10;:48;;3736:7;3696:48;;;3717:7;3696:48;3689:55;;;;;;2932:819;;;;:::o;1220:821::-;1402:15;;;;1385:14;;1531:10;;;;1338:17;;-1:-1:-1;;;;;1385:32:27;;;;;;;;1338:17;;1453:98;;1402:15;1453:7;:98::i;:::-;1427:124;;1563:14;1579;1597:369;1624:4;1643:10;1667:26;:6;:15;;;:24;:26::i;:::-;1707:24;;;;-1:-1:-1;;;;;1707:29:27;;:249;;1932:6;:24;;;1707:249;;1597:369;1562:404;;;;1984:10;:50;;2026:7;2025:8;;1984:50;;;2005:8;;;1220:821;-1:-1:-1;;;;;1220:821:27:o;2047:879::-;2161:17;2190:730;2218:15;2235:16;2253:10;2267:39;:4;:37;:39::i;:::-;2217:89;;;;;;2411:290;2450:237;;;;;;;;2509:7;-1:-1:-1;;;;;2450:237:27;;;;;2548:8;-1:-1:-1;;;;;2450:237:27;;;;;2618:8;2450:237;;;;2583:3;2450:237;;;;;;2667:1;-1:-1:-1;;;;;2450:237:27;;;;2411:21;:290::i;:::-;2400:301;;2775:23;:4;:21;:23::i;:::-;2771:139;;;2825:16;:4;:14;:16::i;:::-;2818:23;;2190:730;;;;;4646:782;4794:17;4870:4;4794:17;;-1:-1:-1;;;;;4920:18:27;;;;;;;:86;;4988:8;4998:7;4920:86;;;4954:7;4963:8;4920:86;4885:121;;;;5062:6;-1:-1:-1;;;;;5043:25:27;:6;-1:-1:-1;;;;;5043:13:27;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5043:25:27;;;:54;;;;5091:6;-1:-1:-1;;;;;5072:25:27;:6;-1:-1:-1;;;;;5072:13:27;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5072:25:27;;;5043:54;5039:93;;;5120:1;5113:8;;;;;;;5039:93;5154:267;5189:222;;;;;;;;5244:7;-1:-1:-1;;;;;5189:222:27;;;;;5279:8;-1:-1:-1;;;;;5189:222:27;;;;;5315:8;5189:222;;;;5346:6;-1:-1:-1;;;;;5346:10:27;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5189:222;;;;5395:1;5189:222;;;;;5154:21;:267::i;:::-;5142:279;;4646:782;;;;;;;;;;:::o;5434:781::-;5582:16;5657:4;5582:16;;-1:-1:-1;;;;;5707:18:27;;;;;;;:86;;5775:8;5785:7;5707:86;;;5741:7;5750:8;5707:86;5672:121;;;;5849:6;-1:-1:-1;;;;;5830:25:27;:6;-1:-1:-1;;;;;5830:13:27;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5830:25:27;;;:54;;;;5878:6;-1:-1:-1;;;;;5859:25:27;:6;-1:-1:-1;;;;;5859:13:27;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5859:25:27;;;5830:54;5826:93;;;5907:1;5900:8;;;;;;;5826:93;5940:268;5976:222;;;;;;;;6032:7;-1:-1:-1;;;;;5976:222:27;;;;;6067:8;-1:-1:-1;;;;;5976:222:27;;;;;6101:9;5976:222;;;;6133:6;-1:-1:-1;;;;;6133:10:27;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5976:222;;;;6182:1;5976:222;;;;;5940:22;:268::i;1779:314:22:-;1883:14;;;1983:17;:4;1883:14;1983;:17::i;:::-;1974:26;-1:-1:-1;2016:24:22;:4;304:2;2016:13;:24::i;:::-;2010:30;-1:-1:-1;2059:27:22;:4;507:20;2059:14;:27::i;:::-;2050:36;;1779:314;;;;;:::o;992:138::-;1083:11;777:24;-1:-1:-1;1083:40:22;;992:138::o;2635:149::-;2751:11;;2696:12;;2727:50;;2751:4;;507:20;;-1:-1:-1;;2751:25:22;2727:10;:50::i;3992:692:28:-;4164:8;4174:10;4186:22;;:::i;:::-;4220:21;4244:31;4263:11;4244:18;:31::i;:::-;4220:55;;4285:78;4318:10;4330:17;4349:2;:13;;;4285:32;:78::i;:::-;4378:27;4393:11;4378:14;:27::i;:::-;4373:32;;4421:2;:6;;;4415:12;;4445:232;;;;;;;;4495:15;4445:232;;;;4633:1;4445:232;;;;4588:2;:13;;;-1:-1:-1;;;;;4445:232:28;;;;;4654:2;:12;;;4445:232;;;;;;4535:25;4548:11;4535:12;:25::i;:::-;-1:-1:-1;;;;;4445:232:28;;;;4437:240;;3992:692;;;;;;;;;:::o;5128:725::-;5290:14;5306:16;5324:24;5386:69;5419:4;5425;5431:11;5444:10;5386:32;:69::i;:::-;5360:95;;-1:-1:-1;5360:95:28;-1:-1:-1;;;5578:28:28;;;;;5574:163;;;-1:-1:-1;;5620:28:28;;5574:163;;;644:9:17;5667:28:28;;;;;5663:74;;;644:9:17;;-1:-1:-1;5663:74:28;5809:37;5837:8;5809:27;:37::i;:::-;5790:56;;5128:725;;;;;;;;:::o;5859:336::-;6013:7;6040:10;:84;;6107:17;-1:-1:-1;;;;;6090:34:28;:16;-1:-1:-1;;;;;6090:34:28;;6040:84;;;6070:17;-1:-1:-1;;;;;6053:34:28;:16;-1:-1:-1;;;;;6053:34:28;;6040:84;6039:149;;6172:16;6039:149;;;6140:17;6039:149;6032:156;;5859:336;;;;;;:::o;1391:3239:16:-;1638:24;;;;-1:-1:-1;;;;;1797:41:16;;;;;;;;1863:20;;;;;;1894:1354;;1921:30;1954:61;1978:15;2002:7;1996:3;:13;1954:61;;2011:3;1954:15;:61::i;:::-;1921:94;;2040:10;:222;;2175:87;2205:19;2226:18;2246:9;2257:4;2175:29;:87::i;:::-;2040:222;;;2069:87;2099:18;2119:19;2140:9;2151:4;2069:29;:87::i;:::-;2029:233;;2306:8;2280:22;:34;2276:336;;2335:18;2316:37;;2276:336;;;2407:205;2468:19;2509:9;2540:22;2584:10;2407:39;:205::i;:::-;2388:224;;2276:336;1894:1354;;;;2655:10;:224;;2791:88;2821:19;2842:18;2862:9;2873:5;2791:29;:88::i;:::-;2655:224;;;2684:88;2714:18;2734:19;2755:9;2766:5;2684:29;:88::i;:::-;2643:236;;2926:9;2906:15;2905:16;;2897:38;2893:344;;2956:18;2937:37;;2893:344;;;3028:209;3090:19;3131:9;3171:15;3170:16;;3209:10;3028:40;:209::i;:::-;3009:228;;2893:344;-1:-1:-1;;;;;3269:38:16;;;;;;;3358:732;;;;3399:3;:14;;;;;3406:7;3399:14;:145;;3459:85;3489:16;3507:19;3528:9;3539:4;3459:29;:85::i;:::-;3399:145;;;3432:8;3399:145;3388:156;;3570:3;:15;;;;;3578:7;3577:8;3570:15;:148;;3632:86;3662:16;3680:19;3701:9;3712:5;3632:29;:86::i;:::-;3570:148;;;3604:9;3570:148;3558:160;;3358:732;;;3760:3;:14;;;;;3767:7;3760:14;:145;;3820:85;3850:19;3871:16;3889:9;3900:4;3820:29;:85::i;:::-;3760:145;;;3793:8;3760:145;3749:156;;3931:3;:15;;;;;3939:7;3938:8;3931:15;:148;;3993:86;4023:19;4044:16;4062:9;4073:5;3993:29;:86::i;:::-;3931:148;;;3965:9;3931:148;3919:160;;3358:732;4180:7;4179:8;:49;;;;;4212:15;4211:16;;4191:9;:37;4179:49;4175:117;;;4265:15;4264:16;;4244:37;;4175:117;4306:7;:49;;;;;4337:18;-1:-1:-1;;;;;4317:38:16;:16;-1:-1:-1;;;;;4317:38:16;;;4306:49;4302:322;;;4503:8;4484:15;4476:35;4464:47;;4302:322;;;4554:59;4580:8;4590:7;4554:59;;4605:7;4599:3;:13;4554:59;;:25;:59::i;:::-;4542:71;;4302:322;1391:3239;;;;;;;;;;;;;:::o;924:121:14:-;976:8;-1:-1:-1;;;1004:1:14;:10;996:19;;;;;;-1:-1:-1;1036:1:14;924:121::o;1573:120:13:-;1662:5;;;1657:16;;;;1629:8;1678:6;;;1657:28;1649:37;;;;;1276:120;1365:5;;;1360:16;;;;1332:8;1381:6;;;1360:28;1352:37;;;;;1505:512:24;1648:22;1684:21;1719:28;1761;1803:25;1842:32;1888:24;1926:16;1993:4;-1:-1:-1;;;;;1974:30:24;;2005:4;1974:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;-1:-1:-1;1974:36:24;;-1:-1:-1;1974:36:24;-1:-1:-1;1505:512:24;;;;;;;;;;;:::o;383:236:12:-;445:9;474:1;470;:5;;;466:147;;;523:1;-1:-1:-1;;;;;499:25:12;517:1;516:2;;504:1;:15;500:19;;;-1:-1:-1;;;;;499:25:12;;491:40;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;-1:-1:-1;;;491:40:12;;;;;;;;;;;;;;;466:147;;;594:1;-1:-1:-1;;;;;570:25:12;587:1;575;:14;571:18;;;-1:-1:-1;;;;;570:25:12;;;562:40;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;-1:-1:-1;;;562:40:12;;;;;;;;;;;;;;4361:4281:17;4434:10;824;-1:-1:-1;;;;;4563:30:17;;;;;;:63;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;4597:29:17;;;4563:63;4555:77;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;-1:-1:-1;;;4555:77:17;;;;;;;;;;;;;;;-1:-1:-1;;;;;4683:2:17;4658:27;;;;-1:-1:-1;;;;;4788:41:17;;4785:1;4781:49;4878:9;;;4951:18;4945:25;;4942:1;4938:33;5019:9;;;5092:10;5086:17;;5083:1;5079:25;5152:9;;;5225:6;5219:13;;5216:1;5212:21;5281:9;;;5354:4;5348:11;;5345:1;5341:19;;;5408:9;;;5481:3;5475:10;;5472:1;5468:18;5534:9;;;5601:10;;;5598:1;5594:18;;;5660:9;;;;5720:10;;;4991;;5124;;;5253;;;5380;5506;;;5632;5750;5791:3;5784:10;;5780:79;;5816:3;5810;:9;5800:5;:20;;5796:24;;5780:79;;;5855:3;5849;:9;5839:5;:20;;5835:24;;5780:79;5958:9;;;5953:3;5949:19;;;5990:11;;;;6062:9;;;;6127;;6118:19;;;6159:11;;;6231:9;6296;;6287:19;;;6328:11;;;6400:9;6465;;6456:19;;;6497:11;;;6569:9;6634;;6625:19;;;6666:11;;;6738:9;6803;;6794:19;;;6835:11;;;6907:9;6972;;6963:19;;;7004:11;;;7076:9;7141;;7132:19;;;7173:11;;;7245:9;7310;;7301:19;;;7342:11;;;7414:9;7479;;7470:19;;;7511:11;;;7583:9;7648;;7639:19;;;7680:11;;;7752:9;7817;;7808:19;;;7849:11;;;7921:9;7986;;7977:19;;;8018:11;;;;8090:9;;;;8155;;8146:19;;;;;5958:9;-1:-1:-1;;5886:17:17;;5908:2;5885:25;6033:10;;;;;;;6023:21;6202:10;;;;;;;6192:21;;;;6371:10;;;;;;;6361:21;;;;6540:10;;;;;;;6530:21;;;;6709:10;;;;;;;6699:21;;;;6878:10;;;;;;;6868:21;;;;7047:10;;;;;;;7037:21;7216:10;;;;;;;7206:21;7385:10;;;;;;;7375:21;7554:10;;;;;;;7544:21;7723:10;;;;;;;7713:21;7892:10;;;;;;;7882:21;8061:10;;;;;;;8051:21;8230:10;;;;;;;8220:21;8292:24;8284:32;;-1:-1:-1;;8368:53:17;;5900:3;8367:62;;;;8478:39;8462:55;;8461:64;;8544:17;;;;;;;;;:91;;8604:12;-1:-1:-1;;;;;8574:42:17;:26;8593:6;8574:18;:26::i;:::-;-1:-1:-1;;;;;8574:42:17;;;:61;;8628:7;8574:61;;;8619:6;8574:61;8544:91;;;8564:7;8544:91;8537:98;4361:4281;-1:-1:-1;;;;;;;;;4361:4281:17:o;803:411:27:-;916:18;1001:192;1059:7;1088:12;1122:53;1155:6;1163;1171:3;1122:32;:53::i;:::-;1001:36;:192::i;3412:416:21:-;3491:7;3533:6;3518;3527:2;3518:11;:21;;3510:52;;;;;-1:-1:-1;;;3510:52:21;;;;;;;;;;;;-1:-1:-1;;;3510:52:21;;;;;;;;;;;;;;;3597:6;3606:2;3597:11;3580:6;:13;:28;;3572:62;;;;;-1:-1:-1;;;3572:62:21;;;;;;;;;;;;-1:-1:-1;;;3572:62:21;;;;;;;;;;;;;;;-1:-1:-1;3722:30:21;3738:4;3722:30;3716:37;-1:-1:-1;;;3712:71:21;;;3412:416::o;3834:365::-;3912:6;3952;3938;3947:1;3938:10;:20;;3930:50;;;;;-1:-1:-1;;;3930:50:21;;;;;;;;;;;;-1:-1:-1;;;3930:50:21;;;;;;;;;;;;;;;4015:6;4024:1;4015:10;3998:6;:13;:27;;3990:60;;;;;-1:-1:-1;;;3990:60:21;;;;;;;;;;;;-1:-1:-1;;;3990:60:21;;;;;;;;;;;;;;;-1:-1:-1;4127:29:21;4143:3;4127:29;4121:36;;3834:365::o;399:3007::-;521:12;569:7;553;563:2;553:12;:23;;545:50;;;;;-1:-1:-1;;;545:50:21;;;;;;;;;;;;-1:-1:-1;;;545:50:21;;;;;;;;;;;;;;;633:6;622:7;613:6;:16;:26;;605:53;;;;;-1:-1:-1;;;605:53:21;;;;;;;;;;;;-1:-1:-1;;;605:53:21;;;;;;;;;;;;;;;702:7;693:6;:16;676:6;:13;:33;;668:63;;;;;-1:-1:-1;;;668:63:21;;;;;;;;;;;;-1:-1:-1;;;668:63:21;;;;;;;;;;;;;;;742:22;805:15;;837:2099;;;;3089:4;3083:11;3070:24;;3287:1;3276:9;3269:20;3339:4;3328:9;3324:20;3318:4;3311:34;798:2565;;837:2099;1031:4;1025:11;1012:24;;1726:2;1717:7;1713:16;2128:9;2121:17;2115:4;2111:28;2099:9;2088;2084:25;2080:60;2180:7;2176:2;2172:16;2448:6;2434:9;2427:17;2421:4;2417:28;2405:9;2397:6;2393:22;2389:57;2385:70;2210:461;2485:3;2481:2;2478:11;2210:461;;;2639:9;;2628:21;;2530:4;2522:13;;;;2566;2210:461;;;-1:-1:-1;;2693:26:21;;;2913:2;2896:11;-1:-1:-1;;2892:25:21;2886:4;2879:39;-1:-1:-1;798:2565:21;-1:-1:-1;3390:9:21;399:3007;-1:-1:-1;;;;399:3007:21:o;504:261:24:-;592:21;;:::i;:::-;634:27;656:4;634:21;:27::i;:::-;625:2;:6;;:36;;;;;;;;;;;732:4;-1:-1:-1;;;;;713:43:24;;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;713:45:24;;;;;;;671:87;;;;;;687:12;;;671:87;;;;-1:-1:-1;;;;;671:87:24;;;672:2;504:261;-1:-1:-1;504:261:24:o;4690:432:28:-;4848:18;4869:10;:182;;4997:10;-1:-1:-1;;;;;4980:27:28;:14;-1:-1:-1;;;;;4980:27:28;;:71;;;;-1:-1:-1;1004:49:17;-1:-1:-1;;;;;5011:40:28;;;4980:71;4869:182;;;4911:10;-1:-1:-1;;;;;4894:27:28;:14;-1:-1:-1;;;;;4894:27:28;;:71;;;;-1:-1:-1;824:10:17;-1:-1:-1;;;;;4925:40:28;;;4894:71;4848:203;;5069:13;5061:54;;;;;-1:-1:-1;;;5061:54:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:432;;;;:::o;771:153:24:-;855:5;898:4;-1:-1:-1;;;;;879:36:24;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;879:38:24;;771:153;-1:-1:-1;;771:153:24:o;930:151::-;1012:7;1057:4;-1:-1:-1;;;;;1038:34:24;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1087:412;1268:10;1280:16;1327:165;1388:11;1417:4;1439:11;1468:10;1327:43;:165::i;:::-;1308:184;;;;1087:412;;;;;;;:::o;1362:2580:17:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;-1:-1:-1;644:9:17;1550:28;;;1542:42;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;-1:-1:-1;;;1542:42:17;;;;;;;;;;;;;;;1595:13;1621:3;1611:13;;:93;;-1:-1:-1;;;1611:93:17;;;1632:34;1611:93;1595:109;;;-1:-1:-1;1728:3:17;1718:13;;:18;1714:83;;1755:34;1747:42;1794:3;1746:51;1714:83;1821:3;1811:13;;:18;1807:83;;1848:34;1840:42;1887:3;1839:51;1807:83;1914:3;1904:13;;:18;1900:83;;1941:34;1933:42;1980:3;1932:51;1900:83;2007:4;1997:14;;:19;1993:84;;2035:34;2027:42;2074:3;2026:51;1993:84;2101:4;2091:14;;:19;2087:84;;2129:34;2121:42;2168:3;2120:51;2087:84;2195:4;2185:14;;:19;2181:84;;2223:34;2215:42;2262:3;2214:51;2181:84;2289:4;2279:14;;:19;2275:84;;2317:34;2309:42;2356:3;2308:51;2275:84;2383:5;2373:15;;:20;2369:85;;2412:34;2404:42;2451:3;2403:51;2369:85;2478:5;2468:15;;:20;2464:85;;2507:34;2499:42;2546:3;2498:51;2464:85;2573:5;2563:15;;:20;2559:85;;2602:34;2594:42;2641:3;2593:51;2559:85;2668:5;2658:15;;:20;2654:85;;2697:34;2689:42;2736:3;2688:51;2654:85;2763:6;2753:16;;:21;2749:86;;2793:34;2785:42;2832:3;2784:51;2749:86;2859:6;2849:16;;:21;2845:86;;2889:34;2881:42;2928:3;2880:51;2845:86;2955:6;2945:16;;:21;2941:86;;2985:34;2977:42;3024:3;2976:51;2941:86;3051:6;3041:16;;:21;3037:86;;3081:34;3073:42;3120:3;3072:51;3037:86;3147:7;3137:17;;:22;3133:86;;3178:33;3170:41;3216:3;3169:50;3133:86;3243:7;3233:17;;:22;3229:85;;3274:32;3266:40;3311:3;3265:49;3229:85;3338:7;3328:17;;:22;3324:83;;3369:30;3361:38;3404:3;3360:47;3324:83;3431:7;3421:17;;:22;3417:78;;3462:25;3454:33;3492:3;3453:42;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;-1:-1:-1;;3528:25:17;;;;;;3520:33;;3506:47;3912:7;3903:5;:17;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;749:3776:11:-;861:14;;;-1:-1:-1;;1368:1:11;1365;1358:20;1400:9;;;;-1:-1:-1;1451:13:11;;;1435:14;;;;1431:34;;-1:-1:-1;1547:10:11;1543:179;;1595:1;1581:11;:15;1573:24;;;;;;-1:-1:-1;1648:23:11;;;;-1:-1:-1;1698:13:11;;1543:179;1849:5;1835:11;:19;1827:28;;;;;;2132:17;2208:11;2205:1;2202;2195:25;2560:12;2575;;;:26;;2695:22;;;;;3498:1;3479;:15;;3478:21;;3725:17;;;3721:21;;3714:28;3783:17;;;3779:21;;3772:28;3842:17;;;3838:21;;3831:28;3901:17;;;3897:21;;3890:28;3960:17;;;3956:21;;3949:28;4020:17;;;4016:21;;;4009:28;3067:12;;;;3063:23;;;3088:1;3059:31;2337:20;;;2326:32;;;3118:12;;;;2380:21;;;;2823:16;;;;3109:21;;;;4484:11;;;;;-1:-1:-1;;749:3776:11;;;;;:::o;8727:532:15:-;8892:15;8939:13;-1:-1:-1;;;;;8923:29:15;:13;-1:-1:-1;;;;;8923:29:15;;8919:98;;;8988:13;;9003;8919:98;9047:7;:205;;9177:75;9193:9;-1:-1:-1;;;;;9177:75:15;9220:13;9204;:29;-1:-1:-1;;;;;9177:75:15;-1:-1:-1;;;9177:15:15;:75::i;:::-;9047:205;;;9073:85;9099:9;-1:-1:-1;;;;;9073:85:15;9126:13;9110;:29;-1:-1:-1;;;;;9073:85:15;-1:-1:-1;;;9073:25:15;:85::i;:::-;9028:224;8727:532;-1:-1:-1;;;;;8727:532:15:o;7493:779::-;7658:15;7705:13;-1:-1:-1;;;;;7689:29:15;:13;-1:-1:-1;;;;;7689:29:15;;7685:98;;;7754:13;;7769;7685:98;-1:-1:-1;;;;;;;309:2:10;7815:45:15;;;;-1:-1:-1;;;;;7891:29:15;;;7870:50;;;7939:17;;7931:26;;;;;;7987:7;:278;;8252:13;-1:-1:-1;;;;;8195:70:15;:54;8211:10;8223;8235:13;-1:-1:-1;;;;;8195:54:15;:15;:54::i;:::-;:70;;;;;;7987:278;;;8013:163;8059:64;8085:10;8097;8109:13;-1:-1:-1;;;;;8059:64:15;:25;:64::i;:::-;8145:13;-1:-1:-1;;;;;8013:163:15;:24;:163::i;:::-;7968:297;7493:779;-1:-1:-1;;;;;;;7493:779:15:o;5299:550::-;5467:16;5514:1;5503:8;-1:-1:-1;;;;;5503:12:15;;5495:21;;;;;;5546:1;5534:9;-1:-1:-1;;;;;5534:13:15;;5526:22;;;;;;5644:10;:198;;5766:76;5806:8;5816:9;5827:8;5837:4;5766:39;:76::i;5644:198::-;5673:74;5711:8;5721:9;5732:8;5742:4;5673:37;:74::i;6395:550::-;6565:16;6612:1;6601:8;-1:-1:-1;;;;;6601:12:15;;6593:21;;;;;;6644:1;6632:9;-1:-1:-1;;;;;6632:13:15;;6624:22;;;;;;6736:10;:202;;6862:76;6900:8;6910:9;6921;6932:5;6862:37;:76::i;6736:202::-;6765:78;6805:8;6815:9;6826;6837:5;6765:39;:78::i;4807:315:11:-;4929:14;4964:25;4971:1;4974;4977:11;4964:6;:25::i;:::-;4955:34;;5031:1;5016:11;5003:25;;;;;5013:1;5010;5003:25;:29;4999:117;;;-1:-1:-1;;5056:6:11;:26;5048:35;;;;;;5097:8;;4807:315;;;;;:::o;673:274:32:-;790:14;;:::i;:::-;829:6;-1:-1:-1;;;;;820:15:32;:6;-1:-1:-1;;;;;820:15:32;;816:56;;;857:6;;865;816:56;-1:-1:-1;889:51:32;;;;;;;;-1:-1:-1;;;;;889:51:32;;;;;;;;;;;;;;;;;;;;;;;673:274::o;1194:694::-;1330:12;1375:3;:10;;;-1:-1:-1;;;;;1362:23:32;:3;:10;;;-1:-1:-1;;;;;1362:23:32;;1354:32;;;;;;-1:-1:-1;1687:10:32;;1699;;;;;1711:7;;;;;1676:43;;-1:-1:-1;;;;;1676:43:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1633:116;;;;;;-1:-1:-1;;;;;;1513:304:32;;;;;;;-1:-1:-1;;1513:304:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1478:361;;;;;;1194:694::o;203:295:24:-;285:6;326:4;-1:-1:-1;;;;;307:35:24;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;307:37:24;;;303:189;;469:4;-1:-1:-1;;;;;450:28:24;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;450:30:24;;-1:-1:-1;436:45:24;;303:189;397:6;-1:-1:-1;383:21:24;;1696:1991:33;1861:10;;1946:11;1861:10;1987:18;;;;;;;;;;;;;;1968:37;;2026:1;2019:4;:8;;;:35;;;;;2038:11;2031:18;;:4;:18;;;;;;;;:23;;;;2019:35;2015:53;;;-1:-1:-1;;2056:12:33;2015:53;2118:3;2114:1567;;;2138:13;2153:12;2169:20;2178:10;2169:8;:20::i;:::-;2349:24;;;-1:-1:-1;;;2349:24:33;;2306:1;2349:24;;;;;;;;;2137:52;;-1:-1:-1;2137:52:33;;-1:-1:-1;2306:11:33;;;;2285:33;;-1:-1:-1;;2285:33:33;;2270:12;;2285:33;;-1:-1:-1;;;;;2349:15:33;;;;;:24;;;;;;;;;;;;;;:15;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2349:24:33;:31;2527:11;;;;-1:-1:-1;2349:31:33;-1:-1:-1;2527:11:33;2669:170;;2828:11;2817:6;2811:13;;2798:10;:26;2797:42;2669:170;;;2767:11;2728:34;2755:6;2728:26;:34::i;:::-;2719:6;:43;2713:50;;2700:10;:63;2699:79;2669:170;2662:177;;2114:1567;;;;;;;2968:13;2983:12;2999:24;3008:10;3021:1;3008:14;2999:8;:24::i;:::-;2967:56;;;;3095:12;3128:1;3118:6;3113:11;;:1;:11;;3112:17;3110:20;3095:35;;3144:14;3188:4;3161;-1:-1:-1;;;;;3161:15:33;;3177:7;3161:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3161:24:33;:31;3331:11;;;;-1:-1:-1;3161:31:33;-1:-1:-1;3331:11:33;3473:197;;3659:11;3648:6;3630:15;:24;3624:31;;3607:10;3620:1;3607:14;:48;3606:64;3473:197;;;3576:11;3565:6;3527:35;3555:6;3527:27;:35::i;:::-;:44;3521:51;;3504:10;3517:1;3504:14;:68;3503:84;3473:197;3466:204;;2114:1567;;;;;1696:1991;;;;;;;;;:::o;492:165:18:-;613:9;;;627;;624:16;;609:32;;590:61::o;3597:1153:15:-;3770:7;3947:3;3943:801;;;3966:16;-1:-1:-1;;;;;4023:27:15;;;:180;;4151:52;4167:6;-1:-1:-1;;;4193:9:15;-1:-1:-1;;;;;4151:52:15;:15;:52::i;:::-;4023:180;;;-1:-1:-1;;;;;4077:47:15;;309:2:10;4078:33:15;;;4077:47;;;;;;4023:180;3966:255;-1:-1:-1;4243:43:15;:31;-1:-1:-1;;;;;4243:17:15;;3966:255;4243:21;:31::i;:::-;:41;:43::i;:::-;4236:50;;;;;3943:801;4317:16;-1:-1:-1;;;;;4374:27:15;;;:213;;4525:62;4551:6;-1:-1:-1;;;4577:9:15;-1:-1:-1;;;;;4525:62:15;:25;:62::i;:::-;4374:213;;;4428:70;309:2:10;4453:33:15;;;-1:-1:-1;;;;;4428:70:15;;:24;:70::i;:::-;4317:288;;4639:8;4628;-1:-1:-1;;;;;4628:19:15;;4620:28;;;;;;-1:-1:-1;;;;;4713:19:15;;;;-1:-1:-1;4698:35:15;;1405:1366;1576:7;1711:11;1707:32;;-1:-1:-1;1731:8:15;1724:15;;1707:32;-1:-1:-1;;;;;;;309:2:10;1770:45:15;;;;1826:939;;;;-1:-1:-1;;;;;1882:50:15;;1893:17;;;;1914:6;1893:17;1914:6;1882:38;;;;;:50;1878:323;;;1974:20;;;2016:25;;;2012:174;;2125:60;2151:10;2163:8;-1:-1:-1;;;;;2125:60:15;2173:11;2125:25;:60::i;:::-;2110:76;;;;;;;2012:174;1878:323;;2230:73;2255:10;2267:35;2295:6;2281:8;-1:-1:-1;;;;;2268:21:15;:10;:21;;;;;;;2267:27;:35::i;:::-;2230:24;:73::i;:::-;2215:89;;;;;;1826:939;-1:-1:-1;;;;;2530:50:15;;2541:17;;;;2562:6;2541:17;2562:6;2530:38;;;;;:50;:74;;;;;2597:7;2584:10;:20;2530:74;2522:83;;;;;;2641:20;;;2682:72;:60;2641:10;-1:-1:-1;;;;;2682:60:15;;2641:20;2682:25;:60::i;775:160:33:-;882:9;;890:1;882:9;;;;924:3;917:10;;;;775:160::o;671:731:8:-;733:7;764:1;760;:5;752:14;;;;;;-1:-1:-1;;;781:1:8;:40;777:102;;843:3;837:9;;;;860:8;777:102;897:19;892:1;:24;888:84;;938:2;932:8;;;;954:7;888:84;990:11;985:1;:16;981:76;;1023:2;1017:8;;;;1039:7;981:76;1075:7;1070:1;:12;1066:72;;1104:2;1098:8;;;;1120:7;1066:72;1156:5;1151:1;:10;1147:68;;1183:1;1177:7;;;;1198:6;1147:68;1233:4;1228:1;:9;1224:67;;1259:1;1253:7;;;;1274:6;1224:67;1309:3;1304:1;:8;1300:66;;1334:1;1328:7;;;;1349:6;1300:66;1384:3;1379:1;:8;1375:20;;1394:1;1389:6;671:731;;;:::o;1893:894::-;1956:7;1987:1;1983;:5;1975:14;;;;;;-1:-1:-1;2004:3:8;-1:-1:-1;;;;;2021:21:8;;:25;2017:104;;-1:-1:-1;;2062:8:8;2017:104;;;2107:3;2101:9;;;;;2017:104;2138:16;2134:20;;:24;2130:101;;-1:-1:-1;;2174:7:8;2130:101;;;2218:2;2212:8;;;;;2130:101;2248:16;2244:20;;:24;2240:101;;-1:-1:-1;;2284:7:8;2240:101;;;2328:2;2322:8;;;;;2240:101;2358:16;2354:20;;:24;2350:101;;-1:-1:-1;;2394:7:8;2350:101;;;2438:2;2432:8;;;;;2350:101;2468:15;2464:19;;:23;2460:98;;-1:-1:-1;;2503:6:8;2460:98;;;2546:1;2540:7;;;;;2460:98;2575:3;2571:7;;:11;2567:86;;-1:-1:-1;;2598:6:8;2567:86;;;2641:1;2635:7;;;;;2567:86;2670:3;2666:7;;:11;2662:86;;-1:-1:-1;;2693:6:8;2662:86;;;2736:1;2730:7;;;;;2662:86;2765:3;2761:7;;:11;2757:23;;-1:-1:-1;;2774:6:8;1893:894;;;:::o;435:111:13:-;527:5;;;522:16;;;;514:25;;;;;357:111:14;459:1;-1:-1:-1;;;;;439:21:14;;;;431:30;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:993:34:-;;139:4;127:9;122:3;118:19;114:30;111:2;;;161:5;154;147:20;111:2;198;192:9;240:4;232:6;228:17;311:6;299:10;296:22;275:18;263:10;260:34;257:62;254:2;;;322:9;254:2;349;342:22;382:6;-1:-1:-1;382:6:34;412:23;;444:35;412:23;444:35;:::i;:::-;488:23;;563:2;548:18;;535:32;576:35;535:32;576:35;:::i;:::-;639:2;627:15;;620:32;713:2;698:18;;;685:32;668:15;;;661:57;770:2;755:18;;742:32;783:34;742:32;783:34;:::i;:::-;845:2;833:15;;826:32;910:3;895:19;;882:33;924:35;882:33;924:35;:::i;:::-;987:3;975:16;;;;968:33;101:906;;-1:-1:-1;;101:906:34:o;1012:263::-;;1135:2;1123:9;1114:7;1110:23;1106:32;1103:2;;;1156:6;1148;1141:22;1103:2;1193:9;1187:16;1212:33;1239:5;1212:33;:::i;1280:614::-;;;;;1443:3;1431:9;1422:7;1418:23;1414:33;1411:2;;;1465:6;1457;1450:22;1411:2;1509:9;1496:23;1528:33;1555:5;1528:33;:::i;:::-;1580:5;-1:-1:-1;1637:2:34;1622:18;;1609:32;1650:35;1609:32;1650:35;:::i;:::-;1704:7;-1:-1:-1;1763:2:34;1748:18;;1735:32;1776:35;1735:32;1776:35;:::i;:::-;1401:493;;;;-1:-1:-1;1830:7:34;;1884:2;1869:18;1856:32;;-1:-1:-1;;1401:493:34:o;1899:649::-;;;;;2058:3;2046:9;2037:7;2033:23;2029:33;2026:2;;;2080:6;2072;2065:22;2026:2;2124:9;2111:23;2143:33;2170:5;2143:33;:::i;:::-;2195:5;-1:-1:-1;2252:2:34;2237:18;;2224:32;2294:15;;2287:23;2275:36;;2265:2;;2330:6;2322;2315:22;2265:2;2358:7;-1:-1:-1;2412:2:34;2397:18;;2384:32;;-1:-1:-1;2468:2:34;2453:18;;2440:32;2481:35;2440:32;2481:35;:::i;:::-;2016:532;;;;-1:-1:-1;2016:532:34;;-1:-1:-1;;2016:532:34:o;2553:868::-;;;2691:2;2679:9;2670:7;2666:23;2662:32;2659:2;;;2712:6;2704;2697:22;2659:2;2757:9;2744:23;2786:18;2827:2;2819:6;2816:14;2813:2;;;2848:6;2840;2833:22;2813:2;2891:6;2880:9;2876:22;2866:32;;2936:7;2929:4;2925:2;2921:13;2917:27;2907:2;;2963:6;2955;2948:22;2907:2;3004;2991:16;3026:4;3049:2;3045;3042:10;3039:2;;;3055:9;3039:2;3088:52;3130:2;3111:13;;-1:-1:-1;;3107:27:34;3103:36;;3088:52;:::i;:::-;3075:65;;3163:2;3156:5;3149:17;3203:7;3198:2;3193;3189;3185:11;3181:20;3178:33;3175:2;;;3229:6;3221;3214:22;3175:2;3289;3284;3280;3276:11;3271:2;3264:5;3260:14;3247:45;3312:14;;;3308:23;;3301:39;;;;3316:5;3396:18;;;;3383:32;;-1:-1:-1;;;2649:772:34:o;3426:281::-;;3583:3;3571:9;3562:7;3558:23;3554:33;3551:2;;;3605:6;3597;3590:22;3551:2;3633:68;3693:7;3682:9;3633:68;:::i;3999:261::-;;4121:2;4109:9;4100:7;4096:23;4092:32;4089:2;;;4142:6;4134;4127:22;4089:2;4179:9;4173:16;4198:32;4224:5;4198:32;:::i;4265:244::-;4435:25;;;4491:2;4476:18;;4469:34;4423:2;4408:18;;4390:119::o;4514:177::-;4660:25;;;4648:2;4633:18;;4615:76::o;4696:242::-;4766:2;4760:9;4796:17;;;4843:18;4828:34;;4864:22;;;4825:62;4822:2;;;4890:9;4822:2;4917;4910:22;4740:198;;-1:-1:-1;4740:198:34:o;4943:133::-;-1:-1:-1;;;;;5020:31:34;;5010:42;;5000:2;;5066:1;5063;5056:12;5000:2;4990:86;:::o;5081:121::-;5168:8;5161:5;5157:20;5150:5;5147:31;5137:2;;5192:1;5189;5182:12"},"gasEstimates":{"creation":{"codeDepositCost":"2071200","executionCost":"infinite","totalCost":"infinite"},"external":{"getAmountIn(address,address,address,uint256)":"infinite","getAmountOut(address,address,address,uint256)":"infinite","quote(address,bool,int256,uint160)":"infinite","quoteExactInput(bytes,uint256)":"infinite","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"infinite","quoteExactOutput(bytes,uint256)":"infinite","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"infinite"},"internal":{"getPool(address,address,uint24)":"infinite"}},"methodIdentifiers":{"getAmountIn(address,address,address,uint256)":"ec278309","getAmountOut(address,address,address,uint256)":"d7176ca9","quote(address,bool,int256,uint160)":"90405d36","quoteExactInput(bytes,uint256)":"cdca1753","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"c6a5026a","quoteExactOutput(bytes,uint256)":"2f80bb1d","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"bd21704a"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token that would be received\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountIn\":\"The amount of the first token to swap\"}},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountIn\":\"The amount of `tokenIn` that would be needed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in needed for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount in needed for a given exact output but for a swap of a single pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3StaticQuoter.sol\":\"UniswapV3StaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '../interfaces/IPeripheryImmutableState.sol';\\n\\n/// @title Immutable state\\n/// @notice Immutable state used by periphery contracts\\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override factory;\\n    /// @inheritdoc IPeripheryImmutableState\\n    address public immutable override WETH9;\\n\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n}\\n\",\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV3QuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"./base/UniV3likeQuoterCore.sol\\\";\\nimport \\\"./libraries/TickBitmap.sol\\\";\\n\\ncontract UniV3QuoterCore is UniV3likeQuoterCore {\\n    function _tryGetPoolCurrentFee(\\n        address pool\\n    ) internal view returns (uint16) {\\n        try IUniswapV3likePool(pool).currentFee() returns (uint24 result) {\\n            return uint16(result);\\n        } catch {\\n            return uint16(IUniswapV3likePool(pool).fee());\\n        }\\n    }\\n\\n    function getPoolGlobalState(\\n        address pool\\n    ) internal view override returns (GlobalState memory gs) {\\n        gs.fee = _tryGetPoolCurrentFee(pool);\\n        (gs.startPrice, gs.startTick, , , , , ) = IUniswapV3likePool(pool)\\n            .slot0();\\n    }\\n\\n    function getTickSpacing(\\n        address pool\\n    ) internal view override returns (int24) {\\n        return IUniswapV3likePool(pool).tickSpacing();\\n    }\\n\\n    function getLiquidity(\\n        address pool\\n    ) internal view override returns (uint128) {\\n        return IUniswapV3likePool(pool).liquidity();\\n    }\\n\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view override returns (int24 next, bool initialized) {\\n        return\\n            TickBitmap.nextInitializedTickWithinOneWord(\\n                poolAddress,\\n                tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n    }\\n\\n    function getTicks(\\n        address pool,\\n        int24 tick\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        )\\n    {\\n        return IUniswapV3likePool(pool).ticks(tick);\\n    }\\n}\\n\",\"keccak256\":\"0x558a10ddfe6bb718eadf82efceac70e8d4572196f89f1335aa32c9ba4da2afb0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/Path.sol\\\";\\n\\nimport \\\"./libraries/CustomizedPoolAddress.sol\\\";\\nimport \\\"./interfaces/IUniswapV3StaticQuoter.sol\\\";\\nimport \\\"./UniV3QuoterCore.sol\\\";\\n\\ncontract UniswapV3StaticQuoter is IUniswapV3StaticQuoter, UniV3QuoterCore {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Path for bytes;\\n\\n    address immutable factory;\\n    bytes32 immutable initCodeHash;\\n\\n    constructor(address _factory, bytes32 _initCodeHash) {\\n        factory = _factory;\\n        initCodeHash = _initCodeHash;\\n    }\\n\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) private view returns (IUniswapV3likePool) {\\n        return\\n            IUniswapV3likePool(\\n                CustomizedPoolAddress.computeAddress(\\n                    factory,\\n                    initCodeHash,\\n                    CustomizedPoolAddress.getPoolKey(tokenA, tokenB, fee)\\n                )\\n            );\\n    }\\n\\n    function quoteExactInputSingle(\\n        QuoteExactInputSingleParams memory params\\n    ) public view override returns (uint256 amountOut) {\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        IUniswapV3likePool pool = getPool(\\n            params.tokenIn,\\n            params.tokenOut,\\n            params.fee\\n        );\\n\\n        (int256 amount0, int256 amount1) = quote(\\n            address(pool),\\n            zeroForOne,\\n            params.amountIn.toInt256(),\\n            params.sqrtPriceLimitX96 == 0\\n                ? (\\n                    zeroForOne\\n                        ? TickMath.MIN_SQRT_RATIO + 1\\n                        : TickMath.MAX_SQRT_RATIO - 1\\n                )\\n                : params.sqrtPriceLimitX96\\n        );\\n\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) public view override returns (uint256 amountOut) {\\n        while (true) {\\n            (address tokenIn, address tokenOut, uint24 fee) = path\\n                .decodeFirstPool();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            amountIn = quoteExactInputSingle(\\n                QuoteExactInputSingleParams({\\n                    tokenIn: tokenIn,\\n                    tokenOut: tokenOut,\\n                    fee: fee,\\n                    amountIn: amountIn,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return amountIn;\\n            }\\n        }\\n    }\\n\\n    function quoteExactOutputSingle(\\n        QuoteExactOutputSingleParams memory params\\n    ) public view override returns (uint256 amountIn) {\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        IUniswapV3likePool pool = getPool(\\n            params.tokenIn,\\n            params.tokenOut,\\n            params.fee\\n        );\\n\\n        (int256 amount0, int256 amount1) = quote(\\n            address(pool),\\n            zeroForOne,\\n            -params.amount.toInt256(),\\n            params.sqrtPriceLimitX96 == 0\\n                ? (\\n                    zeroForOne\\n                        ? TickMath.MIN_SQRT_RATIO + 1\\n                        : TickMath.MAX_SQRT_RATIO - 1\\n                )\\n                : params.sqrtPriceLimitX96\\n        );\\n\\n        return zeroForOne ? uint256(amount0) : uint256(amount1);\\n    }\\n\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) public view override returns (uint256 amountIn) {\\n        while (true) {\\n            (address tokenOut, address tokenIn, uint24 fee) = path\\n                .decodeFirstPool();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            amountOut = quoteExactOutputSingle(\\n                QuoteExactOutputSingleParams({\\n                    tokenIn: tokenIn,\\n                    tokenOut: tokenOut,\\n                    fee: fee,\\n                    amount: amountOut,\\n                    sqrtPriceLimitX96: 0\\n                })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return amountOut;\\n            }\\n        }\\n    }\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountIn\\n    ) public view returns (uint256 amountOut) {\\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\\n        (address token0, address token1) = tokenIn > tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\\n            return 0;\\n        }\\n\\n        amountOut = quoteExactInputSingle(\\n            QuoteExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                amountIn: amountIn,\\n                fee: v3pool.fee(),\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n    }\\n\\n    function getAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 amountOut\\n    ) public view returns (uint256 amountIn) {\\n        IUniswapV3likePool v3pool = IUniswapV3likePool(pool);\\n        (address token0, address token1) = tokenIn > tokenOut\\n            ? (tokenIn, tokenOut)\\n            : (tokenOut, tokenIn);\\n\\n        // wrong pool\\n        if (v3pool.token0() != token0 || v3pool.token1() != token1) {\\n            return 0;\\n        }\\n\\n        amountIn = quoteExactOutputSingle(\\n            QuoteExactOutputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                amount: amountOut,\\n                fee: v3pool.fee(),\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x60e5b9082bfdb2f0401299af6238509ced48e08f192873d71bd73e74c0dd795c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface IUniswapV3StaticQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        QuoteExactInputSingleParams memory params\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in needed for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountOut The amount of the last token that would be received\\n    /// @return amountIn The amount of the first token to swap\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in needed for a given exact output but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount of `tokenIn` that would be needed\\n    function quoteExactOutputSingle(\\n        QuoteExactOutputSingleParams memory params\\n    ) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x230bd4e6249f5a0da0a4996a5d31210af13265c5a158d0885b96a0afa7022e31\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3likePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IUniswapV3likePool is IUniswapV3Pool {\\n    // Ramses Exchange use this one instead of fee()\\n    function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x838f4eea881ae8762a698047a8e04191e1388272ef7c477e870c39e5e59d72e7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CustomizedPoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary CustomizedPoolAddress {\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(\\n        address factory,\\n        bytes32 initCodeHash,\\n        PoolKey memory key\\n    ) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(\\n                                abi.encode(key.token0, key.token1, key.fee)\\n                            ),\\n                            initCodeHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7eb6b199058ed16174f469ccfe5feb580c59ab79486dfe17d510e15acf06a1c8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\nimport '../interfaces/IUniswapV3likePool.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3likePool pool = IUniswapV3likePool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x3eabb9b7e185e901ac1d43bf8225533620cb18ce89fdeecba73b35bebdf15db8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"quoteExactInput(bytes,uint256)":{"notice":"Returns the amount out received for a given exact input swap without executing the swap"},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount out received for a given exact input but for a swap of a single pool"},"quoteExactOutput(bytes,uint256)":{"notice":"Returns the amount in needed for a given exact output swap without executing the swap"},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount in needed for a given exact output but for a swap of a single pool"}},"version":1}}},"contracts/base/UniV3likeQuoterCore.sol":{"UniV3likeQuoterCore":{"abi":[{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/UniV3likeQuoterCore.sol\":\"UniV3likeQuoterCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LiquidityMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/SwapMath.sol';\\nimport '../interfaces/IUniV3likeQuoterCore.sol';\\n\\n\\nabstract contract UniV3likeQuoterCore {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public virtual view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n        bool exactInput = amountSpecified > 0;\\n        (int24 tickSpacing, uint16 fee, SwapState memory state) = getInitState(\\n            poolAddress,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96\\n        );\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized, step.sqrtPriceNextX96) = nextInitializedTickAndPrice(\\n                poolAddress,\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                getSqrtRatioTargetX96(zeroForOne, step.sqrtPriceNextX96, sqrtPriceLimitX96),\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    (,int128 liquidityNet,,,,,,) = getTicks(poolAddress, step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne)\\n                        liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function getInitState(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal view returns (int24 ts, uint16 fee, SwapState memory state) {\\n        GlobalState memory gs = getPoolGlobalState(poolAddress);\\n        checkSqrtPriceLimitWithinAllowed(zeroForOne, sqrtPriceLimitX96, gs.startPrice);\\n        ts = getTickSpacing(poolAddress);\\n        fee = gs.fee;\\n        state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            liquidity: getLiquidity(poolAddress),\\n            sqrtPriceX96: gs.startPrice,\\n            amountCalculated: 0,\\n            tick: gs.startTick\\n        });\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool zeroForOne,\\n        uint160 sqrtPriceLimit, \\n        uint160 startPrice\\n    ) internal pure {\\n        bool withinAllowed = zeroForOne\\n            ? sqrtPriceLimit < startPrice && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO\\n            : sqrtPriceLimit > startPrice && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function nextInitializedTickAndPrice(\\n        address pool, \\n        int24 tick, \\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal view returns (int24 tickNext, bool initialized, uint160 sqrtPriceNextX96) {\\n        (tickNext, initialized) = nextInitializedTickWithinOneWord(pool, tick, tickSpacing, zeroForOne);\\n        // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n        if (tickNext < TickMath.MIN_TICK)\\n            tickNext = TickMath.MIN_TICK;\\n        else if (tickNext > TickMath.MAX_TICK)\\n            tickNext = TickMath.MAX_TICK;\\n        // get the price for the next tick\\n        sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n    }\\n\\n    function getSqrtRatioTargetX96(\\n        bool zeroForOne,\\n        uint160 sqrtPriceNextX96,\\n        uint160 sqrtPriceLimitX96\\n    ) internal pure returns (uint160) {\\n        return (zeroForOne ? sqrtPriceNextX96<sqrtPriceLimitX96 : sqrtPriceNextX96>sqrtPriceLimitX96)\\n            ? sqrtPriceLimitX96\\n            : sqrtPriceNextX96;\\n    }\\n\\n    function getPoolGlobalState(address pool) internal virtual view returns (GlobalState memory);\\n    \\n    function getLiquidity(address pool) internal virtual view returns (uint128);\\n\\n    function getTickSpacing(address pool) internal virtual view returns (int24);\\n    \\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool zeroForOne\\n    ) internal virtual view returns (int24 next, bool initialized);\\n    \\n    function getTicks(address pool, int24 tick) internal virtual view returns (\\n        uint128 liquidityTotal,\\n        int128 liquidityDelta,\\n        uint256 outerFeeGrowth0Token,\\n        uint256 outerFeeGrowth1Token,\\n        int56 outerTickCumulative,\\n        uint160 outerSecondsPerLiquidity,\\n        uint32 outerSecondsSpent,\\n        bool initialized\\n    );\\n\\n}\",\"keccak256\":\"0xf9ff6451d85e98c9927fc0d7dd852fd3b961173852bf112beb74d2c489319789\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IUniV3likeQuoterCore.sol":{"IUniV3likeQuoterCore":{"abi":[{"inputs":[{"internalType":"address","name":"poolAddress","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"quote","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quote(address,bool,int256,uint160)":"90405d36"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniV3likeQuoterCore.sol\":\"IUniV3likeQuoterCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IUniswapV3StaticQuoter.sol":{"IUniswapV3StaticQuoter":{"abi":[{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"quoteExactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"quoteExactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"quoteExactInput(bytes,uint256)":{"params":{"amountIn":"The amount of the first token to swap","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountOut":"The amount of the last token that would be received"}},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountOut":"The amount of `tokenOut` that would be received"}},"quoteExactOutput(bytes,uint256)":{"params":{"amountOut":"The amount of the last token that would be received","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountIn":"The amount of the first token to swap"}},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountIn":"The amount of `tokenIn` that would be needed"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quoteExactInput(bytes,uint256)":"cdca1753","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"c6a5026a","quoteExactOutput(bytes,uint256)":"2f80bb1d","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"bd21704a"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token that would be received\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountIn\":\"The amount of the first token to swap\"}},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountIn\":\"The amount of `tokenIn` that would be needed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in needed for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount in needed for a given exact output but for a swap of a single pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniswapV3StaticQuoter.sol\":\"IUniswapV3StaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IUniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface IUniswapV3StaticQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        QuoteExactInputSingleParams memory params\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in needed for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountOut The amount of the last token that would be received\\n    /// @return amountIn The amount of the first token to swap\\n    function quoteExactOutput(\\n        bytes memory path,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in needed for a given exact output but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount of `tokenIn` that would be needed\\n    function quoteExactOutputSingle(\\n        QuoteExactOutputSingleParams memory params\\n    ) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x230bd4e6249f5a0da0a4996a5d31210af13265c5a158d0885b96a0afa7022e31\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"quoteExactInput(bytes,uint256)":{"notice":"Returns the amount out received for a given exact input swap without executing the swap"},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount out received for a given exact input but for a swap of a single pool"},"quoteExactOutput(bytes,uint256)":{"notice":"Returns the amount in needed for a given exact output swap without executing the swap"},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount in needed for a given exact output but for a swap of a single pool"}},"version":1}}},"contracts/interfaces/IUniswapV3likePool.sol":{"IUniswapV3likePool":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentFee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","collectProtocol(address,uint128,uint128)":"85b66729","currentFee()":"da3c300d","factory()":"c45a0155","fee()":"ddca3f43","feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","liquidity()":"1a686502","maxLiquidityPerTick()":"70cf754a","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","observations(uint256)":"252c09d7","observe(uint32[])":"883bdbfd","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","setFeeProtocol(uint8,uint8)":"8206a4d1","slot0()":"3850c7bd","snapshotCumulativesInside(int24,int24)":"a38807f2","swap(address,bool,int256,uint160,bytes)":"128acb08","tickBitmap(int16)":"5339c296","tickSpacing()":"d0c93a7c","ticks(int24)":"f30dba93","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniswapV3likePool.sol\":\"IUniswapV3likePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3likePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IUniswapV3likePool is IUniswapV3Pool {\\n    // Ramses Exchange use this one instead of fee()\\n    function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x838f4eea881ae8762a698047a8e04191e1388272ef7c477e870c39e5e59d72e7\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"tickSpacing()":{"notice":"The pool tick spacing"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"version":1}}},"contracts/libraries/CustomizedPoolAddress.sol":{"CustomizedPoolAddress":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Provides functions for deriving a pool address from the factory, tokens, and the fee","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220340701ec7607fca61b990dad5ceb79285224864a1edb641b48629df93eaeacad64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE SMOD ADD 0xEC PUSH23 0x7FCA61B990DAD5CEB79285224864A1EDB641B48629DF9 RETURNDATACOPY 0xAE 0xAC 0xAD PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"167:1723:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220340701ec7607fca61b990dad5ceb79285224864a1edb641b48629df93eaeacad64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE SMOD ADD 0xEC PUSH23 0x7FCA61B990DAD5CEB79285224864A1EDB641B48629DF9 RETURNDATACOPY 0xAE 0xAC 0xAD PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ","sourceMap":"167:1723:32:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"computeAddress(address,bytes32,struct CustomizedPoolAddress.PoolKey memory)":"infinite","getPoolKey(address,address,uint24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/CustomizedPoolAddress.sol\":\"CustomizedPoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/CustomizedPoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary CustomizedPoolAddress {\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(\\n        address factory,\\n        bytes32 initCodeHash,\\n        PoolKey memory key\\n    ) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(\\n                                abi.encode(key.token0, key.token1, key.fee)\\n                            ),\\n                            initCodeHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7eb6b199058ed16174f469ccfe5feb580c59ab79486dfe17d510e15acf06a1c8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/libraries/TickBitmap.sol":{"TickBitmap":{"abi":[],"devdoc":{"details":"The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.","kind":"dev","methods":{},"title":"Packed tick initialized state library","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ca5f392430372003d73f58f94016ced6893653aa3185e65df4d057523d469ff64736f6c63430007060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0xA5F392430372003D73F58F94016CED6893653AA3185E65DF4D057523D4 PUSH10 0xFF64736F6C6343000706 STOP CALLER ","sourceMap":"420:3269:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ca5f392430372003d73f58f94016ced6893653aa3185e65df4d057523d469ff64736f6c63430007060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0xA5F392430372003D73F58F94016CED6893653AA3185E65DF4D057523D4 PUSH10 0xFF64736F6C6343000706 STOP CALLER ","sourceMap":"420:3269:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"nextInitializedTickWithinOneWord(address,int24,int24,bool)":"infinite","position(int24)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Packed tick initialized state library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Stores a packed mapping of tick index to its initialized state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TickBitmap.sol\":\"TickBitmap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3likePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IUniswapV3likePool is IUniswapV3Pool {\\n    // Ramses Exchange use this one instead of fee()\\n    function currentFee() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x838f4eea881ae8762a698047a8e04191e1388272ef7c477e870c39e5e59d72e7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/BitMath.sol';\\nimport '../interfaces/IUniswapV3likePool.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param poolAddress Pool containing the mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        address poolAddress,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        IUniswapV3likePool pool = IUniswapV3likePool(poolAddress);\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = pool.tickBitmap(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\",\"keccak256\":\"0x3eabb9b7e185e901ac1d43bf8225533620cb18ce89fdeecba73b35bebdf15db8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Stores a packed mapping of tick index to its initialized state","version":1}}}}}}